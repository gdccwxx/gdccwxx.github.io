{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/IEEE754_chart.jpg","path":"img/IEEE754_chart.jpg","modified":1,"renderable":0},{"_id":"source/img/alipay.jpeg","path":"img/alipay.jpeg","modified":1,"renderable":0},{"_id":"source/img/choiceTwoWay.jpg","path":"img/choiceTwoWay.jpg","modified":1,"renderable":0},{"_id":"source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":0},{"_id":"source/img/dhcp_config2.gif","path":"img/dhcp_config2.gif","modified":1,"renderable":0},{"_id":"source/img/dhcp_config1.gif","path":"img/dhcp_config1.gif","modified":1,"renderable":0},{"_id":"source/img/dhcp_client.png","path":"img/dhcp_client.png","modified":1,"renderable":0},{"_id":"source/img/dhcp_config3.gif","path":"img/dhcp_config3.gif","modified":1,"renderable":0},{"_id":"source/img/elfImage.jpg","path":"img/elfImage.jpg","modified":1,"renderable":0},{"_id":"source/img/eflagRegister.png","path":"img/eflagRegister.png","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/flagRegister.gif","path":"img/flagRegister.gif","modified":1,"renderable":0},{"_id":"source/img/findWay.png","path":"img/findWay.png","modified":1,"renderable":0},{"_id":"source/img/ieee754image.png","path":"img/ieee754image.png","modified":1,"renderable":0},{"_id":"source/img/heapObject.png","path":"img/heapObject.png","modified":1,"renderable":0},{"_id":"source/img/prototypeImg.png","path":"img/prototypeImg.png","modified":1,"renderable":0},{"_id":"source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":0},{"_id":"source/img/purposeRegisters.jpg","path":"img/purposeRegisters.jpg","modified":1,"renderable":0},{"_id":"source/img/image.jpg","path":"img/image.jpg","modified":1,"renderable":0},{"_id":"source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":0},{"_id":"source/img/simpleBus.jpg","path":"img/simpleBus.jpg","modified":1,"renderable":0},{"_id":"source/img/stackValue.png","path":"img/stackValue.png","modified":1,"renderable":0},{"_id":"source/img/sliceRegister.jpg","path":"img/sliceRegister.jpg","modified":1,"renderable":0},{"_id":"source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"source/img/computer_internet.png","path":"img/computer_internet.png","modified":1,"renderable":0},{"_id":"source/img/stackBP.jpg","path":"img/stackBP.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/img/eleTalking.jpg","path":"img/eleTalking.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"9bab66890c7ca580d305c60df1a0414bbe28e7cf","modified":1525078650858},{"_id":"source/CNAME","hash":"7ba9f834082d77e4963aa10f1608eca1f11bad2f","modified":1525007930465},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1525054568372},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1525054568372},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1525054568372},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1525054568373},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1525054568373},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1525054568373},{"_id":"themes/yilia/_config.yml","hash":"a80d4ca238ac62d173a9dc90f899e6169b8383cc","modified":1525228198541},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1525054568390},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1525054568424},{"_id":"source/_posts/basic-computer-sience-chapter2.md","hash":"1c2c98ba7342b091accc2a993c1d93780f461271","modified":1525146770582},{"_id":"source/_posts/2017-summery.md","hash":"73267d34e93ee1aba81f622f190c513ff38ce1b7","modified":1525182777000},{"_id":"source/_posts/2017-ele-Interecommunions.md","hash":"52782f8dba70c89c7a399bf01f90192257692558","modified":1525180234153},{"_id":"source/_posts/basic-computer-sience-chapter3.md","hash":"e17814569cb6979dc88cc4590af20f6ba122d7c6","modified":1525146755165},{"_id":"source/_posts/computer-network-chapter2.md","hash":"7866be137c61cc59b9c10004348e6cee50aa7b13","modified":1525183187571},{"_id":"source/_posts/basic-computer-sience-chapter5.md","hash":"e873ecdc7a9ce0da1d174e61a2d5160f1f6af3fc","modified":1525146775648},{"_id":"source/_posts/meet-ncuhomer.md","hash":"53958c21fb5dfec6b6d54663251f531003735bda","modified":1525179943189},{"_id":"source/_posts/basic-computer-sience-chapter4.md","hash":"c47328c9e388b22e2b6ca5d0869bb3c60b9d86c8","modified":1525146744511},{"_id":"source/_posts/read-javascript-again-chapter4.md","hash":"87382905db92ec5dcd17e3fe3735e244c649ef7b","modified":1525147223485},{"_id":"source/_posts/read-javascript-again-chapter5.md","hash":"fe3b0ad5dd16bd0b8074a9a57f7ce30aaacbeeb6","modified":1525149791884},{"_id":"source/_posts/read-javascript-again-chapter1-3.md","hash":"3427107d892c35684338066df3b90d2a9ded841b","modified":1525146916348},{"_id":"source/_posts/read-javascript-again-chapter6.md","hash":"a19d80c3816f8c56c383033254380b221034050f","modified":1525161665545},{"_id":"source/_posts/read-javascript-again-chapter7.md","hash":"bb59b34393698357724bbca70e1ee5257bbb1021","modified":1525161839314},{"_id":"source/_posts/summer-2017-feeling.md","hash":"b04da353af30a60c752e9b70e38128c2959318e6","modified":1525177177944},{"_id":"source/_posts/touch-http.md","hash":"317e6455151d044f303ad13ed7bb975e8d3827a3","modified":1525177074696},{"_id":"source/_posts/you-dont-konwn-javascript-scope.md","hash":"64d6c4545900b457cfac557da2bbff569b4f1d2d","modified":1525177706402},{"_id":"source/_posts/use-dhcp.md","hash":"1917ee10e129e2e47f17f14316d63b3b04b8a646","modified":1525179797000},{"_id":"source/_posts/you-dont-konwn-javascript-type.md","hash":"8eda5aa907c8c64ca713ded37b97352bf2c77159","modified":1525182519345},{"_id":"source/_posts/you-dont-konwn-javascript-this.md","hash":"72945bd9a312120e3a386f3762c46c1815d06dde","modified":1525179109732},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1525058123195},{"_id":"source/img/IEEE754_chart.jpg","hash":"c218b43c4490b92801e5ca739f7cb02e66c6f4ce","modified":1525078550625},{"_id":"source/img/alipay.jpeg","hash":"fcaad01681cf09ec4fb96277c88a446f5b4e8f21","modified":1525074535193},{"_id":"source/img/choiceTwoWay.jpg","hash":"890a866cb4f71a3e83784e67e0347ef478752295","modified":1525078550625},{"_id":"source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1525078550627},{"_id":"source/img/dhcp_config2.gif","hash":"8c3db4fe3459b4e1f7e3bbe5c9cbc3e08a24c2da","modified":1525078550629},{"_id":"source/img/dhcp_config1.gif","hash":"3b8ade014b01f5131bc09fc2422088823484f60b","modified":1525078550628},{"_id":"source/img/dhcp_client.png","hash":"5a79d475b2b3a3bac45a84b45ba922178e9c3929","modified":1525078550628},{"_id":"source/img/dhcp_config3.gif","hash":"084a199e6498f0746be2c8edc4c751dc139c4141","modified":1525078550630},{"_id":"source/img/elfImage.jpg","hash":"e595d126a2d62645c9b138ace14811cf6d5cc46e","modified":1525078550643},{"_id":"source/img/eflagRegister.png","hash":"981c67690563b74cbe301294c4b6af97863378c2","modified":1525078550631},{"_id":"source/img/favicon.ico","hash":"ca380ac3d91bf1046d25e44715c75fa0d665f781","modified":1525056897751},{"_id":"source/img/flagRegister.gif","hash":"426be67622ecca19a09dde83d93ac12859eef9d4","modified":1525078550645},{"_id":"source/img/findWay.png","hash":"a65a72ce8b48c0a74e224d917031c13d6bdcee9c","modified":1525078550644},{"_id":"source/img/ieee754image.png","hash":"a2bedb9531ae71ecb62babb3353024ca1a235965","modified":1525078550646},{"_id":"source/img/heapObject.png","hash":"238fe211fde65695e3529c4e4df9c88d70d4d418","modified":1525078550645},{"_id":"source/img/prototypeImg.png","hash":"1ccd755cbb315aa227fd614e12dd1df87fda8792","modified":1525078550646},{"_id":"source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1525078550646},{"_id":"source/img/purposeRegisters.jpg","hash":"66b1d88353bc734eeacce7d5379cab4e68cd1421","modified":1525078550647},{"_id":"source/img/image.jpg","hash":"7ebf6661c2fbd35ec6eef3a44ab5023a3d5d1d8d","modified":1525058133578},{"_id":"source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1525078550647},{"_id":"source/img/simpleBus.jpg","hash":"65f22ac2379300665a392b4dc7b0cdf67f168f39","modified":1525078550648},{"_id":"source/img/stackValue.png","hash":"ce26d0a2f82700ac40f7e98bdd1d02fcd2f7fe50","modified":1525078550650},{"_id":"source/img/sliceRegister.jpg","hash":"c7167c22b20aeb062b4070f05646a19e31a45ab1","modified":1525078550649},{"_id":"source/img/wechat.png","hash":"2fc1021ead13e0cb4cbe397e5040f3b535269bf5","modified":1525074541287},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1525054568375},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1525054568375},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1525054568374},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1525054568375},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1525054568376},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1525054568375},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1525054568376},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1525054568388},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1525054568388},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1525054568388},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1525054568389},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1525054568389},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1525054568389},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1525054568390},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"f301e907ef81f3375d9b3bd2d58f54b05d2c07d5","modified":1525076127578},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1525054568390},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1525054568423},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1525054568413},{"_id":"source/img/computer_internet.png","hash":"d82808911276192d14150335120ccc0c863ba6af","modified":1525078550627},{"_id":"source/img/stackBP.jpg","hash":"cfaba07e36becfdecfed7551239c50d720def397","modified":1525078550649},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525054568387},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1525054568422},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1525054568421},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1525054568376},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1525054568377},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1525054568377},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1525054568377},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1525054568378},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1525054568377},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1525054568378},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1525054568378},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"926c84608b2b5f1e1e0d516c793928aa4cefccd6","modified":1525228233021},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1525054568379},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1525054568379},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1525054568379},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1525054568380},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1525054568380},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1525054568387},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1525054568387},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1525054568414},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1525054568414},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1525054568415},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1525054568416},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1525054568417},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1525054568417},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1525054568416},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1525054568418},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1525054568418},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1525054568391},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1525054568391},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1525054568392},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1525054568392},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1525054568392},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1525054568393},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1525054568393},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1525054568393},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1525054568394},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1525054568397},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1525054568401},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1525054568401},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1525054568401},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1525054568402},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1525054568403},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1525054568404},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1525054568404},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1525054568404},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1525054568405},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1525054568405},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1525054568405},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1525054568406},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1525054568407},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1525054568406},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1525054568406},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1525054568407},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1525054568407},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1525054568409},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1525054568408},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1525054568410},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1525054568410},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1525054568409},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1525054568409},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1525054568411},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1525054568412},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1525054568410},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1525054568411},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1525054568411},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1525054568412},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1525054568386},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1525054568381},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1525054568383},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1525054568381},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1525054568381},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1525054568384},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1525054568384},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1525054568383},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1525054568382},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1525054568385},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1525054568385},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1525054568402},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1525054568403},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1525054568398},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1525054568403},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1525054568399},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1525054568400},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1525054568394},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1525054568395},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1525054568400},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1525054568396},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1525054568396},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1525054568395},{"_id":"source/img/eleTalking.jpg","hash":"e7862e16ae19d453558bc31c1ae66de9b5665c31","modified":1525078550642}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"2017总结","date":"2017-12-31T13:50:47.000Z","_content":"2017年，应该是我过的最艰苦的一年了。\n2017年，也是学东西学的最多的一年。\n2017年，也是身材变化最大的一年了。\n\n病痛时间线\n回顾2017年一整年。\n\n2月底在家里穿鞋不小心扭伤腰\n3月底在学校健身做俄罗斯转体拉伤筋膜\n4月底实在忍受不了疼痛，回家修养了半个月\n6月初发现自己精索静脉曲张\n6月底去医院做了手术\n7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐\n11月底发现自己的腹股沟疼痛\n12月底腰上，腹股沟疼痛难忍，最终去针灸治疗\n想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。\n在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。\n加油！\n学习时间线\n回顾整个学习线\n年初，看过一边编译与反编译。\n大二下学期，在陈悦老师操作系统基础一课自认学的还不错。\n大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！\n大二暑期获得一个环保主题的小奖。\n大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。\n大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。\n大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。\n大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。\n大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。\n大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。\n大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。\n大三上，本来想用react 开发项目，只是写了demo就结束了\n回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。\n番外篇：\n2017年还学习了一些其他的东西\n开始学习了护肤。真心觉得可以遇见更好的自己。\n和老爹一起完成了自己家的花园。\n学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。\n去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。\n学了不少的穿搭，对颜色和穿搭有了一定的见解。\n开始喝牛奶。\n身材\n回顾身材的改变\n从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。\n到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。\n手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。\n暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。\n可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。\n可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。\n总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！\n2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！","source":"_posts/2017-summery.md","raw":"---\ntitle: 2017总结\ndate: 2017-12-31 21:50:47\ntags: 随笔\n---\n2017年，应该是我过的最艰苦的一年了。\n2017年，也是学东西学的最多的一年。\n2017年，也是身材变化最大的一年了。\n\n病痛时间线\n回顾2017年一整年。\n\n2月底在家里穿鞋不小心扭伤腰\n3月底在学校健身做俄罗斯转体拉伤筋膜\n4月底实在忍受不了疼痛，回家修养了半个月\n6月初发现自己精索静脉曲张\n6月底去医院做了手术\n7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐\n11月底发现自己的腹股沟疼痛\n12月底腰上，腹股沟疼痛难忍，最终去针灸治疗\n想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。\n在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。\n加油！\n学习时间线\n回顾整个学习线\n年初，看过一边编译与反编译。\n大二下学期，在陈悦老师操作系统基础一课自认学的还不错。\n大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！\n大二暑期获得一个环保主题的小奖。\n大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。\n大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。\n大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。\n大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。\n大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。\n大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。\n大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。\n大三上，本来想用react 开发项目，只是写了demo就结束了\n回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。\n番外篇：\n2017年还学习了一些其他的东西\n开始学习了护肤。真心觉得可以遇见更好的自己。\n和老爹一起完成了自己家的花园。\n学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。\n去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。\n学了不少的穿搭，对颜色和穿搭有了一定的见解。\n开始喝牛奶。\n身材\n回顾身材的改变\n从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。\n到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。\n手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。\n暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。\n可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。\n可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。\n总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！\n2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！","slug":"2017-summery","published":1,"updated":"2018-05-01T13:52:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6qv0000aefa977wjlhy","content":"<p>2017年，应该是我过的最艰苦的一年了。<br>2017年，也是学东西学的最多的一年。<br>2017年，也是身材变化最大的一年了。</p>\n<p>病痛时间线<br>回顾2017年一整年。</p>\n<p>2月底在家里穿鞋不小心扭伤腰<br>3月底在学校健身做俄罗斯转体拉伤筋膜<br>4月底实在忍受不了疼痛，回家修养了半个月<br>6月初发现自己精索静脉曲张<br>6月底去医院做了手术<br>7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐<br>11月底发现自己的腹股沟疼痛<br>12月底腰上，腹股沟疼痛难忍，最终去针灸治疗<br>想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。<br>在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。<br>加油！<br>学习时间线<br>回顾整个学习线<br>年初，看过一边编译与反编译。<br>大二下学期，在陈悦老师操作系统基础一课自认学的还不错。<br>大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！<br>大二暑期获得一个环保主题的小奖。<br>大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。<br>大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。<br>大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。<br>大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。<br>大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。<br>大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。<br>大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。<br>大三上，本来想用react 开发项目，只是写了demo就结束了<br>回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。<br>番外篇：<br>2017年还学习了一些其他的东西<br>开始学习了护肤。真心觉得可以遇见更好的自己。<br>和老爹一起完成了自己家的花园。<br>学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。<br>去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。<br>学了不少的穿搭，对颜色和穿搭有了一定的见解。<br>开始喝牛奶。<br>身材<br>回顾身材的改变<br>从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。<br>到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。<br>手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。<br>暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。<br>可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。<br>可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。<br>总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！<br>2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2017年，应该是我过的最艰苦的一年了。<br>2017年，也是学东西学的最多的一年。<br>2017年，也是身材变化最大的一年了。</p>\n<p>病痛时间线<br>回顾2017年一整年。</p>\n<p>2月底在家里穿鞋不小心扭伤腰<br>3月底在学校健身做俄罗斯转体拉伤筋膜<br>4月底实在忍受不了疼痛，回家修养了半个月<br>6月初发现自己精索静脉曲张<br>6月底去医院做了手术<br>7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐<br>11月底发现自己的腹股沟疼痛<br>12月底腰上，腹股沟疼痛难忍，最终去针灸治疗<br>想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。<br>在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。<br>加油！<br>学习时间线<br>回顾整个学习线<br>年初，看过一边编译与反编译。<br>大二下学期，在陈悦老师操作系统基础一课自认学的还不错。<br>大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！<br>大二暑期获得一个环保主题的小奖。<br>大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。<br>大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。<br>大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。<br>大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。<br>大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。<br>大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。<br>大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。<br>大三上，本来想用react 开发项目，只是写了demo就结束了<br>回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。<br>番外篇：<br>2017年还学习了一些其他的东西<br>开始学习了护肤。真心觉得可以遇见更好的自己。<br>和老爹一起完成了自己家的花园。<br>学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。<br>去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。<br>学了不少的穿搭，对颜色和穿搭有了一定的见解。<br>开始喝牛奶。<br>身材<br>回顾身材的改变<br>从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。<br>到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。<br>手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。<br>暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。<br>可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。<br>可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。<br>总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！<br>2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！</p>\n"},{"title":"计算机系统基础－－第二章(数据的机器级表示与处理)","date":"2017-05-22T13:20:53.000Z","_content":"### 数制转换\n即将不同的数值转换，例如：二、八、十六进制的相互转换\n```\n八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B\n十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B\ntips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制\n```\n其他进制转二进制，例如：十进制与二进制的相互转换\n```\n0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B\n而无明显进制位数比较\n```\n多进制转化为10进制，例如16进制转化为10进制\n```\n1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D\n可较为明确的转化\n```\n结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参[简易的进制转换器](https://github.com/gdccwxx/just-play/tree/master/hexConversion)\n### 定点编码表示\n##### 原码表示法\n也称“符号－数值”\n规则：\n１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0<=i<=n-2);\n２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0<=i<=n-2);\n即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B\n优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。\n缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。\n运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。\n##### 补码表示法\n也称“２－补码”\n规则：\n１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);\n２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);\n即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100\n[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100\n优点：１、减少了-0与+0的切换\n2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。\n3、两数的补码之和（差）=两数和（差）的补码。\n运用：在计算机中，补码用来表示带符号正数。\n##### 反码表示法\n规则：\n正数和原码相同，负数的补码采用“各位取反，末尾加1”\n即： [01100]反 = [10100]反\n缺点：1、0的表示不唯一。\n2、表数范围比补码少一个最小负数。\n3、运算时必须考虑循环进位。\n运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。\n##### 移码表示法\n规则：\n[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）\n运用：通常表示浮点数的阶（即指数）\n##### 浮点数的表示(IEEE754浮点数)\nIEEE754浮点数的表示：\n![chart of iee754](img/IEEE754_chart.jpg)\nsign: 符号位，0表示正数1表示负数\nexponent： 阶码，由偏置常数+偏移量组成\nfunction： 位数\n##### 为什么要有IEEE754标准？\n**答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准**\n##### 什么是IEEE754标准？\n**以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处\n1、尾数可表示的位数多一位，因而使得浮点数的精度更高。\n2、阶码的可表示范围更大，因而使浮点数表示范围更大**\n##### IEEE754解释：\n##### question:\n请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double\n```\n1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度\n2、 f == (float)(int)f    //不相等，小数位精度缺失\n3、 i == (int)(double)i   //相等\n4、 f == (float)(double)i //相等\n```\n### 整数的加减\n![choiceTwoWay](img/choiceTwoWay.jpg)\n零标志位为zf，溢出标志位位of；\n符号标志sf，进/借位标志cf\nzf=1时，表示结果为0；\nof=1时，表示带符号整数的加减法运算发生溢出；\ncf=Sub异或C\n\n\n#### 小结：\n这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。\n\n","source":"_posts/basic-computer-sience-chapter2.md","raw":"---\ntitle: 计算机系统基础－－第二章(数据的机器级表示与处理)\ndate: 2017-05-22 21:20:53\ntags: 计算机系统基础\n---\n### 数制转换\n即将不同的数值转换，例如：二、八、十六进制的相互转换\n```\n八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B\n十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B\ntips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制\n```\n其他进制转二进制，例如：十进制与二进制的相互转换\n```\n0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B\n而无明显进制位数比较\n```\n多进制转化为10进制，例如16进制转化为10进制\n```\n1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D\n可较为明确的转化\n```\n结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参[简易的进制转换器](https://github.com/gdccwxx/just-play/tree/master/hexConversion)\n### 定点编码表示\n##### 原码表示法\n也称“符号－数值”\n规则：\n１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0<=i<=n-2);\n２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0<=i<=n-2);\n即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B\n优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。\n缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。\n运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。\n##### 补码表示法\n也称“２－补码”\n规则：\n１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);\n２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);\n即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100\n[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100\n优点：１、减少了-0与+0的切换\n2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。\n3、两数的补码之和（差）=两数和（差）的补码。\n运用：在计算机中，补码用来表示带符号正数。\n##### 反码表示法\n规则：\n正数和原码相同，负数的补码采用“各位取反，末尾加1”\n即： [01100]反 = [10100]反\n缺点：1、0的表示不唯一。\n2、表数范围比补码少一个最小负数。\n3、运算时必须考虑循环进位。\n运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。\n##### 移码表示法\n规则：\n[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）\n运用：通常表示浮点数的阶（即指数）\n##### 浮点数的表示(IEEE754浮点数)\nIEEE754浮点数的表示：\n![chart of iee754](img/IEEE754_chart.jpg)\nsign: 符号位，0表示正数1表示负数\nexponent： 阶码，由偏置常数+偏移量组成\nfunction： 位数\n##### 为什么要有IEEE754标准？\n**答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准**\n##### 什么是IEEE754标准？\n**以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处\n1、尾数可表示的位数多一位，因而使得浮点数的精度更高。\n2、阶码的可表示范围更大，因而使浮点数表示范围更大**\n##### IEEE754解释：\n##### question:\n请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double\n```\n1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度\n2、 f == (float)(int)f    //不相等，小数位精度缺失\n3、 i == (int)(double)i   //相等\n4、 f == (float)(double)i //相等\n```\n### 整数的加减\n![choiceTwoWay](img/choiceTwoWay.jpg)\n零标志位为zf，溢出标志位位of；\n符号标志sf，进/借位标志cf\nzf=1时，表示结果为0；\nof=1时，表示带符号整数的加减法运算发生溢出；\ncf=Sub异或C\n\n\n#### 小结：\n这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。\n\n","slug":"basic-computer-sience-chapter2","published":1,"updated":"2018-05-01T03:52:50.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6qz0001aefa7rkalf3h","content":"<h3 id=\"数制转换\"><a href=\"#数制转换\" class=\"headerlink\" title=\"数制转换\"></a>数制转换</h3><p>即将不同的数值转换，例如：二、八、十六进制的相互转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B</span><br><span class=\"line\">十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B</span><br><span class=\"line\">tips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制</span><br></pre></td></tr></table></figure></p>\n<p>其他进制转二进制，例如：十进制与二进制的相互转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B</span><br><span class=\"line\">而无明显进制位数比较</span><br></pre></td></tr></table></figure></p>\n<p>多进制转化为10进制，例如16进制转化为10进制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D</span><br><span class=\"line\">可较为明确的转化</span><br></pre></td></tr></table></figure></p>\n<p>结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参<a href=\"https://github.com/gdccwxx/just-play/tree/master/hexConversion\" target=\"_blank\" rel=\"noopener\">简易的进制转换器</a></p>\n<h3 id=\"定点编码表示\"><a href=\"#定点编码表示\" class=\"headerlink\" title=\"定点编码表示\"></a>定点编码表示</h3><h5 id=\"原码表示法\"><a href=\"#原码表示法\" class=\"headerlink\" title=\"原码表示法\"></a>原码表示法</h5><p>也称“符号－数值”<br>规则：<br>１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0&lt;=i&lt;=n-2);<br>２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0&lt;=i&lt;=n-2);<br>即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B<br>优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。<br>缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。<br>运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。</p>\n<h5 id=\"补码表示法\"><a href=\"#补码表示法\" class=\"headerlink\" title=\"补码表示法\"></a>补码表示法</h5><p>也称“２－补码”<br>规则：<br>１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);<br>２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);<br>即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100<br>[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100<br>优点：１、减少了-0与+0的切换<br>2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。<br>3、两数的补码之和（差）=两数和（差）的补码。<br>运用：在计算机中，补码用来表示带符号正数。</p>\n<h5 id=\"反码表示法\"><a href=\"#反码表示法\" class=\"headerlink\" title=\"反码表示法\"></a>反码表示法</h5><p>规则：<br>正数和原码相同，负数的补码采用“各位取反，末尾加1”<br>即： [01100]反 = [10100]反<br>缺点：1、0的表示不唯一。<br>2、表数范围比补码少一个最小负数。<br>3、运算时必须考虑循环进位。<br>运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。</p>\n<h5 id=\"移码表示法\"><a href=\"#移码表示法\" class=\"headerlink\" title=\"移码表示法\"></a>移码表示法</h5><p>规则：<br>[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）<br>运用：通常表示浮点数的阶（即指数）</p>\n<h5 id=\"浮点数的表示-IEEE754浮点数\"><a href=\"#浮点数的表示-IEEE754浮点数\" class=\"headerlink\" title=\"浮点数的表示(IEEE754浮点数)\"></a>浮点数的表示(IEEE754浮点数)</h5><p>IEEE754浮点数的表示：<br><img src=\"img/IEEE754_chart.jpg\" alt=\"chart of iee754\"><br>sign: 符号位，0表示正数1表示负数<br>exponent： 阶码，由偏置常数+偏移量组成<br>function： 位数</p>\n<h5 id=\"为什么要有IEEE754标准？\"><a href=\"#为什么要有IEEE754标准？\" class=\"headerlink\" title=\"为什么要有IEEE754标准？\"></a>为什么要有IEEE754标准？</h5><p><strong>答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准</strong></p>\n<h5 id=\"什么是IEEE754标准？\"><a href=\"#什么是IEEE754标准？\" class=\"headerlink\" title=\"什么是IEEE754标准？\"></a>什么是IEEE754标准？</h5><p><strong>以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处<br>1、尾数可表示的位数多一位，因而使得浮点数的精度更高。<br>2、阶码的可表示范围更大，因而使浮点数表示范围更大</strong></p>\n<h5 id=\"IEEE754解释：\"><a href=\"#IEEE754解释：\" class=\"headerlink\" title=\"IEEE754解释：\"></a>IEEE754解释：</h5><h5 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question:\"></a>question:</h5><p>请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度</span><br><span class=\"line\">2、 f == (float)(int)f    //不相等，小数位精度缺失</span><br><span class=\"line\">3、 i == (int)(double)i   //相等</span><br><span class=\"line\">4、 f == (float)(double)i //相等</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"整数的加减\"><a href=\"#整数的加减\" class=\"headerlink\" title=\"整数的加减\"></a>整数的加减</h3><p><img src=\"img/choiceTwoWay.jpg\" alt=\"choiceTwoWay\"><br>零标志位为zf，溢出标志位位of；<br>符号标志sf，进/借位标志cf<br>zf=1时，表示结果为0；<br>of=1时，表示带符号整数的加减法运算发生溢出；<br>cf=Sub异或C</p>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数制转换\"><a href=\"#数制转换\" class=\"headerlink\" title=\"数制转换\"></a>数制转换</h3><p>即将不同的数值转换，例如：二、八、十六进制的相互转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B</span><br><span class=\"line\">十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B</span><br><span class=\"line\">tips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制</span><br></pre></td></tr></table></figure></p>\n<p>其他进制转二进制，例如：十进制与二进制的相互转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B</span><br><span class=\"line\">而无明显进制位数比较</span><br></pre></td></tr></table></figure></p>\n<p>多进制转化为10进制，例如16进制转化为10进制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D</span><br><span class=\"line\">可较为明确的转化</span><br></pre></td></tr></table></figure></p>\n<p>结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参<a href=\"https://github.com/gdccwxx/just-play/tree/master/hexConversion\" target=\"_blank\" rel=\"noopener\">简易的进制转换器</a></p>\n<h3 id=\"定点编码表示\"><a href=\"#定点编码表示\" class=\"headerlink\" title=\"定点编码表示\"></a>定点编码表示</h3><h5 id=\"原码表示法\"><a href=\"#原码表示法\" class=\"headerlink\" title=\"原码表示法\"></a>原码表示法</h5><p>也称“符号－数值”<br>规则：<br>１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0&lt;=i&lt;=n-2);<br>２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0&lt;=i&lt;=n-2);<br>即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B<br>优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。<br>缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。<br>运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。</p>\n<h5 id=\"补码表示法\"><a href=\"#补码表示法\" class=\"headerlink\" title=\"补码表示法\"></a>补码表示法</h5><p>也称“２－补码”<br>规则：<br>１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);<br>２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);<br>即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100<br>[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100<br>优点：１、减少了-0与+0的切换<br>2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。<br>3、两数的补码之和（差）=两数和（差）的补码。<br>运用：在计算机中，补码用来表示带符号正数。</p>\n<h5 id=\"反码表示法\"><a href=\"#反码表示法\" class=\"headerlink\" title=\"反码表示法\"></a>反码表示法</h5><p>规则：<br>正数和原码相同，负数的补码采用“各位取反，末尾加1”<br>即： [01100]反 = [10100]反<br>缺点：1、0的表示不唯一。<br>2、表数范围比补码少一个最小负数。<br>3、运算时必须考虑循环进位。<br>运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。</p>\n<h5 id=\"移码表示法\"><a href=\"#移码表示法\" class=\"headerlink\" title=\"移码表示法\"></a>移码表示法</h5><p>规则：<br>[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）<br>运用：通常表示浮点数的阶（即指数）</p>\n<h5 id=\"浮点数的表示-IEEE754浮点数\"><a href=\"#浮点数的表示-IEEE754浮点数\" class=\"headerlink\" title=\"浮点数的表示(IEEE754浮点数)\"></a>浮点数的表示(IEEE754浮点数)</h5><p>IEEE754浮点数的表示：<br><img src=\"img/IEEE754_chart.jpg\" alt=\"chart of iee754\"><br>sign: 符号位，0表示正数1表示负数<br>exponent： 阶码，由偏置常数+偏移量组成<br>function： 位数</p>\n<h5 id=\"为什么要有IEEE754标准？\"><a href=\"#为什么要有IEEE754标准？\" class=\"headerlink\" title=\"为什么要有IEEE754标准？\"></a>为什么要有IEEE754标准？</h5><p><strong>答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准</strong></p>\n<h5 id=\"什么是IEEE754标准？\"><a href=\"#什么是IEEE754标准？\" class=\"headerlink\" title=\"什么是IEEE754标准？\"></a>什么是IEEE754标准？</h5><p><strong>以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处<br>1、尾数可表示的位数多一位，因而使得浮点数的精度更高。<br>2、阶码的可表示范围更大，因而使浮点数表示范围更大</strong></p>\n<h5 id=\"IEEE754解释：\"><a href=\"#IEEE754解释：\" class=\"headerlink\" title=\"IEEE754解释：\"></a>IEEE754解释：</h5><h5 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question:\"></a>question:</h5><p>请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度</span><br><span class=\"line\">2、 f == (float)(int)f    //不相等，小数位精度缺失</span><br><span class=\"line\">3、 i == (int)(double)i   //相等</span><br><span class=\"line\">4、 f == (float)(double)i //相等</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"整数的加减\"><a href=\"#整数的加减\" class=\"headerlink\" title=\"整数的加减\"></a>整数的加减</h3><p><img src=\"img/choiceTwoWay.jpg\" alt=\"choiceTwoWay\"><br>零标志位为zf，溢出标志位位of；<br>符号标志sf，进/借位标志cf<br>zf=1时，表示结果为0；<br>of=1时，表示带符号整数的加减法运算发生溢出；<br>cf=Sub异或C</p>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。</p>\n"},{"title":"2017-ele-Interecommunions","date":"2017-11-06T13:07:35.000Z","_content":"#### 几个演讲\n从h5的埋雷到ServerLess，确实有很多收获。\n从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。\n从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。\n当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。\n还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。\n再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。\n最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。\n![ele-taking](img/eleTalking.jpg)\n#### 心得\n在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。\n\n#### 感谢\n此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。","source":"_posts/2017-ele-Interecommunions.md","raw":"---\ntitle: 2017-ele-Interecommunions\ndate: 2017-11-06 21:07:35\ntags: 随笔\n---\n#### 几个演讲\n从h5的埋雷到ServerLess，确实有很多收获。\n从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。\n从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。\n当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。\n还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。\n再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。\n最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。\n![ele-taking](img/eleTalking.jpg)\n#### 心得\n在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。\n\n#### 感谢\n此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。","slug":"2017-ele-Interecommunions","published":1,"updated":"2018-05-01T13:10:34.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6r40003aefa75pbskrm","content":"<h4 id=\"几个演讲\"><a href=\"#几个演讲\" class=\"headerlink\" title=\"几个演讲\"></a>几个演讲</h4><p>从h5的埋雷到ServerLess，确实有很多收获。<br>从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&amp;yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。<br>从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。<br>当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。<br>还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。<br>再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。<br>最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。<br><img src=\"img/eleTalking.jpg\" alt=\"ele-taking\"></p>\n<h4 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h4><p>在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。</p>\n<h4 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h4><p>此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"几个演讲\"><a href=\"#几个演讲\" class=\"headerlink\" title=\"几个演讲\"></a>几个演讲</h4><p>从h5的埋雷到ServerLess，确实有很多收获。<br>从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&amp;yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。<br>从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。<br>当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。<br>还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。<br>再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。<br>最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。<br><img src=\"img/eleTalking.jpg\" alt=\"ele-taking\"></p>\n<h4 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h4><p>在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。</p>\n<h4 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h4><p>此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。</p>\n"},{"title":"计算机系统基础－－第三章(程序的转换及机器级表示)","date":"2017-05-23T08:41:08.000Z","_content":"### 生成机器代码的过程\n1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏\n```\ncc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i\n```\n2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序\n```\ngcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog\n```\n### 可以使用gdb来进行调试\n在Linux中自带GNU调试工具gdb调试和跟踪。\n在生成.o文件后使用objdump -d test.o来进行反汇编查看代码\n```\n// test.c\nint add(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n// test.o\n0000000000000000 <add>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq\n```\nMASM采用的是Intel格式的汇编代码\n```\t\nMOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右\n```\nAT&T方式(教材使用方式)\n```\nmov %ecx,(%ebx,%edi,-6)  // R[ecx] <- R[ebx]+M[R[edi]-6]\n```\n寄存器组织和寻址方式\n\n通用寄存器（General Pupose Regesters，32位，8个）\n\n段寄存器（Segment Registers，16位，6个）\n\n程序状态与控制寄存器（Program Status and Control Register，32位，1个）\n\n指令指针寄存器（Instruction Pointer，32位，1个）\n#### 1.通用寄存器\nEAX：累加器（Accumulator，针对操作数和结果数据的）\n\nEBX：基址寄存器（Base，DS段中的数据指针）\n\nECX：计数器（Count，字符串和循环操作的）\n\nEDX：数据寄存器（Data，I/O指针）\n\n以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。\n\nEBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）\n\nESI：源变址寄存器（Source Index，字符串操作源指针）\n\nEDI：目的变址寄存器（Destination Index，字符串操作目标指针）\n\nESP：栈指针寄存器（Stack Pointer，SS段中栈指针）\n\n以上4个寄存器主要用作保存内存地址的指针。\n#### 2.段寄存器\nCS：代码段寄存器（Code Segment）\n\nSS：栈段寄存器（Stack Segment）\n\nDS：数据段寄存器（Data Segment）\n\nES：附加数据段寄存器（Extra Data Segment）\n\nFS：数据段寄存器（Data Segment）\n\nGS：数据段寄存器（Data Segment）\n\nCS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。\n\n![purposeRegiesters](img/purposeRegisters.jpg)\n![sliceRegiester](img/sliceRegister.jpg)\n\n\n#### 3.程序状态与控制寄存器\nEFLAGS：Flag Register，标志寄存器\n![标志寄存器](img/flagRegister.gif)\n![eflag](img/eflagRegister.png)\n##### 运算结果标志位\n\n1、进位标志CF(Carry Flag)\n进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。\n使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。\n2、奇偶标志PF(Parity Flag)\n奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。\n利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。\n3、辅助进位标志AF(Auxiliary Carry Flag)\n在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：\n(1)、在字操作时，发生低字节向高字节进位或借位时；\n(2)、在字节操作时，发生低4位向高4位进位或借位时。\n对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。\n4、零标志ZF(Zero Flag)\n零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。\n5、符号标志SF(Sign Flag)\n符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。\n6、溢出标志OF(Overflow Flag)\n溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。\n“溢出”和“进位”是两个不同含义的概念，不要混淆。\n\n##### 状态控制标志位\n\n状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。\n1、追踪标志TF(Trap Flag)\n当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。\n指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。\n2、中断允许标志IF(Interrupt-enable Flag)\n中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：\n(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；\n(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。\nCPU的指令系统中也有专门的指令来改变标志位IF的值。\n3、方向标志DF(Direction Flag)\n方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。\n\n##### 32位标志寄存器增加的标志位\n1、I/O特权标志IOPL(I/O Privilege Level)\nI/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。\n2、嵌套任务标志NT(Nested Task)\n嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：\n(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；\n(2)、当NT=1，通过任务转换实现中断返回。\n3、重启动标志RF(Restart Flag)\n重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。\n4、虚拟8086方式标志VM(Virtual 8086 Mode)\n如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态\n#### 4.指令指针寄存器\nEIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。\n### 七种寻址方式\n![findWay](img/findWay.png)\n定义以下几个类型\n```\nint x;\nfloat a[100];\nshort b[4][4];\n\n```\n假设x的基址位100，每个int元素占4bit，则\na[i] = 104+i4 //比例变址\nb[i][j] = 504+i8+j*2 //基址+比例变址+位移\nx = 100 // 基址\n### IA-32常用指令及其操作\n### 传送指令\n1、mov movb(比特), movw(字), movl(双字)\n2、movs 符号扩展传送指令\n3、movz 零扩展传送指令\n4、xchg 数据交换指令\n5、push 压栈\n6、pop 退栈\n7、lea 地址传送指令\n8、in,out 输入输出I/O指令\n9、pushf,popf 标志传送指令\n##### 扩展\n符号位扩展：\n八位扩展为十六位\n由 00001000 -> 1111111100001000\n零扩展：\n八位扩展为十六位\n由 00001000 -> 0000000000001000\n假设val 和ptr声明如下\n**\nval_type val;\ncontofptr_type *ptr;\n已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：\nval= (val_type) * ptr;\n*ptr = (contofptr_type) val;\n写出以下组合类型的mov指令实现\n**\n\n| val_type | contofptr_type | \n| --- | --- |\n| char | char |\n| int | char |\n| unsigned | int |\n| int | unsigned char |\n| unsigned | unsigned char |\n| unsigned short | int |\n\n答案：\n\n|val_type        |contofptr_type|语句一对应的操作                        |       语句二对应的操作\n----------------|--------------|-------------------------             |----\n|char            | char         | movb  (%edx),%al //传送              |movb %al,(%edx)//传送|\n|int             | char         | movsb (%edx),%eax // 符号位扩展，传送  |movb %al,(%edx)  //截断，传送|\n|unsigned        | int          |movl (%edx),%eax //传送               |movl %eax,(%edx)  //传送|\n|int             | unsigned char| movzbl (%edx),%eax // 零扩展，传送     | movb %al,(%edx)   //截断，传送|\n|unsigned        | unsigned char|movzbl (%edx),%eax // 零扩展，传送      | movb %al,(%edx)   //截断，传送|\n|unsigned short  | int          |movw (%edx),%ax // 截断，传送          | movzwl %ax,(%edx)   //零扩展，传送|\n\n其在寄存器中以小端方式储存\n**即|12345678H|-> |78H|56H|34H|12H|**\n##### 按位运算指令\n1、NOT单操作数每位取反\n2、AND对双操作数按位逻辑“与”\n3、OR对双操作数按位逻辑“或”\n4、XOR对双操作数按位逻辑“异或”\n5、TEST根据两个操作数相“与”的结果来设置条件标志\n6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0\n7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0\n8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出\n9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0\n10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf\n11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf\n12、RCL带循环左移，将CF作为操作数的一部分循环左移\n13、RCR带循环右移，将CF作为操作数的一部分循环右移\n##### 控制转移指令JMP\n##### 条件转移指令\n##### 根据单个标志位的状态判断转移的指令\n| 指令 | 转移条件 | 说明 |\n| --- | --- | --- |\n| JC DEST | CF=1 | 有进位/借位 |\n| JNC DEST | CF=0 | 无进位/借位 |\n| JE/JZ DEST | ZF=1 | 相等/等于零 |\n| JNE/JNZ DEST | ZF=0 | 不相等/不等于零 |\n| JS DEST | SF=1 | 是负数 |\n| JNS DEST | SF=0 | 是正数 |\n| JO DEST | OF=1 | 有溢出 |\n| JNO DEST | OF=0 | 无溢出 |\n| JP/JPE DEST | PF=1 | 有偶数个“1” |\n| JNP/JPO DEST | PF=0 | 有奇数个“1” |\n##### 根据两个无符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n##### 根据两个有符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n### IA-32的栈、栈帧及其结构\n![static picture](img/stackBP.jpg)\n##### 注：为保证其在内存中的整齐，一般的存在为16的倍数。\n\n\n#### 小结：\n本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。","source":"_posts/basic-computer-sience-chapter3.md","raw":"---\ntitle: 计算机系统基础－－第三章(程序的转换及机器级表示)\ndate: 2017-05-23 16:41:08\ntags: 计算机系统基础\n---\n### 生成机器代码的过程\n1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏\n```\ncc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i\n```\n2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序\n```\ngcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog\n```\n### 可以使用gdb来进行调试\n在Linux中自带GNU调试工具gdb调试和跟踪。\n在生成.o文件后使用objdump -d test.o来进行反汇编查看代码\n```\n// test.c\nint add(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n// test.o\n0000000000000000 <add>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq\n```\nMASM采用的是Intel格式的汇编代码\n```\t\nMOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右\n```\nAT&T方式(教材使用方式)\n```\nmov %ecx,(%ebx,%edi,-6)  // R[ecx] <- R[ebx]+M[R[edi]-6]\n```\n寄存器组织和寻址方式\n\n通用寄存器（General Pupose Regesters，32位，8个）\n\n段寄存器（Segment Registers，16位，6个）\n\n程序状态与控制寄存器（Program Status and Control Register，32位，1个）\n\n指令指针寄存器（Instruction Pointer，32位，1个）\n#### 1.通用寄存器\nEAX：累加器（Accumulator，针对操作数和结果数据的）\n\nEBX：基址寄存器（Base，DS段中的数据指针）\n\nECX：计数器（Count，字符串和循环操作的）\n\nEDX：数据寄存器（Data，I/O指针）\n\n以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。\n\nEBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）\n\nESI：源变址寄存器（Source Index，字符串操作源指针）\n\nEDI：目的变址寄存器（Destination Index，字符串操作目标指针）\n\nESP：栈指针寄存器（Stack Pointer，SS段中栈指针）\n\n以上4个寄存器主要用作保存内存地址的指针。\n#### 2.段寄存器\nCS：代码段寄存器（Code Segment）\n\nSS：栈段寄存器（Stack Segment）\n\nDS：数据段寄存器（Data Segment）\n\nES：附加数据段寄存器（Extra Data Segment）\n\nFS：数据段寄存器（Data Segment）\n\nGS：数据段寄存器（Data Segment）\n\nCS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。\n\n![purposeRegiesters](img/purposeRegisters.jpg)\n![sliceRegiester](img/sliceRegister.jpg)\n\n\n#### 3.程序状态与控制寄存器\nEFLAGS：Flag Register，标志寄存器\n![标志寄存器](img/flagRegister.gif)\n![eflag](img/eflagRegister.png)\n##### 运算结果标志位\n\n1、进位标志CF(Carry Flag)\n进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。\n使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。\n2、奇偶标志PF(Parity Flag)\n奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。\n利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。\n3、辅助进位标志AF(Auxiliary Carry Flag)\n在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：\n(1)、在字操作时，发生低字节向高字节进位或借位时；\n(2)、在字节操作时，发生低4位向高4位进位或借位时。\n对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。\n4、零标志ZF(Zero Flag)\n零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。\n5、符号标志SF(Sign Flag)\n符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。\n6、溢出标志OF(Overflow Flag)\n溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。\n“溢出”和“进位”是两个不同含义的概念，不要混淆。\n\n##### 状态控制标志位\n\n状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。\n1、追踪标志TF(Trap Flag)\n当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。\n指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。\n2、中断允许标志IF(Interrupt-enable Flag)\n中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：\n(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；\n(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。\nCPU的指令系统中也有专门的指令来改变标志位IF的值。\n3、方向标志DF(Direction Flag)\n方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。\n\n##### 32位标志寄存器增加的标志位\n1、I/O特权标志IOPL(I/O Privilege Level)\nI/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。\n2、嵌套任务标志NT(Nested Task)\n嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：\n(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；\n(2)、当NT=1，通过任务转换实现中断返回。\n3、重启动标志RF(Restart Flag)\n重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。\n4、虚拟8086方式标志VM(Virtual 8086 Mode)\n如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态\n#### 4.指令指针寄存器\nEIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。\n### 七种寻址方式\n![findWay](img/findWay.png)\n定义以下几个类型\n```\nint x;\nfloat a[100];\nshort b[4][4];\n\n```\n假设x的基址位100，每个int元素占4bit，则\na[i] = 104+i4 //比例变址\nb[i][j] = 504+i8+j*2 //基址+比例变址+位移\nx = 100 // 基址\n### IA-32常用指令及其操作\n### 传送指令\n1、mov movb(比特), movw(字), movl(双字)\n2、movs 符号扩展传送指令\n3、movz 零扩展传送指令\n4、xchg 数据交换指令\n5、push 压栈\n6、pop 退栈\n7、lea 地址传送指令\n8、in,out 输入输出I/O指令\n9、pushf,popf 标志传送指令\n##### 扩展\n符号位扩展：\n八位扩展为十六位\n由 00001000 -> 1111111100001000\n零扩展：\n八位扩展为十六位\n由 00001000 -> 0000000000001000\n假设val 和ptr声明如下\n**\nval_type val;\ncontofptr_type *ptr;\n已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：\nval= (val_type) * ptr;\n*ptr = (contofptr_type) val;\n写出以下组合类型的mov指令实现\n**\n\n| val_type | contofptr_type | \n| --- | --- |\n| char | char |\n| int | char |\n| unsigned | int |\n| int | unsigned char |\n| unsigned | unsigned char |\n| unsigned short | int |\n\n答案：\n\n|val_type        |contofptr_type|语句一对应的操作                        |       语句二对应的操作\n----------------|--------------|-------------------------             |----\n|char            | char         | movb  (%edx),%al //传送              |movb %al,(%edx)//传送|\n|int             | char         | movsb (%edx),%eax // 符号位扩展，传送  |movb %al,(%edx)  //截断，传送|\n|unsigned        | int          |movl (%edx),%eax //传送               |movl %eax,(%edx)  //传送|\n|int             | unsigned char| movzbl (%edx),%eax // 零扩展，传送     | movb %al,(%edx)   //截断，传送|\n|unsigned        | unsigned char|movzbl (%edx),%eax // 零扩展，传送      | movb %al,(%edx)   //截断，传送|\n|unsigned short  | int          |movw (%edx),%ax // 截断，传送          | movzwl %ax,(%edx)   //零扩展，传送|\n\n其在寄存器中以小端方式储存\n**即|12345678H|-> |78H|56H|34H|12H|**\n##### 按位运算指令\n1、NOT单操作数每位取反\n2、AND对双操作数按位逻辑“与”\n3、OR对双操作数按位逻辑“或”\n4、XOR对双操作数按位逻辑“异或”\n5、TEST根据两个操作数相“与”的结果来设置条件标志\n6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0\n7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0\n8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出\n9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0\n10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf\n11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf\n12、RCL带循环左移，将CF作为操作数的一部分循环左移\n13、RCR带循环右移，将CF作为操作数的一部分循环右移\n##### 控制转移指令JMP\n##### 条件转移指令\n##### 根据单个标志位的状态判断转移的指令\n| 指令 | 转移条件 | 说明 |\n| --- | --- | --- |\n| JC DEST | CF=1 | 有进位/借位 |\n| JNC DEST | CF=0 | 无进位/借位 |\n| JE/JZ DEST | ZF=1 | 相等/等于零 |\n| JNE/JNZ DEST | ZF=0 | 不相等/不等于零 |\n| JS DEST | SF=1 | 是负数 |\n| JNS DEST | SF=0 | 是正数 |\n| JO DEST | OF=1 | 有溢出 |\n| JNO DEST | OF=0 | 无溢出 |\n| JP/JPE DEST | PF=1 | 有偶数个“1” |\n| JNP/JPO DEST | PF=0 | 有奇数个“1” |\n##### 根据两个无符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n##### 根据两个有符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n### IA-32的栈、栈帧及其结构\n![static picture](img/stackBP.jpg)\n##### 注：为保证其在内存中的整齐，一般的存在为16的倍数。\n\n\n#### 小结：\n本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。","slug":"basic-computer-sience-chapter3","published":1,"updated":"2018-05-01T03:52:35.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6r60004aefavtewpnz8","content":"<h3 id=\"生成机器代码的过程\"><a href=\"#生成机器代码的过程\" class=\"headerlink\" title=\"生成机器代码的过程\"></a>生成机器代码的过程</h3><p>1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i</span><br></pre></td></tr></table></figure></p>\n<p>2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s</span><br></pre></td></tr></table></figure></p>\n<p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o</span><br></pre></td></tr></table></figure></p>\n<p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可以使用gdb来进行调试\"><a href=\"#可以使用gdb来进行调试\" class=\"headerlink\" title=\"可以使用gdb来进行调试\"></a>可以使用gdb来进行调试</h3><p>在Linux中自带GNU调试工具gdb调试和跟踪。<br>在生成.o文件后使用objdump -d test.o来进行反汇编查看代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int add(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">0000000000000000 &lt;add&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp</span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq</span><br></pre></td></tr></table></figure></p>\n<p>MASM采用的是Intel格式的汇编代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右</span><br></pre></td></tr></table></figure></p>\n<p>AT&amp;T方式(教材使用方式)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov %ecx,(%ebx,%edi,-6)  // R[ecx] &lt;- R[ebx]+M[R[edi]-6]</span><br></pre></td></tr></table></figure></p>\n<p>寄存器组织和寻址方式</p>\n<p>通用寄存器（General Pupose Regesters，32位，8个）</p>\n<p>段寄存器（Segment Registers，16位，6个）</p>\n<p>程序状态与控制寄存器（Program Status and Control Register，32位，1个）</p>\n<p>指令指针寄存器（Instruction Pointer，32位，1个）</p>\n<h4 id=\"1-通用寄存器\"><a href=\"#1-通用寄存器\" class=\"headerlink\" title=\"1.通用寄存器\"></a>1.通用寄存器</h4><p>EAX：累加器（Accumulator，针对操作数和结果数据的）</p>\n<p>EBX：基址寄存器（Base，DS段中的数据指针）</p>\n<p>ECX：计数器（Count，字符串和循环操作的）</p>\n<p>EDX：数据寄存器（Data，I/O指针）</p>\n<p>以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。</p>\n<p>EBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）</p>\n<p>ESI：源变址寄存器（Source Index，字符串操作源指针）</p>\n<p>EDI：目的变址寄存器（Destination Index，字符串操作目标指针）</p>\n<p>ESP：栈指针寄存器（Stack Pointer，SS段中栈指针）</p>\n<p>以上4个寄存器主要用作保存内存地址的指针。</p>\n<h4 id=\"2-段寄存器\"><a href=\"#2-段寄存器\" class=\"headerlink\" title=\"2.段寄存器\"></a>2.段寄存器</h4><p>CS：代码段寄存器（Code Segment）</p>\n<p>SS：栈段寄存器（Stack Segment）</p>\n<p>DS：数据段寄存器（Data Segment）</p>\n<p>ES：附加数据段寄存器（Extra Data Segment）</p>\n<p>FS：数据段寄存器（Data Segment）</p>\n<p>GS：数据段寄存器（Data Segment）</p>\n<p>CS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。</p>\n<p><img src=\"img/purposeRegisters.jpg\" alt=\"purposeRegiesters\"><br><img src=\"img/sliceRegister.jpg\" alt=\"sliceRegiester\"></p>\n<h4 id=\"3-程序状态与控制寄存器\"><a href=\"#3-程序状态与控制寄存器\" class=\"headerlink\" title=\"3.程序状态与控制寄存器\"></a>3.程序状态与控制寄存器</h4><p>EFLAGS：Flag Register，标志寄存器<br><img src=\"img/flagRegister.gif\" alt=\"标志寄存器\"><br><img src=\"img/eflagRegister.png\" alt=\"eflag\"></p>\n<h5 id=\"运算结果标志位\"><a href=\"#运算结果标志位\" class=\"headerlink\" title=\"运算结果标志位\"></a>运算结果标志位</h5><p>1、进位标志CF(Carry Flag)<br>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。<br>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。<br>2、奇偶标志PF(Parity Flag)<br>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。<br>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。<br>3、辅助进位标志AF(Auxiliary Carry Flag)<br>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<br>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。<br>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。<br>4、零标志ZF(Zero Flag)<br>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。<br>5、符号标志SF(Sign Flag)<br>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。<br>6、溢出标志OF(Overflow Flag)<br>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。<br>“溢出”和“进位”是两个不同含义的概念，不要混淆。</p>\n<h5 id=\"状态控制标志位\"><a href=\"#状态控制标志位\" class=\"headerlink\" title=\"状态控制标志位\"></a>状态控制标志位</h5><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。<br>1、追踪标志TF(Trap Flag)<br>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。<br>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。<br>2、中断允许标志IF(Interrupt-enable Flag)<br>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：<br>(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；<br>(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。<br>CPU的指令系统中也有专门的指令来改变标志位IF的值。<br>3、方向标志DF(Direction Flag)<br>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p>\n<h5 id=\"32位标志寄存器增加的标志位\"><a href=\"#32位标志寄存器增加的标志位\" class=\"headerlink\" title=\"32位标志寄存器增加的标志位\"></a>32位标志寄存器增加的标志位</h5><p>1、I/O特权标志IOPL(I/O Privilege Level)<br>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。<br>2、嵌套任务标志NT(Nested Task)<br>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：<br>(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；<br>(2)、当NT=1，通过任务转换实现中断返回。<br>3、重启动标志RF(Restart Flag)<br>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。<br>4、虚拟8086方式标志VM(Virtual 8086 Mode)<br>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态</p>\n<h4 id=\"4-指令指针寄存器\"><a href=\"#4-指令指针寄存器\" class=\"headerlink\" title=\"4.指令指针寄存器\"></a>4.指令指针寄存器</h4><p>EIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。</p>\n<h3 id=\"七种寻址方式\"><a href=\"#七种寻址方式\" class=\"headerlink\" title=\"七种寻址方式\"></a>七种寻址方式</h3><p><img src=\"img/findWay.png\" alt=\"findWay\"><br>定义以下几个类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x;</span><br><span class=\"line\">float a[100];</span><br><span class=\"line\">short b[4][4];</span><br></pre></td></tr></table></figure></p>\n<p>假设x的基址位100，每个int元素占4bit，则<br>a[i] = 104+i4 //比例变址<br>b[i][j] = 504+i8+j*2 //基址+比例变址+位移<br>x = 100 // 基址</p>\n<h3 id=\"IA-32常用指令及其操作\"><a href=\"#IA-32常用指令及其操作\" class=\"headerlink\" title=\"IA-32常用指令及其操作\"></a>IA-32常用指令及其操作</h3><h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a>传送指令</h3><p>1、mov movb(比特), movw(字), movl(双字)<br>2、movs 符号扩展传送指令<br>3、movz 零扩展传送指令<br>4、xchg 数据交换指令<br>5、push 压栈<br>6、pop 退栈<br>7、lea 地址传送指令<br>8、in,out 输入输出I/O指令<br>9、pushf,popf 标志传送指令</p>\n<h5 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h5><p>符号位扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 1111111100001000<br>零扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 0000000000001000<br>假设val 和ptr声明如下<br><strong><br>val_type val;<br>contofptr_type <em>ptr;<br>已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：<br>val= (val_type) </em> ptr;<br>*ptr = (contofptr_type) val;<br>写出以下组合类型的mov指令实现\n</strong></p>\n<table>\n<thead>\n<tr>\n<th>val_type</th>\n<th>contofptr_type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>char</td>\n</tr>\n<tr>\n<td>int</td>\n<td>char</td>\n</tr>\n<tr>\n<td>unsigned</td>\n<td>int</td>\n</tr>\n<tr>\n<td>int</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>unsigned</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>unsigned short</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<p>答案：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>val_type</th>\n<th>contofptr_type</th>\n<th>语句一对应的操作</th>\n<th>语句二对应的操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>char</td>\n<td>char</td>\n<td>movb  (%edx),%al //传送</td>\n<td>movb %al,(%edx)//传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>int</td>\n<td>char</td>\n<td>movsb (%edx),%eax // 符号位扩展，传送</td>\n<td>movb %al,(%edx)  //截断，传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unsigned</td>\n<td>int</td>\n<td>movl (%edx),%eax //传送</td>\n<td>movl %eax,(%edx)  //传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>int</td>\n<td>unsigned char</td>\n<td>movzbl (%edx),%eax // 零扩展，传送</td>\n<td>movb %al,(%edx)   //截断，传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unsigned</td>\n<td>unsigned char</td>\n<td>movzbl (%edx),%eax // 零扩展，传送</td>\n<td>movb %al,(%edx)   //截断，传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unsigned short</td>\n<td>int</td>\n<td>movw (%edx),%ax // 截断，传送</td>\n<td>movzwl %ax,(%edx)   //零扩展，传送</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>其在寄存器中以小端方式储存<br><strong>即|12345678H|-&gt; |78H|56H|34H|12H|</strong></p>\n<h5 id=\"按位运算指令\"><a href=\"#按位运算指令\" class=\"headerlink\" title=\"按位运算指令\"></a>按位运算指令</h5><p>1、NOT单操作数每位取反<br>2、AND对双操作数按位逻辑“与”<br>3、OR对双操作数按位逻辑“或”<br>4、XOR对双操作数按位逻辑“异或”<br>5、TEST根据两个操作数相“与”的结果来设置条件标志<br>6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0<br>7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0<br>8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出<br>9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0<br>10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf<br>11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf<br>12、RCL带循环左移，将CF作为操作数的一部分循环左移<br>13、RCR带循环右移，将CF作为操作数的一部分循环右移</p>\n<h5 id=\"控制转移指令JMP\"><a href=\"#控制转移指令JMP\" class=\"headerlink\" title=\"控制转移指令JMP\"></a>控制转移指令JMP</h5><h5 id=\"条件转移指令\"><a href=\"#条件转移指令\" class=\"headerlink\" title=\"条件转移指令\"></a>条件转移指令</h5><h5 id=\"根据单个标志位的状态判断转移的指令\"><a href=\"#根据单个标志位的状态判断转移的指令\" class=\"headerlink\" title=\"根据单个标志位的状态判断转移的指令\"></a>根据单个标志位的状态判断转移的指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>转移条件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JC DEST</td>\n<td>CF=1</td>\n<td>有进位/借位</td>\n</tr>\n<tr>\n<td>JNC DEST</td>\n<td>CF=0</td>\n<td>无进位/借位</td>\n</tr>\n<tr>\n<td>JE/JZ DEST</td>\n<td>ZF=1</td>\n<td>相等/等于零</td>\n</tr>\n<tr>\n<td>JNE/JNZ DEST</td>\n<td>ZF=0</td>\n<td>不相等/不等于零</td>\n</tr>\n<tr>\n<td>JS DEST</td>\n<td>SF=1</td>\n<td>是负数</td>\n</tr>\n<tr>\n<td>JNS DEST</td>\n<td>SF=0</td>\n<td>是正数</td>\n</tr>\n<tr>\n<td>JO DEST</td>\n<td>OF=1</td>\n<td>有溢出</td>\n</tr>\n<tr>\n<td>JNO DEST</td>\n<td>OF=0</td>\n<td>无溢出</td>\n</tr>\n<tr>\n<td>JP/JPE DEST</td>\n<td>PF=1</td>\n<td>有偶数个“1”</td>\n</tr>\n<tr>\n<td>JNP/JPO DEST</td>\n<td>PF=0</td>\n<td>有奇数个“1”</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"根据两个无符号数的比较结果判断转移的指令\"><a href=\"#根据两个无符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个无符号数的比较结果判断转移的指令\"></a>根据两个无符号数的比较结果判断转移的指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>转移条件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JG/JNLE DEST</td>\n<td>SF=OF AND ZF=0</td>\n<td>有符号数A&gt;B</td>\n</tr>\n<tr>\n<td>JGE/JNL DEST</td>\n<td>SF=OF OR ZF=1</td>\n<td>有符号数A≥B</td>\n</tr>\n<tr>\n<td>JL/JNGE DEST</td>\n<td>SF≠OF AND ZF=0</td>\n<td>有符号数A&lt;B</td>\n</tr>\n<tr>\n<td>JLE/JNG DEST</td>\n<td>SF≠OF OR ZF=1</td>\n<td>有符号数A≤B</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"根据两个有符号数的比较结果判断转移的指令\"><a href=\"#根据两个有符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个有符号数的比较结果判断转移的指令\"></a>根据两个有符号数的比较结果判断转移的指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>转移条件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JG/JNLE DEST</td>\n<td>SF=OF AND ZF=0</td>\n<td>有符号数A&gt;B</td>\n</tr>\n<tr>\n<td>JGE/JNL DEST</td>\n<td>SF=OF OR ZF=1</td>\n<td>有符号数A≥B</td>\n</tr>\n<tr>\n<td>JL/JNGE DEST</td>\n<td>SF≠OF AND ZF=0</td>\n<td>有符号数A&lt;B</td>\n</tr>\n<tr>\n<td>JLE/JNG DEST</td>\n<td>SF≠OF OR ZF=1</td>\n<td>有符号数A≤B</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"IA-32的栈、栈帧及其结构\"><a href=\"#IA-32的栈、栈帧及其结构\" class=\"headerlink\" title=\"IA-32的栈、栈帧及其结构\"></a>IA-32的栈、栈帧及其结构</h3><p><img src=\"img/stackBP.jpg\" alt=\"static picture\"></p>\n<h5 id=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"><a href=\"#注：为保证其在内存中的整齐，一般的存在为16的倍数。\" class=\"headerlink\" title=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"></a>注：为保证其在内存中的整齐，一般的存在为16的倍数。</h5><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生成机器代码的过程\"><a href=\"#生成机器代码的过程\" class=\"headerlink\" title=\"生成机器代码的过程\"></a>生成机器代码的过程</h3><p>1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i</span><br></pre></td></tr></table></figure></p>\n<p>2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s</span><br></pre></td></tr></table></figure></p>\n<p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o</span><br></pre></td></tr></table></figure></p>\n<p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可以使用gdb来进行调试\"><a href=\"#可以使用gdb来进行调试\" class=\"headerlink\" title=\"可以使用gdb来进行调试\"></a>可以使用gdb来进行调试</h3><p>在Linux中自带GNU调试工具gdb调试和跟踪。<br>在生成.o文件后使用objdump -d test.o来进行反汇编查看代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int add(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">0000000000000000 &lt;add&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp</span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq</span><br></pre></td></tr></table></figure></p>\n<p>MASM采用的是Intel格式的汇编代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右</span><br></pre></td></tr></table></figure></p>\n<p>AT&amp;T方式(教材使用方式)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov %ecx,(%ebx,%edi,-6)  // R[ecx] &lt;- R[ebx]+M[R[edi]-6]</span><br></pre></td></tr></table></figure></p>\n<p>寄存器组织和寻址方式</p>\n<p>通用寄存器（General Pupose Regesters，32位，8个）</p>\n<p>段寄存器（Segment Registers，16位，6个）</p>\n<p>程序状态与控制寄存器（Program Status and Control Register，32位，1个）</p>\n<p>指令指针寄存器（Instruction Pointer，32位，1个）</p>\n<h4 id=\"1-通用寄存器\"><a href=\"#1-通用寄存器\" class=\"headerlink\" title=\"1.通用寄存器\"></a>1.通用寄存器</h4><p>EAX：累加器（Accumulator，针对操作数和结果数据的）</p>\n<p>EBX：基址寄存器（Base，DS段中的数据指针）</p>\n<p>ECX：计数器（Count，字符串和循环操作的）</p>\n<p>EDX：数据寄存器（Data，I/O指针）</p>\n<p>以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。</p>\n<p>EBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）</p>\n<p>ESI：源变址寄存器（Source Index，字符串操作源指针）</p>\n<p>EDI：目的变址寄存器（Destination Index，字符串操作目标指针）</p>\n<p>ESP：栈指针寄存器（Stack Pointer，SS段中栈指针）</p>\n<p>以上4个寄存器主要用作保存内存地址的指针。</p>\n<h4 id=\"2-段寄存器\"><a href=\"#2-段寄存器\" class=\"headerlink\" title=\"2.段寄存器\"></a>2.段寄存器</h4><p>CS：代码段寄存器（Code Segment）</p>\n<p>SS：栈段寄存器（Stack Segment）</p>\n<p>DS：数据段寄存器（Data Segment）</p>\n<p>ES：附加数据段寄存器（Extra Data Segment）</p>\n<p>FS：数据段寄存器（Data Segment）</p>\n<p>GS：数据段寄存器（Data Segment）</p>\n<p>CS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。</p>\n<p><img src=\"img/purposeRegisters.jpg\" alt=\"purposeRegiesters\"><br><img src=\"img/sliceRegister.jpg\" alt=\"sliceRegiester\"></p>\n<h4 id=\"3-程序状态与控制寄存器\"><a href=\"#3-程序状态与控制寄存器\" class=\"headerlink\" title=\"3.程序状态与控制寄存器\"></a>3.程序状态与控制寄存器</h4><p>EFLAGS：Flag Register，标志寄存器<br><img src=\"img/flagRegister.gif\" alt=\"标志寄存器\"><br><img src=\"img/eflagRegister.png\" alt=\"eflag\"></p>\n<h5 id=\"运算结果标志位\"><a href=\"#运算结果标志位\" class=\"headerlink\" title=\"运算结果标志位\"></a>运算结果标志位</h5><p>1、进位标志CF(Carry Flag)<br>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。<br>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。<br>2、奇偶标志PF(Parity Flag)<br>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。<br>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。<br>3、辅助进位标志AF(Auxiliary Carry Flag)<br>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<br>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。<br>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。<br>4、零标志ZF(Zero Flag)<br>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。<br>5、符号标志SF(Sign Flag)<br>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。<br>6、溢出标志OF(Overflow Flag)<br>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。<br>“溢出”和“进位”是两个不同含义的概念，不要混淆。</p>\n<h5 id=\"状态控制标志位\"><a href=\"#状态控制标志位\" class=\"headerlink\" title=\"状态控制标志位\"></a>状态控制标志位</h5><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。<br>1、追踪标志TF(Trap Flag)<br>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。<br>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。<br>2、中断允许标志IF(Interrupt-enable Flag)<br>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：<br>(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；<br>(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。<br>CPU的指令系统中也有专门的指令来改变标志位IF的值。<br>3、方向标志DF(Direction Flag)<br>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p>\n<h5 id=\"32位标志寄存器增加的标志位\"><a href=\"#32位标志寄存器增加的标志位\" class=\"headerlink\" title=\"32位标志寄存器增加的标志位\"></a>32位标志寄存器增加的标志位</h5><p>1、I/O特权标志IOPL(I/O Privilege Level)<br>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。<br>2、嵌套任务标志NT(Nested Task)<br>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：<br>(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；<br>(2)、当NT=1，通过任务转换实现中断返回。<br>3、重启动标志RF(Restart Flag)<br>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。<br>4、虚拟8086方式标志VM(Virtual 8086 Mode)<br>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态</p>\n<h4 id=\"4-指令指针寄存器\"><a href=\"#4-指令指针寄存器\" class=\"headerlink\" title=\"4.指令指针寄存器\"></a>4.指令指针寄存器</h4><p>EIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。</p>\n<h3 id=\"七种寻址方式\"><a href=\"#七种寻址方式\" class=\"headerlink\" title=\"七种寻址方式\"></a>七种寻址方式</h3><p><img src=\"img/findWay.png\" alt=\"findWay\"><br>定义以下几个类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x;</span><br><span class=\"line\">float a[100];</span><br><span class=\"line\">short b[4][4];</span><br></pre></td></tr></table></figure></p>\n<p>假设x的基址位100，每个int元素占4bit，则<br>a[i] = 104+i4 //比例变址<br>b[i][j] = 504+i8+j*2 //基址+比例变址+位移<br>x = 100 // 基址</p>\n<h3 id=\"IA-32常用指令及其操作\"><a href=\"#IA-32常用指令及其操作\" class=\"headerlink\" title=\"IA-32常用指令及其操作\"></a>IA-32常用指令及其操作</h3><h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a>传送指令</h3><p>1、mov movb(比特), movw(字), movl(双字)<br>2、movs 符号扩展传送指令<br>3、movz 零扩展传送指令<br>4、xchg 数据交换指令<br>5、push 压栈<br>6、pop 退栈<br>7、lea 地址传送指令<br>8、in,out 输入输出I/O指令<br>9、pushf,popf 标志传送指令</p>\n<h5 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h5><p>符号位扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 1111111100001000<br>零扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 0000000000001000<br>假设val 和ptr声明如下<br><strong><br>val_type val;<br>contofptr_type <em>ptr;<br>已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：<br>val= (val_type) </em> ptr;<br>*ptr = (contofptr_type) val;<br>写出以下组合类型的mov指令实现\n</strong></p>\n<table>\n<thead>\n<tr>\n<th>val_type</th>\n<th>contofptr_type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>char</td>\n</tr>\n<tr>\n<td>int</td>\n<td>char</td>\n</tr>\n<tr>\n<td>unsigned</td>\n<td>int</td>\n</tr>\n<tr>\n<td>int</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>unsigned</td>\n<td>unsigned char</td>\n</tr>\n<tr>\n<td>unsigned short</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<p>答案：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>val_type</th>\n<th>contofptr_type</th>\n<th>语句一对应的操作</th>\n<th>语句二对应的操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>char</td>\n<td>char</td>\n<td>movb  (%edx),%al //传送</td>\n<td>movb %al,(%edx)//传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>int</td>\n<td>char</td>\n<td>movsb (%edx),%eax // 符号位扩展，传送</td>\n<td>movb %al,(%edx)  //截断，传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unsigned</td>\n<td>int</td>\n<td>movl (%edx),%eax //传送</td>\n<td>movl %eax,(%edx)  //传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>int</td>\n<td>unsigned char</td>\n<td>movzbl (%edx),%eax // 零扩展，传送</td>\n<td>movb %al,(%edx)   //截断，传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unsigned</td>\n<td>unsigned char</td>\n<td>movzbl (%edx),%eax // 零扩展，传送</td>\n<td>movb %al,(%edx)   //截断，传送</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unsigned short</td>\n<td>int</td>\n<td>movw (%edx),%ax // 截断，传送</td>\n<td>movzwl %ax,(%edx)   //零扩展，传送</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>其在寄存器中以小端方式储存<br><strong>即|12345678H|-&gt; |78H|56H|34H|12H|</strong></p>\n<h5 id=\"按位运算指令\"><a href=\"#按位运算指令\" class=\"headerlink\" title=\"按位运算指令\"></a>按位运算指令</h5><p>1、NOT单操作数每位取反<br>2、AND对双操作数按位逻辑“与”<br>3、OR对双操作数按位逻辑“或”<br>4、XOR对双操作数按位逻辑“异或”<br>5、TEST根据两个操作数相“与”的结果来设置条件标志<br>6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0<br>7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0<br>8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出<br>9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0<br>10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf<br>11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf<br>12、RCL带循环左移，将CF作为操作数的一部分循环左移<br>13、RCR带循环右移，将CF作为操作数的一部分循环右移</p>\n<h5 id=\"控制转移指令JMP\"><a href=\"#控制转移指令JMP\" class=\"headerlink\" title=\"控制转移指令JMP\"></a>控制转移指令JMP</h5><h5 id=\"条件转移指令\"><a href=\"#条件转移指令\" class=\"headerlink\" title=\"条件转移指令\"></a>条件转移指令</h5><h5 id=\"根据单个标志位的状态判断转移的指令\"><a href=\"#根据单个标志位的状态判断转移的指令\" class=\"headerlink\" title=\"根据单个标志位的状态判断转移的指令\"></a>根据单个标志位的状态判断转移的指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>转移条件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JC DEST</td>\n<td>CF=1</td>\n<td>有进位/借位</td>\n</tr>\n<tr>\n<td>JNC DEST</td>\n<td>CF=0</td>\n<td>无进位/借位</td>\n</tr>\n<tr>\n<td>JE/JZ DEST</td>\n<td>ZF=1</td>\n<td>相等/等于零</td>\n</tr>\n<tr>\n<td>JNE/JNZ DEST</td>\n<td>ZF=0</td>\n<td>不相等/不等于零</td>\n</tr>\n<tr>\n<td>JS DEST</td>\n<td>SF=1</td>\n<td>是负数</td>\n</tr>\n<tr>\n<td>JNS DEST</td>\n<td>SF=0</td>\n<td>是正数</td>\n</tr>\n<tr>\n<td>JO DEST</td>\n<td>OF=1</td>\n<td>有溢出</td>\n</tr>\n<tr>\n<td>JNO DEST</td>\n<td>OF=0</td>\n<td>无溢出</td>\n</tr>\n<tr>\n<td>JP/JPE DEST</td>\n<td>PF=1</td>\n<td>有偶数个“1”</td>\n</tr>\n<tr>\n<td>JNP/JPO DEST</td>\n<td>PF=0</td>\n<td>有奇数个“1”</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"根据两个无符号数的比较结果判断转移的指令\"><a href=\"#根据两个无符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个无符号数的比较结果判断转移的指令\"></a>根据两个无符号数的比较结果判断转移的指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>转移条件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JG/JNLE DEST</td>\n<td>SF=OF AND ZF=0</td>\n<td>有符号数A&gt;B</td>\n</tr>\n<tr>\n<td>JGE/JNL DEST</td>\n<td>SF=OF OR ZF=1</td>\n<td>有符号数A≥B</td>\n</tr>\n<tr>\n<td>JL/JNGE DEST</td>\n<td>SF≠OF AND ZF=0</td>\n<td>有符号数A&lt;B</td>\n</tr>\n<tr>\n<td>JLE/JNG DEST</td>\n<td>SF≠OF OR ZF=1</td>\n<td>有符号数A≤B</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"根据两个有符号数的比较结果判断转移的指令\"><a href=\"#根据两个有符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个有符号数的比较结果判断转移的指令\"></a>根据两个有符号数的比较结果判断转移的指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>转移条件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JG/JNLE DEST</td>\n<td>SF=OF AND ZF=0</td>\n<td>有符号数A&gt;B</td>\n</tr>\n<tr>\n<td>JGE/JNL DEST</td>\n<td>SF=OF OR ZF=1</td>\n<td>有符号数A≥B</td>\n</tr>\n<tr>\n<td>JL/JNGE DEST</td>\n<td>SF≠OF AND ZF=0</td>\n<td>有符号数A&lt;B</td>\n</tr>\n<tr>\n<td>JLE/JNG DEST</td>\n<td>SF≠OF OR ZF=1</td>\n<td>有符号数A≤B</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"IA-32的栈、栈帧及其结构\"><a href=\"#IA-32的栈、栈帧及其结构\" class=\"headerlink\" title=\"IA-32的栈、栈帧及其结构\"></a>IA-32的栈、栈帧及其结构</h3><p><img src=\"img/stackBP.jpg\" alt=\"static picture\"></p>\n<h5 id=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"><a href=\"#注：为保证其在内存中的整齐，一般的存在为16的倍数。\" class=\"headerlink\" title=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"></a>注：为保证其在内存中的整齐，一般的存在为16的倍数。</h5><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。</p>\n"},{"title":"计算机网络--物理层","date":"2018-01-17T13:53:49.000Z","_content":"* 物理层概念\n机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。\n电气特性：指明在接口电缆的各条线上出现的电压的范围。\n功能特性：指明某条线上出现的某一电平的电压表示何种意义。\n过程特性：指明对于不同功能的各种可能事件的出现顺序。\n\n* 物理层作用\n计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：\n\n* 构建数据通路\n“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。\n\n* 透明传输\n物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。\n\n* 要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。\n\n* 传输数据\n无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。\n\n* 数据编码\n要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。\n\n* 信道的极限容量\n任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);\n\n* 数据传输管理\n“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。\n![computer_internet](img/computer_internet.png)\n#### 信道复用\n##### 频分复用（FDM）\n载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。\ne.g.——-广电HFC网络电视信号(FDM)\n```\nOFDM 正交频分复用\nOFDM系统比FDM系统要求的带宽要小得多,效率更高\ne.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统\n```\n#### 时分复用（TDM）\n在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。\n可能造成线路浪费，TDM信号又称的等时信号。\ne.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信\n#### 波分复用（WDM）\n光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。\n\n#### 码分复用（CDM）\n每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。","source":"_posts/computer-network-chapter2.md","raw":"---\ntitle: 计算机网络--物理层\ndate: 2018-01-17 21:53:49\ntags: 计算机网络\n---\n* 物理层概念\n机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。\n电气特性：指明在接口电缆的各条线上出现的电压的范围。\n功能特性：指明某条线上出现的某一电平的电压表示何种意义。\n过程特性：指明对于不同功能的各种可能事件的出现顺序。\n\n* 物理层作用\n计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：\n\n* 构建数据通路\n“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。\n\n* 透明传输\n物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。\n\n* 要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。\n\n* 传输数据\n无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。\n\n* 数据编码\n要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。\n\n* 信道的极限容量\n任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);\n\n* 数据传输管理\n“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。\n![computer_internet](img/computer_internet.png)\n#### 信道复用\n##### 频分复用（FDM）\n载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。\ne.g.——-广电HFC网络电视信号(FDM)\n```\nOFDM 正交频分复用\nOFDM系统比FDM系统要求的带宽要小得多,效率更高\ne.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统\n```\n#### 时分复用（TDM）\n在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。\n可能造成线路浪费，TDM信号又称的等时信号。\ne.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信\n#### 波分复用（WDM）\n光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。\n\n#### 码分复用（CDM）\n每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。","slug":"computer-network-chapter2","published":1,"updated":"2018-05-01T13:59:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6r70005aefapqbkoelc","content":"<ul>\n<li><p>物理层概念<br>机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。<br>电气特性：指明在接口电缆的各条线上出现的电压的范围。<br>功能特性：指明某条线上出现的某一电平的电压表示何种意义。<br>过程特性：指明对于不同功能的各种可能事件的出现顺序。</p>\n</li>\n<li><p>物理层作用<br>计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：</p>\n</li>\n<li><p>构建数据通路<br>“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。</p>\n</li>\n<li><p>透明传输<br>物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。</p>\n</li>\n<li><p>要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。</p>\n</li>\n<li><p>传输数据<br>无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。</p>\n</li>\n<li><p>数据编码<br>要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。</p>\n</li>\n<li><p>信道的极限容量<br>任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);</p>\n</li>\n<li><p>数据传输管理<br>“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。<br><img src=\"img/computer_internet.png\" alt=\"computer_internet\"></p>\n<h4 id=\"信道复用\"><a href=\"#信道复用\" class=\"headerlink\" title=\"信道复用\"></a>信道复用</h4><h5 id=\"频分复用（FDM）\"><a href=\"#频分复用（FDM）\" class=\"headerlink\" title=\"频分复用（FDM）\"></a>频分复用（FDM）</h5><p>载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。<br>e.g.——-广电HFC网络电视信号(FDM)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFDM 正交频分复用</span><br><span class=\"line\">OFDM系统比FDM系统要求的带宽要小得多,效率更高</span><br><span class=\"line\">e.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"时分复用（TDM）\"><a href=\"#时分复用（TDM）\" class=\"headerlink\" title=\"时分复用（TDM）\"></a>时分复用（TDM）</h4><p>在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。<br>可能造成线路浪费，TDM信号又称的等时信号。<br>e.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信</p>\n<h4 id=\"波分复用（WDM）\"><a href=\"#波分复用（WDM）\" class=\"headerlink\" title=\"波分复用（WDM）\"></a>波分复用（WDM）</h4><p>光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。</p>\n<h4 id=\"码分复用（CDM）\"><a href=\"#码分复用（CDM）\" class=\"headerlink\" title=\"码分复用（CDM）\"></a>码分复用（CDM）</h4><p>每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>物理层概念<br>机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。<br>电气特性：指明在接口电缆的各条线上出现的电压的范围。<br>功能特性：指明某条线上出现的某一电平的电压表示何种意义。<br>过程特性：指明对于不同功能的各种可能事件的出现顺序。</p>\n</li>\n<li><p>物理层作用<br>计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：</p>\n</li>\n<li><p>构建数据通路<br>“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。</p>\n</li>\n<li><p>透明传输<br>物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。</p>\n</li>\n<li><p>要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。</p>\n</li>\n<li><p>传输数据<br>无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。</p>\n</li>\n<li><p>数据编码<br>要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。</p>\n</li>\n<li><p>信道的极限容量<br>任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);</p>\n</li>\n<li><p>数据传输管理<br>“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。<br><img src=\"img/computer_internet.png\" alt=\"computer_internet\"></p>\n<h4 id=\"信道复用\"><a href=\"#信道复用\" class=\"headerlink\" title=\"信道复用\"></a>信道复用</h4><h5 id=\"频分复用（FDM）\"><a href=\"#频分复用（FDM）\" class=\"headerlink\" title=\"频分复用（FDM）\"></a>频分复用（FDM）</h5><p>载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。<br>e.g.——-广电HFC网络电视信号(FDM)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFDM 正交频分复用</span><br><span class=\"line\">OFDM系统比FDM系统要求的带宽要小得多,效率更高</span><br><span class=\"line\">e.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"时分复用（TDM）\"><a href=\"#时分复用（TDM）\" class=\"headerlink\" title=\"时分复用（TDM）\"></a>时分复用（TDM）</h4><p>在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。<br>可能造成线路浪费，TDM信号又称的等时信号。<br>e.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信</p>\n<h4 id=\"波分复用（WDM）\"><a href=\"#波分复用（WDM）\" class=\"headerlink\" title=\"波分复用（WDM）\"></a>波分复用（WDM）</h4><p>光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。</p>\n<h4 id=\"码分复用（CDM）\"><a href=\"#码分复用（CDM）\" class=\"headerlink\" title=\"码分复用（CDM）\"></a>码分复用（CDM）</h4><p>每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。</p>\n"},{"title":"计算机系统基础－－第五章(程序的执行)","date":"2017-05-25T00:37:05.000Z","_content":"按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者\n#### 程序执行的概述\n指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。\n执行程序顺序:\n```\n1、取指令：从pc所支出的存储单元取出指令送到指令寄存器\n2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中\n3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次\n4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算\n5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器\n6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令\n```\n#### 基本操作：\n```\n1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。\n2、把一个数据从某个寄存器存储到给定存储单元。\n3、把一个数据从某个寄存器传送到另一个寄存器或ALU。\n4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。\n```\n#### cup的基本功能和组成\n由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成\n#### 打断程序正常执行的事件\n1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。\n2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。\n#### 数据通路基本逻辑和工作原理\n操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)\n状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。\n数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。\n工作原理：\n![simpleBus](img/simpleBus.jpg)\n数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。\n**1、完成算术或逻辑运算**\n```\n其完成R[R3]<-R[R1]+R[R2]操作如下：\n1、R1(out),Y(in)\n2、R2(out),add,Z(in)\n3、Z(out),R3(in)\n```\n**2、从内存读取一个字(指令或数据或数据的地址)**\n```\n其完成R[R2]<-M[R[R1]]操作如下：\n1、R1(out),MAR(in)\n2、read,WMFC(使cpu进行等待)\n3、MAR(out),R2(in)\n```\n**3、把一个字(数据)写入内存**\n```\n其完成M[R[R2]]<-R[R1]操作如下：\n1、R1(out),MDR(in)\n2、R2(out),MAR(in)\n3、write,WMFC\n```\n#### 流水线方式下命令的执行\n想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：\n\n_在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。_\n在计算机中也是如此，设计原则是：\n**指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。**\n因此，比较适合流水线的指令集特征为：\n1、指令长度尽量一致。\n2、指令格式尽量规整，尽量保证源寄存器的位置相同\n3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)\n4、数据和指令要在寄存器中“对齐存放”\n#### 流水线方式下出现问题\n1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。\n解决方案：\n(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用\n(2)、通过设置多个独立的部件来避免资源的冲突\n\n2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。\n解决方案：\n(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生\n(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端\n(3)、通过硬件阻塞(插入气泡)来延迟load命令执行\n(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。\n\n3、控制冒险:\n由于中断或转移指令的执行顺序，可能发生控制冒险。\n可通过插入气泡或插入空操作符解决。\n\n\n#### 小结：\n计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。\n","source":"_posts/basic-computer-sience-chapter5.md","raw":"---\ntitle: 计算机系统基础－－第五章(程序的执行)\ndate: 2017-05-25 08:37:05\ntags: 计算机系统基础\n---\n按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者\n#### 程序执行的概述\n指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。\n执行程序顺序:\n```\n1、取指令：从pc所支出的存储单元取出指令送到指令寄存器\n2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中\n3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次\n4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算\n5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器\n6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令\n```\n#### 基本操作：\n```\n1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。\n2、把一个数据从某个寄存器存储到给定存储单元。\n3、把一个数据从某个寄存器传送到另一个寄存器或ALU。\n4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。\n```\n#### cup的基本功能和组成\n由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成\n#### 打断程序正常执行的事件\n1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。\n2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。\n#### 数据通路基本逻辑和工作原理\n操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)\n状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。\n数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。\n工作原理：\n![simpleBus](img/simpleBus.jpg)\n数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。\n**1、完成算术或逻辑运算**\n```\n其完成R[R3]<-R[R1]+R[R2]操作如下：\n1、R1(out),Y(in)\n2、R2(out),add,Z(in)\n3、Z(out),R3(in)\n```\n**2、从内存读取一个字(指令或数据或数据的地址)**\n```\n其完成R[R2]<-M[R[R1]]操作如下：\n1、R1(out),MAR(in)\n2、read,WMFC(使cpu进行等待)\n3、MAR(out),R2(in)\n```\n**3、把一个字(数据)写入内存**\n```\n其完成M[R[R2]]<-R[R1]操作如下：\n1、R1(out),MDR(in)\n2、R2(out),MAR(in)\n3、write,WMFC\n```\n#### 流水线方式下命令的执行\n想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：\n\n_在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。_\n在计算机中也是如此，设计原则是：\n**指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。**\n因此，比较适合流水线的指令集特征为：\n1、指令长度尽量一致。\n2、指令格式尽量规整，尽量保证源寄存器的位置相同\n3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)\n4、数据和指令要在寄存器中“对齐存放”\n#### 流水线方式下出现问题\n1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。\n解决方案：\n(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用\n(2)、通过设置多个独立的部件来避免资源的冲突\n\n2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。\n解决方案：\n(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生\n(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端\n(3)、通过硬件阻塞(插入气泡)来延迟load命令执行\n(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。\n\n3、控制冒险:\n由于中断或转移指令的执行顺序，可能发生控制冒险。\n可通过插入气泡或插入空操作符解决。\n\n\n#### 小结：\n计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。\n","slug":"basic-computer-sience-chapter5","published":1,"updated":"2018-05-01T03:52:55.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6r90008aefay4df22ia","content":"<p>按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者</p>\n<h4 id=\"程序执行的概述\"><a href=\"#程序执行的概述\" class=\"headerlink\" title=\"程序执行的概述\"></a>程序执行的概述</h4><p>指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。<br>执行程序顺序:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、取指令：从pc所支出的存储单元取出指令送到指令寄存器</span><br><span class=\"line\">2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中</span><br><span class=\"line\">3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次</span><br><span class=\"line\">4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算</span><br><span class=\"line\">5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器</span><br><span class=\"line\">6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"基本操作：\"><a href=\"#基本操作：\" class=\"headerlink\" title=\"基本操作：\"></a>基本操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。</span><br><span class=\"line\">2、把一个数据从某个寄存器存储到给定存储单元。</span><br><span class=\"line\">3、把一个数据从某个寄存器传送到另一个寄存器或ALU。</span><br><span class=\"line\">4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。</span><br></pre></td></tr></table></figure>\n<h4 id=\"cup的基本功能和组成\"><a href=\"#cup的基本功能和组成\" class=\"headerlink\" title=\"cup的基本功能和组成\"></a>cup的基本功能和组成</h4><p>由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成</p>\n<h4 id=\"打断程序正常执行的事件\"><a href=\"#打断程序正常执行的事件\" class=\"headerlink\" title=\"打断程序正常执行的事件\"></a>打断程序正常执行的事件</h4><p>1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。<br>2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。</p>\n<h4 id=\"数据通路基本逻辑和工作原理\"><a href=\"#数据通路基本逻辑和工作原理\" class=\"headerlink\" title=\"数据通路基本逻辑和工作原理\"></a>数据通路基本逻辑和工作原理</h4><p>操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)<br>状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。<br>数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。<br>工作原理：<br><img src=\"img/simpleBus.jpg\" alt=\"simpleBus\"><br>数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。<br><strong>1、完成算术或逻辑运算</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R3]&lt;-R[R1]+R[R2]操作如下：</span><br><span class=\"line\">1、R1(out),Y(in)</span><br><span class=\"line\">2、R2(out),add,Z(in)</span><br><span class=\"line\">3、Z(out),R3(in)</span><br></pre></td></tr></table></figure></p>\n<p><strong>2、从内存读取一个字(指令或数据或数据的地址)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R2]&lt;-M[R[R1]]操作如下：</span><br><span class=\"line\">1、R1(out),MAR(in)</span><br><span class=\"line\">2、read,WMFC(使cpu进行等待)</span><br><span class=\"line\">3、MAR(out),R2(in)</span><br></pre></td></tr></table></figure></p>\n<p><strong>3、把一个字(数据)写入内存</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成M[R[R2]]&lt;-R[R1]操作如下：</span><br><span class=\"line\">1、R1(out),MDR(in)</span><br><span class=\"line\">2、R2(out),MAR(in)</span><br><span class=\"line\">3、write,WMFC</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"流水线方式下命令的执行\"><a href=\"#流水线方式下命令的执行\" class=\"headerlink\" title=\"流水线方式下命令的执行\"></a>流水线方式下命令的执行</h4><p>想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：</p>\n<p><em>在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。</em><br>在计算机中也是如此，设计原则是：<br><strong>指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。</strong><br>因此，比较适合流水线的指令集特征为：<br>1、指令长度尽量一致。<br>2、指令格式尽量规整，尽量保证源寄存器的位置相同<br>3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)<br>4、数据和指令要在寄存器中“对齐存放”</p>\n<h4 id=\"流水线方式下出现问题\"><a href=\"#流水线方式下出现问题\" class=\"headerlink\" title=\"流水线方式下出现问题\"></a>流水线方式下出现问题</h4><p>1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。<br>解决方案：<br>(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用<br>(2)、通过设置多个独立的部件来避免资源的冲突</p>\n<p>2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。<br>解决方案：<br>(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生<br>(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端<br>(3)、通过硬件阻塞(插入气泡)来延迟load命令执行<br>(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。</p>\n<p>3、控制冒险:<br>由于中断或转移指令的执行顺序，可能发生控制冒险。<br>可通过插入气泡或插入空操作符解决。</p>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者</p>\n<h4 id=\"程序执行的概述\"><a href=\"#程序执行的概述\" class=\"headerlink\" title=\"程序执行的概述\"></a>程序执行的概述</h4><p>指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。<br>执行程序顺序:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、取指令：从pc所支出的存储单元取出指令送到指令寄存器</span><br><span class=\"line\">2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中</span><br><span class=\"line\">3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次</span><br><span class=\"line\">4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算</span><br><span class=\"line\">5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器</span><br><span class=\"line\">6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"基本操作：\"><a href=\"#基本操作：\" class=\"headerlink\" title=\"基本操作：\"></a>基本操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。</span><br><span class=\"line\">2、把一个数据从某个寄存器存储到给定存储单元。</span><br><span class=\"line\">3、把一个数据从某个寄存器传送到另一个寄存器或ALU。</span><br><span class=\"line\">4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。</span><br></pre></td></tr></table></figure>\n<h4 id=\"cup的基本功能和组成\"><a href=\"#cup的基本功能和组成\" class=\"headerlink\" title=\"cup的基本功能和组成\"></a>cup的基本功能和组成</h4><p>由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成</p>\n<h4 id=\"打断程序正常执行的事件\"><a href=\"#打断程序正常执行的事件\" class=\"headerlink\" title=\"打断程序正常执行的事件\"></a>打断程序正常执行的事件</h4><p>1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。<br>2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。</p>\n<h4 id=\"数据通路基本逻辑和工作原理\"><a href=\"#数据通路基本逻辑和工作原理\" class=\"headerlink\" title=\"数据通路基本逻辑和工作原理\"></a>数据通路基本逻辑和工作原理</h4><p>操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)<br>状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。<br>数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。<br>工作原理：<br><img src=\"img/simpleBus.jpg\" alt=\"simpleBus\"><br>数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。<br><strong>1、完成算术或逻辑运算</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R3]&lt;-R[R1]+R[R2]操作如下：</span><br><span class=\"line\">1、R1(out),Y(in)</span><br><span class=\"line\">2、R2(out),add,Z(in)</span><br><span class=\"line\">3、Z(out),R3(in)</span><br></pre></td></tr></table></figure></p>\n<p><strong>2、从内存读取一个字(指令或数据或数据的地址)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R2]&lt;-M[R[R1]]操作如下：</span><br><span class=\"line\">1、R1(out),MAR(in)</span><br><span class=\"line\">2、read,WMFC(使cpu进行等待)</span><br><span class=\"line\">3、MAR(out),R2(in)</span><br></pre></td></tr></table></figure></p>\n<p><strong>3、把一个字(数据)写入内存</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成M[R[R2]]&lt;-R[R1]操作如下：</span><br><span class=\"line\">1、R1(out),MDR(in)</span><br><span class=\"line\">2、R2(out),MAR(in)</span><br><span class=\"line\">3、write,WMFC</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"流水线方式下命令的执行\"><a href=\"#流水线方式下命令的执行\" class=\"headerlink\" title=\"流水线方式下命令的执行\"></a>流水线方式下命令的执行</h4><p>想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：</p>\n<p><em>在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。</em><br>在计算机中也是如此，设计原则是：<br><strong>指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。</strong><br>因此，比较适合流水线的指令集特征为：<br>1、指令长度尽量一致。<br>2、指令格式尽量规整，尽量保证源寄存器的位置相同<br>3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)<br>4、数据和指令要在寄存器中“对齐存放”</p>\n<h4 id=\"流水线方式下出现问题\"><a href=\"#流水线方式下出现问题\" class=\"headerlink\" title=\"流水线方式下出现问题\"></a>流水线方式下出现问题</h4><p>1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。<br>解决方案：<br>(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用<br>(2)、通过设置多个独立的部件来避免资源的冲突</p>\n<p>2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。<br>解决方案：<br>(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生<br>(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端<br>(3)、通过硬件阻塞(插入气泡)来延迟load命令执行<br>(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。</p>\n<p>3、控制冒险:<br>由于中断或转移指令的执行顺序，可能发生控制冒险。<br>可通过插入气泡或插入空操作符解决。</p>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。</p>\n"},{"title":"家园校友会--家园人回家","date":"2017-10-30T13:04:18.000Z","_content":"#### 写在前面\n看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。\n\n#### 家园校友会的成立\n家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。\n\n#### 和学长的聊天\n##### 提问环节\n讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。\n\n#### 单对单的talking\n学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。\n\n#### 写在最后\n说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。","source":"_posts/meet-ncuhomer.md","raw":"---\ntitle: 家园校友会--家园人回家\ndate: 2017-10-30 21:04:18\ntags: ncuhome\n---\n#### 写在前面\n看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。\n\n#### 家园校友会的成立\n家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。\n\n#### 和学长的聊天\n##### 提问环节\n讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。\n\n#### 单对单的talking\n学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。\n\n#### 写在最后\n说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。","slug":"meet-ncuhomer","published":1,"updated":"2018-05-01T13:05:43.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rb0009aefal2k85nzl","content":"<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。</p>\n<h4 id=\"家园校友会的成立\"><a href=\"#家园校友会的成立\" class=\"headerlink\" title=\"家园校友会的成立\"></a>家园校友会的成立</h4><p>家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。</p>\n<h4 id=\"和学长的聊天\"><a href=\"#和学长的聊天\" class=\"headerlink\" title=\"和学长的聊天\"></a>和学长的聊天</h4><h5 id=\"提问环节\"><a href=\"#提问环节\" class=\"headerlink\" title=\"提问环节\"></a>提问环节</h5><p>讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。</p>\n<h4 id=\"单对单的talking\"><a href=\"#单对单的talking\" class=\"headerlink\" title=\"单对单的talking\"></a>单对单的talking</h4><p>学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。</p>\n<h4 id=\"家园校友会的成立\"><a href=\"#家园校友会的成立\" class=\"headerlink\" title=\"家园校友会的成立\"></a>家园校友会的成立</h4><p>家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。</p>\n<h4 id=\"和学长的聊天\"><a href=\"#和学长的聊天\" class=\"headerlink\" title=\"和学长的聊天\"></a>和学长的聊天</h4><h5 id=\"提问环节\"><a href=\"#提问环节\" class=\"headerlink\" title=\"提问环节\"></a>提问环节</h5><p>讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。</p>\n<h4 id=\"单对单的talking\"><a href=\"#单对单的talking\" class=\"headerlink\" title=\"单对单的talking\"></a>单对单的talking</h4><p>学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。</p>\n"},{"title":"计算机系统基础－－第四章(程序的链接)","date":"2017-05-24T00:26:05.000Z","_content":"#### 什么是程序的链接？\n_将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件_\n#### 程序链接的好处：\n1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)\n2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)\n##### 在链接先进行编译和汇编，在第三章聊过\n\n#### 可执行文件与.o文件的汇编差别在哪？\n由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下\n```\n// test.c\nint main(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n//使用objdump -d test.o反汇编出来的.o文件\n// test.o\nDisassembly of section .text:\n0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp       \n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq   \n//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址\n//使用objdump -d test反汇编出来的可执行文件\n//test\n00000000004004d6 <main>:\n  4004d6:\t55                   \tpush   %rbp\n  4004d7:\t48 89 e5             \tmov    %rsp,%rbp\n  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4004e6:\t01 d0                \tadd    %edx,%eax\n  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4004ee:\t5d                   \tpop    %rbp\n  4004ef:\tc3                   \tretq   \n// 由于我的机子是8g内存，因此开头以400...开头\n// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址\n```\n#### 目标文件格式\nELF格式\n每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。\n#### ELF头\n![elfImage](img/elfImage.jpg)\n夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：\n.text：已编译程序的机器代码。\n.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。\n.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。\n.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。\n.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。\n.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。\n.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。\n.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。\n旁注：为什么未初始化的数据称为.bss?\n用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。\n#### 符号表和符号解析\n##### 符号表的类型\n1、在模块m中定义冰杯其他模块引用的全局符号\n2、在其他模块定义并且被m引用的外部符号\n3、在模块m中定义并在m中引用的本地符号\n##### 使用readelf -s prog.o查看符号表\n```\nreadelf -s main.o\nSymbol table '.symtab' contains 11 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf\n     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap\nreadelf -s swap.o\nSymbol table '.symtab' contains 12 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1\n     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf\n    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap\n```\n_GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined_\n##### 符号解析\n##### 全局符号的强弱特性\n定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。\n例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。\n\n多重定义符号处理：\n**规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误\n规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准\n规则3：若有多个弱符号定义，则任选其中一个**\n##### 强弱符号链接错误解决方案：\n1、尽量避免使用全局符号\n2、把全局符号定义位static，这样就没有强弱之分\n3、尽量要给全局变量赋初值使其变成强符号\n4、外部全局变量尽量使用extern\n#### 重定位\n规则：\n函数调用采用相对重定位\n即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)\n全局变量采用绝对重定位\n即使用R_386_32把32位的地址值直接代替\n###### 重定位的工作\n1、节和定义符号的重定位\n2、引用符号的重定位\n#### 链接\n1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件\n优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行\n缺点：导致相同库文件多个备份\n2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接\n优点：减少库文件的多个备份\n缺点：缺少库文件无法运行\n\n\n####小结：\n至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。","source":"_posts/basic-computer-sience-chapter4.md","raw":"---\ntitle: 计算机系统基础－－第四章(程序的链接)\ndate: 2017-05-24 08:26:05\ntags: 计算机系统基础\n---\n#### 什么是程序的链接？\n_将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件_\n#### 程序链接的好处：\n1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)\n2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)\n##### 在链接先进行编译和汇编，在第三章聊过\n\n#### 可执行文件与.o文件的汇编差别在哪？\n由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下\n```\n// test.c\nint main(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n//使用objdump -d test.o反汇编出来的.o文件\n// test.o\nDisassembly of section .text:\n0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp       \n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq   \n//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址\n//使用objdump -d test反汇编出来的可执行文件\n//test\n00000000004004d6 <main>:\n  4004d6:\t55                   \tpush   %rbp\n  4004d7:\t48 89 e5             \tmov    %rsp,%rbp\n  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4004e6:\t01 d0                \tadd    %edx,%eax\n  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4004ee:\t5d                   \tpop    %rbp\n  4004ef:\tc3                   \tretq   \n// 由于我的机子是8g内存，因此开头以400...开头\n// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址\n```\n#### 目标文件格式\nELF格式\n每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。\n#### ELF头\n![elfImage](img/elfImage.jpg)\n夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：\n.text：已编译程序的机器代码。\n.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。\n.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。\n.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。\n.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。\n.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。\n.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。\n.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。\n旁注：为什么未初始化的数据称为.bss?\n用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。\n#### 符号表和符号解析\n##### 符号表的类型\n1、在模块m中定义冰杯其他模块引用的全局符号\n2、在其他模块定义并且被m引用的外部符号\n3、在模块m中定义并在m中引用的本地符号\n##### 使用readelf -s prog.o查看符号表\n```\nreadelf -s main.o\nSymbol table '.symtab' contains 11 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf\n     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap\nreadelf -s swap.o\nSymbol table '.symtab' contains 12 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1\n     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf\n    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap\n```\n_GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined_\n##### 符号解析\n##### 全局符号的强弱特性\n定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。\n例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。\n\n多重定义符号处理：\n**规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误\n规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准\n规则3：若有多个弱符号定义，则任选其中一个**\n##### 强弱符号链接错误解决方案：\n1、尽量避免使用全局符号\n2、把全局符号定义位static，这样就没有强弱之分\n3、尽量要给全局变量赋初值使其变成强符号\n4、外部全局变量尽量使用extern\n#### 重定位\n规则：\n函数调用采用相对重定位\n即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)\n全局变量采用绝对重定位\n即使用R_386_32把32位的地址值直接代替\n###### 重定位的工作\n1、节和定义符号的重定位\n2、引用符号的重定位\n#### 链接\n1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件\n优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行\n缺点：导致相同库文件多个备份\n2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接\n优点：减少库文件的多个备份\n缺点：缺少库文件无法运行\n\n\n####小结：\n至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。","slug":"basic-computer-sience-chapter4","published":1,"updated":"2018-05-01T03:52:24.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6re000caefarxlyqnor","content":"<h4 id=\"什么是程序的链接？\"><a href=\"#什么是程序的链接？\" class=\"headerlink\" title=\"什么是程序的链接？\"></a>什么是程序的链接？</h4><p><em>将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件</em></p>\n<h4 id=\"程序链接的好处：\"><a href=\"#程序链接的好处：\" class=\"headerlink\" title=\"程序链接的好处：\"></a>程序链接的好处：</h4><p>1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)<br>2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)</p>\n<h5 id=\"在链接先进行编译和汇编，在第三章聊过\"><a href=\"#在链接先进行编译和汇编，在第三章聊过\" class=\"headerlink\" title=\"在链接先进行编译和汇编，在第三章聊过\"></a>在链接先进行编译和汇编，在第三章聊过</h5><h4 id=\"可执行文件与-o文件的汇编差别在哪？\"><a href=\"#可执行文件与-o文件的汇编差别在哪？\" class=\"headerlink\" title=\"可执行文件与.o文件的汇编差别在哪？\"></a>可执行文件与.o文件的汇编差别在哪？</h4><p>由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int main(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用objdump -d test.o反汇编出来的.o文件</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\">0000000000000000 &lt;main&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp       </span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq   </span><br><span class=\"line\">//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址</span><br><span class=\"line\">//使用objdump -d test反汇编出来的可执行文件</span><br><span class=\"line\">//test</span><br><span class=\"line\">00000000004004d6 &lt;main&gt;:</span><br><span class=\"line\">  4004d6:\t55                   \tpush   %rbp</span><br><span class=\"line\">  4004d7:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  4004e6:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  4004ee:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  4004ef:\tc3                   \tretq   </span><br><span class=\"line\">// 由于我的机子是8g内存，因此开头以400...开头</span><br><span class=\"line\">// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"目标文件格式\"><a href=\"#目标文件格式\" class=\"headerlink\" title=\"目标文件格式\"></a>目标文件格式</h4><p>ELF格式<br>每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。</p>\n<h4 id=\"ELF头\"><a href=\"#ELF头\" class=\"headerlink\" title=\"ELF头\"></a>ELF头</h4><p><img src=\"img/elfImage.jpg\" alt=\"elfImage\"><br>夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：<br>.text：已编译程序的机器代码。<br>.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。<br>.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。<br>.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。<br>.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。<br>.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。<br>.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。<br>.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。<br>旁注：为什么未初始化的数据称为.bss?<br>用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。</p>\n<h4 id=\"符号表和符号解析\"><a href=\"#符号表和符号解析\" class=\"headerlink\" title=\"符号表和符号解析\"></a>符号表和符号解析</h4><h5 id=\"符号表的类型\"><a href=\"#符号表的类型\" class=\"headerlink\" title=\"符号表的类型\"></a>符号表的类型</h5><p>1、在模块m中定义冰杯其他模块引用的全局符号<br>2、在其他模块定义并且被m引用的外部符号<br>3、在模块m中定义并在m中引用的本地符号</p>\n<h5 id=\"使用readelf-s-prog-o查看符号表\"><a href=\"#使用readelf-s-prog-o查看符号表\" class=\"headerlink\" title=\"使用readelf -s prog.o查看符号表\"></a>使用readelf -s prog.o查看符号表</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readelf -s main.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 11 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf</span><br><span class=\"line\">     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap</span><br><span class=\"line\">readelf -s swap.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 12 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1</span><br><span class=\"line\">     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf</span><br><span class=\"line\">    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap</span><br></pre></td></tr></table></figure>\n<p><em>GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined</em></p>\n<h5 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h5><h5 id=\"全局符号的强弱特性\"><a href=\"#全局符号的强弱特性\" class=\"headerlink\" title=\"全局符号的强弱特性\"></a>全局符号的强弱特性</h5><p>定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。<br>例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。</p>\n<p>多重定义符号处理：<br><strong>规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误<br>规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准<br>规则3：若有多个弱符号定义，则任选其中一个</strong></p>\n<h5 id=\"强弱符号链接错误解决方案：\"><a href=\"#强弱符号链接错误解决方案：\" class=\"headerlink\" title=\"强弱符号链接错误解决方案：\"></a>强弱符号链接错误解决方案：</h5><p>1、尽量避免使用全局符号<br>2、把全局符号定义位static，这样就没有强弱之分<br>3、尽量要给全局变量赋初值使其变成强符号<br>4、外部全局变量尽量使用extern</p>\n<h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><p>规则：<br>函数调用采用相对重定位<br>即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)<br>全局变量采用绝对重定位<br>即使用R_386_32把32位的地址值直接代替</p>\n<h6 id=\"重定位的工作\"><a href=\"#重定位的工作\" class=\"headerlink\" title=\"重定位的工作\"></a>重定位的工作</h6><p>1、节和定义符号的重定位<br>2、引用符号的重定位</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件<br>优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行<br>缺点：导致相同库文件多个备份<br>2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接<br>优点：减少库文件的多个备份<br>缺点：缺少库文件无法运行</p>\n<p>####小结：<br>至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是程序的链接？\"><a href=\"#什么是程序的链接？\" class=\"headerlink\" title=\"什么是程序的链接？\"></a>什么是程序的链接？</h4><p><em>将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件</em></p>\n<h4 id=\"程序链接的好处：\"><a href=\"#程序链接的好处：\" class=\"headerlink\" title=\"程序链接的好处：\"></a>程序链接的好处：</h4><p>1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)<br>2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)</p>\n<h5 id=\"在链接先进行编译和汇编，在第三章聊过\"><a href=\"#在链接先进行编译和汇编，在第三章聊过\" class=\"headerlink\" title=\"在链接先进行编译和汇编，在第三章聊过\"></a>在链接先进行编译和汇编，在第三章聊过</h5><h4 id=\"可执行文件与-o文件的汇编差别在哪？\"><a href=\"#可执行文件与-o文件的汇编差别在哪？\" class=\"headerlink\" title=\"可执行文件与.o文件的汇编差别在哪？\"></a>可执行文件与.o文件的汇编差别在哪？</h4><p>由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int main(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用objdump -d test.o反汇编出来的.o文件</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\">0000000000000000 &lt;main&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp       </span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq   </span><br><span class=\"line\">//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址</span><br><span class=\"line\">//使用objdump -d test反汇编出来的可执行文件</span><br><span class=\"line\">//test</span><br><span class=\"line\">00000000004004d6 &lt;main&gt;:</span><br><span class=\"line\">  4004d6:\t55                   \tpush   %rbp</span><br><span class=\"line\">  4004d7:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  4004e6:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  4004ee:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  4004ef:\tc3                   \tretq   </span><br><span class=\"line\">// 由于我的机子是8g内存，因此开头以400...开头</span><br><span class=\"line\">// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"目标文件格式\"><a href=\"#目标文件格式\" class=\"headerlink\" title=\"目标文件格式\"></a>目标文件格式</h4><p>ELF格式<br>每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。</p>\n<h4 id=\"ELF头\"><a href=\"#ELF头\" class=\"headerlink\" title=\"ELF头\"></a>ELF头</h4><p><img src=\"img/elfImage.jpg\" alt=\"elfImage\"><br>夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：<br>.text：已编译程序的机器代码。<br>.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。<br>.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。<br>.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。<br>.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。<br>.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。<br>.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。<br>.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。<br>旁注：为什么未初始化的数据称为.bss?<br>用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。</p>\n<h4 id=\"符号表和符号解析\"><a href=\"#符号表和符号解析\" class=\"headerlink\" title=\"符号表和符号解析\"></a>符号表和符号解析</h4><h5 id=\"符号表的类型\"><a href=\"#符号表的类型\" class=\"headerlink\" title=\"符号表的类型\"></a>符号表的类型</h5><p>1、在模块m中定义冰杯其他模块引用的全局符号<br>2、在其他模块定义并且被m引用的外部符号<br>3、在模块m中定义并在m中引用的本地符号</p>\n<h5 id=\"使用readelf-s-prog-o查看符号表\"><a href=\"#使用readelf-s-prog-o查看符号表\" class=\"headerlink\" title=\"使用readelf -s prog.o查看符号表\"></a>使用readelf -s prog.o查看符号表</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readelf -s main.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 11 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf</span><br><span class=\"line\">     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap</span><br><span class=\"line\">readelf -s swap.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 12 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1</span><br><span class=\"line\">     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf</span><br><span class=\"line\">    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap</span><br></pre></td></tr></table></figure>\n<p><em>GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined</em></p>\n<h5 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h5><h5 id=\"全局符号的强弱特性\"><a href=\"#全局符号的强弱特性\" class=\"headerlink\" title=\"全局符号的强弱特性\"></a>全局符号的强弱特性</h5><p>定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。<br>例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。</p>\n<p>多重定义符号处理：<br><strong>规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误<br>规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准<br>规则3：若有多个弱符号定义，则任选其中一个</strong></p>\n<h5 id=\"强弱符号链接错误解决方案：\"><a href=\"#强弱符号链接错误解决方案：\" class=\"headerlink\" title=\"强弱符号链接错误解决方案：\"></a>强弱符号链接错误解决方案：</h5><p>1、尽量避免使用全局符号<br>2、把全局符号定义位static，这样就没有强弱之分<br>3、尽量要给全局变量赋初值使其变成强符号<br>4、外部全局变量尽量使用extern</p>\n<h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><p>规则：<br>函数调用采用相对重定位<br>即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)<br>全局变量采用绝对重定位<br>即使用R_386_32把32位的地址值直接代替</p>\n<h6 id=\"重定位的工作\"><a href=\"#重定位的工作\" class=\"headerlink\" title=\"重定位的工作\"></a>重定位的工作</h6><p>1、节和定义符号的重定位<br>2、引用符号的重定位</p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件<br>优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行<br>缺点：导致相同库文件多个备份<br>2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接<br>优点：减少库文件的多个备份<br>缺点：缺少库文件无法运行</p>\n<p>####小结：<br>至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。</p>\n"},{"title":"JavaScript高级程序设计重读---4章","date":"2017-07-11T03:54:31.000Z","_content":"### 变量、作用域、和内存问题\n#### 引用类型\nJavascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的\n```\nvar obj1 = new Object();\nvar obj2 = obj1;\nobj1.name = 'dechen'\nobj2.name   // dechen\n```\n对象是存在堆中，JavaScript只能引用堆中的Object。如图\n\n而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变\n##### 函数在对象的传递是按值传递\n```\nunction setName(obj){\n    obj.name = 'dechen'\n    obj = new Object();\n    obj.name = 'guo'\n}\nvar person = new Object();\nsetName(person)\nperson.name     // dechen\n```\n解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是dechen。在函数执行之后，obj立即被销毁。\n#### 检测类型\n利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof\nresult = variable instanceof constructor\n\n```\nperson instanceof Object    //true\npattern instanceof  RegExp  //true\n```\n#### 作用域\n通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。\n##### 延长作用域\n利用with，以及try-catch语句中可以延长作用域\n##### 没有块级作用域\n```\nif(true){\n    var color = 'blue'\n}\ncolor // blue\nfor(var i = 0;i<10;i++){\n    doSomething(i)\n}\ni // 10\n```\n从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的\n#### 垃圾收集\nJavaScript是具有自动手机垃圾的机制的\n##### 标记清除\n当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘\n##### 引用计数\n引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。\nBug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。\n#### 性能问题\nIE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题\nIE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值\n#### 内存管理\n位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。\n#### 小结 \n通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题","source":"_posts/read-javascript-again-chapter4.md","raw":"---\ntitle: JavaScript高级程序设计重读---4章\ndate: 2017-07-11 11:54:31\ntags: JavaScript\n---\n### 变量、作用域、和内存问题\n#### 引用类型\nJavascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的\n```\nvar obj1 = new Object();\nvar obj2 = obj1;\nobj1.name = 'dechen'\nobj2.name   // dechen\n```\n对象是存在堆中，JavaScript只能引用堆中的Object。如图\n\n而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变\n##### 函数在对象的传递是按值传递\n```\nunction setName(obj){\n    obj.name = 'dechen'\n    obj = new Object();\n    obj.name = 'guo'\n}\nvar person = new Object();\nsetName(person)\nperson.name     // dechen\n```\n解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是dechen。在函数执行之后，obj立即被销毁。\n#### 检测类型\n利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof\nresult = variable instanceof constructor\n\n```\nperson instanceof Object    //true\npattern instanceof  RegExp  //true\n```\n#### 作用域\n通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。\n##### 延长作用域\n利用with，以及try-catch语句中可以延长作用域\n##### 没有块级作用域\n```\nif(true){\n    var color = 'blue'\n}\ncolor // blue\nfor(var i = 0;i<10;i++){\n    doSomething(i)\n}\ni // 10\n```\n从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的\n#### 垃圾收集\nJavaScript是具有自动手机垃圾的机制的\n##### 标记清除\n当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘\n##### 引用计数\n引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。\nBug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。\n#### 性能问题\nIE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题\nIE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值\n#### 内存管理\n位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。\n#### 小结 \n通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题","slug":"read-javascript-again-chapter4","published":1,"updated":"2018-05-01T04:00:23.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rg000eaefa76vfe53t","content":"<h3 id=\"变量、作用域、和内存问题\"><a href=\"#变量、作用域、和内存问题\" class=\"headerlink\" title=\"变量、作用域、和内存问题\"></a>变量、作用域、和内存问题</h3><h4 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h4><p>Javascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 = new Object();</span><br><span class=\"line\">var obj2 = obj1;</span><br><span class=\"line\">obj1.name = &apos;dechen&apos;</span><br><span class=\"line\">obj2.name   // dechen</span><br></pre></td></tr></table></figure></p>\n<p>对象是存在堆中，JavaScript只能引用堆中的Object。如图</p>\n<p>而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变</p>\n<h5 id=\"函数在对象的传递是按值传递\"><a href=\"#函数在对象的传递是按值传递\" class=\"headerlink\" title=\"函数在对象的传递是按值传递\"></a>函数在对象的传递是按值传递</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unction setName(obj)&#123;</span><br><span class=\"line\">    obj.name = &apos;dechen&apos;</span><br><span class=\"line\">    obj = new Object();</span><br><span class=\"line\">    obj.name = &apos;guo&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Object();</span><br><span class=\"line\">setName(person)</span><br><span class=\"line\">person.name     // dechen</span><br></pre></td></tr></table></figure>\n<p>解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是dechen。在函数执行之后，obj立即被销毁。</p>\n<h4 id=\"检测类型\"><a href=\"#检测类型\" class=\"headerlink\" title=\"检测类型\"></a>检测类型</h4><p>利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof<br>result = variable instanceof constructor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person instanceof Object    //true</span><br><span class=\"line\">pattern instanceof  RegExp  //true</span><br></pre></td></tr></table></figure>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>\n<h5 id=\"延长作用域\"><a href=\"#延长作用域\" class=\"headerlink\" title=\"延长作用域\"></a>延长作用域</h5><p>利用with，以及try-catch语句中可以延长作用域</p>\n<h5 id=\"没有块级作用域\"><a href=\"#没有块级作用域\" class=\"headerlink\" title=\"没有块级作用域\"></a>没有块级作用域</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">    var color = &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color // blue</span><br><span class=\"line\">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class=\"line\">    doSomething(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i // 10</span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的</p>\n<h4 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h4><p>JavaScript是具有自动手机垃圾的机制的</p>\n<h5 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h5><p>当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘</p>\n<h5 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h5><p>引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。<br>Bug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。</p>\n<h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>IE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题<br>IE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值</p>\n<h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"变量、作用域、和内存问题\"><a href=\"#变量、作用域、和内存问题\" class=\"headerlink\" title=\"变量、作用域、和内存问题\"></a>变量、作用域、和内存问题</h3><h4 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h4><p>Javascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 = new Object();</span><br><span class=\"line\">var obj2 = obj1;</span><br><span class=\"line\">obj1.name = &apos;dechen&apos;</span><br><span class=\"line\">obj2.name   // dechen</span><br></pre></td></tr></table></figure></p>\n<p>对象是存在堆中，JavaScript只能引用堆中的Object。如图</p>\n<p>而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变</p>\n<h5 id=\"函数在对象的传递是按值传递\"><a href=\"#函数在对象的传递是按值传递\" class=\"headerlink\" title=\"函数在对象的传递是按值传递\"></a>函数在对象的传递是按值传递</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unction setName(obj)&#123;</span><br><span class=\"line\">    obj.name = &apos;dechen&apos;</span><br><span class=\"line\">    obj = new Object();</span><br><span class=\"line\">    obj.name = &apos;guo&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Object();</span><br><span class=\"line\">setName(person)</span><br><span class=\"line\">person.name     // dechen</span><br></pre></td></tr></table></figure>\n<p>解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是dechen。在函数执行之后，obj立即被销毁。</p>\n<h4 id=\"检测类型\"><a href=\"#检测类型\" class=\"headerlink\" title=\"检测类型\"></a>检测类型</h4><p>利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof<br>result = variable instanceof constructor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person instanceof Object    //true</span><br><span class=\"line\">pattern instanceof  RegExp  //true</span><br></pre></td></tr></table></figure>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>\n<h5 id=\"延长作用域\"><a href=\"#延长作用域\" class=\"headerlink\" title=\"延长作用域\"></a>延长作用域</h5><p>利用with，以及try-catch语句中可以延长作用域</p>\n<h5 id=\"没有块级作用域\"><a href=\"#没有块级作用域\" class=\"headerlink\" title=\"没有块级作用域\"></a>没有块级作用域</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">    var color = &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color // blue</span><br><span class=\"line\">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class=\"line\">    doSomething(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i // 10</span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的</p>\n<h4 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h4><p>JavaScript是具有自动手机垃圾的机制的</p>\n<h5 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h5><p>当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘</p>\n<h5 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h5><p>引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。<br>Bug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。</p>\n<h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>IE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题<br>IE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值</p>\n<h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题</p>\n"},{"title":"JavaScript高级程序设计重读---5章","date":"2017-07-12T04:01:33.000Z","_content":"### 引用类型\n#### Object类型\n1、JavaScript会将对象的属性自动转换成字符串\n```\nvar person = {\n    \"name\":'dechen',\n    \"age\": 29,\n    5:true\n}\n全等于\nvar person = {\n    \"name\":'dechen',\n    \"age\": 29,\n    \"5\": true\n}\n```\n_ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误_\n\n2、两种访问对象的方法。\n\n(1)在对象后面使用.来访问对象的属性\n(2)使用['']来访问对象的属性\n```\nvar person = {\n    \"name\":'dechen',\n    \"age\": 29\n}\nperson.name         // dechen\nperson['name']      // dechen\n```\n第二种方法有好处，在对象的属性有空格的时候，只能用第二种\n#### Array类型\n数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。\n```\nvar arr = ['a', 'b', 'c'];\nObject.keys(arr);// [\"0\", \"1\", \"2\"]\n```\nJavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。\n##### 数组的创建\nvar arrayObj = new Array();　//创建一个数组\nvar arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度\nvar arrayObj = new Array([element0[, element1[, ...[, elementN]]]]);　//创建一个数组并赋值\nvar arrayObj = []\n##### 数组的检测\nvalue instanceof Array  // true or false\nArray.isArray(value)    // true or false\n##### 转换方法\n调用Array.prototype.toString()方法，将Array转换成字符串\n##### 数组的几种操作方法\n\n| 方法 | 解释 |\n|---|---|\n|shift |获取数组的第一项并返回，减少数组的length值|\n|unshift |在数组前端添加任意个项并返回新数组的长度|\n|pop |从数组某位移除最后一项，减少数组的length值|\n|push |接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度|\n|reverse |不接受参数，将数组项的顺序翻转|\n|sort |调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组|\n|concat |创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组|\n|slice |接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项|\n|splice |(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等|\n|indexOf |从数组的开头位置(0)开始向后查找，没找到返回-1|\n|lastIndexOf |从数组的最后位置(length-1)开始向前查找，没找到返回-1|\n|every |对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true|\n|filiter |对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组|\n|forEach |对数组的每一项运行给定的函数，这个方法没有返回值|\n|map |对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组|\n|some |对数组中的每一项运行给定函数，任意一项返回true，则返回true|\n|reduce |从数组的第一项开始，逐个遍历到最后|\n|reduceRight |从数组的最后一项开始，逐个遍历到第一个|\n\n```\nvar color = ['red','green']\n// shift\nvar item1 = color.shift()\nitem1       // 'red'   color = ['green']   color.length = 1\n// unshift\nvar item2 = color.unshift('red','blue')\nitem2       // 3    color = ['red','blue','green']\n// pop \nvar item3 = color.pop()\nitem3       // green    color=['red','blue'] color.length = 2\n// push\nvar item4 = color.push('gray')\nitem4       // 3    color = ['red','blue','gray']   color.length = 3\n// reverse\ncolor.reverse() //color = ['gray','blue','red']\n// sort\nfunction compare(value1,value2){\n    if(value1 < value2){\n        return 1;\n    }else if(value1 > value2){\n        return -1\n    }else {\n        return 0\n    }\n}\ncolor.sort(compare)     //[\"red\", \"gray\", \"blue\"]\n// concat\nvar color2 = color.concat('red')\ncolor2      //[\"red\", \"gray\", \"blue\", \"red\"]\n// slice\nvar removed1 = color.slice(1)\nvar removed2 = color.slice(1,3)\nremoved1    // \"gray,blue,red\"\nremoved2    // \"gray,blue\"\n// splice\nvar removed3 = color.splice(0,1)    // 删除第一项\nremoved3    // 'red'\nvar removed4 = color.splice(1,0,'origin','pink')    // 从位置1插入两项\nremoved4    // 'red,origin,pink,gray,blue,red'\nvar removed5 = color.splice(1,1,'purple')           // 插入一项，删除一项\nremoved5    // 'red,purple,blue,red'\n// indexOf\nvar item10 = color.indexOf('blue')\nitem10      // 2\n// lastIndexOf\nvar item11 = color.indexOf('red')\nitem11      // 3\n// every\nvar item12 = color.every(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem12      // false\n// filiter \nvar item13 = color.filiter(function(item,index,array)){\n    return (item == 'red')\n}\nitem13      // red,red\n// forEach \ncolor.forEach(function(item,index,array)){\n    //执行某些操作\n}\n// map\nvar item15 = color.map(function(item,index,array)){\n    return ('color is ' +item)\n}\nitem15      // [\"color is red\", \"color is gray\", \"color is blue\", \"color is red\"]\n// some\nvar item16 = color.some(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem16      // true\n// reduce()\nvar item17 = color.reduce(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem17      // \"red + gray + blue + red\"\nvar item18 = color.reduceRight(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem18      // \"red + blue + gray + red\"\n\n```\n#### Date类型\n从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年\n##### toString,toLocaleString\n```\nvar date = new Date()\ndate\nWed Jul 12 2017 15:39:22 GMT+0800 (CST)\ndate.toLocaleString()\n\"7/12/2017, 3:39:22 PM\"\ndate.toString()\n\"Wed Jul 12 2017 15:39:22 GMT+0800 (CST)\"\n\n```\n如果是toString()，会直接返回标准的格式；\n如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。\n##### 日期格式的方法\n| 方法 | 解释 |\n|---|---|\n|toDateString |特定显示的格式显示星期几，月，日，年|\n|toTimeString |显示时，分，秒|\n|toLocalDateString |显示地区的星期几，月，日，年|\n|toLocalTimeString |显示地区的时，分，秒|\n|toUTCString |显示完整格式的UTC日期|\n|toLocaleString |区别如上|\n|toString |区别如上|\n\n```\nvar date = new Date()\ndate.toDateString()\n\"Wed Jul 12 2017\"\ndate.toTimeString()\n\"15:49:48 GMT+0800 (CST)\"\ndate.toLocaleDateString()\n\"7/12/2017\"\ndate.toLocaleTimeString()\n\"3:49:48 PM\"\ndate.toUTCString()\n\"Wed, 12 Jul 2017 07:49:48 GMT\"\n\n```\n\n#### RegExp类型\n##### 实例属性\n\n| 方法 | 解释 |\n|---|---|\n|global |布尔值，表示是否设置了g|\n|ignoreCase |布尔值，表示是否设置了i|\n|lastIndex |整数，表示开始搜索下一个匹配的字符标志，从0算起|\n|multiline |布尔值，表示是否设置了m标志|\n|sorce |正则表达式的字符串表示|\n##### 实例方法\nexec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null\ntest —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)\n```\nvar text = 'cat, bat, sat, fat'\nvar pattern = /.at/;\nvar matches = pattern.exec(text)    \nmatches[0]      //cat\nmatches.index   // 0\nvar text = \"456000-00-000123\"\nvar pattern = /\\d{3}-\\d{2}-\\d{2}/\npattern.test(text)      // true\n\n```\n#### Function类型\n每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。\n既然函数名是一个指针，所以JavaScript没有重载。\n**ps：访问函数指针时，应该不加圆括号**\n##### 函数表达式和函数声明\n由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别\n```\nsum1(10,11)     //21\nfunction sum1(num1,num2){\n    return num1+num2\n}\nsum2(10,12) //Uncaught TypeError: sum2 is not a function\nvar sum2 = function (num1,num2){\n    return num1+num2\n}\n```\n其他无明显差别\n##### callee caller\ncallee被调用者\ncaller调用者\nmdn不建议使用\n##### 函数的属性和方法\n```\nfunction F1(a,b){\n    //\n}\nfunction F2(){\n    //\n}\nF1.length // 2\nF2.length // 0\n```\n函数的length属性代表参数的个数\n##### call与apply\n```\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,num1,num2)\n}\ncallSum(10,10)  //20\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,arguments)\n}\ncallSum(10,10)  //20\n```\ncall和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来\n```\nwindow.color = 'red'\nvar o = {\n    color:'green'\n}\nfunction sayCOlor(){\n    console.log(this.color)\n}\nsayCOlor.call(this)     //red\nsayCOlor.call(window)   //red\nsayCOlor.call(o)        //green\n```\ncall,apply的最大好处是让其扩充作用域，且实现松耦合\n\nbind是创建一个实例，其this值会被绑定到传给bind函数的值\n```\nwindow.color = 'red'\nvar o = {\n    color : 'blue'\n}\nfunction sayColor(){\n    console.log(this.color)\n}\nvar objectSayColor = sayColor.bind(o)\nobjectSayColor()    //blue\n```\n\n#### 基本包装类型\n##### Boolean类型\n```\nvar falseObject = new Boolean(false)\nvar result = falseObject  && true\nresult // true\nvar falseValue = false\nresult = falseValue && true\nresult // false\ntypeof falseObject  // object\ntypeof falseValue   // boolean\nfalseObject instanceof Boolean  //true\nfalseValue instanceof Boolean   //false\n\n```\n基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象\n##### Number类型\n```\nvar numberObject = new Number(10)\nnumberObject    // Number {[[PrimitiveValue]]: 10}\nnumberObject.toString() // \"10\"\nnumberObject.valueOf()  // 10\n```\nNumber类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值\n基本类型的几个方法\n\n1、toFixed // 有一个参数，代表保留几位小数\n2、toExponential // 指数表示法，表示制定输出结果中小数位数\n3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential\n4、toString // 接受一个参数，代表转换成几进制\n```\nvar num = 10\nnum.toString()  //10\nnum.toString(1)  //1010\nnum.toFixed(2)  //10.00\nnum.toExponential(1)  //1.0e+1\nvar nums = 99\nnum.toPrecision(1)  //1e+2\nnum.toPrecision(2)  // 99\nnum.toPrecision(3)  // 99.0\n\n```\n##### String类型\n1、字符方法\ncharAt —以单个字符串的形式返回给定位置的字符\ncharCodeAt —以单个字符串的形式返回给定位置的字符编码\n```\nvar stringValue = 'hello world'\nstringValue.charAt(1)       // e\nstringValue.charCodeAt(1)   // 101\n```\n2、字符串方法\nslice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取\nsubstr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始\nsubstring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取\n3、字符串位置\nindexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后\nlastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前\n4、trim\n将字符串前后空格去除\n5、大小写转换方法\ntoLowerCase //转换为小写\ntoUpperCase //转换为大写\ntoLocaleLowerCase\ntoLocaleUpperCase\n6、replace\n采用两个参数，第一个是匹配的正则表达式，第二个是替换内容\n7、localeCompare方法\n比较两个字符串，返回1,0，-1\n8、fromCharCode方法\n接受多个参数，将ASCII码转换成对应的字符\n##### 单体内置对象\n1、Global对象\nURI编码方法\n(1)encodeURI，将空格转换成%20\n(2)encodeURIComponent,将所有非字符转换成对应编码\n(3)decodeURI，将encodeURI转换的uri反编码\n(4)decodeURIComponent，将encodeURIComponent转换的uri反编码\n2、eval方法\n只接受一个参数，将字符串解析成JavaScript代码\n```\neval('console.log(123)')  // 123\n\n```\n#### 小结\n通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。","source":"_posts/read-javascript-again-chapter5.md","raw":"---\ntitle: JavaScript高级程序设计重读---5章\ndate: 2017-07-12 12:01:33\ntags: JavaScript\n---\n### 引用类型\n#### Object类型\n1、JavaScript会将对象的属性自动转换成字符串\n```\nvar person = {\n    \"name\":'dechen',\n    \"age\": 29,\n    5:true\n}\n全等于\nvar person = {\n    \"name\":'dechen',\n    \"age\": 29,\n    \"5\": true\n}\n```\n_ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误_\n\n2、两种访问对象的方法。\n\n(1)在对象后面使用.来访问对象的属性\n(2)使用['']来访问对象的属性\n```\nvar person = {\n    \"name\":'dechen',\n    \"age\": 29\n}\nperson.name         // dechen\nperson['name']      // dechen\n```\n第二种方法有好处，在对象的属性有空格的时候，只能用第二种\n#### Array类型\n数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。\n```\nvar arr = ['a', 'b', 'c'];\nObject.keys(arr);// [\"0\", \"1\", \"2\"]\n```\nJavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。\n##### 数组的创建\nvar arrayObj = new Array();　//创建一个数组\nvar arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度\nvar arrayObj = new Array([element0[, element1[, ...[, elementN]]]]);　//创建一个数组并赋值\nvar arrayObj = []\n##### 数组的检测\nvalue instanceof Array  // true or false\nArray.isArray(value)    // true or false\n##### 转换方法\n调用Array.prototype.toString()方法，将Array转换成字符串\n##### 数组的几种操作方法\n\n| 方法 | 解释 |\n|---|---|\n|shift |获取数组的第一项并返回，减少数组的length值|\n|unshift |在数组前端添加任意个项并返回新数组的长度|\n|pop |从数组某位移除最后一项，减少数组的length值|\n|push |接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度|\n|reverse |不接受参数，将数组项的顺序翻转|\n|sort |调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组|\n|concat |创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组|\n|slice |接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项|\n|splice |(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等|\n|indexOf |从数组的开头位置(0)开始向后查找，没找到返回-1|\n|lastIndexOf |从数组的最后位置(length-1)开始向前查找，没找到返回-1|\n|every |对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true|\n|filiter |对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组|\n|forEach |对数组的每一项运行给定的函数，这个方法没有返回值|\n|map |对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组|\n|some |对数组中的每一项运行给定函数，任意一项返回true，则返回true|\n|reduce |从数组的第一项开始，逐个遍历到最后|\n|reduceRight |从数组的最后一项开始，逐个遍历到第一个|\n\n```\nvar color = ['red','green']\n// shift\nvar item1 = color.shift()\nitem1       // 'red'   color = ['green']   color.length = 1\n// unshift\nvar item2 = color.unshift('red','blue')\nitem2       // 3    color = ['red','blue','green']\n// pop \nvar item3 = color.pop()\nitem3       // green    color=['red','blue'] color.length = 2\n// push\nvar item4 = color.push('gray')\nitem4       // 3    color = ['red','blue','gray']   color.length = 3\n// reverse\ncolor.reverse() //color = ['gray','blue','red']\n// sort\nfunction compare(value1,value2){\n    if(value1 < value2){\n        return 1;\n    }else if(value1 > value2){\n        return -1\n    }else {\n        return 0\n    }\n}\ncolor.sort(compare)     //[\"red\", \"gray\", \"blue\"]\n// concat\nvar color2 = color.concat('red')\ncolor2      //[\"red\", \"gray\", \"blue\", \"red\"]\n// slice\nvar removed1 = color.slice(1)\nvar removed2 = color.slice(1,3)\nremoved1    // \"gray,blue,red\"\nremoved2    // \"gray,blue\"\n// splice\nvar removed3 = color.splice(0,1)    // 删除第一项\nremoved3    // 'red'\nvar removed4 = color.splice(1,0,'origin','pink')    // 从位置1插入两项\nremoved4    // 'red,origin,pink,gray,blue,red'\nvar removed5 = color.splice(1,1,'purple')           // 插入一项，删除一项\nremoved5    // 'red,purple,blue,red'\n// indexOf\nvar item10 = color.indexOf('blue')\nitem10      // 2\n// lastIndexOf\nvar item11 = color.indexOf('red')\nitem11      // 3\n// every\nvar item12 = color.every(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem12      // false\n// filiter \nvar item13 = color.filiter(function(item,index,array)){\n    return (item == 'red')\n}\nitem13      // red,red\n// forEach \ncolor.forEach(function(item,index,array)){\n    //执行某些操作\n}\n// map\nvar item15 = color.map(function(item,index,array)){\n    return ('color is ' +item)\n}\nitem15      // [\"color is red\", \"color is gray\", \"color is blue\", \"color is red\"]\n// some\nvar item16 = color.some(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem16      // true\n// reduce()\nvar item17 = color.reduce(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem17      // \"red + gray + blue + red\"\nvar item18 = color.reduceRight(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem18      // \"red + blue + gray + red\"\n\n```\n#### Date类型\n从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年\n##### toString,toLocaleString\n```\nvar date = new Date()\ndate\nWed Jul 12 2017 15:39:22 GMT+0800 (CST)\ndate.toLocaleString()\n\"7/12/2017, 3:39:22 PM\"\ndate.toString()\n\"Wed Jul 12 2017 15:39:22 GMT+0800 (CST)\"\n\n```\n如果是toString()，会直接返回标准的格式；\n如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。\n##### 日期格式的方法\n| 方法 | 解释 |\n|---|---|\n|toDateString |特定显示的格式显示星期几，月，日，年|\n|toTimeString |显示时，分，秒|\n|toLocalDateString |显示地区的星期几，月，日，年|\n|toLocalTimeString |显示地区的时，分，秒|\n|toUTCString |显示完整格式的UTC日期|\n|toLocaleString |区别如上|\n|toString |区别如上|\n\n```\nvar date = new Date()\ndate.toDateString()\n\"Wed Jul 12 2017\"\ndate.toTimeString()\n\"15:49:48 GMT+0800 (CST)\"\ndate.toLocaleDateString()\n\"7/12/2017\"\ndate.toLocaleTimeString()\n\"3:49:48 PM\"\ndate.toUTCString()\n\"Wed, 12 Jul 2017 07:49:48 GMT\"\n\n```\n\n#### RegExp类型\n##### 实例属性\n\n| 方法 | 解释 |\n|---|---|\n|global |布尔值，表示是否设置了g|\n|ignoreCase |布尔值，表示是否设置了i|\n|lastIndex |整数，表示开始搜索下一个匹配的字符标志，从0算起|\n|multiline |布尔值，表示是否设置了m标志|\n|sorce |正则表达式的字符串表示|\n##### 实例方法\nexec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null\ntest —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)\n```\nvar text = 'cat, bat, sat, fat'\nvar pattern = /.at/;\nvar matches = pattern.exec(text)    \nmatches[0]      //cat\nmatches.index   // 0\nvar text = \"456000-00-000123\"\nvar pattern = /\\d{3}-\\d{2}-\\d{2}/\npattern.test(text)      // true\n\n```\n#### Function类型\n每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。\n既然函数名是一个指针，所以JavaScript没有重载。\n**ps：访问函数指针时，应该不加圆括号**\n##### 函数表达式和函数声明\n由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别\n```\nsum1(10,11)     //21\nfunction sum1(num1,num2){\n    return num1+num2\n}\nsum2(10,12) //Uncaught TypeError: sum2 is not a function\nvar sum2 = function (num1,num2){\n    return num1+num2\n}\n```\n其他无明显差别\n##### callee caller\ncallee被调用者\ncaller调用者\nmdn不建议使用\n##### 函数的属性和方法\n```\nfunction F1(a,b){\n    //\n}\nfunction F2(){\n    //\n}\nF1.length // 2\nF2.length // 0\n```\n函数的length属性代表参数的个数\n##### call与apply\n```\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,num1,num2)\n}\ncallSum(10,10)  //20\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,arguments)\n}\ncallSum(10,10)  //20\n```\ncall和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来\n```\nwindow.color = 'red'\nvar o = {\n    color:'green'\n}\nfunction sayCOlor(){\n    console.log(this.color)\n}\nsayCOlor.call(this)     //red\nsayCOlor.call(window)   //red\nsayCOlor.call(o)        //green\n```\ncall,apply的最大好处是让其扩充作用域，且实现松耦合\n\nbind是创建一个实例，其this值会被绑定到传给bind函数的值\n```\nwindow.color = 'red'\nvar o = {\n    color : 'blue'\n}\nfunction sayColor(){\n    console.log(this.color)\n}\nvar objectSayColor = sayColor.bind(o)\nobjectSayColor()    //blue\n```\n\n#### 基本包装类型\n##### Boolean类型\n```\nvar falseObject = new Boolean(false)\nvar result = falseObject  && true\nresult // true\nvar falseValue = false\nresult = falseValue && true\nresult // false\ntypeof falseObject  // object\ntypeof falseValue   // boolean\nfalseObject instanceof Boolean  //true\nfalseValue instanceof Boolean   //false\n\n```\n基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象\n##### Number类型\n```\nvar numberObject = new Number(10)\nnumberObject    // Number {[[PrimitiveValue]]: 10}\nnumberObject.toString() // \"10\"\nnumberObject.valueOf()  // 10\n```\nNumber类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值\n基本类型的几个方法\n\n1、toFixed // 有一个参数，代表保留几位小数\n2、toExponential // 指数表示法，表示制定输出结果中小数位数\n3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential\n4、toString // 接受一个参数，代表转换成几进制\n```\nvar num = 10\nnum.toString()  //10\nnum.toString(1)  //1010\nnum.toFixed(2)  //10.00\nnum.toExponential(1)  //1.0e+1\nvar nums = 99\nnum.toPrecision(1)  //1e+2\nnum.toPrecision(2)  // 99\nnum.toPrecision(3)  // 99.0\n\n```\n##### String类型\n1、字符方法\ncharAt —以单个字符串的形式返回给定位置的字符\ncharCodeAt —以单个字符串的形式返回给定位置的字符编码\n```\nvar stringValue = 'hello world'\nstringValue.charAt(1)       // e\nstringValue.charCodeAt(1)   // 101\n```\n2、字符串方法\nslice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取\nsubstr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始\nsubstring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取\n3、字符串位置\nindexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后\nlastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前\n4、trim\n将字符串前后空格去除\n5、大小写转换方法\ntoLowerCase //转换为小写\ntoUpperCase //转换为大写\ntoLocaleLowerCase\ntoLocaleUpperCase\n6、replace\n采用两个参数，第一个是匹配的正则表达式，第二个是替换内容\n7、localeCompare方法\n比较两个字符串，返回1,0，-1\n8、fromCharCode方法\n接受多个参数，将ASCII码转换成对应的字符\n##### 单体内置对象\n1、Global对象\nURI编码方法\n(1)encodeURI，将空格转换成%20\n(2)encodeURIComponent,将所有非字符转换成对应编码\n(3)decodeURI，将encodeURI转换的uri反编码\n(4)decodeURIComponent，将encodeURIComponent转换的uri反编码\n2、eval方法\n只接受一个参数，将字符串解析成JavaScript代码\n```\neval('console.log(123)')  // 123\n\n```\n#### 小结\n通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。","slug":"read-javascript-again-chapter5","published":1,"updated":"2018-05-01T04:43:11.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rj000haefavtls5r2x","content":"<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h4 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h4><p>1、JavaScript会将对象的属性自动转换成字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;dechen&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    5:true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">全等于</span><br><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;dechen&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    &quot;5&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误</em></p>\n<p>2、两种访问对象的方法。</p>\n<p>(1)在对象后面使用.来访问对象的属性<br>(2)使用[‘’]来访问对象的属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;dechen&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name         // dechen</span><br><span class=\"line\">person[&apos;name&apos;]      // dechen</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法有好处，在对象的属性有空格的时候，只能用第二种</p>\n<h4 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h4><p>数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">Object.keys(arr);// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。</p>\n<h5 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h5><p>var arrayObj = new Array();　//创建一个数组<br>var arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度<br>var arrayObj = new Array([element0[, element1[, …[, elementN]]]]);　//创建一个数组并赋值<br>var arrayObj = []</p>\n<h5 id=\"数组的检测\"><a href=\"#数组的检测\" class=\"headerlink\" title=\"数组的检测\"></a>数组的检测</h5><p>value instanceof Array  // true or false<br>Array.isArray(value)    // true or false</p>\n<h5 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h5><p>调用Array.prototype.toString()方法，将Array转换成字符串</p>\n<h5 id=\"数组的几种操作方法\"><a href=\"#数组的几种操作方法\" class=\"headerlink\" title=\"数组的几种操作方法\"></a>数组的几种操作方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shift</td>\n<td>获取数组的第一项并返回，减少数组的length值</td>\n</tr>\n<tr>\n<td>unshift</td>\n<td>在数组前端添加任意个项并返回新数组的长度</td>\n</tr>\n<tr>\n<td>pop</td>\n<td>从数组某位移除最后一项，减少数组的length值</td>\n</tr>\n<tr>\n<td>push</td>\n<td>接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>不接受参数，将数组项的顺序翻转</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组</td>\n</tr>\n<tr>\n<td>concat</td>\n<td>创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组</td>\n</tr>\n<tr>\n<td>slice</td>\n<td>接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项</td>\n</tr>\n<tr>\n<td>splice</td>\n<td>(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等</td>\n</tr>\n<tr>\n<td>indexOf</td>\n<td>从数组的开头位置(0)开始向后查找，没找到返回-1</td>\n</tr>\n<tr>\n<td>lastIndexOf</td>\n<td>从数组的最后位置(length-1)开始向前查找，没找到返回-1</td>\n</tr>\n<tr>\n<td>every</td>\n<td>对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true</td>\n</tr>\n<tr>\n<td>filiter</td>\n<td>对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组</td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>对数组的每一项运行给定的函数，这个方法没有返回值</td>\n</tr>\n<tr>\n<td>map</td>\n<td>对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组</td>\n</tr>\n<tr>\n<td>some</td>\n<td>对数组中的每一项运行给定函数，任意一项返回true，则返回true</td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>从数组的第一项开始，逐个遍历到最后</td>\n</tr>\n<tr>\n<td>reduceRight</td>\n<td>从数组的最后一项开始，逐个遍历到第一个</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var color = [&apos;red&apos;,&apos;green&apos;]</span><br><span class=\"line\">// shift</span><br><span class=\"line\">var item1 = color.shift()</span><br><span class=\"line\">item1       // &apos;red&apos;   color = [&apos;green&apos;]   color.length = 1</span><br><span class=\"line\">// unshift</span><br><span class=\"line\">var item2 = color.unshift(&apos;red&apos;,&apos;blue&apos;)</span><br><span class=\"line\">item2       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">// pop </span><br><span class=\"line\">var item3 = color.pop()</span><br><span class=\"line\">item3       // green    color=[&apos;red&apos;,&apos;blue&apos;] color.length = 2</span><br><span class=\"line\">// push</span><br><span class=\"line\">var item4 = color.push(&apos;gray&apos;)</span><br><span class=\"line\">item4       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;gray&apos;]   color.length = 3</span><br><span class=\"line\">// reverse</span><br><span class=\"line\">color.reverse() //color = [&apos;gray&apos;,&apos;blue&apos;,&apos;red&apos;]</span><br><span class=\"line\">// sort</span><br><span class=\"line\">function compare(value1,value2)&#123;</span><br><span class=\"line\">    if(value1 &lt; value2)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else if(value1 &gt; value2)&#123;</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color.sort(compare)     //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;]</span><br><span class=\"line\">// concat</span><br><span class=\"line\">var color2 = color.concat(&apos;red&apos;)</span><br><span class=\"line\">color2      //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;, &quot;red&quot;]</span><br><span class=\"line\">// slice</span><br><span class=\"line\">var removed1 = color.slice(1)</span><br><span class=\"line\">var removed2 = color.slice(1,3)</span><br><span class=\"line\">removed1    // &quot;gray,blue,red&quot;</span><br><span class=\"line\">removed2    // &quot;gray,blue&quot;</span><br><span class=\"line\">// splice</span><br><span class=\"line\">var removed3 = color.splice(0,1)    // 删除第一项</span><br><span class=\"line\">removed3    // &apos;red&apos;</span><br><span class=\"line\">var removed4 = color.splice(1,0,&apos;origin&apos;,&apos;pink&apos;)    // 从位置1插入两项</span><br><span class=\"line\">removed4    // &apos;red,origin,pink,gray,blue,red&apos;</span><br><span class=\"line\">var removed5 = color.splice(1,1,&apos;purple&apos;)           // 插入一项，删除一项</span><br><span class=\"line\">removed5    // &apos;red,purple,blue,red&apos;</span><br><span class=\"line\">// indexOf</span><br><span class=\"line\">var item10 = color.indexOf(&apos;blue&apos;)</span><br><span class=\"line\">item10      // 2</span><br><span class=\"line\">// lastIndexOf</span><br><span class=\"line\">var item11 = color.indexOf(&apos;red&apos;)</span><br><span class=\"line\">item11      // 3</span><br><span class=\"line\">// every</span><br><span class=\"line\">var item12 = color.every(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item12      // false</span><br><span class=\"line\">// filiter </span><br><span class=\"line\">var item13 = color.filiter(function(item,index,array))&#123;</span><br><span class=\"line\">    return (item == &apos;red&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item13      // red,red</span><br><span class=\"line\">// forEach </span><br><span class=\"line\">color.forEach(function(item,index,array))&#123;</span><br><span class=\"line\">    //执行某些操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// map</span><br><span class=\"line\">var item15 = color.map(function(item,index,array))&#123;</span><br><span class=\"line\">    return (&apos;color is &apos; +item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item15      // [&quot;color is red&quot;, &quot;color is gray&quot;, &quot;color is blue&quot;, &quot;color is red&quot;]</span><br><span class=\"line\">// some</span><br><span class=\"line\">var item16 = color.some(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item16      // true</span><br><span class=\"line\">// reduce()</span><br><span class=\"line\">var item17 = color.reduce(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item17      // &quot;red + gray + blue + red&quot;</span><br><span class=\"line\">var item18 = color.reduceRight(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item18      // &quot;red + blue + gray + red&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h4><p>从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年</p>\n<h5 id=\"toString-toLocaleString\"><a href=\"#toString-toLocaleString\" class=\"headerlink\" title=\"toString,toLocaleString\"></a>toString,toLocaleString</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date</span><br><span class=\"line\">Wed Jul 12 2017 15:39:22 GMT+0800 (CST)</span><br><span class=\"line\">date.toLocaleString()</span><br><span class=\"line\">&quot;7/12/2017, 3:39:22 PM&quot;</span><br><span class=\"line\">date.toString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017 15:39:22 GMT+0800 (CST)&quot;</span><br></pre></td></tr></table></figure>\n<p>如果是toString()，会直接返回标准的格式；<br>如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。</p>\n<h5 id=\"日期格式的方法\"><a href=\"#日期格式的方法\" class=\"headerlink\" title=\"日期格式的方法\"></a>日期格式的方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toDateString</td>\n<td>特定显示的格式显示星期几，月，日，年</td>\n</tr>\n<tr>\n<td>toTimeString</td>\n<td>显示时，分，秒</td>\n</tr>\n<tr>\n<td>toLocalDateString</td>\n<td>显示地区的星期几，月，日，年</td>\n</tr>\n<tr>\n<td>toLocalTimeString</td>\n<td>显示地区的时，分，秒</td>\n</tr>\n<tr>\n<td>toUTCString</td>\n<td>显示完整格式的UTC日期</td>\n</tr>\n<tr>\n<td>toLocaleString</td>\n<td>区别如上</td>\n</tr>\n<tr>\n<td>toString</td>\n<td>区别如上</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date.toDateString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017&quot;</span><br><span class=\"line\">date.toTimeString()</span><br><span class=\"line\">&quot;15:49:48 GMT+0800 (CST)&quot;</span><br><span class=\"line\">date.toLocaleDateString()</span><br><span class=\"line\">&quot;7/12/2017&quot;</span><br><span class=\"line\">date.toLocaleTimeString()</span><br><span class=\"line\">&quot;3:49:48 PM&quot;</span><br><span class=\"line\">date.toUTCString()</span><br><span class=\"line\">&quot;Wed, 12 Jul 2017 07:49:48 GMT&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a>RegExp类型</h4><h5 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>global</td>\n<td>布尔值，表示是否设置了g</td>\n</tr>\n<tr>\n<td>ignoreCase</td>\n<td>布尔值，表示是否设置了i</td>\n</tr>\n<tr>\n<td>lastIndex</td>\n<td>整数，表示开始搜索下一个匹配的字符标志，从0算起</td>\n</tr>\n<tr>\n<td>multiline</td>\n<td>布尔值，表示是否设置了m标志</td>\n</tr>\n<tr>\n<td>sorce</td>\n<td>正则表达式的字符串表示</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h5><p>exec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null<br>test —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;cat, bat, sat, fat&apos;</span><br><span class=\"line\">var pattern = /.at/;</span><br><span class=\"line\">var matches = pattern.exec(text)    </span><br><span class=\"line\">matches[0]      //cat</span><br><span class=\"line\">matches.index   // 0</span><br><span class=\"line\">var text = &quot;456000-00-000123&quot;</span><br><span class=\"line\">var pattern = /\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;/</span><br><span class=\"line\">pattern.test(text)      // true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h4><p>每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。<br>既然函数名是一个指针，所以JavaScript没有重载。<br><strong>ps：访问函数指针时，应该不加圆括号</strong></p>\n<h5 id=\"函数表达式和函数声明\"><a href=\"#函数表达式和函数声明\" class=\"headerlink\" title=\"函数表达式和函数声明\"></a>函数表达式和函数声明</h5><p>由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1(10,11)     //21</span><br><span class=\"line\">function sum1(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum2(10,12) //Uncaught TypeError: sum2 is not a function</span><br><span class=\"line\">var sum2 = function (num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其他无明显差别</p>\n<h5 id=\"callee-caller\"><a href=\"#callee-caller\" class=\"headerlink\" title=\"callee caller\"></a>callee caller</h5><p>callee被调用者<br>caller调用者<br>mdn不建议使用</p>\n<h5 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function F1(a,b)&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function F2()&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F1.length // 2</span><br><span class=\"line\">F2.length // 0</span><br></pre></td></tr></table></figure>\n<p>函数的length属性代表参数的个数</p>\n<h5 id=\"call与apply\"><a href=\"#call与apply\" class=\"headerlink\" title=\"call与apply\"></a>call与apply</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,num1,num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br></pre></td></tr></table></figure>\n<p>call和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color:&apos;green&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayCOlor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayCOlor.call(this)     //red</span><br><span class=\"line\">sayCOlor.call(window)   //red</span><br><span class=\"line\">sayCOlor.call(o)        //green</span><br></pre></td></tr></table></figure></p>\n<p>call,apply的最大好处是让其扩充作用域，且实现松耦合</p>\n<p>bind是创建一个实例，其this值会被绑定到传给bind函数的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color : &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayColor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var objectSayColor = sayColor.bind(o)</span><br><span class=\"line\">objectSayColor()    //blue</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h4><h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var falseObject = new Boolean(false)</span><br><span class=\"line\">var result = falseObject  &amp;&amp; true</span><br><span class=\"line\">result // true</span><br><span class=\"line\">var falseValue = false</span><br><span class=\"line\">result = falseValue &amp;&amp; true</span><br><span class=\"line\">result // false</span><br><span class=\"line\">typeof falseObject  // object</span><br><span class=\"line\">typeof falseValue   // boolean</span><br><span class=\"line\">falseObject instanceof Boolean  //true</span><br><span class=\"line\">falseValue instanceof Boolean   //false</span><br></pre></td></tr></table></figure>\n<p>基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象</p>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numberObject = new Number(10)</span><br><span class=\"line\">numberObject    // Number &#123;[[PrimitiveValue]]: 10&#125;</span><br><span class=\"line\">numberObject.toString() // &quot;10&quot;</span><br><span class=\"line\">numberObject.valueOf()  // 10</span><br></pre></td></tr></table></figure>\n<p>Number类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值<br>基本类型的几个方法</p>\n<p>1、toFixed // 有一个参数，代表保留几位小数<br>2、toExponential // 指数表示法，表示制定输出结果中小数位数<br>3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential<br>4、toString // 接受一个参数，代表转换成几进制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 10</span><br><span class=\"line\">num.toString()  //10</span><br><span class=\"line\">num.toString(1)  //1010</span><br><span class=\"line\">num.toFixed(2)  //10.00</span><br><span class=\"line\">num.toExponential(1)  //1.0e+1</span><br><span class=\"line\">var nums = 99</span><br><span class=\"line\">num.toPrecision(1)  //1e+2</span><br><span class=\"line\">num.toPrecision(2)  // 99</span><br><span class=\"line\">num.toPrecision(3)  // 99.0</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符方法<br>charAt —以单个字符串的形式返回给定位置的字符<br>charCodeAt —以单个字符串的形式返回给定位置的字符编码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var stringValue = &apos;hello world&apos;</span><br><span class=\"line\">stringValue.charAt(1)       // e</span><br><span class=\"line\">stringValue.charCodeAt(1)   // 101</span><br></pre></td></tr></table></figure></p>\n<p>2、字符串方法<br>slice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取<br>substr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始<br>substring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取<br>3、字符串位置<br>indexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后<br>lastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前<br>4、trim<br>将字符串前后空格去除<br>5、大小写转换方法<br>toLowerCase //转换为小写<br>toUpperCase //转换为大写<br>toLocaleLowerCase<br>toLocaleUpperCase<br>6、replace<br>采用两个参数，第一个是匹配的正则表达式，第二个是替换内容<br>7、localeCompare方法<br>比较两个字符串，返回1,0，-1<br>8、fromCharCode方法<br>接受多个参数，将ASCII码转换成对应的字符</p>\n<h5 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h5><p>1、Global对象<br>URI编码方法<br>(1)encodeURI，将空格转换成%20<br>(2)encodeURIComponent,将所有非字符转换成对应编码<br>(3)decodeURI，将encodeURI转换的uri反编码<br>(4)decodeURIComponent，将encodeURIComponent转换的uri反编码<br>2、eval方法<br>只接受一个参数，将字符串解析成JavaScript代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&apos;console.log(123)&apos;)  // 123</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h4 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h4><p>1、JavaScript会将对象的属性自动转换成字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;dechen&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    5:true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">全等于</span><br><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;dechen&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    &quot;5&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误</em></p>\n<p>2、两种访问对象的方法。</p>\n<p>(1)在对象后面使用.来访问对象的属性<br>(2)使用[‘’]来访问对象的属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;dechen&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name         // dechen</span><br><span class=\"line\">person[&apos;name&apos;]      // dechen</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法有好处，在对象的属性有空格的时候，只能用第二种</p>\n<h4 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h4><p>数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">Object.keys(arr);// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。</p>\n<h5 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h5><p>var arrayObj = new Array();　//创建一个数组<br>var arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度<br>var arrayObj = new Array([element0[, element1[, …[, elementN]]]]);　//创建一个数组并赋值<br>var arrayObj = []</p>\n<h5 id=\"数组的检测\"><a href=\"#数组的检测\" class=\"headerlink\" title=\"数组的检测\"></a>数组的检测</h5><p>value instanceof Array  // true or false<br>Array.isArray(value)    // true or false</p>\n<h5 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h5><p>调用Array.prototype.toString()方法，将Array转换成字符串</p>\n<h5 id=\"数组的几种操作方法\"><a href=\"#数组的几种操作方法\" class=\"headerlink\" title=\"数组的几种操作方法\"></a>数组的几种操作方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shift</td>\n<td>获取数组的第一项并返回，减少数组的length值</td>\n</tr>\n<tr>\n<td>unshift</td>\n<td>在数组前端添加任意个项并返回新数组的长度</td>\n</tr>\n<tr>\n<td>pop</td>\n<td>从数组某位移除最后一项，减少数组的length值</td>\n</tr>\n<tr>\n<td>push</td>\n<td>接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>不接受参数，将数组项的顺序翻转</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组</td>\n</tr>\n<tr>\n<td>concat</td>\n<td>创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组</td>\n</tr>\n<tr>\n<td>slice</td>\n<td>接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项</td>\n</tr>\n<tr>\n<td>splice</td>\n<td>(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等</td>\n</tr>\n<tr>\n<td>indexOf</td>\n<td>从数组的开头位置(0)开始向后查找，没找到返回-1</td>\n</tr>\n<tr>\n<td>lastIndexOf</td>\n<td>从数组的最后位置(length-1)开始向前查找，没找到返回-1</td>\n</tr>\n<tr>\n<td>every</td>\n<td>对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true</td>\n</tr>\n<tr>\n<td>filiter</td>\n<td>对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组</td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>对数组的每一项运行给定的函数，这个方法没有返回值</td>\n</tr>\n<tr>\n<td>map</td>\n<td>对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组</td>\n</tr>\n<tr>\n<td>some</td>\n<td>对数组中的每一项运行给定函数，任意一项返回true，则返回true</td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>从数组的第一项开始，逐个遍历到最后</td>\n</tr>\n<tr>\n<td>reduceRight</td>\n<td>从数组的最后一项开始，逐个遍历到第一个</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var color = [&apos;red&apos;,&apos;green&apos;]</span><br><span class=\"line\">// shift</span><br><span class=\"line\">var item1 = color.shift()</span><br><span class=\"line\">item1       // &apos;red&apos;   color = [&apos;green&apos;]   color.length = 1</span><br><span class=\"line\">// unshift</span><br><span class=\"line\">var item2 = color.unshift(&apos;red&apos;,&apos;blue&apos;)</span><br><span class=\"line\">item2       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">// pop </span><br><span class=\"line\">var item3 = color.pop()</span><br><span class=\"line\">item3       // green    color=[&apos;red&apos;,&apos;blue&apos;] color.length = 2</span><br><span class=\"line\">// push</span><br><span class=\"line\">var item4 = color.push(&apos;gray&apos;)</span><br><span class=\"line\">item4       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;gray&apos;]   color.length = 3</span><br><span class=\"line\">// reverse</span><br><span class=\"line\">color.reverse() //color = [&apos;gray&apos;,&apos;blue&apos;,&apos;red&apos;]</span><br><span class=\"line\">// sort</span><br><span class=\"line\">function compare(value1,value2)&#123;</span><br><span class=\"line\">    if(value1 &lt; value2)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else if(value1 &gt; value2)&#123;</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color.sort(compare)     //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;]</span><br><span class=\"line\">// concat</span><br><span class=\"line\">var color2 = color.concat(&apos;red&apos;)</span><br><span class=\"line\">color2      //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;, &quot;red&quot;]</span><br><span class=\"line\">// slice</span><br><span class=\"line\">var removed1 = color.slice(1)</span><br><span class=\"line\">var removed2 = color.slice(1,3)</span><br><span class=\"line\">removed1    // &quot;gray,blue,red&quot;</span><br><span class=\"line\">removed2    // &quot;gray,blue&quot;</span><br><span class=\"line\">// splice</span><br><span class=\"line\">var removed3 = color.splice(0,1)    // 删除第一项</span><br><span class=\"line\">removed3    // &apos;red&apos;</span><br><span class=\"line\">var removed4 = color.splice(1,0,&apos;origin&apos;,&apos;pink&apos;)    // 从位置1插入两项</span><br><span class=\"line\">removed4    // &apos;red,origin,pink,gray,blue,red&apos;</span><br><span class=\"line\">var removed5 = color.splice(1,1,&apos;purple&apos;)           // 插入一项，删除一项</span><br><span class=\"line\">removed5    // &apos;red,purple,blue,red&apos;</span><br><span class=\"line\">// indexOf</span><br><span class=\"line\">var item10 = color.indexOf(&apos;blue&apos;)</span><br><span class=\"line\">item10      // 2</span><br><span class=\"line\">// lastIndexOf</span><br><span class=\"line\">var item11 = color.indexOf(&apos;red&apos;)</span><br><span class=\"line\">item11      // 3</span><br><span class=\"line\">// every</span><br><span class=\"line\">var item12 = color.every(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item12      // false</span><br><span class=\"line\">// filiter </span><br><span class=\"line\">var item13 = color.filiter(function(item,index,array))&#123;</span><br><span class=\"line\">    return (item == &apos;red&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item13      // red,red</span><br><span class=\"line\">// forEach </span><br><span class=\"line\">color.forEach(function(item,index,array))&#123;</span><br><span class=\"line\">    //执行某些操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// map</span><br><span class=\"line\">var item15 = color.map(function(item,index,array))&#123;</span><br><span class=\"line\">    return (&apos;color is &apos; +item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item15      // [&quot;color is red&quot;, &quot;color is gray&quot;, &quot;color is blue&quot;, &quot;color is red&quot;]</span><br><span class=\"line\">// some</span><br><span class=\"line\">var item16 = color.some(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item16      // true</span><br><span class=\"line\">// reduce()</span><br><span class=\"line\">var item17 = color.reduce(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item17      // &quot;red + gray + blue + red&quot;</span><br><span class=\"line\">var item18 = color.reduceRight(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item18      // &quot;red + blue + gray + red&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h4><p>从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年</p>\n<h5 id=\"toString-toLocaleString\"><a href=\"#toString-toLocaleString\" class=\"headerlink\" title=\"toString,toLocaleString\"></a>toString,toLocaleString</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date</span><br><span class=\"line\">Wed Jul 12 2017 15:39:22 GMT+0800 (CST)</span><br><span class=\"line\">date.toLocaleString()</span><br><span class=\"line\">&quot;7/12/2017, 3:39:22 PM&quot;</span><br><span class=\"line\">date.toString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017 15:39:22 GMT+0800 (CST)&quot;</span><br></pre></td></tr></table></figure>\n<p>如果是toString()，会直接返回标准的格式；<br>如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。</p>\n<h5 id=\"日期格式的方法\"><a href=\"#日期格式的方法\" class=\"headerlink\" title=\"日期格式的方法\"></a>日期格式的方法</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toDateString</td>\n<td>特定显示的格式显示星期几，月，日，年</td>\n</tr>\n<tr>\n<td>toTimeString</td>\n<td>显示时，分，秒</td>\n</tr>\n<tr>\n<td>toLocalDateString</td>\n<td>显示地区的星期几，月，日，年</td>\n</tr>\n<tr>\n<td>toLocalTimeString</td>\n<td>显示地区的时，分，秒</td>\n</tr>\n<tr>\n<td>toUTCString</td>\n<td>显示完整格式的UTC日期</td>\n</tr>\n<tr>\n<td>toLocaleString</td>\n<td>区别如上</td>\n</tr>\n<tr>\n<td>toString</td>\n<td>区别如上</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date.toDateString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017&quot;</span><br><span class=\"line\">date.toTimeString()</span><br><span class=\"line\">&quot;15:49:48 GMT+0800 (CST)&quot;</span><br><span class=\"line\">date.toLocaleDateString()</span><br><span class=\"line\">&quot;7/12/2017&quot;</span><br><span class=\"line\">date.toLocaleTimeString()</span><br><span class=\"line\">&quot;3:49:48 PM&quot;</span><br><span class=\"line\">date.toUTCString()</span><br><span class=\"line\">&quot;Wed, 12 Jul 2017 07:49:48 GMT&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a>RegExp类型</h4><h5 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>global</td>\n<td>布尔值，表示是否设置了g</td>\n</tr>\n<tr>\n<td>ignoreCase</td>\n<td>布尔值，表示是否设置了i</td>\n</tr>\n<tr>\n<td>lastIndex</td>\n<td>整数，表示开始搜索下一个匹配的字符标志，从0算起</td>\n</tr>\n<tr>\n<td>multiline</td>\n<td>布尔值，表示是否设置了m标志</td>\n</tr>\n<tr>\n<td>sorce</td>\n<td>正则表达式的字符串表示</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h5><p>exec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null<br>test —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;cat, bat, sat, fat&apos;</span><br><span class=\"line\">var pattern = /.at/;</span><br><span class=\"line\">var matches = pattern.exec(text)    </span><br><span class=\"line\">matches[0]      //cat</span><br><span class=\"line\">matches.index   // 0</span><br><span class=\"line\">var text = &quot;456000-00-000123&quot;</span><br><span class=\"line\">var pattern = /\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;/</span><br><span class=\"line\">pattern.test(text)      // true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h4><p>每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。<br>既然函数名是一个指针，所以JavaScript没有重载。<br><strong>ps：访问函数指针时，应该不加圆括号</strong></p>\n<h5 id=\"函数表达式和函数声明\"><a href=\"#函数表达式和函数声明\" class=\"headerlink\" title=\"函数表达式和函数声明\"></a>函数表达式和函数声明</h5><p>由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1(10,11)     //21</span><br><span class=\"line\">function sum1(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum2(10,12) //Uncaught TypeError: sum2 is not a function</span><br><span class=\"line\">var sum2 = function (num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其他无明显差别</p>\n<h5 id=\"callee-caller\"><a href=\"#callee-caller\" class=\"headerlink\" title=\"callee caller\"></a>callee caller</h5><p>callee被调用者<br>caller调用者<br>mdn不建议使用</p>\n<h5 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function F1(a,b)&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function F2()&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F1.length // 2</span><br><span class=\"line\">F2.length // 0</span><br></pre></td></tr></table></figure>\n<p>函数的length属性代表参数的个数</p>\n<h5 id=\"call与apply\"><a href=\"#call与apply\" class=\"headerlink\" title=\"call与apply\"></a>call与apply</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,num1,num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br></pre></td></tr></table></figure>\n<p>call和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color:&apos;green&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayCOlor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayCOlor.call(this)     //red</span><br><span class=\"line\">sayCOlor.call(window)   //red</span><br><span class=\"line\">sayCOlor.call(o)        //green</span><br></pre></td></tr></table></figure></p>\n<p>call,apply的最大好处是让其扩充作用域，且实现松耦合</p>\n<p>bind是创建一个实例，其this值会被绑定到传给bind函数的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color : &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayColor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var objectSayColor = sayColor.bind(o)</span><br><span class=\"line\">objectSayColor()    //blue</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h4><h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var falseObject = new Boolean(false)</span><br><span class=\"line\">var result = falseObject  &amp;&amp; true</span><br><span class=\"line\">result // true</span><br><span class=\"line\">var falseValue = false</span><br><span class=\"line\">result = falseValue &amp;&amp; true</span><br><span class=\"line\">result // false</span><br><span class=\"line\">typeof falseObject  // object</span><br><span class=\"line\">typeof falseValue   // boolean</span><br><span class=\"line\">falseObject instanceof Boolean  //true</span><br><span class=\"line\">falseValue instanceof Boolean   //false</span><br></pre></td></tr></table></figure>\n<p>基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象</p>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numberObject = new Number(10)</span><br><span class=\"line\">numberObject    // Number &#123;[[PrimitiveValue]]: 10&#125;</span><br><span class=\"line\">numberObject.toString() // &quot;10&quot;</span><br><span class=\"line\">numberObject.valueOf()  // 10</span><br></pre></td></tr></table></figure>\n<p>Number类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值<br>基本类型的几个方法</p>\n<p>1、toFixed // 有一个参数，代表保留几位小数<br>2、toExponential // 指数表示法，表示制定输出结果中小数位数<br>3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential<br>4、toString // 接受一个参数，代表转换成几进制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 10</span><br><span class=\"line\">num.toString()  //10</span><br><span class=\"line\">num.toString(1)  //1010</span><br><span class=\"line\">num.toFixed(2)  //10.00</span><br><span class=\"line\">num.toExponential(1)  //1.0e+1</span><br><span class=\"line\">var nums = 99</span><br><span class=\"line\">num.toPrecision(1)  //1e+2</span><br><span class=\"line\">num.toPrecision(2)  // 99</span><br><span class=\"line\">num.toPrecision(3)  // 99.0</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符方法<br>charAt —以单个字符串的形式返回给定位置的字符<br>charCodeAt —以单个字符串的形式返回给定位置的字符编码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var stringValue = &apos;hello world&apos;</span><br><span class=\"line\">stringValue.charAt(1)       // e</span><br><span class=\"line\">stringValue.charCodeAt(1)   // 101</span><br></pre></td></tr></table></figure></p>\n<p>2、字符串方法<br>slice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取<br>substr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始<br>substring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取<br>3、字符串位置<br>indexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后<br>lastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前<br>4、trim<br>将字符串前后空格去除<br>5、大小写转换方法<br>toLowerCase //转换为小写<br>toUpperCase //转换为大写<br>toLocaleLowerCase<br>toLocaleUpperCase<br>6、replace<br>采用两个参数，第一个是匹配的正则表达式，第二个是替换内容<br>7、localeCompare方法<br>比较两个字符串，返回1,0，-1<br>8、fromCharCode方法<br>接受多个参数，将ASCII码转换成对应的字符</p>\n<h5 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h5><p>1、Global对象<br>URI编码方法<br>(1)encodeURI，将空格转换成%20<br>(2)encodeURIComponent,将所有非字符转换成对应编码<br>(3)decodeURI，将encodeURI转换的uri反编码<br>(4)decodeURIComponent，将encodeURIComponent转换的uri反编码<br>2、eval方法<br>只接受一个参数，将字符串解析成JavaScript代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&apos;console.log(123)&apos;)  // 123</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。</p>\n"},{"title":"JavaScript高级程序设计重读—1-3章","date":"2017-07-11T01:03:44.000Z","_content":"### 基本概念\n#### 关于script标签\n```\n<script src=\"/javascripts/application.js\" type=\"text/javascript\" charset=\"utf-8\" async defer></script>\n```\nscript标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。\n1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。\n```\n<script src=\"1.js\" async></script>\n<script src=\"2.js\" async></script>\n```\n其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。\n\n2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。\n3、type，在不谢的情况下默认值位‘text/javascript’\n4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。\nMIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。\n\n#### script标签位置\n由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成< /html>之后再执行js代码。\n\n_ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。_\n\n#### 标识符\n规则：\n1、第一个字符必须是字母、下划线，或美元符号\n2、其他字符可以使字母，下划线，美元符号或数字\n最佳采用驼峰式命名\n#### 变量\n未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即\n```\nvar a = 0,\n    b = 1,\n    c = 2\n```\n#### 数据类型\nJavaScript共有5种基本数据类型和1种复杂数据类型。分别是：\nUndefined，Null，Boolean，Number，String；Object\n##### TYPEOF操作\ntypeof操作只能返回下列字符串\nundefined – 值未定义\nboolean – 布尔值\nstring — 字符串\nnumber – 数值\nobject – 对象或null\nfunction – 函数\n##### Undefined类型\n显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined\n```\nvar message\n// var age   此变量未声明\ntypeof message // undefined\ntypeof age //undefined\n```\n_ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。_\n##### Null类型\nNull类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值\n##### Boolean类型\n| 数据类型 | 转换为true的值 | 转换位为false的值 |\n| --- | --- | --- |\n| Boolean | true | false |\n| String | 任何非空字符串 | “”空字符串 |\n| Number | 任何非零数值(包括无穷大) | 0和NaN |\n| Object | 任何对象 | null |\n| Undefined | 不存在的 | undefined |\n##### Number类型\n1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即\n```\nvar octalNum = 070 // 56\nvar hexNum1 = 0xA //10\n```\n在进行算术运算时其右会转化成10进制\n2、JavaScript中+0和-0是相等的\n3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)\n4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出\n5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。\n6、数值转换函数Number(),规则如下\n```\n(1)boolean,true转换成1，false转换成0\n(2)数值，简单传入和返回\n(3)null，返回0\n(4)undefined，返回NaN\n(5)字符串：   <1>转换为十进制数，并且将前面多余的0去除\n             <2>浮点数格式相同\n             <3>如果包含0x、0o，将其转换成10进制数\n             <4>空字符串转换为0\n             <5>其他格式外都转换成NaN\n(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串\n```\n7、parseInt()，parseFloat()函数\nparseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。\nparseInt可以接受第二个参数，代表转换成的基于格式。即\n```\nparseInt('10',2)  // 2\n```\n基于格式格式转化成相应十进制数\n##### String类型\n1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如\n```\nvar a = '\\t\\t\\t'\na.length // 3\n```\n而a打印出来是三个制表\n2、字符串的特点。\n```\nvar lang = 'Java'\nlang = lang + 'Script'\n```\n开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。\n3、字符串的转换\n利用toString方法来将数值转化成string，而其参数是转化成不同进制\n```\nvar num = 11\nnum.toString() // '11'\nvar nums = 10\nnums.toString(2) // '1010'\n```\n在不是null和undefined的情况下，还可以调用String()函数其转换规则如下\n1、如果值有toString方法，调用其不带参数的toString方法\n2、如果值是null，返回’null’\n3、如果是undefined，返回’undefined’\n##### Object类型\n可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法\n1、constructor 保存着创建当前对象的函数\n2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)\n3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型\n4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举\n5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应\n6、toString 返回对象的字符串表示\n7、valueOf 返回对象的字符串、数值或布尔值\n##### 位操作符\n1、按位非 (NOT) ~\n```\nvar num1 = 25   // 二进制00000000000000000000000000011001\nvar num2 = ~num1// 二进制11111111111111111111111111100110\nnum2            // ~26\n```\n2、按位与 (AND) &\n```\nvar result = 25 & 3\nresult  // 1\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0000 0001\n```\n3、按位或 (OR) |\n```\nvar result = 25 | 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1011\n```\n4、按位异或 (XOR) ^\n```\nvar result = 25 ^ 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1010\n```\n5、 操作符\n```\n25**2 = 625\n```\n**代表次方\n#### 语句\nlabel语句结合break，continue语句\n```\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               break outermost\n            }\n        }\n    }\nnum // 55\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               continue outermost\n            }\n        }\n    }\nnum // 95\n```\nlable结合break，continue语句可以控制跳出位置\n#### with语句\n将代码作用域设定到特定对象中。\n```\nvar qs = location.search.substring(1)\nvar hostName = location.hostname\nvar url = location.href\n//使用with语句后\nwith(location){\n    var qs = search.substring(1)\n    var hostName = hostname\n    var url = href\n}\n```\n\n#### 小结\n通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识","source":"_posts/read-javascript-again-chapter1-3.md","raw":"---\ntitle: JavaScript高级程序设计重读—1-3章\ndate: 2017-07-11 09:03:44\ntags: JavaScript\n---\n### 基本概念\n#### 关于script标签\n```\n<script src=\"/javascripts/application.js\" type=\"text/javascript\" charset=\"utf-8\" async defer></script>\n```\nscript标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。\n1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。\n```\n<script src=\"1.js\" async></script>\n<script src=\"2.js\" async></script>\n```\n其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。\n\n2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。\n3、type，在不谢的情况下默认值位‘text/javascript’\n4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。\nMIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。\n\n#### script标签位置\n由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成< /html>之后再执行js代码。\n\n_ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。_\n\n#### 标识符\n规则：\n1、第一个字符必须是字母、下划线，或美元符号\n2、其他字符可以使字母，下划线，美元符号或数字\n最佳采用驼峰式命名\n#### 变量\n未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即\n```\nvar a = 0,\n    b = 1,\n    c = 2\n```\n#### 数据类型\nJavaScript共有5种基本数据类型和1种复杂数据类型。分别是：\nUndefined，Null，Boolean，Number，String；Object\n##### TYPEOF操作\ntypeof操作只能返回下列字符串\nundefined – 值未定义\nboolean – 布尔值\nstring — 字符串\nnumber – 数值\nobject – 对象或null\nfunction – 函数\n##### Undefined类型\n显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined\n```\nvar message\n// var age   此变量未声明\ntypeof message // undefined\ntypeof age //undefined\n```\n_ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。_\n##### Null类型\nNull类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值\n##### Boolean类型\n| 数据类型 | 转换为true的值 | 转换位为false的值 |\n| --- | --- | --- |\n| Boolean | true | false |\n| String | 任何非空字符串 | “”空字符串 |\n| Number | 任何非零数值(包括无穷大) | 0和NaN |\n| Object | 任何对象 | null |\n| Undefined | 不存在的 | undefined |\n##### Number类型\n1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即\n```\nvar octalNum = 070 // 56\nvar hexNum1 = 0xA //10\n```\n在进行算术运算时其右会转化成10进制\n2、JavaScript中+0和-0是相等的\n3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)\n4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出\n5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。\n6、数值转换函数Number(),规则如下\n```\n(1)boolean,true转换成1，false转换成0\n(2)数值，简单传入和返回\n(3)null，返回0\n(4)undefined，返回NaN\n(5)字符串：   <1>转换为十进制数，并且将前面多余的0去除\n             <2>浮点数格式相同\n             <3>如果包含0x、0o，将其转换成10进制数\n             <4>空字符串转换为0\n             <5>其他格式外都转换成NaN\n(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串\n```\n7、parseInt()，parseFloat()函数\nparseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。\nparseInt可以接受第二个参数，代表转换成的基于格式。即\n```\nparseInt('10',2)  // 2\n```\n基于格式格式转化成相应十进制数\n##### String类型\n1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如\n```\nvar a = '\\t\\t\\t'\na.length // 3\n```\n而a打印出来是三个制表\n2、字符串的特点。\n```\nvar lang = 'Java'\nlang = lang + 'Script'\n```\n开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。\n3、字符串的转换\n利用toString方法来将数值转化成string，而其参数是转化成不同进制\n```\nvar num = 11\nnum.toString() // '11'\nvar nums = 10\nnums.toString(2) // '1010'\n```\n在不是null和undefined的情况下，还可以调用String()函数其转换规则如下\n1、如果值有toString方法，调用其不带参数的toString方法\n2、如果值是null，返回’null’\n3、如果是undefined，返回’undefined’\n##### Object类型\n可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法\n1、constructor 保存着创建当前对象的函数\n2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)\n3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型\n4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举\n5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应\n6、toString 返回对象的字符串表示\n7、valueOf 返回对象的字符串、数值或布尔值\n##### 位操作符\n1、按位非 (NOT) ~\n```\nvar num1 = 25   // 二进制00000000000000000000000000011001\nvar num2 = ~num1// 二进制11111111111111111111111111100110\nnum2            // ~26\n```\n2、按位与 (AND) &\n```\nvar result = 25 & 3\nresult  // 1\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0000 0001\n```\n3、按位或 (OR) |\n```\nvar result = 25 | 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1011\n```\n4、按位异或 (XOR) ^\n```\nvar result = 25 ^ 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1010\n```\n5、 操作符\n```\n25**2 = 625\n```\n**代表次方\n#### 语句\nlabel语句结合break，continue语句\n```\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               break outermost\n            }\n        }\n    }\nnum // 55\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               continue outermost\n            }\n        }\n    }\nnum // 95\n```\nlable结合break，continue语句可以控制跳出位置\n#### with语句\n将代码作用域设定到特定对象中。\n```\nvar qs = location.search.substring(1)\nvar hostName = location.hostname\nvar url = location.href\n//使用with语句后\nwith(location){\n    var qs = search.substring(1)\n    var hostName = hostname\n    var url = href\n}\n```\n\n#### 小结\n通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识","slug":"read-javascript-again-chapter1-3","published":1,"updated":"2018-05-01T03:55:16.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rl000jaefa5jpbzhfb","content":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"关于script标签\"><a href=\"#关于script标签\" class=\"headerlink\" title=\"关于script标签\"></a>关于script标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/javascripts/application.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; async defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>script标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。<br>1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;1.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;2.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。</p>\n<p>2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。<br>3、type，在不谢的情况下默认值位‘text/javascript’<br>4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。</p>\n<h4 id=\"script标签位置\"><a href=\"#script标签位置\" class=\"headerlink\" title=\"script标签位置\"></a>script标签位置</h4><p>由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成&lt; /html&gt;之后再执行js代码。</p>\n<p><em>ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。</em></p>\n<h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>规则：<br>1、第一个字符必须是字母、下划线，或美元符号<br>2、其他字符可以使字母，下划线，美元符号或数字<br>最佳采用驼峰式命名</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>JavaScript共有5种基本数据类型和1种复杂数据类型。分别是：<br>Undefined，Null，Boolean，Number，String；Object</p>\n<h5 id=\"TYPEOF操作\"><a href=\"#TYPEOF操作\" class=\"headerlink\" title=\"TYPEOF操作\"></a>TYPEOF操作</h5><p>typeof操作只能返回下列字符串<br>undefined – 值未定义<br>boolean – 布尔值<br>string — 字符串<br>number – 数值<br>object – 对象或null<br>function – 函数</p>\n<h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message</span><br><span class=\"line\">// var age   此变量未声明</span><br><span class=\"line\">typeof message // undefined</span><br><span class=\"line\">typeof age //undefined</span><br></pre></td></tr></table></figure></p>\n<p><em>ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。</em></p>\n<h5 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h5><p>Null类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值</p>\n<h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>转换为true的值</th>\n<th>转换位为false的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>String</td>\n<td>任何非空字符串</td>\n<td>“”空字符串</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>任何非零数值(包括无穷大)</td>\n<td>0和NaN</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>任何对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>不存在的</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><p>1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var octalNum = 070 // 56</span><br><span class=\"line\">var hexNum1 = 0xA //10</span><br></pre></td></tr></table></figure></p>\n<p>在进行算术运算时其右会转化成10进制<br>2、JavaScript中+0和-0是相等的<br>3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)<br>4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出<br>5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。<br>6、数值转换函数Number(),规则如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)boolean,true转换成1，false转换成0</span><br><span class=\"line\">(2)数值，简单传入和返回</span><br><span class=\"line\">(3)null，返回0</span><br><span class=\"line\">(4)undefined，返回NaN</span><br><span class=\"line\">(5)字符串：   &lt;1&gt;转换为十进制数，并且将前面多余的0去除</span><br><span class=\"line\">             &lt;2&gt;浮点数格式相同</span><br><span class=\"line\">             &lt;3&gt;如果包含0x、0o，将其转换成10进制数</span><br><span class=\"line\">             &lt;4&gt;空字符串转换为0</span><br><span class=\"line\">             &lt;5&gt;其他格式外都转换成NaN</span><br><span class=\"line\">(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串</span><br></pre></td></tr></table></figure></p>\n<p>7、parseInt()，parseFloat()函数<br>parseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。<br>parseInt可以接受第二个参数，代表转换成的基于格式。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;10&apos;,2)  // 2</span><br></pre></td></tr></table></figure></p>\n<p>基于格式格式转化成相应十进制数</p>\n<h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;\\t\\t\\t&apos;</span><br><span class=\"line\">a.length // 3</span><br></pre></td></tr></table></figure></p>\n<p>而a打印出来是三个制表<br>2、字符串的特点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lang = &apos;Java&apos;</span><br><span class=\"line\">lang = lang + &apos;Script&apos;</span><br></pre></td></tr></table></figure></p>\n<p>开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。<br>3、字符串的转换<br>利用toString方法来将数值转化成string，而其参数是转化成不同进制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 11</span><br><span class=\"line\">num.toString() // &apos;11&apos;</span><br><span class=\"line\">var nums = 10</span><br><span class=\"line\">nums.toString(2) // &apos;1010&apos;</span><br></pre></td></tr></table></figure></p>\n<p>在不是null和undefined的情况下，还可以调用String()函数其转换规则如下<br>1、如果值有toString方法，调用其不带参数的toString方法<br>2、如果值是null，返回’null’<br>3、如果是undefined，返回’undefined’</p>\n<h5 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h5><p>可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法<br>1、constructor 保存着创建当前对象的函数<br>2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)<br>3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型<br>4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举<br>5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应<br>6、toString 返回对象的字符串表示<br>7、valueOf 返回对象的字符串、数值或布尔值</p>\n<h5 id=\"位操作符\"><a href=\"#位操作符\" class=\"headerlink\" title=\"位操作符\"></a>位操作符</h5><p>1、按位非 (NOT) ~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num1 = 25   // 二进制00000000000000000000000000011001</span><br><span class=\"line\">var num2 = ~num1// 二进制11111111111111111111111111100110</span><br><span class=\"line\">num2            // ~26</span><br></pre></td></tr></table></figure></p>\n<p>2、按位与 (AND) &amp;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 &amp; 3</span><br><span class=\"line\">result  // 1</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure></p>\n<p>3、按位或 (OR) |<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 | 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1011</span><br></pre></td></tr></table></figure></p>\n<p>4、按位异或 (XOR) ^<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 ^ 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1010</span><br></pre></td></tr></table></figure></p>\n<p>5、 操作符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25**2 = 625</span><br></pre></td></tr></table></figure></p>\n<p>**代表次方</p>\n<h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><p>label语句结合break，continue语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               break outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 55</span><br><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               continue outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 95</span><br></pre></td></tr></table></figure></p>\n<p>lable结合break，continue语句可以控制跳出位置</p>\n<h4 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h4><p>将代码作用域设定到特定对象中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var qs = location.search.substring(1)</span><br><span class=\"line\">var hostName = location.hostname</span><br><span class=\"line\">var url = location.href</span><br><span class=\"line\">//使用with语句后</span><br><span class=\"line\">with(location)&#123;</span><br><span class=\"line\">    var qs = search.substring(1)</span><br><span class=\"line\">    var hostName = hostname</span><br><span class=\"line\">    var url = href</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"关于script标签\"><a href=\"#关于script标签\" class=\"headerlink\" title=\"关于script标签\"></a>关于script标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/javascripts/application.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; async defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>script标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。<br>1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;1.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;2.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。</p>\n<p>2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。<br>3、type，在不谢的情况下默认值位‘text/javascript’<br>4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。</p>\n<h4 id=\"script标签位置\"><a href=\"#script标签位置\" class=\"headerlink\" title=\"script标签位置\"></a>script标签位置</h4><p>由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成&lt; /html&gt;之后再执行js代码。</p>\n<p><em>ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。</em></p>\n<h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>规则：<br>1、第一个字符必须是字母、下划线，或美元符号<br>2、其他字符可以使字母，下划线，美元符号或数字<br>最佳采用驼峰式命名</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>JavaScript共有5种基本数据类型和1种复杂数据类型。分别是：<br>Undefined，Null，Boolean，Number，String；Object</p>\n<h5 id=\"TYPEOF操作\"><a href=\"#TYPEOF操作\" class=\"headerlink\" title=\"TYPEOF操作\"></a>TYPEOF操作</h5><p>typeof操作只能返回下列字符串<br>undefined – 值未定义<br>boolean – 布尔值<br>string — 字符串<br>number – 数值<br>object – 对象或null<br>function – 函数</p>\n<h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message</span><br><span class=\"line\">// var age   此变量未声明</span><br><span class=\"line\">typeof message // undefined</span><br><span class=\"line\">typeof age //undefined</span><br></pre></td></tr></table></figure></p>\n<p><em>ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。</em></p>\n<h5 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h5><p>Null类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值</p>\n<h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>转换为true的值</th>\n<th>转换位为false的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>String</td>\n<td>任何非空字符串</td>\n<td>“”空字符串</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>任何非零数值(包括无穷大)</td>\n<td>0和NaN</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>任何对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td>不存在的</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><p>1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var octalNum = 070 // 56</span><br><span class=\"line\">var hexNum1 = 0xA //10</span><br></pre></td></tr></table></figure></p>\n<p>在进行算术运算时其右会转化成10进制<br>2、JavaScript中+0和-0是相等的<br>3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)<br>4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出<br>5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。<br>6、数值转换函数Number(),规则如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)boolean,true转换成1，false转换成0</span><br><span class=\"line\">(2)数值，简单传入和返回</span><br><span class=\"line\">(3)null，返回0</span><br><span class=\"line\">(4)undefined，返回NaN</span><br><span class=\"line\">(5)字符串：   &lt;1&gt;转换为十进制数，并且将前面多余的0去除</span><br><span class=\"line\">             &lt;2&gt;浮点数格式相同</span><br><span class=\"line\">             &lt;3&gt;如果包含0x、0o，将其转换成10进制数</span><br><span class=\"line\">             &lt;4&gt;空字符串转换为0</span><br><span class=\"line\">             &lt;5&gt;其他格式外都转换成NaN</span><br><span class=\"line\">(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串</span><br></pre></td></tr></table></figure></p>\n<p>7、parseInt()，parseFloat()函数<br>parseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。<br>parseInt可以接受第二个参数，代表转换成的基于格式。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;10&apos;,2)  // 2</span><br></pre></td></tr></table></figure></p>\n<p>基于格式格式转化成相应十进制数</p>\n<h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;\\t\\t\\t&apos;</span><br><span class=\"line\">a.length // 3</span><br></pre></td></tr></table></figure></p>\n<p>而a打印出来是三个制表<br>2、字符串的特点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lang = &apos;Java&apos;</span><br><span class=\"line\">lang = lang + &apos;Script&apos;</span><br></pre></td></tr></table></figure></p>\n<p>开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。<br>3、字符串的转换<br>利用toString方法来将数值转化成string，而其参数是转化成不同进制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 11</span><br><span class=\"line\">num.toString() // &apos;11&apos;</span><br><span class=\"line\">var nums = 10</span><br><span class=\"line\">nums.toString(2) // &apos;1010&apos;</span><br></pre></td></tr></table></figure></p>\n<p>在不是null和undefined的情况下，还可以调用String()函数其转换规则如下<br>1、如果值有toString方法，调用其不带参数的toString方法<br>2、如果值是null，返回’null’<br>3、如果是undefined，返回’undefined’</p>\n<h5 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h5><p>可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法<br>1、constructor 保存着创建当前对象的函数<br>2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)<br>3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型<br>4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举<br>5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应<br>6、toString 返回对象的字符串表示<br>7、valueOf 返回对象的字符串、数值或布尔值</p>\n<h5 id=\"位操作符\"><a href=\"#位操作符\" class=\"headerlink\" title=\"位操作符\"></a>位操作符</h5><p>1、按位非 (NOT) ~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num1 = 25   // 二进制00000000000000000000000000011001</span><br><span class=\"line\">var num2 = ~num1// 二进制11111111111111111111111111100110</span><br><span class=\"line\">num2            // ~26</span><br></pre></td></tr></table></figure></p>\n<p>2、按位与 (AND) &amp;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 &amp; 3</span><br><span class=\"line\">result  // 1</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure></p>\n<p>3、按位或 (OR) |<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 | 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1011</span><br></pre></td></tr></table></figure></p>\n<p>4、按位异或 (XOR) ^<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 ^ 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1010</span><br></pre></td></tr></table></figure></p>\n<p>5、 操作符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25**2 = 625</span><br></pre></td></tr></table></figure></p>\n<p>**代表次方</p>\n<h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><p>label语句结合break，continue语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               break outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 55</span><br><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               continue outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 95</span><br></pre></td></tr></table></figure></p>\n<p>lable结合break，continue语句可以控制跳出位置</p>\n<h4 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h4><p>将代码作用域设定到特定对象中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var qs = location.search.substring(1)</span><br><span class=\"line\">var hostName = location.hostname</span><br><span class=\"line\">var url = location.href</span><br><span class=\"line\">//使用with语句后</span><br><span class=\"line\">with(location)&#123;</span><br><span class=\"line\">    var qs = search.substring(1)</span><br><span class=\"line\">    var hostName = hostname</span><br><span class=\"line\">    var url = href</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识</p>\n"},{"title":"JavaScript高级程序设计重读---6章","date":"2017-07-13T07:43:38.000Z","_content":"### 面向对象的程序设计\n#### 属性类型\nECMAScript中有两种属性，数据属性和访问器属性\n##### 数据属性\n[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[Enumerable]] : 表示能否通过 for-in 循环返回属性。\n[[Writable]] : 表示能否修改属性的值。\n[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。\n\n_ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。_\n\n**Object.defineProperty可以为对象添加属性**\n##### 访问器属性\n[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。\n[[Enumerable]]：表示能否通过 for-in 循环返回属性。\n[[Get]]：在读取属性时调用的函数。默认值为 undefined。\n[[Set]]：在写入属性时调用的函数。默认值为 undefined。\n\n**get,set方法**\n有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.\n```\nvar book = {\n    _year : 2004,\n    edition : 1\n};\nObject.defineProperty(book,\"year\",{ \n    get : function () {\n        alert(this._year);\n    },\n    set : function (newValue) {\n        if (newValue > 2004) {\n            this._year = newValue;\n            this.edition += newValue - 2004;\n        }\n    }\n});\nbook.year;      // 弹出窗口，显示 2004\nbook.year = 2005;\nconsole.log(book.edition);   // 2\n```\nget，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用\n定义多个属性Object.defineProperties(obj, props)\n将defineProperty改为复数形式defineProperties，并将参数改为一个对象\n```\nvar obj = {};\nObject.defineProperties(obj, {\n  \"property1\": {\n    value: true,\n    writable: true\n  },\n  \"property2\": {\n    value: \"Hello\",\n    writable: false\n  }\n  // 等等.\n});\nconsole.log(obj); // Object {property1: true, property2: \"Hello\"}\n```\n读取给定属性的特性**Object.getOwnPropertyDescriptor(obj, prop)** 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）\n```\nvar man = {name: \"gdc\"};\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: true, enumerable: true, configurable: true}\nObject.defineProperties(man,{\n  name:{\n    writable: false\n  },\n  age:{\n    writable: true,\n    value: 22\n  }\n});\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: false, enumerable: true, configurable: true}\nconsole.log(Object.getOwnPropertyDescriptor(man,\"age\"));\n// Object {value: 22, writable: true, enumerable: false, configurable: false}\nvar descriptor = Object.getOwnPropertyDescriptor(man,\"age\");\nconsole.log(descriptor.value);         // 22\nconsole.log(descriptor.configurable);  // false\nconsole.log(descriptor.writable);      // true\nconsole.log(descriptor.get);           // undefined\nconsole.log(descriptor.set);           // undefined\n```\n读取当前属性，返回获取数据形式\n\n#### 创建对象\n##### 1、工厂模式：\n为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。\n```\nfunction createObject(name,age,profession){//集中实例化的函数\n        var obj = new Object();\n        obj.name = name;\n        obj.age = age;\n        obj.profession = profession;\n        obj.move = function () {\n            return this.name + ' at ' + this.age + ' engaged in ' + this.profession;\n        };\n        return obj;\n    }\n    var test1 = createObject('trigkit4',22,'programmer');//第一个实例\n    var test2 = createObject('mike',25,'engineer');//第二个实例\n    alert(test1.move());\n    alert(test2.move());\n```\n**利:**\n主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复\n\n**弊:**\n大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。\n\n**何时使用？**\n1、当对象或组件涉及高复杂性时\n2、当需要根据所在的不同环境轻松生成对象的不同实例时\n3、当处理很多共享相同属性的小型对象或组件时\n\n##### Constructor(构造器)模式\nECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。\n```\nfunction Car(model,year,miles){//构造函数模式\n    this.model = model;\n    this.year = year;\n    this.miles = miles;\n    this.run = function () {\n        return this.model + \" has done \" + this.miles + \"miles\";\n    }\n}\nvar Benz = new Car('Benz',2014,20000);\nvar BMW = new Car(\"BMW\",2013,12000);\nalert(Benz instanceof Car); //很清晰的识别他从属于 Car,true\nconsole.log(Benz.run());\nconsole.log(BMW.run());\n```\n**和工厂模式相比：**\n1.构造函数方法没有显示的创建对象 (new Object());\n2.直接将属性和方法赋值给 this 对象;\n3.没有 renturn 语句。\n\n##### 原型模式\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // dechen\nvar person2 = new Person();\nperson2.sayName()     // dechen\nperson1.sayName == person2.sayName  // true\n\n```\n**Person类与构造函数，原型存在如下关系**\n\nPerson的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person\n使用isPrototypeOf()判断对详见是否存在这种关系\n```\nPerson.prototype.isPrototypeOf(person1) // true\nPerson.prototype.isPrototypeOf(person2) // true\n\n```\n虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // dechen\nvar person2 = new Person();\nperson2.sayName()     // dechen\nperson1.name = 'guo'\nperson1.name    // guo\nperson2.name    // dechen\ndelete person1.name \nperson1.name    // dechen\n```\n对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。\n_ps：原型属性不可被delete掉_\nhasOwnProperty()确定属性是否在实例上的方法\n原型与in操作符\nin有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nvar person2 = new Person();\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\nperson1.name = 'guo'\nperson1.name            // guo\nperson1.hasOwnProperty('name')  // true\n'name' in person1       //能够访问，true\nperson2.name            // guo\nperson2.hasOwnProperty('name')  //false\n'name' in person2       // true\ndelete person1.name\nperson1.name            // dechen\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\n```\nObject.keys()方法，获取对象所有可枚举实例属性\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar keys = Object.keys(Person.prototype)\nkeys            // name,age,sayName\nvar p1 = new Person();\np1.name = 'guo'\np1.age = '20'\nvar p1keys = Object.keys(p1)\np1keys  // 'name,age'\n// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()\nvar keys = Object.getOwnPropertyNames(Person.prototype)\nkeys    // [\"constructor\", \"name\", \"age\", \"sayName\"]\n// 也可以使用另一种原型定义方法，字面量方法\nfunction Person(){}\nPerson.prototype = {\n    name : 'dechen',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//如果constructor很重要，也可以特意设定\nPerson.prototype = {\n    constructor: Person,\n    name : 'dechen',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty\nObject.defineProperty(Person.prototype, 'constructor',{\n    enumerable: false,\n    value: Person\n})\n```\n由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式\n**组合使用构造函数模式和原型模式**\n将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。\n```\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.friend = ['a','b']\n}\nPerson.prototype = {\n    constructor: Person,\n    sayName : function(){\n        console.log(this.name)\n    }\n}\nvar person1 = new Person('dechen', 20 ,'SoftWare')\nvar person2 = new Person('guo', 10 ,'Doctor')\nperson1.friends.push('van')\nperson1.friend      // a,b,van\nperson2.friend      // a,b\nperson1.friend === person2.friend   //false\nperson1.sayName === person2.sayName   //true\n```\n#### 继承\n##### 原型链\n原型链是JavaScript的主要实现继承方法\n```\nfunction SuperType(){\n    this.property = true\n}\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n}\nfunction SubType(){\n    this.subproperty = false\n}\nSubtype.prototype = new SuperType()\nSubType.prototype.getSubValue = function(){\n    return this.subproperty;\n}\nvar instance = new SubType();\nvar instance = new SubType()\ninstance.getSuperValue()    //true\n```\ninstance的原型连集成了SuperType方法\n##### 寄生组合式继承\n```\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype) // 创建对象\n    prototype.constructor = subType             // 增强对象\n    subType.prototype = prototype               // 指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = ['red','blue','green']\n}\nSuperType.prototype.sayName = function(){\n    return this.name\n}\nfunction SubType(name, age){\n    SuperType.call(this, name)      \n    this.age = age\n}\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function(){\n    return this.age\n}\n```\n通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性\n##### 小结\n通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。","source":"_posts/read-javascript-again-chapter6.md","raw":"---\ntitle: JavaScript高级程序设计重读---6章\ndate: 2017-07-13 15:43:38\ntags: JavaScript\n---\n### 面向对象的程序设计\n#### 属性类型\nECMAScript中有两种属性，数据属性和访问器属性\n##### 数据属性\n[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[Enumerable]] : 表示能否通过 for-in 循环返回属性。\n[[Writable]] : 表示能否修改属性的值。\n[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。\n\n_ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。_\n\n**Object.defineProperty可以为对象添加属性**\n##### 访问器属性\n[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。\n[[Enumerable]]：表示能否通过 for-in 循环返回属性。\n[[Get]]：在读取属性时调用的函数。默认值为 undefined。\n[[Set]]：在写入属性时调用的函数。默认值为 undefined。\n\n**get,set方法**\n有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.\n```\nvar book = {\n    _year : 2004,\n    edition : 1\n};\nObject.defineProperty(book,\"year\",{ \n    get : function () {\n        alert(this._year);\n    },\n    set : function (newValue) {\n        if (newValue > 2004) {\n            this._year = newValue;\n            this.edition += newValue - 2004;\n        }\n    }\n});\nbook.year;      // 弹出窗口，显示 2004\nbook.year = 2005;\nconsole.log(book.edition);   // 2\n```\nget，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用\n定义多个属性Object.defineProperties(obj, props)\n将defineProperty改为复数形式defineProperties，并将参数改为一个对象\n```\nvar obj = {};\nObject.defineProperties(obj, {\n  \"property1\": {\n    value: true,\n    writable: true\n  },\n  \"property2\": {\n    value: \"Hello\",\n    writable: false\n  }\n  // 等等.\n});\nconsole.log(obj); // Object {property1: true, property2: \"Hello\"}\n```\n读取给定属性的特性**Object.getOwnPropertyDescriptor(obj, prop)** 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）\n```\nvar man = {name: \"gdc\"};\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: true, enumerable: true, configurable: true}\nObject.defineProperties(man,{\n  name:{\n    writable: false\n  },\n  age:{\n    writable: true,\n    value: 22\n  }\n});\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: false, enumerable: true, configurable: true}\nconsole.log(Object.getOwnPropertyDescriptor(man,\"age\"));\n// Object {value: 22, writable: true, enumerable: false, configurable: false}\nvar descriptor = Object.getOwnPropertyDescriptor(man,\"age\");\nconsole.log(descriptor.value);         // 22\nconsole.log(descriptor.configurable);  // false\nconsole.log(descriptor.writable);      // true\nconsole.log(descriptor.get);           // undefined\nconsole.log(descriptor.set);           // undefined\n```\n读取当前属性，返回获取数据形式\n\n#### 创建对象\n##### 1、工厂模式：\n为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。\n```\nfunction createObject(name,age,profession){//集中实例化的函数\n        var obj = new Object();\n        obj.name = name;\n        obj.age = age;\n        obj.profession = profession;\n        obj.move = function () {\n            return this.name + ' at ' + this.age + ' engaged in ' + this.profession;\n        };\n        return obj;\n    }\n    var test1 = createObject('trigkit4',22,'programmer');//第一个实例\n    var test2 = createObject('mike',25,'engineer');//第二个实例\n    alert(test1.move());\n    alert(test2.move());\n```\n**利:**\n主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复\n\n**弊:**\n大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。\n\n**何时使用？**\n1、当对象或组件涉及高复杂性时\n2、当需要根据所在的不同环境轻松生成对象的不同实例时\n3、当处理很多共享相同属性的小型对象或组件时\n\n##### Constructor(构造器)模式\nECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。\n```\nfunction Car(model,year,miles){//构造函数模式\n    this.model = model;\n    this.year = year;\n    this.miles = miles;\n    this.run = function () {\n        return this.model + \" has done \" + this.miles + \"miles\";\n    }\n}\nvar Benz = new Car('Benz',2014,20000);\nvar BMW = new Car(\"BMW\",2013,12000);\nalert(Benz instanceof Car); //很清晰的识别他从属于 Car,true\nconsole.log(Benz.run());\nconsole.log(BMW.run());\n```\n**和工厂模式相比：**\n1.构造函数方法没有显示的创建对象 (new Object());\n2.直接将属性和方法赋值给 this 对象;\n3.没有 renturn 语句。\n\n##### 原型模式\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // dechen\nvar person2 = new Person();\nperson2.sayName()     // dechen\nperson1.sayName == person2.sayName  // true\n\n```\n**Person类与构造函数，原型存在如下关系**\n\nPerson的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person\n使用isPrototypeOf()判断对详见是否存在这种关系\n```\nPerson.prototype.isPrototypeOf(person1) // true\nPerson.prototype.isPrototypeOf(person2) // true\n\n```\n虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // dechen\nvar person2 = new Person();\nperson2.sayName()     // dechen\nperson1.name = 'guo'\nperson1.name    // guo\nperson2.name    // dechen\ndelete person1.name \nperson1.name    // dechen\n```\n对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。\n_ps：原型属性不可被delete掉_\nhasOwnProperty()确定属性是否在实例上的方法\n原型与in操作符\nin有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nvar person2 = new Person();\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\nperson1.name = 'guo'\nperson1.name            // guo\nperson1.hasOwnProperty('name')  // true\n'name' in person1       //能够访问，true\nperson2.name            // guo\nperson2.hasOwnProperty('name')  //false\n'name' in person2       // true\ndelete person1.name\nperson1.name            // dechen\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\n```\nObject.keys()方法，获取对象所有可枚举实例属性\n```\nfunction Person(){}\nPerson.prototype.name = \"dechen\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar keys = Object.keys(Person.prototype)\nkeys            // name,age,sayName\nvar p1 = new Person();\np1.name = 'guo'\np1.age = '20'\nvar p1keys = Object.keys(p1)\np1keys  // 'name,age'\n// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()\nvar keys = Object.getOwnPropertyNames(Person.prototype)\nkeys    // [\"constructor\", \"name\", \"age\", \"sayName\"]\n// 也可以使用另一种原型定义方法，字面量方法\nfunction Person(){}\nPerson.prototype = {\n    name : 'dechen',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//如果constructor很重要，也可以特意设定\nPerson.prototype = {\n    constructor: Person,\n    name : 'dechen',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty\nObject.defineProperty(Person.prototype, 'constructor',{\n    enumerable: false,\n    value: Person\n})\n```\n由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式\n**组合使用构造函数模式和原型模式**\n将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。\n```\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.friend = ['a','b']\n}\nPerson.prototype = {\n    constructor: Person,\n    sayName : function(){\n        console.log(this.name)\n    }\n}\nvar person1 = new Person('dechen', 20 ,'SoftWare')\nvar person2 = new Person('guo', 10 ,'Doctor')\nperson1.friends.push('van')\nperson1.friend      // a,b,van\nperson2.friend      // a,b\nperson1.friend === person2.friend   //false\nperson1.sayName === person2.sayName   //true\n```\n#### 继承\n##### 原型链\n原型链是JavaScript的主要实现继承方法\n```\nfunction SuperType(){\n    this.property = true\n}\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n}\nfunction SubType(){\n    this.subproperty = false\n}\nSubtype.prototype = new SuperType()\nSubType.prototype.getSubValue = function(){\n    return this.subproperty;\n}\nvar instance = new SubType();\nvar instance = new SubType()\ninstance.getSuperValue()    //true\n```\ninstance的原型连集成了SuperType方法\n##### 寄生组合式继承\n```\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype) // 创建对象\n    prototype.constructor = subType             // 增强对象\n    subType.prototype = prototype               // 指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = ['red','blue','green']\n}\nSuperType.prototype.sayName = function(){\n    return this.name\n}\nfunction SubType(name, age){\n    SuperType.call(this, name)      \n    this.age = age\n}\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function(){\n    return this.age\n}\n```\n通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性\n##### 小结\n通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。","slug":"read-javascript-again-chapter6","published":1,"updated":"2018-05-01T08:01:05.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rn000laefawe1bxvwn","content":"<h3 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h3><h4 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h4><p>ECMAScript中有两种属性，数据属性和访问器属性</p>\n<h5 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h5><p>[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。<br>[[Enumerable]] : 表示能否通过 for-in 循环返回属性。<br>[[Writable]] : 表示能否修改属性的值。<br>[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。</p>\n<p><em>ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。</em></p>\n<p><strong>Object.defineProperty可以为对象添加属性</strong></p>\n<h5 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h5><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。<br>[[Enumerable]]：表示能否通过 for-in 循环返回属性。<br>[[Get]]：在读取属性时调用的函数。默认值为 undefined。<br>[[Set]]：在写入属性时调用的函数。默认值为 undefined。</p>\n<p><strong>get,set方法</strong><br>有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;</span><br><span class=\"line\">    _year : 2004,</span><br><span class=\"line\">    edition : 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Object.defineProperty(book,&quot;year&quot;,&#123; </span><br><span class=\"line\">    get : function () &#123;</span><br><span class=\"line\">        alert(this._year);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set : function (newValue) &#123;</span><br><span class=\"line\">        if (newValue &gt; 2004) &#123;</span><br><span class=\"line\">            this._year = newValue;</span><br><span class=\"line\">            this.edition += newValue - 2004;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">book.year;      // 弹出窗口，显示 2004</span><br><span class=\"line\">book.year = 2005;</span><br><span class=\"line\">console.log(book.edition);   // 2</span><br></pre></td></tr></table></figure></p>\n<p>get，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用<br>定义多个属性Object.defineProperties(obj, props)<br>将defineProperty改为复数形式defineProperties，并将参数改为一个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperties(obj, &#123;</span><br><span class=\"line\">  &quot;property1&quot;: &#123;</span><br><span class=\"line\">    value: true,</span><br><span class=\"line\">    writable: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;property2&quot;: &#123;</span><br><span class=\"line\">    value: &quot;Hello&quot;,</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 等等.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(obj); // Object &#123;property1: true, property2: &quot;Hello&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读取给定属性的特性<strong>Object.getOwnPropertyDescriptor(obj, prop)</strong> 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var man = &#123;name: &quot;gdc&quot;&#125;;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">Object.defineProperties(man,&#123;</span><br><span class=\"line\">  name:&#123;</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  age:&#123;</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    value: 22</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: false, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;age&quot;));</span><br><span class=\"line\">// Object &#123;value: 22, writable: true, enumerable: false, configurable: false&#125;</span><br><span class=\"line\">var descriptor = Object.getOwnPropertyDescriptor(man,&quot;age&quot;);</span><br><span class=\"line\">console.log(descriptor.value);         // 22</span><br><span class=\"line\">console.log(descriptor.configurable);  // false</span><br><span class=\"line\">console.log(descriptor.writable);      // true</span><br><span class=\"line\">console.log(descriptor.get);           // undefined</span><br><span class=\"line\">console.log(descriptor.set);           // undefined</span><br></pre></td></tr></table></figure></p>\n<p>读取当前属性，返回获取数据形式</p>\n<h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><h5 id=\"1、工厂模式：\"><a href=\"#1、工厂模式：\" class=\"headerlink\" title=\"1、工厂模式：\"></a>1、工厂模式：</h5><p>为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObject(name,age,profession)&#123;//集中实例化的函数</span><br><span class=\"line\">        var obj = new Object();</span><br><span class=\"line\">        obj.name = name;</span><br><span class=\"line\">        obj.age = age;</span><br><span class=\"line\">        obj.profession = profession;</span><br><span class=\"line\">        obj.move = function () &#123;</span><br><span class=\"line\">            return this.name + &apos; at &apos; + this.age + &apos; engaged in &apos; + this.profession;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var test1 = createObject(&apos;trigkit4&apos;,22,&apos;programmer&apos;);//第一个实例</span><br><span class=\"line\">    var test2 = createObject(&apos;mike&apos;,25,&apos;engineer&apos;);//第二个实例</span><br><span class=\"line\">    alert(test1.move());</span><br><span class=\"line\">    alert(test2.move());</span><br></pre></td></tr></table></figure></p>\n<p><strong>利:</strong><br>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复</p>\n<p><strong>弊:</strong><br>大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。</p>\n<p><strong>何时使用？</strong><br>1、当对象或组件涉及高复杂性时<br>2、当需要根据所在的不同环境轻松生成对象的不同实例时<br>3、当处理很多共享相同属性的小型对象或组件时</p>\n<h5 id=\"Constructor-构造器-模式\"><a href=\"#Constructor-构造器-模式\" class=\"headerlink\" title=\"Constructor(构造器)模式\"></a>Constructor(构造器)模式</h5><p>ECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Car(model,year,miles)&#123;//构造函数模式</span><br><span class=\"line\">    this.model = model;</span><br><span class=\"line\">    this.year = year;</span><br><span class=\"line\">    this.miles = miles;</span><br><span class=\"line\">    this.run = function () &#123;</span><br><span class=\"line\">        return this.model + &quot; has done &quot; + this.miles + &quot;miles&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Benz = new Car(&apos;Benz&apos;,2014,20000);</span><br><span class=\"line\">var BMW = new Car(&quot;BMW&quot;,2013,12000);</span><br><span class=\"line\">alert(Benz instanceof Car); //很清晰的识别他从属于 Car,true</span><br><span class=\"line\">console.log(Benz.run());</span><br><span class=\"line\">console.log(BMW.run());</span><br></pre></td></tr></table></figure></p>\n<p><strong>和工厂模式相比：</strong><br>1.构造函数方法没有显示的创建对象 (new Object());<br>2.直接将属性和方法赋值给 this 对象;<br>3.没有 renturn 语句。</p>\n<h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // dechen</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // dechen</span><br><span class=\"line\">person1.sayName == person2.sayName  // true</span><br></pre></td></tr></table></figure>\n<p><strong>Person类与构造函数，原型存在如下关系</strong></p>\n<p>Person的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person<br>使用isPrototypeOf()判断对详见是否存在这种关系<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person1) // true</span><br><span class=\"line\">Person.prototype.isPrototypeOf(person2) // true</span><br></pre></td></tr></table></figure></p>\n<p>虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // dechen</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // dechen</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name    // guo</span><br><span class=\"line\">person2.name    // dechen</span><br><span class=\"line\">delete person1.name </span><br><span class=\"line\">person1.name    // dechen</span><br></pre></td></tr></table></figure></p>\n<p>对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。<br><em>ps：原型属性不可被delete掉</em><br>hasOwnProperty()确定属性是否在实例上的方法<br>原型与in操作符<br>in有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name            // guo</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // true</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person2.name            // guo</span><br><span class=\"line\">person2.hasOwnProperty(&apos;name&apos;)  //false</span><br><span class=\"line\">&apos;name&apos; in person2       // true</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">person1.name            // dechen</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br></pre></td></tr></table></figure></p>\n<p>Object.keys()方法，获取对象所有可枚举实例属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var keys = Object.keys(Person.prototype)</span><br><span class=\"line\">keys            // name,age,sayName</span><br><span class=\"line\">var p1 = new Person();</span><br><span class=\"line\">p1.name = &apos;guo&apos;</span><br><span class=\"line\">p1.age = &apos;20&apos;</span><br><span class=\"line\">var p1keys = Object.keys(p1)</span><br><span class=\"line\">p1keys  // &apos;name,age&apos;</span><br><span class=\"line\">// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()</span><br><span class=\"line\">var keys = Object.getOwnPropertyNames(Person.prototype)</span><br><span class=\"line\">keys    // [&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</span><br><span class=\"line\">// 也可以使用另一种原型定义方法，字面量方法</span><br><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name : &apos;dechen&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//如果constructor很重要，也可以特意设定</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name : &apos;dechen&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty</span><br><span class=\"line\">Object.defineProperty(Person.prototype, &apos;constructor&apos;,&#123;</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    value: Person</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式<br><strong>组合使用构造函数模式和原型模式</strong><br>将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name,age,job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.friend = [&apos;a&apos;,&apos;b&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    sayName : function()&#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&apos;dechen&apos;, 20 ,&apos;SoftWare&apos;)</span><br><span class=\"line\">var person2 = new Person(&apos;guo&apos;, 10 ,&apos;Doctor&apos;)</span><br><span class=\"line\">person1.friends.push(&apos;van&apos;)</span><br><span class=\"line\">person1.friend      // a,b,van</span><br><span class=\"line\">person2.friend      // a,b</span><br><span class=\"line\">person1.friend === person2.friend   //false</span><br><span class=\"line\">person1.sayName === person2.sayName   //true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><h5 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h5><p>原型链是JavaScript的主要实现继承方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType()&#123;</span><br><span class=\"line\">    this.property = true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</span><br><span class=\"line\">    return this.property;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType()&#123;</span><br><span class=\"line\">    this.subproperty = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subtype.prototype = new SuperType()</span><br><span class=\"line\">SubType.prototype.getSubValue = function()&#123;</span><br><span class=\"line\">    return this.subproperty;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var instance = new SubType();</span><br><span class=\"line\">var instance = new SubType()</span><br><span class=\"line\">instance.getSuperValue()    //true</span><br></pre></td></tr></table></figure></p>\n<p>instance的原型连集成了SuperType方法</p>\n<h5 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(subType, superType)&#123;</span><br><span class=\"line\">    var prototype = object(superType.prototype) // 创建对象</span><br><span class=\"line\">    prototype.constructor = subType             // 增强对象</span><br><span class=\"line\">    subType.prototype = prototype               // 指定对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.colors = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = function()&#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType(name, age)&#123;</span><br><span class=\"line\">    SuperType.call(this, name)      </span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = function()&#123;</span><br><span class=\"line\">    return this.age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性</p>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><p>通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h3><h4 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h4><p>ECMAScript中有两种属性，数据属性和访问器属性</p>\n<h5 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h5><p>[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。<br>[[Enumerable]] : 表示能否通过 for-in 循环返回属性。<br>[[Writable]] : 表示能否修改属性的值。<br>[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。</p>\n<p><em>ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。</em></p>\n<p><strong>Object.defineProperty可以为对象添加属性</strong></p>\n<h5 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h5><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。<br>[[Enumerable]]：表示能否通过 for-in 循环返回属性。<br>[[Get]]：在读取属性时调用的函数。默认值为 undefined。<br>[[Set]]：在写入属性时调用的函数。默认值为 undefined。</p>\n<p><strong>get,set方法</strong><br>有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;</span><br><span class=\"line\">    _year : 2004,</span><br><span class=\"line\">    edition : 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Object.defineProperty(book,&quot;year&quot;,&#123; </span><br><span class=\"line\">    get : function () &#123;</span><br><span class=\"line\">        alert(this._year);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set : function (newValue) &#123;</span><br><span class=\"line\">        if (newValue &gt; 2004) &#123;</span><br><span class=\"line\">            this._year = newValue;</span><br><span class=\"line\">            this.edition += newValue - 2004;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">book.year;      // 弹出窗口，显示 2004</span><br><span class=\"line\">book.year = 2005;</span><br><span class=\"line\">console.log(book.edition);   // 2</span><br></pre></td></tr></table></figure></p>\n<p>get，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用<br>定义多个属性Object.defineProperties(obj, props)<br>将defineProperty改为复数形式defineProperties，并将参数改为一个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperties(obj, &#123;</span><br><span class=\"line\">  &quot;property1&quot;: &#123;</span><br><span class=\"line\">    value: true,</span><br><span class=\"line\">    writable: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;property2&quot;: &#123;</span><br><span class=\"line\">    value: &quot;Hello&quot;,</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 等等.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(obj); // Object &#123;property1: true, property2: &quot;Hello&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>读取给定属性的特性<strong>Object.getOwnPropertyDescriptor(obj, prop)</strong> 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var man = &#123;name: &quot;gdc&quot;&#125;;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">Object.defineProperties(man,&#123;</span><br><span class=\"line\">  name:&#123;</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  age:&#123;</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    value: 22</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: false, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;age&quot;));</span><br><span class=\"line\">// Object &#123;value: 22, writable: true, enumerable: false, configurable: false&#125;</span><br><span class=\"line\">var descriptor = Object.getOwnPropertyDescriptor(man,&quot;age&quot;);</span><br><span class=\"line\">console.log(descriptor.value);         // 22</span><br><span class=\"line\">console.log(descriptor.configurable);  // false</span><br><span class=\"line\">console.log(descriptor.writable);      // true</span><br><span class=\"line\">console.log(descriptor.get);           // undefined</span><br><span class=\"line\">console.log(descriptor.set);           // undefined</span><br></pre></td></tr></table></figure></p>\n<p>读取当前属性，返回获取数据形式</p>\n<h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><h5 id=\"1、工厂模式：\"><a href=\"#1、工厂模式：\" class=\"headerlink\" title=\"1、工厂模式：\"></a>1、工厂模式：</h5><p>为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObject(name,age,profession)&#123;//集中实例化的函数</span><br><span class=\"line\">        var obj = new Object();</span><br><span class=\"line\">        obj.name = name;</span><br><span class=\"line\">        obj.age = age;</span><br><span class=\"line\">        obj.profession = profession;</span><br><span class=\"line\">        obj.move = function () &#123;</span><br><span class=\"line\">            return this.name + &apos; at &apos; + this.age + &apos; engaged in &apos; + this.profession;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var test1 = createObject(&apos;trigkit4&apos;,22,&apos;programmer&apos;);//第一个实例</span><br><span class=\"line\">    var test2 = createObject(&apos;mike&apos;,25,&apos;engineer&apos;);//第二个实例</span><br><span class=\"line\">    alert(test1.move());</span><br><span class=\"line\">    alert(test2.move());</span><br></pre></td></tr></table></figure></p>\n<p><strong>利:</strong><br>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复</p>\n<p><strong>弊:</strong><br>大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。</p>\n<p><strong>何时使用？</strong><br>1、当对象或组件涉及高复杂性时<br>2、当需要根据所在的不同环境轻松生成对象的不同实例时<br>3、当处理很多共享相同属性的小型对象或组件时</p>\n<h5 id=\"Constructor-构造器-模式\"><a href=\"#Constructor-构造器-模式\" class=\"headerlink\" title=\"Constructor(构造器)模式\"></a>Constructor(构造器)模式</h5><p>ECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Car(model,year,miles)&#123;//构造函数模式</span><br><span class=\"line\">    this.model = model;</span><br><span class=\"line\">    this.year = year;</span><br><span class=\"line\">    this.miles = miles;</span><br><span class=\"line\">    this.run = function () &#123;</span><br><span class=\"line\">        return this.model + &quot; has done &quot; + this.miles + &quot;miles&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Benz = new Car(&apos;Benz&apos;,2014,20000);</span><br><span class=\"line\">var BMW = new Car(&quot;BMW&quot;,2013,12000);</span><br><span class=\"line\">alert(Benz instanceof Car); //很清晰的识别他从属于 Car,true</span><br><span class=\"line\">console.log(Benz.run());</span><br><span class=\"line\">console.log(BMW.run());</span><br></pre></td></tr></table></figure></p>\n<p><strong>和工厂模式相比：</strong><br>1.构造函数方法没有显示的创建对象 (new Object());<br>2.直接将属性和方法赋值给 this 对象;<br>3.没有 renturn 语句。</p>\n<h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // dechen</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // dechen</span><br><span class=\"line\">person1.sayName == person2.sayName  // true</span><br></pre></td></tr></table></figure>\n<p><strong>Person类与构造函数，原型存在如下关系</strong></p>\n<p>Person的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person<br>使用isPrototypeOf()判断对详见是否存在这种关系<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person1) // true</span><br><span class=\"line\">Person.prototype.isPrototypeOf(person2) // true</span><br></pre></td></tr></table></figure></p>\n<p>虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // dechen</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // dechen</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name    // guo</span><br><span class=\"line\">person2.name    // dechen</span><br><span class=\"line\">delete person1.name </span><br><span class=\"line\">person1.name    // dechen</span><br></pre></td></tr></table></figure></p>\n<p>对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。<br><em>ps：原型属性不可被delete掉</em><br>hasOwnProperty()确定属性是否在实例上的方法<br>原型与in操作符<br>in有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name            // guo</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // true</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person2.name            // guo</span><br><span class=\"line\">person2.hasOwnProperty(&apos;name&apos;)  //false</span><br><span class=\"line\">&apos;name&apos; in person2       // true</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">person1.name            // dechen</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br></pre></td></tr></table></figure></p>\n<p>Object.keys()方法，获取对象所有可枚举实例属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;dechen&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var keys = Object.keys(Person.prototype)</span><br><span class=\"line\">keys            // name,age,sayName</span><br><span class=\"line\">var p1 = new Person();</span><br><span class=\"line\">p1.name = &apos;guo&apos;</span><br><span class=\"line\">p1.age = &apos;20&apos;</span><br><span class=\"line\">var p1keys = Object.keys(p1)</span><br><span class=\"line\">p1keys  // &apos;name,age&apos;</span><br><span class=\"line\">// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()</span><br><span class=\"line\">var keys = Object.getOwnPropertyNames(Person.prototype)</span><br><span class=\"line\">keys    // [&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</span><br><span class=\"line\">// 也可以使用另一种原型定义方法，字面量方法</span><br><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name : &apos;dechen&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//如果constructor很重要，也可以特意设定</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name : &apos;dechen&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty</span><br><span class=\"line\">Object.defineProperty(Person.prototype, &apos;constructor&apos;,&#123;</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    value: Person</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式<br><strong>组合使用构造函数模式和原型模式</strong><br>将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name,age,job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.friend = [&apos;a&apos;,&apos;b&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    sayName : function()&#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&apos;dechen&apos;, 20 ,&apos;SoftWare&apos;)</span><br><span class=\"line\">var person2 = new Person(&apos;guo&apos;, 10 ,&apos;Doctor&apos;)</span><br><span class=\"line\">person1.friends.push(&apos;van&apos;)</span><br><span class=\"line\">person1.friend      // a,b,van</span><br><span class=\"line\">person2.friend      // a,b</span><br><span class=\"line\">person1.friend === person2.friend   //false</span><br><span class=\"line\">person1.sayName === person2.sayName   //true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><h5 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h5><p>原型链是JavaScript的主要实现继承方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType()&#123;</span><br><span class=\"line\">    this.property = true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</span><br><span class=\"line\">    return this.property;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType()&#123;</span><br><span class=\"line\">    this.subproperty = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subtype.prototype = new SuperType()</span><br><span class=\"line\">SubType.prototype.getSubValue = function()&#123;</span><br><span class=\"line\">    return this.subproperty;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var instance = new SubType();</span><br><span class=\"line\">var instance = new SubType()</span><br><span class=\"line\">instance.getSuperValue()    //true</span><br></pre></td></tr></table></figure></p>\n<p>instance的原型连集成了SuperType方法</p>\n<h5 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(subType, superType)&#123;</span><br><span class=\"line\">    var prototype = object(superType.prototype) // 创建对象</span><br><span class=\"line\">    prototype.constructor = subType             // 增强对象</span><br><span class=\"line\">    subType.prototype = prototype               // 指定对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.colors = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = function()&#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType(name, age)&#123;</span><br><span class=\"line\">    SuperType.call(this, name)      </span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = function()&#123;</span><br><span class=\"line\">    return this.age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性</p>\n<h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><p>通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。</p>\n"},{"title":"JavaScript高级程序设计重读---7章","date":"2017-07-13T08:01:13.000Z","_content":"### 函数表达式\n函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景\n```\n// 这种情况可能造成意想不到的情况\nif(condition){\n    function sayHi(){\n        alert('hi')\n    }\n}else {\n    function sayHi(){\n        alert('hello')\n    }\n}\n// 应该这样\nvar sayHi\nif(condition){\n    sayHi = function (){\n        alert('hi')\n    }\n}else {\n    sayHi = function (){\n        alert('hello')\n    }\n}\n\n```\n#### 递归\n```\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* factorial(num-1)\n    }\n}\n// 但是以下情况会出错\nvar another = factorial\nfactorial = null\nalert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数\n//通过以下一种情况解决\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* arguments.callee(num-1)\n    }\n}\n// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效\nvar factorail = (function f(num){\n    if(num <= 1){\n        return 1\n    }else{\n        return num * f(num -1)\n    }\n})\n```\n#### 闭包\n闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。\n正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码\n```\nfunction create(){\n    var result = new Array();\n    for(var i = 0;i < 10; i++){\n        result[i] = function (num){\n            return function(){\n                return num\n            }\n        }(i)\n    }\n    return result\n}\n```\n此函数可以获取到i的值。通过访问不同的result函数以达到目的\n因此可以模仿块级作用域。\n```\n(function(){\n// 这里是块级作用域\n}())\n```\n#### 小结\n通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。","source":"_posts/read-javascript-again-chapter7.md","raw":"---\ntitle: JavaScript高级程序设计重读---7章\ndate: 2017-07-13 16:01:13\ntags: JavaScript\n---\n### 函数表达式\n函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景\n```\n// 这种情况可能造成意想不到的情况\nif(condition){\n    function sayHi(){\n        alert('hi')\n    }\n}else {\n    function sayHi(){\n        alert('hello')\n    }\n}\n// 应该这样\nvar sayHi\nif(condition){\n    sayHi = function (){\n        alert('hi')\n    }\n}else {\n    sayHi = function (){\n        alert('hello')\n    }\n}\n\n```\n#### 递归\n```\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* factorial(num-1)\n    }\n}\n// 但是以下情况会出错\nvar another = factorial\nfactorial = null\nalert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数\n//通过以下一种情况解决\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* arguments.callee(num-1)\n    }\n}\n// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效\nvar factorail = (function f(num){\n    if(num <= 1){\n        return 1\n    }else{\n        return num * f(num -1)\n    }\n})\n```\n#### 闭包\n闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。\n正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码\n```\nfunction create(){\n    var result = new Array();\n    for(var i = 0;i < 10; i++){\n        result[i] = function (num){\n            return function(){\n                return num\n            }\n        }(i)\n    }\n    return result\n}\n```\n此函数可以获取到i的值。通过访问不同的result函数以达到目的\n因此可以模仿块级作用域。\n```\n(function(){\n// 这里是块级作用域\n}())\n```\n#### 小结\n通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。","slug":"read-javascript-again-chapter7","published":1,"updated":"2018-05-01T08:03:59.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6ro000naefag32p0j80","content":"<h3 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h3><p>函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这种情况可能造成意想不到的情况</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 应该这样</span><br><span class=\"line\">var sayHi</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* factorial(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 但是以下情况会出错</span><br><span class=\"line\">var another = factorial</span><br><span class=\"line\">factorial = null</span><br><span class=\"line\">alert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数</span><br><span class=\"line\">//通过以下一种情况解决</span><br><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* arguments.callee(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效</span><br><span class=\"line\">var factorail = (function f(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return num * f(num -1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<br>首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。<br>正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create()&#123;</span><br><span class=\"line\">    var result = new Array();</span><br><span class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</span><br><span class=\"line\">        result[i] = function (num)&#123;</span><br><span class=\"line\">            return function()&#123;</span><br><span class=\"line\">                return num</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此函数可以获取到i的值。通过访问不同的result函数以达到目的<br>因此可以模仿块级作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">// 这里是块级作用域</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h3><p>函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这种情况可能造成意想不到的情况</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 应该这样</span><br><span class=\"line\">var sayHi</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* factorial(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 但是以下情况会出错</span><br><span class=\"line\">var another = factorial</span><br><span class=\"line\">factorial = null</span><br><span class=\"line\">alert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数</span><br><span class=\"line\">//通过以下一种情况解决</span><br><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* arguments.callee(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效</span><br><span class=\"line\">var factorail = (function f(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return num * f(num -1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<br>首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。<br>正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create()&#123;</span><br><span class=\"line\">    var result = new Array();</span><br><span class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</span><br><span class=\"line\">        result[i] = function (num)&#123;</span><br><span class=\"line\">            return function()&#123;</span><br><span class=\"line\">                return num</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此函数可以获取到i的值。通过访问不同的result函数以达到目的<br>因此可以模仿块级作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">// 这里是块级作用域</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。</p>\n"},{"title":"2017暑期留校有感","date":"2017-08-04T12:18:39.000Z","_content":"一年一度的暑期留校就这样结束了。\n去年忘记总结，今年一定要总结。\n\n##### 回顾这一个月。我问自己学到了什么。\n1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。\n2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）\n3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。\n4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。\n\n##### 生活上的感谢信\n很感激因为我手术原因照顾我的朋友们。\n首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。\n其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈\n然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。\n小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。\n还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在\n最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！","source":"_posts/summer-2017-feeling.md","raw":"---\ntitle: 2017暑期留校有感\ndate: 2017-08-04 20:18:39\ntags: 随笔\n---\n一年一度的暑期留校就这样结束了。\n去年忘记总结，今年一定要总结。\n\n##### 回顾这一个月。我问自己学到了什么。\n1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。\n2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）\n3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。\n4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。\n\n##### 生活上的感谢信\n很感激因为我手术原因照顾我的朋友们。\n首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。\n其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈\n然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。\n小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。\n还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在\n最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！","slug":"summer-2017-feeling","published":1,"updated":"2018-05-01T12:19:37.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rq000paefa6u02da90","content":"<p>一年一度的暑期留校就这样结束了。<br>去年忘记总结，今年一定要总结。</p>\n<h5 id=\"回顾这一个月。我问自己学到了什么。\"><a href=\"#回顾这一个月。我问自己学到了什么。\" class=\"headerlink\" title=\"回顾这一个月。我问自己学到了什么。\"></a>回顾这一个月。我问自己学到了什么。</h5><p>1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。<br>2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）<br>3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。<br>4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。</p>\n<h5 id=\"生活上的感谢信\"><a href=\"#生活上的感谢信\" class=\"headerlink\" title=\"生活上的感谢信\"></a>生活上的感谢信</h5><p>很感激因为我手术原因照顾我的朋友们。<br>首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。<br>其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈<br>然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。<br>小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。<br>还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在<br>最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一年一度的暑期留校就这样结束了。<br>去年忘记总结，今年一定要总结。</p>\n<h5 id=\"回顾这一个月。我问自己学到了什么。\"><a href=\"#回顾这一个月。我问自己学到了什么。\" class=\"headerlink\" title=\"回顾这一个月。我问自己学到了什么。\"></a>回顾这一个月。我问自己学到了什么。</h5><p>1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。<br>2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）<br>3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。<br>4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。</p>\n<h5 id=\"生活上的感谢信\"><a href=\"#生活上的感谢信\" class=\"headerlink\" title=\"生活上的感谢信\"></a>生活上的感谢信</h5><p>很感激因为我手术原因照顾我的朋友们。<br>首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。<br>其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈<br>然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。<br>小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。<br>还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在<br>最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！</p>\n"},{"title":"初识http","date":"2017-08-01T08:05:59.000Z","_content":"#### 初识http\n在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http\n#### 什么是http?\n从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：\n\n`超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。`\n\n因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。\n\n#### http包含了那些方法？\nHTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：\n##### GET\n向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法\n\n##### HEAD\n与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。\n\n##### POST\n向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。\n\n##### PUT\n向指定资源位置上传其最新内容。\n\n##### DELETE\n请求服务器删除Request-URI所标识的资源。\n\n##### TRACE\n回显服务器收到的请求，主要用于测试或诊断。\n\n##### OPTIONS\n这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。\n\n##### CONNECT\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。\n方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。\nHTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：\n\n##### PATCH（由 RFC 5789 指定的方法）\n用于将局部修改应用到资源。\n\n一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。\n\n#### http包含那些内容？\n大体上，包含报文首部，报文主体。\n\n##### 报文首部\n报文首部由于请求以及响应的报文首部。\n\n##### 请求报文首部。\n请求行：包含用于请求的方法，请求URI以及HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 响应报文首部\n状态行:包含表明结果的状态码，原因短语和HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 报文主体\n报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。\n\n##### 返回结果的常用HTTP状态码\n| 状态码 | 类别 | 原因短语 |\n| --- | --- | --- |\n| 1xx | Informational(信息性状态码) | 接受的请求正在处理 |\n| 2xx | Success(成功状态码) | 请求正常处理完毕 |\n| 3xx | Redirection(重定向状态码) | 需要进行附加操作以完成请求 |\n| 4xx | Client Error(客户端错误状态码) | 服务器无法处理请求 |\n| 5xx | Server Error(服务器端错误状态码) | 服务器处理请求出错 |\n\n#### 1XX 消息\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。\n#### 2XX 成功\n##### 200 Ok\n请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。\n##### 204 No Content\n服务器成功处理了请求，没有返回任何内容。\n##### 206 Partial Content\n服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\n#### 3XX 重定向\n##### 301 Moved Permanently\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\n新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。\n\n##### 302 Found\n要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\n新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。\n\n##### 303 See Other\n对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。\n新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。\n\n##### 304 Not Modified\n表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。\n\n##### 307 Temporary Redirect\n在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。\n\n#### 4XX客户端错误\n##### 400 Bad Request\n由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求\n\n##### 401 Unauthorized\n用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。\n\n##### 403 Forbidden\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。\n\n##### 404 Not Found\n请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。\n\n#### 5XX服务器错误\n##### 500 Internal Server Error\n通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。\n\n##### 503 Service Unavailable\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。\n\n#### HTTP的应用\n##### 三次握手，四次挥手\n哪三次握手？以一个小段子来解释。\n第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’\n第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’\n第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’\n于是他们就在一起了。\n这就是经典的三次握手\n那又是哪四次挥手呢？\n第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’\n第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘\n第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘\n第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘\n于是他们因此分手。\n\n**为什么是三次握手呢？**\n在知乎上看到一个人这样答道：\n这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.\n为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧\n\n#### http有不满足现代web发展的需求？\nhttp是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。\n\n##### 什么是HTTPS\nhttps并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。\n\n##### 为什么要HTTPS\n由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。\nssl释义：\n`SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。`\n因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍\n\n##### 总结：\n初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。","source":"_posts/touch-http.md","raw":"---\ntitle: 初识http\ndate: 2017-08-01 16:05:59\ntags: HTTP\n---\n#### 初识http\n在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http\n#### 什么是http?\n从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：\n\n`超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。`\n\n因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。\n\n#### http包含了那些方法？\nHTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：\n##### GET\n向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法\n\n##### HEAD\n与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。\n\n##### POST\n向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。\n\n##### PUT\n向指定资源位置上传其最新内容。\n\n##### DELETE\n请求服务器删除Request-URI所标识的资源。\n\n##### TRACE\n回显服务器收到的请求，主要用于测试或诊断。\n\n##### OPTIONS\n这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。\n\n##### CONNECT\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。\n方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。\nHTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：\n\n##### PATCH（由 RFC 5789 指定的方法）\n用于将局部修改应用到资源。\n\n一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。\n\n#### http包含那些内容？\n大体上，包含报文首部，报文主体。\n\n##### 报文首部\n报文首部由于请求以及响应的报文首部。\n\n##### 请求报文首部。\n请求行：包含用于请求的方法，请求URI以及HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 响应报文首部\n状态行:包含表明结果的状态码，原因短语和HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 报文主体\n报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。\n\n##### 返回结果的常用HTTP状态码\n| 状态码 | 类别 | 原因短语 |\n| --- | --- | --- |\n| 1xx | Informational(信息性状态码) | 接受的请求正在处理 |\n| 2xx | Success(成功状态码) | 请求正常处理完毕 |\n| 3xx | Redirection(重定向状态码) | 需要进行附加操作以完成请求 |\n| 4xx | Client Error(客户端错误状态码) | 服务器无法处理请求 |\n| 5xx | Server Error(服务器端错误状态码) | 服务器处理请求出错 |\n\n#### 1XX 消息\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。\n#### 2XX 成功\n##### 200 Ok\n请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。\n##### 204 No Content\n服务器成功处理了请求，没有返回任何内容。\n##### 206 Partial Content\n服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\n#### 3XX 重定向\n##### 301 Moved Permanently\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\n新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。\n\n##### 302 Found\n要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\n新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。\n\n##### 303 See Other\n对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。\n新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。\n\n##### 304 Not Modified\n表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。\n\n##### 307 Temporary Redirect\n在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。\n\n#### 4XX客户端错误\n##### 400 Bad Request\n由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求\n\n##### 401 Unauthorized\n用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。\n\n##### 403 Forbidden\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。\n\n##### 404 Not Found\n请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。\n\n#### 5XX服务器错误\n##### 500 Internal Server Error\n通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。\n\n##### 503 Service Unavailable\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。\n\n#### HTTP的应用\n##### 三次握手，四次挥手\n哪三次握手？以一个小段子来解释。\n第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’\n第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’\n第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’\n于是他们就在一起了。\n这就是经典的三次握手\n那又是哪四次挥手呢？\n第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’\n第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘\n第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘\n第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘\n于是他们因此分手。\n\n**为什么是三次握手呢？**\n在知乎上看到一个人这样答道：\n这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.\n为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧\n\n#### http有不满足现代web发展的需求？\nhttp是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。\n\n##### 什么是HTTPS\nhttps并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。\n\n##### 为什么要HTTPS\n由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。\nssl释义：\n`SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。`\n因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍\n\n##### 总结：\n初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。","slug":"touch-http","published":1,"updated":"2018-05-01T12:17:54.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rr000raefah82digb5","content":"<h4 id=\"初识http\"><a href=\"#初识http\" class=\"headerlink\" title=\"初识http\"></a>初识http</h4><p>在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http</p>\n<h4 id=\"什么是http\"><a href=\"#什么是http\" class=\"headerlink\" title=\"什么是http?\"></a>什么是http?</h4><p>从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：</p>\n<p><code>超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。</code></p>\n<p>因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。</p>\n<h4 id=\"http包含了那些方法？\"><a href=\"#http包含了那些方法？\" class=\"headerlink\" title=\"http包含了那些方法？\"></a>http包含了那些方法？</h4><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p>\n<h5 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法</p>\n<h5 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h5><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p>\n<h5 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p>\n<h5 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h5><p>向指定资源位置上传其最新内容。</p>\n<h5 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h5><p>请求服务器删除Request-URI所标识的资源。</p>\n<h5 id=\"TRACE\"><a href=\"#TRACE\" class=\"headerlink\" title=\"TRACE\"></a>TRACE</h5><p>回显服务器收到的请求，主要用于测试或诊断。</p>\n<h5 id=\"OPTIONS\"><a href=\"#OPTIONS\" class=\"headerlink\" title=\"OPTIONS\"></a>OPTIONS</h5><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p>\n<h5 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h5><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。<br>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。<br>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：</p>\n<h5 id=\"PATCH（由-RFC-5789-指定的方法）\"><a href=\"#PATCH（由-RFC-5789-指定的方法）\" class=\"headerlink\" title=\"PATCH（由 RFC 5789 指定的方法）\"></a>PATCH（由 RFC 5789 指定的方法）</h5><p>用于将局部修改应用到资源。</p>\n<p>一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。</p>\n<h4 id=\"http包含那些内容？\"><a href=\"#http包含那些内容？\" class=\"headerlink\" title=\"http包含那些内容？\"></a>http包含那些内容？</h4><p>大体上，包含报文首部，报文主体。</p>\n<h5 id=\"报文首部\"><a href=\"#报文首部\" class=\"headerlink\" title=\"报文首部\"></a>报文首部</h5><p>报文首部由于请求以及响应的报文首部。</p>\n<h5 id=\"请求报文首部。\"><a href=\"#请求报文首部。\" class=\"headerlink\" title=\"请求报文首部。\"></a>请求报文首部。</h5><p>请求行：包含用于请求的方法，请求URI以及HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p>\n<h5 id=\"响应报文首部\"><a href=\"#响应报文首部\" class=\"headerlink\" title=\"响应报文首部\"></a>响应报文首部</h5><p>状态行:包含表明结果的状态码，原因短语和HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p>\n<h5 id=\"报文主体\"><a href=\"#报文主体\" class=\"headerlink\" title=\"报文主体\"></a>报文主体</h5><p>报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。</p>\n<h5 id=\"返回结果的常用HTTP状态码\"><a href=\"#返回结果的常用HTTP状态码\" class=\"headerlink\" title=\"返回结果的常用HTTP状态码\"></a>返回结果的常用HTTP状态码</h5><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>类别</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>Informational(信息性状态码)</td>\n<td>接受的请求正在处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>Success(成功状态码)</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>Redirection(重定向状态码)</td>\n<td>需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>Client Error(客户端错误状态码)</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>Server Error(服务器端错误状态码)</td>\n<td>服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1XX-消息\"><a href=\"#1XX-消息\" class=\"headerlink\" title=\"1XX 消息\"></a>1XX 消息</h4><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。</p>\n<h4 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h4><h5 id=\"200-Ok\"><a href=\"#200-Ok\" class=\"headerlink\" title=\"200 Ok\"></a>200 Ok</h5><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>\n<h5 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h5><p>服务器成功处理了请求，没有返回任何内容。</p>\n<h5 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h5><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>\n<h4 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h4><h5 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h5><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>\n<h5 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h5><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>\n<h5 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h5><p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>\n<h5 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h5><p>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>\n<h5 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h5><p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>\n<h4 id=\"4XX客户端错误\"><a href=\"#4XX客户端错误\" class=\"headerlink\" title=\"4XX客户端错误\"></a>4XX客户端错误</h4><h5 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h5><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求</p>\n<h5 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h5><p>用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p>\n<h5 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h5><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>\n<h5 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h5><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>\n<h4 id=\"5XX服务器错误\"><a href=\"#5XX服务器错误\" class=\"headerlink\" title=\"5XX服务器错误\"></a>5XX服务器错误</h4><h5 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h5><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>\n<h5 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h5><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>\n<h4 id=\"HTTP的应用\"><a href=\"#HTTP的应用\" class=\"headerlink\" title=\"HTTP的应用\"></a>HTTP的应用</h4><h5 id=\"三次握手，四次挥手\"><a href=\"#三次握手，四次挥手\" class=\"headerlink\" title=\"三次握手，四次挥手\"></a>三次握手，四次挥手</h5><p>哪三次握手？以一个小段子来解释。<br>第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’<br>第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’<br>第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’<br>于是他们就在一起了。<br>这就是经典的三次握手<br>那又是哪四次挥手呢？<br>第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’<br>第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘<br>第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘<br>第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘<br>于是他们因此分手。</p>\n<p><strong>为什么是三次握手呢？</strong><br>在知乎上看到一个人这样答道：<br>这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.<br>为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧</p>\n<h4 id=\"http有不满足现代web发展的需求？\"><a href=\"#http有不满足现代web发展的需求？\" class=\"headerlink\" title=\"http有不满足现代web发展的需求？\"></a>http有不满足现代web发展的需求？</h4><p>http是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。</p>\n<h5 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h5><p>https并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>\n<h5 id=\"为什么要HTTPS\"><a href=\"#为什么要HTTPS\" class=\"headerlink\" title=\"为什么要HTTPS\"></a>为什么要HTTPS</h5><p>由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。<br>ssl释义：<br><code>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</code><br>因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"初识http\"><a href=\"#初识http\" class=\"headerlink\" title=\"初识http\"></a>初识http</h4><p>在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http</p>\n<h4 id=\"什么是http\"><a href=\"#什么是http\" class=\"headerlink\" title=\"什么是http?\"></a>什么是http?</h4><p>从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：</p>\n<p><code>超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。</code></p>\n<p>因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。</p>\n<h4 id=\"http包含了那些方法？\"><a href=\"#http包含了那些方法？\" class=\"headerlink\" title=\"http包含了那些方法？\"></a>http包含了那些方法？</h4><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p>\n<h5 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法</p>\n<h5 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h5><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p>\n<h5 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p>\n<h5 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h5><p>向指定资源位置上传其最新内容。</p>\n<h5 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h5><p>请求服务器删除Request-URI所标识的资源。</p>\n<h5 id=\"TRACE\"><a href=\"#TRACE\" class=\"headerlink\" title=\"TRACE\"></a>TRACE</h5><p>回显服务器收到的请求，主要用于测试或诊断。</p>\n<h5 id=\"OPTIONS\"><a href=\"#OPTIONS\" class=\"headerlink\" title=\"OPTIONS\"></a>OPTIONS</h5><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p>\n<h5 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h5><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。<br>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。<br>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：</p>\n<h5 id=\"PATCH（由-RFC-5789-指定的方法）\"><a href=\"#PATCH（由-RFC-5789-指定的方法）\" class=\"headerlink\" title=\"PATCH（由 RFC 5789 指定的方法）\"></a>PATCH（由 RFC 5789 指定的方法）</h5><p>用于将局部修改应用到资源。</p>\n<p>一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。</p>\n<h4 id=\"http包含那些内容？\"><a href=\"#http包含那些内容？\" class=\"headerlink\" title=\"http包含那些内容？\"></a>http包含那些内容？</h4><p>大体上，包含报文首部，报文主体。</p>\n<h5 id=\"报文首部\"><a href=\"#报文首部\" class=\"headerlink\" title=\"报文首部\"></a>报文首部</h5><p>报文首部由于请求以及响应的报文首部。</p>\n<h5 id=\"请求报文首部。\"><a href=\"#请求报文首部。\" class=\"headerlink\" title=\"请求报文首部。\"></a>请求报文首部。</h5><p>请求行：包含用于请求的方法，请求URI以及HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p>\n<h5 id=\"响应报文首部\"><a href=\"#响应报文首部\" class=\"headerlink\" title=\"响应报文首部\"></a>响应报文首部</h5><p>状态行:包含表明结果的状态码，原因短语和HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p>\n<h5 id=\"报文主体\"><a href=\"#报文主体\" class=\"headerlink\" title=\"报文主体\"></a>报文主体</h5><p>报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。</p>\n<h5 id=\"返回结果的常用HTTP状态码\"><a href=\"#返回结果的常用HTTP状态码\" class=\"headerlink\" title=\"返回结果的常用HTTP状态码\"></a>返回结果的常用HTTP状态码</h5><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>类别</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>Informational(信息性状态码)</td>\n<td>接受的请求正在处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>Success(成功状态码)</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>Redirection(重定向状态码)</td>\n<td>需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>Client Error(客户端错误状态码)</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>Server Error(服务器端错误状态码)</td>\n<td>服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1XX-消息\"><a href=\"#1XX-消息\" class=\"headerlink\" title=\"1XX 消息\"></a>1XX 消息</h4><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。</p>\n<h4 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h4><h5 id=\"200-Ok\"><a href=\"#200-Ok\" class=\"headerlink\" title=\"200 Ok\"></a>200 Ok</h5><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>\n<h5 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h5><p>服务器成功处理了请求，没有返回任何内容。</p>\n<h5 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h5><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>\n<h4 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h4><h5 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h5><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>\n<h5 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h5><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>\n<h5 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h5><p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>\n<h5 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h5><p>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>\n<h5 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h5><p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>\n<h4 id=\"4XX客户端错误\"><a href=\"#4XX客户端错误\" class=\"headerlink\" title=\"4XX客户端错误\"></a>4XX客户端错误</h4><h5 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h5><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求</p>\n<h5 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h5><p>用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p>\n<h5 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h5><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>\n<h5 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h5><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>\n<h4 id=\"5XX服务器错误\"><a href=\"#5XX服务器错误\" class=\"headerlink\" title=\"5XX服务器错误\"></a>5XX服务器错误</h4><h5 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h5><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>\n<h5 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h5><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>\n<h4 id=\"HTTP的应用\"><a href=\"#HTTP的应用\" class=\"headerlink\" title=\"HTTP的应用\"></a>HTTP的应用</h4><h5 id=\"三次握手，四次挥手\"><a href=\"#三次握手，四次挥手\" class=\"headerlink\" title=\"三次握手，四次挥手\"></a>三次握手，四次挥手</h5><p>哪三次握手？以一个小段子来解释。<br>第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’<br>第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’<br>第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’<br>于是他们就在一起了。<br>这就是经典的三次握手<br>那又是哪四次挥手呢？<br>第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’<br>第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘<br>第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘<br>第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘<br>于是他们因此分手。</p>\n<p><strong>为什么是三次握手呢？</strong><br>在知乎上看到一个人这样答道：<br>这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.<br>为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧</p>\n<h4 id=\"http有不满足现代web发展的需求？\"><a href=\"#http有不满足现代web发展的需求？\" class=\"headerlink\" title=\"http有不满足现代web发展的需求？\"></a>http有不满足现代web发展的需求？</h4><p>http是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。</p>\n<h5 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h5><p>https并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>\n<h5 id=\"为什么要HTTPS\"><a href=\"#为什么要HTTPS\" class=\"headerlink\" title=\"为什么要HTTPS\"></a>为什么要HTTPS</h5><p>由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。<br>ssl释义：<br><code>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</code><br>因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。</p>\n"},{"title":"你不知道的JavaScript————作用域和闭包篇","date":"2017-08-19T12:20:32.000Z","_content":"### 编译原理\n为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。\n先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。\n应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。\n\n##### 分词/词法分析\n将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元\n例如：在 var a = 2。将会分解成 var, a, =, 2\n\n##### 解析/语法分析\n这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。\n例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2\n\n##### 代码生成\n将抽象语法树转换成可执行代码的过程统称为代码生成。\n例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中\n\nps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳\n\n### 作用域理解\n引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。\n\n##### 编译器的处理\n首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。\n接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升\n\n##### 左值（LHS）与右值（RHS）\n从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。\n而引擎和作用域则是如下工作的：\n以下面为例\n```\nfunction foo (a) {\n\tconsole.log(a)\n}\nfoo(2)\n```\n1、引擎查询作用域中是否有foo\n2、作用域查询到foo地址，将地址传给引擎\n3、引擎执行foo，并查询作用域中是否有a\n4、作用域查到a的地址，将其传给引擎\n5、引擎给a赋值，并查询作用域中是否有console\n6、作用域查到console地址，将其传给引擎\n7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变\n8、作用域查询a的值\n9、引擎使用console.log方法，并将a的值传入\n\n_ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误_\n### 欺骗词法\n这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法\n\n##### EVAL\n```\nfunction foo (str, a) {\n\teval(str)\t\t\t// 欺骗……\n\tconsole.log(a, b)\n}\nvar b = 2\nfoo(\"var b = 3, 1\")\n```\neval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。\n\n##### SETTIMEOUT\nsetTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用\n\n_ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用_\n\n##### WITH\n在严格模式之下使用报错。不推荐使用。\n```\n// 好处\nvar obj = {\n\ta:1,\n\tb:2,\n\tc:3\n}\n// 赋值很麻烦\nobj1.a = 2\nobj1.b = 3\nobj1.c = 4\n// 赋值相对快捷\nwith(obj) {\n\ta = 3\n\tb = 4\n\tc = 5\n}\n// bad use\nfunction foo(obj) {\n\twith(obj){\n\t\ta = 2\n\t}\n}\nvar o1 = {\n\ta:3\n}\nvar o2 = {\n\tb:3\n}\nfoo(o1)\nconsole.log(o1.a) \t// 2\nfoo(o2)\nconsole.log(o2.a)\t\t// undefined\nconsole.log(a)\t\t\t// 2\n```\n出现上述原因是什么？\n在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。\n第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。\n\n### javascript在es6之前除try-catch没有块级作用域\n什么是块级作用域？之前我有写过一篇文章。\n所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：\n```\n{\n\tvar a = 0\n}\nconsole.log(a)\t// 0\n\n```\n能在外部访问到的，都不是块级作用域。\n因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。\n\n##### ES6中的LET\n出现let之后，便有了块级作用域。这种情况为javascript更容易\n\n### 提升\n文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。\n例如：\n```\nfoo()\nfunction foo () {\n\tconsole.log('hello')\n}\n```\n在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中->然后执行代码。foo函数->引擎中发现作用域中有foo函数->引擎执行foo函数\n### 闭包\n闭包是为了函数外部使用函数内部变量，出现的一个名词\n```\nfunction foo() {\n\tvar a = 2;\n\tfunction bar () {\n\t\tconsole.log(a)\n\t}\n\treturn bar\n}\nvar baz = foo()\nbaz()\t// 2\n```\n这种就是闭包。闭包的详细，之前重读javascript一书中有写过。\n_ps： 所有的javascript的回调都是闭包_\n### 模块机制\n之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。\n\n##### 小结：\n学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼","source":"_posts/you-dont-konwn-javascript-scope.md","raw":"---\ntitle: 你不知道的JavaScript————作用域和闭包篇\ndate: 2017-08-19 20:20:32\ntags: JavaScript\n---\n### 编译原理\n为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。\n先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。\n应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。\n\n##### 分词/词法分析\n将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元\n例如：在 var a = 2。将会分解成 var, a, =, 2\n\n##### 解析/语法分析\n这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。\n例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2\n\n##### 代码生成\n将抽象语法树转换成可执行代码的过程统称为代码生成。\n例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中\n\nps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳\n\n### 作用域理解\n引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。\n\n##### 编译器的处理\n首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。\n接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升\n\n##### 左值（LHS）与右值（RHS）\n从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。\n而引擎和作用域则是如下工作的：\n以下面为例\n```\nfunction foo (a) {\n\tconsole.log(a)\n}\nfoo(2)\n```\n1、引擎查询作用域中是否有foo\n2、作用域查询到foo地址，将地址传给引擎\n3、引擎执行foo，并查询作用域中是否有a\n4、作用域查到a的地址，将其传给引擎\n5、引擎给a赋值，并查询作用域中是否有console\n6、作用域查到console地址，将其传给引擎\n7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变\n8、作用域查询a的值\n9、引擎使用console.log方法，并将a的值传入\n\n_ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误_\n### 欺骗词法\n这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法\n\n##### EVAL\n```\nfunction foo (str, a) {\n\teval(str)\t\t\t// 欺骗……\n\tconsole.log(a, b)\n}\nvar b = 2\nfoo(\"var b = 3, 1\")\n```\neval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。\n\n##### SETTIMEOUT\nsetTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用\n\n_ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用_\n\n##### WITH\n在严格模式之下使用报错。不推荐使用。\n```\n// 好处\nvar obj = {\n\ta:1,\n\tb:2,\n\tc:3\n}\n// 赋值很麻烦\nobj1.a = 2\nobj1.b = 3\nobj1.c = 4\n// 赋值相对快捷\nwith(obj) {\n\ta = 3\n\tb = 4\n\tc = 5\n}\n// bad use\nfunction foo(obj) {\n\twith(obj){\n\t\ta = 2\n\t}\n}\nvar o1 = {\n\ta:3\n}\nvar o2 = {\n\tb:3\n}\nfoo(o1)\nconsole.log(o1.a) \t// 2\nfoo(o2)\nconsole.log(o2.a)\t\t// undefined\nconsole.log(a)\t\t\t// 2\n```\n出现上述原因是什么？\n在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。\n第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。\n\n### javascript在es6之前除try-catch没有块级作用域\n什么是块级作用域？之前我有写过一篇文章。\n所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：\n```\n{\n\tvar a = 0\n}\nconsole.log(a)\t// 0\n\n```\n能在外部访问到的，都不是块级作用域。\n因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。\n\n##### ES6中的LET\n出现let之后，便有了块级作用域。这种情况为javascript更容易\n\n### 提升\n文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。\n例如：\n```\nfoo()\nfunction foo () {\n\tconsole.log('hello')\n}\n```\n在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中->然后执行代码。foo函数->引擎中发现作用域中有foo函数->引擎执行foo函数\n### 闭包\n闭包是为了函数外部使用函数内部变量，出现的一个名词\n```\nfunction foo() {\n\tvar a = 2;\n\tfunction bar () {\n\t\tconsole.log(a)\n\t}\n\treturn bar\n}\nvar baz = foo()\nbaz()\t// 2\n```\n这种就是闭包。闭包的详细，之前重读javascript一书中有写过。\n_ps： 所有的javascript的回调都是闭包_\n### 模块机制\n之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。\n\n##### 小结：\n学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼","slug":"you-dont-konwn-javascript-scope","published":1,"updated":"2018-05-01T12:28:26.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rs000uaefay74b7nci","content":"<h3 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h3><p>为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。<br>先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。<br>应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。</p>\n<h5 id=\"分词-词法分析\"><a href=\"#分词-词法分析\" class=\"headerlink\" title=\"分词/词法分析\"></a>分词/词法分析</h5><p>将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元<br>例如：在 var a = 2。将会分解成 var, a, =, 2</p>\n<h5 id=\"解析-语法分析\"><a href=\"#解析-语法分析\" class=\"headerlink\" title=\"解析/语法分析\"></a>解析/语法分析</h5><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。<br>例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2</p>\n<h5 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h5><p>将抽象语法树转换成可执行代码的过程统称为代码生成。<br>例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中</p>\n<p>ps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳</p>\n<h3 id=\"作用域理解\"><a href=\"#作用域理解\" class=\"headerlink\" title=\"作用域理解\"></a>作用域理解</h3><p>引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。</p>\n<h5 id=\"编译器的处理\"><a href=\"#编译器的处理\" class=\"headerlink\" title=\"编译器的处理\"></a>编译器的处理</h5><p>首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。<br>接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！<br>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升</p>\n<h5 id=\"左值（LHS）与右值（RHS）\"><a href=\"#左值（LHS）与右值（RHS）\" class=\"headerlink\" title=\"左值（LHS）与右值（RHS）\"></a>左值（LHS）与右值（RHS）</h5><p>从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。<br>而引擎和作用域则是如下工作的：<br>以下面为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (a) &#123;</span><br><span class=\"line\">\tconsole.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2)</span><br></pre></td></tr></table></figure></p>\n<p>1、引擎查询作用域中是否有foo<br>2、作用域查询到foo地址，将地址传给引擎<br>3、引擎执行foo，并查询作用域中是否有a<br>4、作用域查到a的地址，将其传给引擎<br>5、引擎给a赋值，并查询作用域中是否有console<br>6、作用域查到console地址，将其传给引擎<br>7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变<br>8、作用域查询a的值<br>9、引擎使用console.log方法，并将a的值传入</p>\n<p><em>ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误</em></p>\n<h3 id=\"欺骗词法\"><a href=\"#欺骗词法\" class=\"headerlink\" title=\"欺骗词法\"></a>欺骗词法</h3><p>这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法</p>\n<h5 id=\"EVAL\"><a href=\"#EVAL\" class=\"headerlink\" title=\"EVAL\"></a>EVAL</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (str, a) &#123;</span><br><span class=\"line\">\teval(str)\t\t\t// 欺骗……</span><br><span class=\"line\">\tconsole.log(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = 2</span><br><span class=\"line\">foo(&quot;var b = 3, 1&quot;)</span><br></pre></td></tr></table></figure>\n<p>eval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。</p>\n<h5 id=\"SETTIMEOUT\"><a href=\"#SETTIMEOUT\" class=\"headerlink\" title=\"SETTIMEOUT\"></a>SETTIMEOUT</h5><p>setTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用</p>\n<p><em>ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用</em></p>\n<h5 id=\"WITH\"><a href=\"#WITH\" class=\"headerlink\" title=\"WITH\"></a>WITH</h5><p>在严格模式之下使用报错。不推荐使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 好处</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:1,</span><br><span class=\"line\">\tb:2,</span><br><span class=\"line\">\tc:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 赋值很麻烦</span><br><span class=\"line\">obj1.a = 2</span><br><span class=\"line\">obj1.b = 3</span><br><span class=\"line\">obj1.c = 4</span><br><span class=\"line\">// 赋值相对快捷</span><br><span class=\"line\">with(obj) &#123;</span><br><span class=\"line\">\ta = 3</span><br><span class=\"line\">\tb = 4</span><br><span class=\"line\">\tc = 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// bad use</span><br><span class=\"line\">function foo(obj) &#123;</span><br><span class=\"line\">\twith(obj)&#123;</span><br><span class=\"line\">\t\ta = 2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o1 = &#123;</span><br><span class=\"line\">\ta:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o2 = &#123;</span><br><span class=\"line\">\tb:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(o1)</span><br><span class=\"line\">console.log(o1.a) \t// 2</span><br><span class=\"line\">foo(o2)</span><br><span class=\"line\">console.log(o2.a)\t\t// undefined</span><br><span class=\"line\">console.log(a)\t\t\t// 2</span><br></pre></td></tr></table></figure></p>\n<p>出现上述原因是什么？<br>在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。<br>第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。</p>\n<h3 id=\"javascript在es6之前除try-catch没有块级作用域\"><a href=\"#javascript在es6之前除try-catch没有块级作用域\" class=\"headerlink\" title=\"javascript在es6之前除try-catch没有块级作用域\"></a>javascript在es6之前除try-catch没有块级作用域</h3><p>什么是块级作用域？之前我有写过一篇文章。<br>所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar a = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)\t// 0</span><br></pre></td></tr></table></figure></p>\n<p>能在外部访问到的，都不是块级作用域。<br>因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。</p>\n<h5 id=\"ES6中的LET\"><a href=\"#ES6中的LET\" class=\"headerlink\" title=\"ES6中的LET\"></a>ES6中的LET</h5><p>出现let之后，便有了块级作用域。这种情况为javascript更容易</p>\n<h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><p>文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\">function foo () &#123;</span><br><span class=\"line\">\tconsole.log(&apos;hello&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中-&gt;然后执行代码。foo函数-&gt;引擎中发现作用域中有foo函数-&gt;引擎执行foo函数</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是为了函数外部使用函数内部变量，出现的一个名词<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tvar a = 2;</span><br><span class=\"line\">\tfunction bar () &#123;</span><br><span class=\"line\">\t\tconsole.log(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn bar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var baz = foo()</span><br><span class=\"line\">baz()\t// 2</span><br></pre></td></tr></table></figure></p>\n<p>这种就是闭包。闭包的详细，之前重读javascript一书中有写过。<br><em>ps： 所有的javascript的回调都是闭包</em></p>\n<h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><p>之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。</p>\n<h5 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h5><p>学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h3><p>为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。<br>先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。<br>应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。</p>\n<h5 id=\"分词-词法分析\"><a href=\"#分词-词法分析\" class=\"headerlink\" title=\"分词/词法分析\"></a>分词/词法分析</h5><p>将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元<br>例如：在 var a = 2。将会分解成 var, a, =, 2</p>\n<h5 id=\"解析-语法分析\"><a href=\"#解析-语法分析\" class=\"headerlink\" title=\"解析/语法分析\"></a>解析/语法分析</h5><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。<br>例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2</p>\n<h5 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h5><p>将抽象语法树转换成可执行代码的过程统称为代码生成。<br>例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中</p>\n<p>ps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳</p>\n<h3 id=\"作用域理解\"><a href=\"#作用域理解\" class=\"headerlink\" title=\"作用域理解\"></a>作用域理解</h3><p>引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。</p>\n<h5 id=\"编译器的处理\"><a href=\"#编译器的处理\" class=\"headerlink\" title=\"编译器的处理\"></a>编译器的处理</h5><p>首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。<br>接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！<br>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升</p>\n<h5 id=\"左值（LHS）与右值（RHS）\"><a href=\"#左值（LHS）与右值（RHS）\" class=\"headerlink\" title=\"左值（LHS）与右值（RHS）\"></a>左值（LHS）与右值（RHS）</h5><p>从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。<br>而引擎和作用域则是如下工作的：<br>以下面为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (a) &#123;</span><br><span class=\"line\">\tconsole.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2)</span><br></pre></td></tr></table></figure></p>\n<p>1、引擎查询作用域中是否有foo<br>2、作用域查询到foo地址，将地址传给引擎<br>3、引擎执行foo，并查询作用域中是否有a<br>4、作用域查到a的地址，将其传给引擎<br>5、引擎给a赋值，并查询作用域中是否有console<br>6、作用域查到console地址，将其传给引擎<br>7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变<br>8、作用域查询a的值<br>9、引擎使用console.log方法，并将a的值传入</p>\n<p><em>ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误</em></p>\n<h3 id=\"欺骗词法\"><a href=\"#欺骗词法\" class=\"headerlink\" title=\"欺骗词法\"></a>欺骗词法</h3><p>这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法</p>\n<h5 id=\"EVAL\"><a href=\"#EVAL\" class=\"headerlink\" title=\"EVAL\"></a>EVAL</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (str, a) &#123;</span><br><span class=\"line\">\teval(str)\t\t\t// 欺骗……</span><br><span class=\"line\">\tconsole.log(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = 2</span><br><span class=\"line\">foo(&quot;var b = 3, 1&quot;)</span><br></pre></td></tr></table></figure>\n<p>eval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。</p>\n<h5 id=\"SETTIMEOUT\"><a href=\"#SETTIMEOUT\" class=\"headerlink\" title=\"SETTIMEOUT\"></a>SETTIMEOUT</h5><p>setTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用</p>\n<p><em>ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用</em></p>\n<h5 id=\"WITH\"><a href=\"#WITH\" class=\"headerlink\" title=\"WITH\"></a>WITH</h5><p>在严格模式之下使用报错。不推荐使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 好处</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:1,</span><br><span class=\"line\">\tb:2,</span><br><span class=\"line\">\tc:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 赋值很麻烦</span><br><span class=\"line\">obj1.a = 2</span><br><span class=\"line\">obj1.b = 3</span><br><span class=\"line\">obj1.c = 4</span><br><span class=\"line\">// 赋值相对快捷</span><br><span class=\"line\">with(obj) &#123;</span><br><span class=\"line\">\ta = 3</span><br><span class=\"line\">\tb = 4</span><br><span class=\"line\">\tc = 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// bad use</span><br><span class=\"line\">function foo(obj) &#123;</span><br><span class=\"line\">\twith(obj)&#123;</span><br><span class=\"line\">\t\ta = 2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o1 = &#123;</span><br><span class=\"line\">\ta:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o2 = &#123;</span><br><span class=\"line\">\tb:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(o1)</span><br><span class=\"line\">console.log(o1.a) \t// 2</span><br><span class=\"line\">foo(o2)</span><br><span class=\"line\">console.log(o2.a)\t\t// undefined</span><br><span class=\"line\">console.log(a)\t\t\t// 2</span><br></pre></td></tr></table></figure></p>\n<p>出现上述原因是什么？<br>在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。<br>第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。</p>\n<h3 id=\"javascript在es6之前除try-catch没有块级作用域\"><a href=\"#javascript在es6之前除try-catch没有块级作用域\" class=\"headerlink\" title=\"javascript在es6之前除try-catch没有块级作用域\"></a>javascript在es6之前除try-catch没有块级作用域</h3><p>什么是块级作用域？之前我有写过一篇文章。<br>所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar a = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)\t// 0</span><br></pre></td></tr></table></figure></p>\n<p>能在外部访问到的，都不是块级作用域。<br>因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。</p>\n<h5 id=\"ES6中的LET\"><a href=\"#ES6中的LET\" class=\"headerlink\" title=\"ES6中的LET\"></a>ES6中的LET</h5><p>出现let之后，便有了块级作用域。这种情况为javascript更容易</p>\n<h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><p>文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\">function foo () &#123;</span><br><span class=\"line\">\tconsole.log(&apos;hello&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中-&gt;然后执行代码。foo函数-&gt;引擎中发现作用域中有foo函数-&gt;引擎执行foo函数</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是为了函数外部使用函数内部变量，出现的一个名词<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tvar a = 2;</span><br><span class=\"line\">\tfunction bar () &#123;</span><br><span class=\"line\">\t\tconsole.log(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn bar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var baz = foo()</span><br><span class=\"line\">baz()\t// 2</span><br></pre></td></tr></table></figure></p>\n<p>这种就是闭包。闭包的详细，之前重读javascript一书中有写过。<br><em>ps： 所有的javascript的回调都是闭包</em></p>\n<h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><p>之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。</p>\n<h5 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h5><p>学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼</p>\n"},{"title":"DPCH (DPCHCD)服务器的搭建与应用","date":"2017-10-21T12:53:10.000Z","_content":"### 什么是DHCP？\n#### 1.DHCP简介\nDHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。\n#### 2.为什么要使用DHCP？\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。\n#### 3.DHCP实现\n![dhcp_client](img/dhcp_client.png)\nDHCP的实现分为4步，分别是：\n第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。\n第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。\n第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。\n第四步：DHCP Server发送ACK数据包，确认信息。\n####　4.安装DHCP服务器\n由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。\n使用如下命令安装\n```\npacman -S dhcpcd\n\n```\n检测是否安装成功,键入如下命令\n```\ndhcpcd --version\n//显示如下。。。代表安装成功\ndhcpcd 6.11.5\nCopyright (c) 2006-2016 Roy Marples\nCompiled in features: INET IPv4LL INET6 DHCPv6 AUTH\n\n```\n#### 5.DHCP服务器的一般配置\n##### dhcp服务器一般配置步骤\n1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围\n2、建立租约数据库文件\n3、重新加载配置文件或重启dhcp服务器\n\n##### dhcp的工作流程\n在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此[引用](http://www.zyops.com/dhcp-working-procedure)过来\n\n##### 配置文件DHCPD.CONF\n由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：\n```\nvim /etc/dhcpd.conf \n# dhcpd.conf\n#\n# Sample configuration file for ISC dhcpd\n#\n# option definitions common to all supported networks...\noption domain-name \"example.org\";\noption domain-name-servers ns1.example.org, ns2.example.org;\ndefault-lease-time 600;\nmax-lease-time 7200;\n# Use this to enble / disable dynamic dns updates globally.\n#ddns-update-style none;\n# If this DHCP server is the official DHCP server for the local\n# network, the authoritative directive should be uncommented.\n#authoritative;\n# Use this to send dhcp log messages to a different log file (you also\n# have to hack syslog.conf to complete the redirection).\nlog-facility local7;\n# No service will be given on this subnet, but declaring it helps the \n# DHCP server to understand the network topology.\nsubnet 10.152.187.0 netmask 255.255.255.0 {\n}\n# This is a very basic subnet declaration.\nsubnet 10.254.239.0 netmask 255.255.255.224 {\n  range 10.254.239.10 10.254.239.20;\n  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;\n}\n# This declaration allows BOOTP clients to get dynamic addresses,\n# which we don't really recommend.\nsubnet 10.254.239.32 netmask 255.255.255.224 {\n  range dynamic-bootp 10.254.239.40 10.254.239.60;\n  option broadcast-address 10.254.239.31;\n  option routers rtr-239-32-1.example.org;\n}\n# A slightly different configuration for an internal subnet.\nsubnet 10.5.5.0 netmask 255.255.255.224 {\n  range 10.5.5.26 10.5.5.30;\n  option domain-name-servers ns1.internal.example.org;\n  option domain-name \"internal.example.org\";\n  option routers 10.5.5.1;\n  option broadcast-address 10.5.5.31;\n  default-lease-time 600;\n  max-lease-time 7200;\n}\n# Hosts which require special configuration options can be listed in\n# host statements.   If no address is specified, the address will be\n# allocated dynamically (if possible), but the host-specific information\n# will still come from the host declaration.\nhost passacaglia {\n  hardware ethernet 0:0:c0:5d:bd:95;\n  filename \"vmunix.passacaglia\";\n  server-name \"toccata.example.com\";\n}\n# Fixed IP addresses can also be specified for hosts.   These addresses\n# should not also be listed as being available for dynamic assignment.\n# Hosts for which fixed IP addresses have been specified can boot using\n# BOOTP or DHCP.   Hosts for which no fixed address is specified can only\n# be booted with DHCP, unless there is an address range on the subnet\n# to which a BOOTP client is connected which has the dynamic-bootp flag\n# set.\nhost fantasia {\n  hardware ethernet 08:00:07:26:c0:a5;\n  fixed-address fantasia.example.com;\n}\n# You can declare a class of clients and then do address allocation\n# based on that.   The example below shows a case where all clients\n# in a certain class get addresses on the 10.17.224/24 subnet, and all\n# other clients get addresses on the 10.0.29/24 subnet.\nclass \"foo\" {\n  match if substring (option vendor-class-identifier, 0, 4) = \"SUNW\";\n}\nshared-network 224-29 {\n  subnet 10.17.224.0 netmask 255.255.255.0 {\n    option routers rtr-224.example.org;\n  }\n  subnet 10.0.29.0 netmask 255.255.255.0 {\n    option routers rtr-29.example.org;\n  }\n  pool {\n    allow members of \"foo\";\n    range 10.17.224.10 10.17.224.250;\n  }\n  pool {\n    deny members of \"foo\";\n    range 10.0.29.10 10.0.29.230;\n  }\n}\n```\n可以看到如上默认配置\n配置格式如下\n```\n# 全局配置\n参数或选项\t\t\t// 全局生效\n#局部配置\n声明 {\n\t参数或选项\t  // 局部生效\n}\n```\n##### 常用参数介绍\n我在[其他人博客](http://www.zyops.com/dhcp-working-procedure)看到常用参数说明，于是就拷贝下来\n![dhcp_config1](img/dhcp_config1.gif)\n![dhcp_config2](img/dhcp_config2.gif)\n![dhcp_config3](img/dhcp_config3.gif)\n\n##### 配置实例\n某单位销售部有80台计算机所使用的IP地址段为\n192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为\n192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户\n端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。\n```\nsubnet 198.168.1.0 netmask 255.255.255.0 {\n\toption routers 192.168.1.1;\n\toption subnet-mask 255.255.255.0;\n\toption nis-domain\t\t\t\t\"domain.org\";\n\toption domain-name\t\t\t\t\"domain.org\";\n\toption domain-name-servers \t192.168.1.2;\n\toption time-offset \t\t-18000;\n\toption netbios-node-type \t\t2;\n\trange dynamic-bootp\t198.168.1.100 192.168.1.200;\n\tdefault-lease-time \t43200;\n\thost ns {\n\t\tnext-server archlinux.org;\n\t\thardware ethernet ...;\n\t\tfixed-address ...;\n\t}\n}\n```\n##### 开启服务器\n```\nsystemctl start dhcpcd\n\n```\n##### 关闭服务器\n```\nsystemctl stop dhcpcd\n```","source":"_posts/use-dhcp.md","raw":"---\ntitle: DPCH (DPCHCD)服务器的搭建与应用\ndate: 2017-10-21 20:53:10\ntags: Linux\n---\n### 什么是DHCP？\n#### 1.DHCP简介\nDHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。\n#### 2.为什么要使用DHCP？\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。\n#### 3.DHCP实现\n![dhcp_client](img/dhcp_client.png)\nDHCP的实现分为4步，分别是：\n第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。\n第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。\n第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。\n第四步：DHCP Server发送ACK数据包，确认信息。\n####　4.安装DHCP服务器\n由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。\n使用如下命令安装\n```\npacman -S dhcpcd\n\n```\n检测是否安装成功,键入如下命令\n```\ndhcpcd --version\n//显示如下。。。代表安装成功\ndhcpcd 6.11.5\nCopyright (c) 2006-2016 Roy Marples\nCompiled in features: INET IPv4LL INET6 DHCPv6 AUTH\n\n```\n#### 5.DHCP服务器的一般配置\n##### dhcp服务器一般配置步骤\n1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围\n2、建立租约数据库文件\n3、重新加载配置文件或重启dhcp服务器\n\n##### dhcp的工作流程\n在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此[引用](http://www.zyops.com/dhcp-working-procedure)过来\n\n##### 配置文件DHCPD.CONF\n由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：\n```\nvim /etc/dhcpd.conf \n# dhcpd.conf\n#\n# Sample configuration file for ISC dhcpd\n#\n# option definitions common to all supported networks...\noption domain-name \"example.org\";\noption domain-name-servers ns1.example.org, ns2.example.org;\ndefault-lease-time 600;\nmax-lease-time 7200;\n# Use this to enble / disable dynamic dns updates globally.\n#ddns-update-style none;\n# If this DHCP server is the official DHCP server for the local\n# network, the authoritative directive should be uncommented.\n#authoritative;\n# Use this to send dhcp log messages to a different log file (you also\n# have to hack syslog.conf to complete the redirection).\nlog-facility local7;\n# No service will be given on this subnet, but declaring it helps the \n# DHCP server to understand the network topology.\nsubnet 10.152.187.0 netmask 255.255.255.0 {\n}\n# This is a very basic subnet declaration.\nsubnet 10.254.239.0 netmask 255.255.255.224 {\n  range 10.254.239.10 10.254.239.20;\n  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;\n}\n# This declaration allows BOOTP clients to get dynamic addresses,\n# which we don't really recommend.\nsubnet 10.254.239.32 netmask 255.255.255.224 {\n  range dynamic-bootp 10.254.239.40 10.254.239.60;\n  option broadcast-address 10.254.239.31;\n  option routers rtr-239-32-1.example.org;\n}\n# A slightly different configuration for an internal subnet.\nsubnet 10.5.5.0 netmask 255.255.255.224 {\n  range 10.5.5.26 10.5.5.30;\n  option domain-name-servers ns1.internal.example.org;\n  option domain-name \"internal.example.org\";\n  option routers 10.5.5.1;\n  option broadcast-address 10.5.5.31;\n  default-lease-time 600;\n  max-lease-time 7200;\n}\n# Hosts which require special configuration options can be listed in\n# host statements.   If no address is specified, the address will be\n# allocated dynamically (if possible), but the host-specific information\n# will still come from the host declaration.\nhost passacaglia {\n  hardware ethernet 0:0:c0:5d:bd:95;\n  filename \"vmunix.passacaglia\";\n  server-name \"toccata.example.com\";\n}\n# Fixed IP addresses can also be specified for hosts.   These addresses\n# should not also be listed as being available for dynamic assignment.\n# Hosts for which fixed IP addresses have been specified can boot using\n# BOOTP or DHCP.   Hosts for which no fixed address is specified can only\n# be booted with DHCP, unless there is an address range on the subnet\n# to which a BOOTP client is connected which has the dynamic-bootp flag\n# set.\nhost fantasia {\n  hardware ethernet 08:00:07:26:c0:a5;\n  fixed-address fantasia.example.com;\n}\n# You can declare a class of clients and then do address allocation\n# based on that.   The example below shows a case where all clients\n# in a certain class get addresses on the 10.17.224/24 subnet, and all\n# other clients get addresses on the 10.0.29/24 subnet.\nclass \"foo\" {\n  match if substring (option vendor-class-identifier, 0, 4) = \"SUNW\";\n}\nshared-network 224-29 {\n  subnet 10.17.224.0 netmask 255.255.255.0 {\n    option routers rtr-224.example.org;\n  }\n  subnet 10.0.29.0 netmask 255.255.255.0 {\n    option routers rtr-29.example.org;\n  }\n  pool {\n    allow members of \"foo\";\n    range 10.17.224.10 10.17.224.250;\n  }\n  pool {\n    deny members of \"foo\";\n    range 10.0.29.10 10.0.29.230;\n  }\n}\n```\n可以看到如上默认配置\n配置格式如下\n```\n# 全局配置\n参数或选项\t\t\t// 全局生效\n#局部配置\n声明 {\n\t参数或选项\t  // 局部生效\n}\n```\n##### 常用参数介绍\n我在[其他人博客](http://www.zyops.com/dhcp-working-procedure)看到常用参数说明，于是就拷贝下来\n![dhcp_config1](img/dhcp_config1.gif)\n![dhcp_config2](img/dhcp_config2.gif)\n![dhcp_config3](img/dhcp_config3.gif)\n\n##### 配置实例\n某单位销售部有80台计算机所使用的IP地址段为\n192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为\n192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户\n端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。\n```\nsubnet 198.168.1.0 netmask 255.255.255.0 {\n\toption routers 192.168.1.1;\n\toption subnet-mask 255.255.255.0;\n\toption nis-domain\t\t\t\t\"domain.org\";\n\toption domain-name\t\t\t\t\"domain.org\";\n\toption domain-name-servers \t192.168.1.2;\n\toption time-offset \t\t-18000;\n\toption netbios-node-type \t\t2;\n\trange dynamic-bootp\t198.168.1.100 192.168.1.200;\n\tdefault-lease-time \t43200;\n\thost ns {\n\t\tnext-server archlinux.org;\n\t\thardware ethernet ...;\n\t\tfixed-address ...;\n\t}\n}\n```\n##### 开启服务器\n```\nsystemctl start dhcpcd\n\n```\n##### 关闭服务器\n```\nsystemctl stop dhcpcd\n```","slug":"use-dhcp","published":1,"updated":"2018-05-01T13:03:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6ru000waefarqje3ohb","content":"<h3 id=\"什么是DHCP？\"><a href=\"#什么是DHCP？\" class=\"headerlink\" title=\"什么是DHCP？\"></a>什么是DHCP？</h3><h4 id=\"1-DHCP简介\"><a href=\"#1-DHCP简介\" class=\"headerlink\" title=\"1.DHCP简介\"></a>1.DHCP简介</h4><p>DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。</p>\n<h4 id=\"2-为什么要使用DHCP？\"><a href=\"#2-为什么要使用DHCP？\" class=\"headerlink\" title=\"2.为什么要使用DHCP？\"></a>2.为什么要使用DHCP？</h4><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。</p>\n<h4 id=\"3-DHCP实现\"><a href=\"#3-DHCP实现\" class=\"headerlink\" title=\"3.DHCP实现\"></a>3.DHCP实现</h4><p><img src=\"img/dhcp_client.png\" alt=\"dhcp_client\"><br>DHCP的实现分为4步，分别是：<br>第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。<br>第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。<br>第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。<br>第四步：DHCP Server发送ACK数据包，确认信息。</p>\n<p>####　4.安装DHCP服务器<br>由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。<br>使用如下命令安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S dhcpcd</span><br></pre></td></tr></table></figure></p>\n<p>检测是否安装成功,键入如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhcpcd --version</span><br><span class=\"line\">//显示如下。。。代表安装成功</span><br><span class=\"line\">dhcpcd 6.11.5</span><br><span class=\"line\">Copyright (c) 2006-2016 Roy Marples</span><br><span class=\"line\">Compiled in features: INET IPv4LL INET6 DHCPv6 AUTH</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-DHCP服务器的一般配置\"><a href=\"#5-DHCP服务器的一般配置\" class=\"headerlink\" title=\"5.DHCP服务器的一般配置\"></a>5.DHCP服务器的一般配置</h4><h5 id=\"dhcp服务器一般配置步骤\"><a href=\"#dhcp服务器一般配置步骤\" class=\"headerlink\" title=\"dhcp服务器一般配置步骤\"></a>dhcp服务器一般配置步骤</h5><p>1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围<br>2、建立租约数据库文件<br>3、重新加载配置文件或重启dhcp服务器</p>\n<h5 id=\"dhcp的工作流程\"><a href=\"#dhcp的工作流程\" class=\"headerlink\" title=\"dhcp的工作流程\"></a>dhcp的工作流程</h5><p>在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">引用</a>过来</p>\n<h5 id=\"配置文件DHCPD-CONF\"><a href=\"#配置文件DHCPD-CONF\" class=\"headerlink\" title=\"配置文件DHCPD.CONF\"></a>配置文件DHCPD.CONF</h5><p>由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/dhcpd.conf </span><br><span class=\"line\"># dhcpd.conf</span><br><span class=\"line\">#</span><br><span class=\"line\"># Sample configuration file for ISC dhcpd</span><br><span class=\"line\">#</span><br><span class=\"line\"># option definitions common to all supported networks...</span><br><span class=\"line\">option domain-name &quot;example.org&quot;;</span><br><span class=\"line\">option domain-name-servers ns1.example.org, ns2.example.org;</span><br><span class=\"line\">default-lease-time 600;</span><br><span class=\"line\">max-lease-time 7200;</span><br><span class=\"line\"># Use this to enble / disable dynamic dns updates globally.</span><br><span class=\"line\">#ddns-update-style none;</span><br><span class=\"line\"># If this DHCP server is the official DHCP server for the local</span><br><span class=\"line\"># network, the authoritative directive should be uncommented.</span><br><span class=\"line\">#authoritative;</span><br><span class=\"line\"># Use this to send dhcp log messages to a different log file (you also</span><br><span class=\"line\"># have to hack syslog.conf to complete the redirection).</span><br><span class=\"line\">log-facility local7;</span><br><span class=\"line\"># No service will be given on this subnet, but declaring it helps the </span><br><span class=\"line\"># DHCP server to understand the network topology.</span><br><span class=\"line\">subnet 10.152.187.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This is a very basic subnet declaration.</span><br><span class=\"line\">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.254.239.10 10.254.239.20;</span><br><span class=\"line\">  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This declaration allows BOOTP clients to get dynamic addresses,</span><br><span class=\"line\"># which we don&apos;t really recommend.</span><br><span class=\"line\">subnet 10.254.239.32 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range dynamic-bootp 10.254.239.40 10.254.239.60;</span><br><span class=\"line\">  option broadcast-address 10.254.239.31;</span><br><span class=\"line\">  option routers rtr-239-32-1.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># A slightly different configuration for an internal subnet.</span><br><span class=\"line\">subnet 10.5.5.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.5.5.26 10.5.5.30;</span><br><span class=\"line\">  option domain-name-servers ns1.internal.example.org;</span><br><span class=\"line\">  option domain-name &quot;internal.example.org&quot;;</span><br><span class=\"line\">  option routers 10.5.5.1;</span><br><span class=\"line\">  option broadcast-address 10.5.5.31;</span><br><span class=\"line\">  default-lease-time 600;</span><br><span class=\"line\">  max-lease-time 7200;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Hosts which require special configuration options can be listed in</span><br><span class=\"line\"># host statements.   If no address is specified, the address will be</span><br><span class=\"line\"># allocated dynamically (if possible), but the host-specific information</span><br><span class=\"line\"># will still come from the host declaration.</span><br><span class=\"line\">host passacaglia &#123;</span><br><span class=\"line\">  hardware ethernet 0:0:c0:5d:bd:95;</span><br><span class=\"line\">  filename &quot;vmunix.passacaglia&quot;;</span><br><span class=\"line\">  server-name &quot;toccata.example.com&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Fixed IP addresses can also be specified for hosts.   These addresses</span><br><span class=\"line\"># should not also be listed as being available for dynamic assignment.</span><br><span class=\"line\"># Hosts for which fixed IP addresses have been specified can boot using</span><br><span class=\"line\"># BOOTP or DHCP.   Hosts for which no fixed address is specified can only</span><br><span class=\"line\"># be booted with DHCP, unless there is an address range on the subnet</span><br><span class=\"line\"># to which a BOOTP client is connected which has the dynamic-bootp flag</span><br><span class=\"line\"># set.</span><br><span class=\"line\">host fantasia &#123;</span><br><span class=\"line\">  hardware ethernet 08:00:07:26:c0:a5;</span><br><span class=\"line\">  fixed-address fantasia.example.com;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># You can declare a class of clients and then do address allocation</span><br><span class=\"line\"># based on that.   The example below shows a case where all clients</span><br><span class=\"line\"># in a certain class get addresses on the 10.17.224/24 subnet, and all</span><br><span class=\"line\"># other clients get addresses on the 10.0.29/24 subnet.</span><br><span class=\"line\">class &quot;foo&quot; &#123;</span><br><span class=\"line\">  match if substring (option vendor-class-identifier, 0, 4) = &quot;SUNW&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shared-network 224-29 &#123;</span><br><span class=\"line\">  subnet 10.17.224.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-224.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subnet 10.0.29.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-29.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    allow members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.17.224.10 10.17.224.250;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    deny members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.0.29.10 10.0.29.230;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如上默认配置<br>配置格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置</span><br><span class=\"line\">参数或选项\t\t\t// 全局生效</span><br><span class=\"line\">#局部配置</span><br><span class=\"line\">声明 &#123;</span><br><span class=\"line\">\t参数或选项\t  // 局部生效</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"常用参数介绍\"><a href=\"#常用参数介绍\" class=\"headerlink\" title=\"常用参数介绍\"></a>常用参数介绍</h5><p>我在<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">其他人博客</a>看到常用参数说明，于是就拷贝下来<br><img src=\"img/dhcp_config1.gif\" alt=\"dhcp_config1\"><br><img src=\"img/dhcp_config2.gif\" alt=\"dhcp_config2\"><br><img src=\"img/dhcp_config3.gif\" alt=\"dhcp_config3\"></p>\n<h5 id=\"配置实例\"><a href=\"#配置实例\" class=\"headerlink\" title=\"配置实例\"></a>配置实例</h5><p>某单位销售部有80台计算机所使用的IP地址段为<br>192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为<br>192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户<br>端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subnet 198.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">\toption routers 192.168.1.1;</span><br><span class=\"line\">\toption subnet-mask 255.255.255.0;</span><br><span class=\"line\">\toption nis-domain\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name-servers \t192.168.1.2;</span><br><span class=\"line\">\toption time-offset \t\t-18000;</span><br><span class=\"line\">\toption netbios-node-type \t\t2;</span><br><span class=\"line\">\trange dynamic-bootp\t198.168.1.100 192.168.1.200;</span><br><span class=\"line\">\tdefault-lease-time \t43200;</span><br><span class=\"line\">\thost ns &#123;</span><br><span class=\"line\">\t\tnext-server archlinux.org;</span><br><span class=\"line\">\t\thardware ethernet ...;</span><br><span class=\"line\">\t\tfixed-address ...;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"开启服务器\"><a href=\"#开启服务器\" class=\"headerlink\" title=\"开启服务器\"></a>开启服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start dhcpcd</span><br></pre></td></tr></table></figure>\n<h5 id=\"关闭服务器\"><a href=\"#关闭服务器\" class=\"headerlink\" title=\"关闭服务器\"></a>关闭服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop dhcpcd</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是DHCP？\"><a href=\"#什么是DHCP？\" class=\"headerlink\" title=\"什么是DHCP？\"></a>什么是DHCP？</h3><h4 id=\"1-DHCP简介\"><a href=\"#1-DHCP简介\" class=\"headerlink\" title=\"1.DHCP简介\"></a>1.DHCP简介</h4><p>DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。</p>\n<h4 id=\"2-为什么要使用DHCP？\"><a href=\"#2-为什么要使用DHCP？\" class=\"headerlink\" title=\"2.为什么要使用DHCP？\"></a>2.为什么要使用DHCP？</h4><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。</p>\n<h4 id=\"3-DHCP实现\"><a href=\"#3-DHCP实现\" class=\"headerlink\" title=\"3.DHCP实现\"></a>3.DHCP实现</h4><p><img src=\"img/dhcp_client.png\" alt=\"dhcp_client\"><br>DHCP的实现分为4步，分别是：<br>第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。<br>第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。<br>第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。<br>第四步：DHCP Server发送ACK数据包，确认信息。</p>\n<p>####　4.安装DHCP服务器<br>由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。<br>使用如下命令安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S dhcpcd</span><br></pre></td></tr></table></figure></p>\n<p>检测是否安装成功,键入如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhcpcd --version</span><br><span class=\"line\">//显示如下。。。代表安装成功</span><br><span class=\"line\">dhcpcd 6.11.5</span><br><span class=\"line\">Copyright (c) 2006-2016 Roy Marples</span><br><span class=\"line\">Compiled in features: INET IPv4LL INET6 DHCPv6 AUTH</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-DHCP服务器的一般配置\"><a href=\"#5-DHCP服务器的一般配置\" class=\"headerlink\" title=\"5.DHCP服务器的一般配置\"></a>5.DHCP服务器的一般配置</h4><h5 id=\"dhcp服务器一般配置步骤\"><a href=\"#dhcp服务器一般配置步骤\" class=\"headerlink\" title=\"dhcp服务器一般配置步骤\"></a>dhcp服务器一般配置步骤</h5><p>1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围<br>2、建立租约数据库文件<br>3、重新加载配置文件或重启dhcp服务器</p>\n<h5 id=\"dhcp的工作流程\"><a href=\"#dhcp的工作流程\" class=\"headerlink\" title=\"dhcp的工作流程\"></a>dhcp的工作流程</h5><p>在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">引用</a>过来</p>\n<h5 id=\"配置文件DHCPD-CONF\"><a href=\"#配置文件DHCPD-CONF\" class=\"headerlink\" title=\"配置文件DHCPD.CONF\"></a>配置文件DHCPD.CONF</h5><p>由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/dhcpd.conf </span><br><span class=\"line\"># dhcpd.conf</span><br><span class=\"line\">#</span><br><span class=\"line\"># Sample configuration file for ISC dhcpd</span><br><span class=\"line\">#</span><br><span class=\"line\"># option definitions common to all supported networks...</span><br><span class=\"line\">option domain-name &quot;example.org&quot;;</span><br><span class=\"line\">option domain-name-servers ns1.example.org, ns2.example.org;</span><br><span class=\"line\">default-lease-time 600;</span><br><span class=\"line\">max-lease-time 7200;</span><br><span class=\"line\"># Use this to enble / disable dynamic dns updates globally.</span><br><span class=\"line\">#ddns-update-style none;</span><br><span class=\"line\"># If this DHCP server is the official DHCP server for the local</span><br><span class=\"line\"># network, the authoritative directive should be uncommented.</span><br><span class=\"line\">#authoritative;</span><br><span class=\"line\"># Use this to send dhcp log messages to a different log file (you also</span><br><span class=\"line\"># have to hack syslog.conf to complete the redirection).</span><br><span class=\"line\">log-facility local7;</span><br><span class=\"line\"># No service will be given on this subnet, but declaring it helps the </span><br><span class=\"line\"># DHCP server to understand the network topology.</span><br><span class=\"line\">subnet 10.152.187.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This is a very basic subnet declaration.</span><br><span class=\"line\">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.254.239.10 10.254.239.20;</span><br><span class=\"line\">  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This declaration allows BOOTP clients to get dynamic addresses,</span><br><span class=\"line\"># which we don&apos;t really recommend.</span><br><span class=\"line\">subnet 10.254.239.32 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range dynamic-bootp 10.254.239.40 10.254.239.60;</span><br><span class=\"line\">  option broadcast-address 10.254.239.31;</span><br><span class=\"line\">  option routers rtr-239-32-1.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># A slightly different configuration for an internal subnet.</span><br><span class=\"line\">subnet 10.5.5.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.5.5.26 10.5.5.30;</span><br><span class=\"line\">  option domain-name-servers ns1.internal.example.org;</span><br><span class=\"line\">  option domain-name &quot;internal.example.org&quot;;</span><br><span class=\"line\">  option routers 10.5.5.1;</span><br><span class=\"line\">  option broadcast-address 10.5.5.31;</span><br><span class=\"line\">  default-lease-time 600;</span><br><span class=\"line\">  max-lease-time 7200;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Hosts which require special configuration options can be listed in</span><br><span class=\"line\"># host statements.   If no address is specified, the address will be</span><br><span class=\"line\"># allocated dynamically (if possible), but the host-specific information</span><br><span class=\"line\"># will still come from the host declaration.</span><br><span class=\"line\">host passacaglia &#123;</span><br><span class=\"line\">  hardware ethernet 0:0:c0:5d:bd:95;</span><br><span class=\"line\">  filename &quot;vmunix.passacaglia&quot;;</span><br><span class=\"line\">  server-name &quot;toccata.example.com&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Fixed IP addresses can also be specified for hosts.   These addresses</span><br><span class=\"line\"># should not also be listed as being available for dynamic assignment.</span><br><span class=\"line\"># Hosts for which fixed IP addresses have been specified can boot using</span><br><span class=\"line\"># BOOTP or DHCP.   Hosts for which no fixed address is specified can only</span><br><span class=\"line\"># be booted with DHCP, unless there is an address range on the subnet</span><br><span class=\"line\"># to which a BOOTP client is connected which has the dynamic-bootp flag</span><br><span class=\"line\"># set.</span><br><span class=\"line\">host fantasia &#123;</span><br><span class=\"line\">  hardware ethernet 08:00:07:26:c0:a5;</span><br><span class=\"line\">  fixed-address fantasia.example.com;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># You can declare a class of clients and then do address allocation</span><br><span class=\"line\"># based on that.   The example below shows a case where all clients</span><br><span class=\"line\"># in a certain class get addresses on the 10.17.224/24 subnet, and all</span><br><span class=\"line\"># other clients get addresses on the 10.0.29/24 subnet.</span><br><span class=\"line\">class &quot;foo&quot; &#123;</span><br><span class=\"line\">  match if substring (option vendor-class-identifier, 0, 4) = &quot;SUNW&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shared-network 224-29 &#123;</span><br><span class=\"line\">  subnet 10.17.224.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-224.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subnet 10.0.29.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-29.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    allow members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.17.224.10 10.17.224.250;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    deny members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.0.29.10 10.0.29.230;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如上默认配置<br>配置格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置</span><br><span class=\"line\">参数或选项\t\t\t// 全局生效</span><br><span class=\"line\">#局部配置</span><br><span class=\"line\">声明 &#123;</span><br><span class=\"line\">\t参数或选项\t  // 局部生效</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"常用参数介绍\"><a href=\"#常用参数介绍\" class=\"headerlink\" title=\"常用参数介绍\"></a>常用参数介绍</h5><p>我在<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">其他人博客</a>看到常用参数说明，于是就拷贝下来<br><img src=\"img/dhcp_config1.gif\" alt=\"dhcp_config1\"><br><img src=\"img/dhcp_config2.gif\" alt=\"dhcp_config2\"><br><img src=\"img/dhcp_config3.gif\" alt=\"dhcp_config3\"></p>\n<h5 id=\"配置实例\"><a href=\"#配置实例\" class=\"headerlink\" title=\"配置实例\"></a>配置实例</h5><p>某单位销售部有80台计算机所使用的IP地址段为<br>192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为<br>192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户<br>端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subnet 198.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">\toption routers 192.168.1.1;</span><br><span class=\"line\">\toption subnet-mask 255.255.255.0;</span><br><span class=\"line\">\toption nis-domain\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name-servers \t192.168.1.2;</span><br><span class=\"line\">\toption time-offset \t\t-18000;</span><br><span class=\"line\">\toption netbios-node-type \t\t2;</span><br><span class=\"line\">\trange dynamic-bootp\t198.168.1.100 192.168.1.200;</span><br><span class=\"line\">\tdefault-lease-time \t43200;</span><br><span class=\"line\">\thost ns &#123;</span><br><span class=\"line\">\t\tnext-server archlinux.org;</span><br><span class=\"line\">\t\thardware ethernet ...;</span><br><span class=\"line\">\t\tfixed-address ...;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"开启服务器\"><a href=\"#开启服务器\" class=\"headerlink\" title=\"开启服务器\"></a>开启服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start dhcpcd</span><br></pre></td></tr></table></figure>\n<h5 id=\"关闭服务器\"><a href=\"#关闭服务器\" class=\"headerlink\" title=\"关闭服务器\"></a>关闭服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop dhcpcd</span><br></pre></td></tr></table></figure>"},{"title":"你不知道的javascript————类型和语法","date":"2017-12-17T13:17:15.000Z","_content":"### 类型\n#### 七个内置类型\n*   空值 (null)\n*   未定义 (undefined)\n*   布尔值 (boolean)\n*   数字 (number)\n*   字符串 (string)\n*   对象 (object)\n*   符号 (symbol)\n\n#### 检测各个类型\n```\ntypeof undefined\t\t=== \"undefined\" \t// true\ntypeof true \t\t\t\t=== \"boolean\"\t\t\t// true\ntypeof 42\t\t\t\t\t\t=== \"number\"\t\t\t// true\ntypeof \"42\" \t\t\t\t=== \"string\"\t\t\t// true\ntypeof {\"life\": 42}\t=== \"object\"\t\t\t// true\ntypeof Symbol\t\t\t\t=== \"symbol\"\t\t\t// true\ntypeof null \t\t\t\t=== \"object\"\t\t\t// true\ntypeof function(){}\t=== \"function\" \t\t// true\ntypeof [0,1]\t\t\t\t=== \"object\"\t\t\t// true\n```\n本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。\n因此，对null应该采用复合查询语句\n```\nvar a = null;\n(!a && typeof a === \"object\")\t// true\n\n```\n而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。\n且typeof [0,1] === “object”,因为数组也是object的一个子类型\n\n_ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string_\n#### undefined && undeclared && typeof undeclared\n```\nvar a;\ntypeof a;\t\t\t// \"undefined\"\nvar b = 42;\nvar c;\nb=c;\ntypeof c\t\t\t// \"undefined\"\ntypeof b\t\t\t// \"undefined\"\na\t\t\t\t\t\t\t// \"undefined\"\nd\t\t\t\t\t\t\t// \"VM422:1 Uncaught ReferenceError: d is not defined at <anonymous>:1:1\"\n```\n从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号\n#### typeof undeclared\n```\ntypeof a\t\t\t// \"undefined\"\n```\n出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。\n\n#### 值\n##### 数组\njs的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。\n由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。\n```\nvar a = [];\na[0] = 1;\na[\"foobar\"] = 1;\na.length \t\t\t// 1\na[\"foobar\"];\t// 1\na.foobar\t\t\t// 1\na[\"13\"] = 42;\na.length\t\t// 14\n```\n为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。\n\n##### 类数组\n对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。\n\n##### 字符串\n字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。\n字符串的一些方法：\n|方法|描述|\n|---|---|\n|charAt() | 返回指定索引位置的字符|\n|charCodeAt() | 返回指定索引位置字符的 Unicode 值|\n|concat() | 连接两个或多个字符串，返回连接后的字符串|\n|fromCharCode() | 将 Unicode 转换为字符串|\n|indexOf() | 返回字符串中检索指定字符第一次出现的位置|\n|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|\n|localeCompare() | 用本地特定的顺序来比较两个字符串|\n|match() | 找到一个或多个正则表达式的匹配|\n|replace() | 替换与正则表达式匹配的子串|\n|search() | 检索与正则表达式相匹配的值|\n|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|\n|split() | 把字符串分割为子字符串数组|\n|substr() | 从起始索引号提取字符串中指定数目的字符|\n|substring() | 提取字符串中两个指定的索引号之间的字符|\n|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLowerCase() | 把字符串转换为小写|\n|toString() | 返回字符串对象值|\n|toUpperCase() | 把字符串转换为大写|\n|trim() | 移除字符串首尾空白|\n|valueOf() | 返回某个字符串对象的原始值|\n\n如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串\n\n#### 数字\n和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。\n数字的一些方法：\ntoExponential()\n```\nvar a = 5E10\t\t\t// 可以通过这种方式赋值\na\t\t\t\t\t\t\t\t\t// 50000000000\na.toExponential()\t// \"5e+10\"\nvar b = a * a;\nb \t\t\t\t\t\t\t\t// 2.5e+21\n```\t\ntoFixed()\t\t\t\t\t// 精度\n```bash\nvar a = 42.59\na.toFixed(1)\t\t\t// \"42.6\"\n// 无效\n42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token\n// 有效\n42..toFixed(3)\t\t// \"42.000\"\n(42).toFixed(3)\t\t// \"42.000\"\n0.42.toFixed(3)\t\t// \"0.420\"\n42 .toFixed(3)\t\t// \"42.000\"\n```\n因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()\ntoPrecision() // 执行有效位数的显示位数\n```\nvar a = 42.59\na.toPrecision(1)\t\t// \"4e+1\"\na.toPrecision(2)\t\t// \"43\"\na.toPrecision(3)\t\t// \"42.6\"\n``` \nes6支持新格式\n```bash\n0B\t\t0b\t\t\t\t\t// 二进制\n0O\t\t0o\t\t\t\t\t// 八进制\n0X\t\t0x\t\t\t\t\t// 十六进制\n```\nEPSILON // 最小精度\n```\nif(((0.1 + 0.2) - 0.3)<Number.EPSILON){\n}else{\n}\n```\nMAX_VALUE\nMAX_SAFE_INTEGER\n```\nNumber.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER\t\t\t// 9007199254740991\n```\nisInteger\n```\nNumber.isInteger(1)\t\t\t\t\t// true\nNumber.isInteger(1.1)\t\t\t\t// false\nNumber.isInteger(1.0)\t\t\t\t// true\n```\n#### 特殊数值\n##### undefined\n```\nvar undefined = 2\nundefined \t// 2\n\n```\n_ps：永远不要重新定义undefined_\n#### void 运算符\n在不需要返回值的时候，可以void掉\n```\nif(ready){\n\treturn void setTimeout(..)\n}\n```\n这样做可以将setTimeout返回的id给void掉\n#### NaN\nNaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN\n```\nNumber.isNaN(NaN)\t\t\t\t// true\nNumber.isNaN(1)\t\t\t\t\t// false\n\n```\n#### 0值\n加法和减法运算永远不会有-0\n使用toString和JSON.stringify()会将-0变成0\n```\n0/-1\t\t\t// -0\n0/1\t\t\t\t// 0\nvar a = -0\na \t\t\t\t// -0\na.toString()\t\t// 0\nJSON.stringify(a)\t// 0\n```\n#### 特殊等式\nObject.is\nObject.is 可以判断是+0还是-0,而且可以判断是否为NaN\n```\nObject.is(+0, -0)\t// false\nObject.is(NaN, NaN)\t\t// true\n\n```\n#### 值和引用\nnull，undefined，字符串，数字，布尔，symbol都是简单值\n对象，函数都是复杂值\n```\nfunction foo(x) {\n\tx.push(4);\t\n\tx;\t\t\t\t\t\t\t// [1,2,3,4]\n\tx = [4,5,6];\n\tx.push(7);\n\tx;\t\t\t\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3];\nfoo(a);\na;\t\t\t\t// [1,2,3,4]\n由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];\nfunction foo(x){\n\tx.push(4);\n\tx;\t\t\t\t// [1,2,3,4]\n\tx.length = 0;\t\n\tx.push(4,5,6,7)\n\tx;\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3]\nfoo(a)\na;\t\t// [4,5,6,7]\n和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化\n```\n_ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定_\n```\nfunction foo(warpper){\n\twarpper.a = 42\n}\nvar obj = {\n\ta: 1\n}\nfoo(obj)\nobj.a\t\t\t//42\nfunction foo (x) {\n\tx = x+1;\n\tx;\t\t\t\t// 3\n}\nvar a = 2;\nvar b = new Number(a);\nfoo(b)\nconsole.log(b)\t\t// 2\n前者是引用赋值，后者是值赋值\n```\n#### 原生函数\n* String\n* Number\n* Boolean\n* Array\n* Object\n* Function\n* RegExp\n* Date\n* Error\n* Symbol\n\n#### 内部属性[[Class]]\n所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看\n```\nObject.prototype.toString.call([123])\t\t\t// \"[object Array]\"\nObject.prototype.toString.call(null)\t\t\t// \"[object Null]\"\nObject.prototype.toString.call(true)\t\t\t// \"[object Boolean]\"\nObject.prototype.toString.call(undefined)\t// \"[object Undefined]\"\n```\n虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。\n#### 封装对象包装\n```\nvar a = \"abc\";\nconsole.log(a);\t\t// \"abc\"\na.length \t\t\t\t\t// \"3\"\nvar b = new String(\"abc\")\nconsole.log(b)\t\t// String {[[PrimitiveValue]]: \"abc\"} 0:\"a\" 1:\"b\" 2:\"c\" length:3 __proto__:String [[PrimitiveValue]]:\"abc\"\n```\n只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。\n但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。\n\n#### 封装对象的释疑\n例如：\n```\nvar a = new Boolean(false);\nif (!a){\n\tconsole.log(...)\t\t\t// 执行不到这里\n}\n```\n因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反\n\n自行封装可以使用Object\n```\nvar a = \"abc\"\nvar b = new String (a);\nvar c = Object(a);\ntypeof a \t\t\t\t// \"stirng\"\ntypeof b\t\t\t\t// \"object\"\ntypeof c\t\t\t\t// \"object\"\nb instanceof String \t// true\nc instanceof String \t// true\nObject.prototype.toString.call(b);\t\t// \"[object String]\"\nObject.prototype.toString.call(c);\t\t// \"[object String]\"\n```\n一般不直接使用封装对象，但是他们偶尔也会派上用场\n#### 拆封\n如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：\n```\nvar a = new String(\"abc\")\nvar b = new Number(11)\nvar c = new Boolean(true)\na.valueOf()\t// \"abc\"\nb.valueOf()\t// 11\nc.valueOf()\t// true\nvar d = a + \"\";\nconsole.log(d)\t\t\t\t// \"abc\"\ntypeof a \t\t\t// \"object\"\ntypeof d \t\t\t// \"string\"\n\n```\n#### 原生函数作为构造函数\n四种方式创建应该尽量避免构造函数，除非十分必要\n* array 数组\n* object 对象\n* function 函数\n* RegExp 正则表达式\n### ARRAY(..)\n调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素\n```\n// 效果一致\nvar a = new Array(1,2,3);\na\t\t\t// [1,2,3]\nvar b = Array(1,2,3)\nb \t\t// [1,2,3]\nvar c = [1,2,3]\nc \t\t// [1,2,3]\n// 不同方式创建出来空数组效果不一致\nvar d = new Array(3);\nconsole.log(d)\t\t\t// chrome上： (3) [empty × 3]\nd.length\t\t\t\t\t\t// 3\nvar e = [undefined,undefined,undefined];\nconsole.log(e)\t\t\t// (3) [undefined, undefined, undefined]\nvar f = []\t\t\t\t\t\nf.length = 3;\nconsole.log(f);\t\t\t// chrome上： (3) [empty × 3]\n// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴\nvar g = [,,,]\nconsole.log(g)\t\t\t// chrome上： (3) [empty × 3]\n\n```\n由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵\n```\nvar a = new Array(3)\nvar b = [undefined,undefined,undefined]\na.join(\"-\")\t\t\t// \"--\"\nb.join(\"-\")\t\t\t// \"--\"\na.map(function(v,i){return i})\t\t// (3) [empty × 3]\na.map(function(v,i){return i})\t\t// [0, 1, 2]\n```\na.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。\n**而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定**\n可以通过这种方式来创建包含undefined单元的数组\n```\nvar a = Array.apply(null, {length:3});\nconsole.log(a)\t\t\t// (3) [undefined, undefined, undefined]\n```\n_PS:永远不要创建和使用空单元数组_\n\n#### OBJECT、FUNCTION、REGEXP\n**除非玩不得已，尽量不要使用他们**\n```\nvar c = new Object();\nc.foo = \"bar\";\nc\t\t\t\t// {foo:\"bar\"}\nvar d = {foo:\"bar\"}\nd\t\t\t\t// {foo:\"bar\"}\nvar e = new Function(\"a\",\"return a * 2\");\nvar f = function(a){return a*2};\nfunction g(a){return a*2}\nvar h = new RegExp(\"^a*b+\",\"g\");\nvar i = /^a*b+/g\n```\njavascript对常量形式的代码会对他们进行预编译和缓存！\n#### DATE、ERROR\n相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代\n引入生成当前时间戳，使用\n```\nDate.now()\n// 使用new来生成时间\nnew Date()\n// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)\n\n```\n错误对象通常与throw一起使用\n```\nfunction foo(x){\n\tif(!x){\n\t\tthrow new Error(\"///\");\n\t}\n\t// -\n}\n```\n#### SYMBOL\nSymbol可作为私有属性是一种简单标量基本类型\n\n### 强制类型转换\n#### 抽象值操作\n如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。\n数组的默认toString方法经过了重新定义\n```\nvar a = [1,2,3]\na.toString()\t\t// \"1,2,3\"\n\n```\n#### JSON 字符串化\nJSON.stringify(42) // “42”\nJSON.stringify(“42”) // “”42””\nJSON.stringify(null) // “null”\nJSON.stringify(true) // “true”\n\n_JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null_\n```\nJSON.stringify(undefined)\t\t\t// undefined\nJSON.stringify(function(){})\t// undefined\nJSON.stringify([1,undefined, function(){},4])\t// \"[1,null,null,4]\"\nJSON.stringify({a:2, b: function(){}})\t\t\t\t// \"{\"a\":2}\"\n```\n循环引用会出错\n```\nvar o = {};\nvar a = {\n\tb:42,\n\tc:o,\n\td:function(){}\n}\no.e = a\nJSON.stringify(a)\na.toJSON=function(){\n\treturn {b:this.b}\n}\nJSON.stringify(a)\n# Uncaught TypeError: Converting circular structure to JSON\n#     at JSON.stringify (<anonymous>)\n#     at <anonymous>:8:6\n```","source":"_posts/you-dont-konwn-javascript-type.md","raw":"---\ntitle: 你不知道的javascript————类型和语法\ndate: 2017-12-17 21:17:15\ntags: JavaScript\n---\n### 类型\n#### 七个内置类型\n*   空值 (null)\n*   未定义 (undefined)\n*   布尔值 (boolean)\n*   数字 (number)\n*   字符串 (string)\n*   对象 (object)\n*   符号 (symbol)\n\n#### 检测各个类型\n```\ntypeof undefined\t\t=== \"undefined\" \t// true\ntypeof true \t\t\t\t=== \"boolean\"\t\t\t// true\ntypeof 42\t\t\t\t\t\t=== \"number\"\t\t\t// true\ntypeof \"42\" \t\t\t\t=== \"string\"\t\t\t// true\ntypeof {\"life\": 42}\t=== \"object\"\t\t\t// true\ntypeof Symbol\t\t\t\t=== \"symbol\"\t\t\t// true\ntypeof null \t\t\t\t=== \"object\"\t\t\t// true\ntypeof function(){}\t=== \"function\" \t\t// true\ntypeof [0,1]\t\t\t\t=== \"object\"\t\t\t// true\n```\n本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。\n因此，对null应该采用复合查询语句\n```\nvar a = null;\n(!a && typeof a === \"object\")\t// true\n\n```\n而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。\n且typeof [0,1] === “object”,因为数组也是object的一个子类型\n\n_ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string_\n#### undefined && undeclared && typeof undeclared\n```\nvar a;\ntypeof a;\t\t\t// \"undefined\"\nvar b = 42;\nvar c;\nb=c;\ntypeof c\t\t\t// \"undefined\"\ntypeof b\t\t\t// \"undefined\"\na\t\t\t\t\t\t\t// \"undefined\"\nd\t\t\t\t\t\t\t// \"VM422:1 Uncaught ReferenceError: d is not defined at <anonymous>:1:1\"\n```\n从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号\n#### typeof undeclared\n```\ntypeof a\t\t\t// \"undefined\"\n```\n出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。\n\n#### 值\n##### 数组\njs的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。\n由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。\n```\nvar a = [];\na[0] = 1;\na[\"foobar\"] = 1;\na.length \t\t\t// 1\na[\"foobar\"];\t// 1\na.foobar\t\t\t// 1\na[\"13\"] = 42;\na.length\t\t// 14\n```\n为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。\n\n##### 类数组\n对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。\n\n##### 字符串\n字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。\n字符串的一些方法：\n|方法|描述|\n|---|---|\n|charAt() | 返回指定索引位置的字符|\n|charCodeAt() | 返回指定索引位置字符的 Unicode 值|\n|concat() | 连接两个或多个字符串，返回连接后的字符串|\n|fromCharCode() | 将 Unicode 转换为字符串|\n|indexOf() | 返回字符串中检索指定字符第一次出现的位置|\n|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|\n|localeCompare() | 用本地特定的顺序来比较两个字符串|\n|match() | 找到一个或多个正则表达式的匹配|\n|replace() | 替换与正则表达式匹配的子串|\n|search() | 检索与正则表达式相匹配的值|\n|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|\n|split() | 把字符串分割为子字符串数组|\n|substr() | 从起始索引号提取字符串中指定数目的字符|\n|substring() | 提取字符串中两个指定的索引号之间的字符|\n|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLowerCase() | 把字符串转换为小写|\n|toString() | 返回字符串对象值|\n|toUpperCase() | 把字符串转换为大写|\n|trim() | 移除字符串首尾空白|\n|valueOf() | 返回某个字符串对象的原始值|\n\n如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串\n\n#### 数字\n和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。\n数字的一些方法：\ntoExponential()\n```\nvar a = 5E10\t\t\t// 可以通过这种方式赋值\na\t\t\t\t\t\t\t\t\t// 50000000000\na.toExponential()\t// \"5e+10\"\nvar b = a * a;\nb \t\t\t\t\t\t\t\t// 2.5e+21\n```\t\ntoFixed()\t\t\t\t\t// 精度\n```bash\nvar a = 42.59\na.toFixed(1)\t\t\t// \"42.6\"\n// 无效\n42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token\n// 有效\n42..toFixed(3)\t\t// \"42.000\"\n(42).toFixed(3)\t\t// \"42.000\"\n0.42.toFixed(3)\t\t// \"0.420\"\n42 .toFixed(3)\t\t// \"42.000\"\n```\n因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()\ntoPrecision() // 执行有效位数的显示位数\n```\nvar a = 42.59\na.toPrecision(1)\t\t// \"4e+1\"\na.toPrecision(2)\t\t// \"43\"\na.toPrecision(3)\t\t// \"42.6\"\n``` \nes6支持新格式\n```bash\n0B\t\t0b\t\t\t\t\t// 二进制\n0O\t\t0o\t\t\t\t\t// 八进制\n0X\t\t0x\t\t\t\t\t// 十六进制\n```\nEPSILON // 最小精度\n```\nif(((0.1 + 0.2) - 0.3)<Number.EPSILON){\n}else{\n}\n```\nMAX_VALUE\nMAX_SAFE_INTEGER\n```\nNumber.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER\t\t\t// 9007199254740991\n```\nisInteger\n```\nNumber.isInteger(1)\t\t\t\t\t// true\nNumber.isInteger(1.1)\t\t\t\t// false\nNumber.isInteger(1.0)\t\t\t\t// true\n```\n#### 特殊数值\n##### undefined\n```\nvar undefined = 2\nundefined \t// 2\n\n```\n_ps：永远不要重新定义undefined_\n#### void 运算符\n在不需要返回值的时候，可以void掉\n```\nif(ready){\n\treturn void setTimeout(..)\n}\n```\n这样做可以将setTimeout返回的id给void掉\n#### NaN\nNaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN\n```\nNumber.isNaN(NaN)\t\t\t\t// true\nNumber.isNaN(1)\t\t\t\t\t// false\n\n```\n#### 0值\n加法和减法运算永远不会有-0\n使用toString和JSON.stringify()会将-0变成0\n```\n0/-1\t\t\t// -0\n0/1\t\t\t\t// 0\nvar a = -0\na \t\t\t\t// -0\na.toString()\t\t// 0\nJSON.stringify(a)\t// 0\n```\n#### 特殊等式\nObject.is\nObject.is 可以判断是+0还是-0,而且可以判断是否为NaN\n```\nObject.is(+0, -0)\t// false\nObject.is(NaN, NaN)\t\t// true\n\n```\n#### 值和引用\nnull，undefined，字符串，数字，布尔，symbol都是简单值\n对象，函数都是复杂值\n```\nfunction foo(x) {\n\tx.push(4);\t\n\tx;\t\t\t\t\t\t\t// [1,2,3,4]\n\tx = [4,5,6];\n\tx.push(7);\n\tx;\t\t\t\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3];\nfoo(a);\na;\t\t\t\t// [1,2,3,4]\n由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];\nfunction foo(x){\n\tx.push(4);\n\tx;\t\t\t\t// [1,2,3,4]\n\tx.length = 0;\t\n\tx.push(4,5,6,7)\n\tx;\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3]\nfoo(a)\na;\t\t// [4,5,6,7]\n和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化\n```\n_ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定_\n```\nfunction foo(warpper){\n\twarpper.a = 42\n}\nvar obj = {\n\ta: 1\n}\nfoo(obj)\nobj.a\t\t\t//42\nfunction foo (x) {\n\tx = x+1;\n\tx;\t\t\t\t// 3\n}\nvar a = 2;\nvar b = new Number(a);\nfoo(b)\nconsole.log(b)\t\t// 2\n前者是引用赋值，后者是值赋值\n```\n#### 原生函数\n* String\n* Number\n* Boolean\n* Array\n* Object\n* Function\n* RegExp\n* Date\n* Error\n* Symbol\n\n#### 内部属性[[Class]]\n所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看\n```\nObject.prototype.toString.call([123])\t\t\t// \"[object Array]\"\nObject.prototype.toString.call(null)\t\t\t// \"[object Null]\"\nObject.prototype.toString.call(true)\t\t\t// \"[object Boolean]\"\nObject.prototype.toString.call(undefined)\t// \"[object Undefined]\"\n```\n虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。\n#### 封装对象包装\n```\nvar a = \"abc\";\nconsole.log(a);\t\t// \"abc\"\na.length \t\t\t\t\t// \"3\"\nvar b = new String(\"abc\")\nconsole.log(b)\t\t// String {[[PrimitiveValue]]: \"abc\"} 0:\"a\" 1:\"b\" 2:\"c\" length:3 __proto__:String [[PrimitiveValue]]:\"abc\"\n```\n只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。\n但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。\n\n#### 封装对象的释疑\n例如：\n```\nvar a = new Boolean(false);\nif (!a){\n\tconsole.log(...)\t\t\t// 执行不到这里\n}\n```\n因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反\n\n自行封装可以使用Object\n```\nvar a = \"abc\"\nvar b = new String (a);\nvar c = Object(a);\ntypeof a \t\t\t\t// \"stirng\"\ntypeof b\t\t\t\t// \"object\"\ntypeof c\t\t\t\t// \"object\"\nb instanceof String \t// true\nc instanceof String \t// true\nObject.prototype.toString.call(b);\t\t// \"[object String]\"\nObject.prototype.toString.call(c);\t\t// \"[object String]\"\n```\n一般不直接使用封装对象，但是他们偶尔也会派上用场\n#### 拆封\n如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：\n```\nvar a = new String(\"abc\")\nvar b = new Number(11)\nvar c = new Boolean(true)\na.valueOf()\t// \"abc\"\nb.valueOf()\t// 11\nc.valueOf()\t// true\nvar d = a + \"\";\nconsole.log(d)\t\t\t\t// \"abc\"\ntypeof a \t\t\t// \"object\"\ntypeof d \t\t\t// \"string\"\n\n```\n#### 原生函数作为构造函数\n四种方式创建应该尽量避免构造函数，除非十分必要\n* array 数组\n* object 对象\n* function 函数\n* RegExp 正则表达式\n### ARRAY(..)\n调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素\n```\n// 效果一致\nvar a = new Array(1,2,3);\na\t\t\t// [1,2,3]\nvar b = Array(1,2,3)\nb \t\t// [1,2,3]\nvar c = [1,2,3]\nc \t\t// [1,2,3]\n// 不同方式创建出来空数组效果不一致\nvar d = new Array(3);\nconsole.log(d)\t\t\t// chrome上： (3) [empty × 3]\nd.length\t\t\t\t\t\t// 3\nvar e = [undefined,undefined,undefined];\nconsole.log(e)\t\t\t// (3) [undefined, undefined, undefined]\nvar f = []\t\t\t\t\t\nf.length = 3;\nconsole.log(f);\t\t\t// chrome上： (3) [empty × 3]\n// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴\nvar g = [,,,]\nconsole.log(g)\t\t\t// chrome上： (3) [empty × 3]\n\n```\n由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵\n```\nvar a = new Array(3)\nvar b = [undefined,undefined,undefined]\na.join(\"-\")\t\t\t// \"--\"\nb.join(\"-\")\t\t\t// \"--\"\na.map(function(v,i){return i})\t\t// (3) [empty × 3]\na.map(function(v,i){return i})\t\t// [0, 1, 2]\n```\na.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。\n**而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定**\n可以通过这种方式来创建包含undefined单元的数组\n```\nvar a = Array.apply(null, {length:3});\nconsole.log(a)\t\t\t// (3) [undefined, undefined, undefined]\n```\n_PS:永远不要创建和使用空单元数组_\n\n#### OBJECT、FUNCTION、REGEXP\n**除非玩不得已，尽量不要使用他们**\n```\nvar c = new Object();\nc.foo = \"bar\";\nc\t\t\t\t// {foo:\"bar\"}\nvar d = {foo:\"bar\"}\nd\t\t\t\t// {foo:\"bar\"}\nvar e = new Function(\"a\",\"return a * 2\");\nvar f = function(a){return a*2};\nfunction g(a){return a*2}\nvar h = new RegExp(\"^a*b+\",\"g\");\nvar i = /^a*b+/g\n```\njavascript对常量形式的代码会对他们进行预编译和缓存！\n#### DATE、ERROR\n相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代\n引入生成当前时间戳，使用\n```\nDate.now()\n// 使用new来生成时间\nnew Date()\n// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)\n\n```\n错误对象通常与throw一起使用\n```\nfunction foo(x){\n\tif(!x){\n\t\tthrow new Error(\"///\");\n\t}\n\t// -\n}\n```\n#### SYMBOL\nSymbol可作为私有属性是一种简单标量基本类型\n\n### 强制类型转换\n#### 抽象值操作\n如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。\n数组的默认toString方法经过了重新定义\n```\nvar a = [1,2,3]\na.toString()\t\t// \"1,2,3\"\n\n```\n#### JSON 字符串化\nJSON.stringify(42) // “42”\nJSON.stringify(“42”) // “”42””\nJSON.stringify(null) // “null”\nJSON.stringify(true) // “true”\n\n_JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null_\n```\nJSON.stringify(undefined)\t\t\t// undefined\nJSON.stringify(function(){})\t// undefined\nJSON.stringify([1,undefined, function(){},4])\t// \"[1,null,null,4]\"\nJSON.stringify({a:2, b: function(){}})\t\t\t\t// \"{\"a\":2}\"\n```\n循环引用会出错\n```\nvar o = {};\nvar a = {\n\tb:42,\n\tc:o,\n\td:function(){}\n}\no.e = a\nJSON.stringify(a)\na.toJSON=function(){\n\treturn {b:this.b}\n}\nJSON.stringify(a)\n# Uncaught TypeError: Converting circular structure to JSON\n#     at JSON.stringify (<anonymous>)\n#     at <anonymous>:8:6\n```","slug":"you-dont-konwn-javascript-type","published":1,"updated":"2018-05-01T13:48:39.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rv000xaefay1qag7sm","content":"<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h4 id=\"七个内置类型\"><a href=\"#七个内置类型\" class=\"headerlink\" title=\"七个内置类型\"></a>七个内置类型</h4><ul>\n<li>空值 (null)</li>\n<li>未定义 (undefined)</li>\n<li>布尔值 (boolean)</li>\n<li>数字 (number)</li>\n<li>字符串 (string)</li>\n<li>对象 (object)</li>\n<li>符号 (symbol)</li>\n</ul>\n<h4 id=\"检测各个类型\"><a href=\"#检测各个类型\" class=\"headerlink\" title=\"检测各个类型\"></a>检测各个类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof undefined\t\t=== &quot;undefined&quot; \t// true</span><br><span class=\"line\">typeof true \t\t\t\t=== &quot;boolean&quot;\t\t\t// true</span><br><span class=\"line\">typeof 42\t\t\t\t\t\t=== &quot;number&quot;\t\t\t// true</span><br><span class=\"line\">typeof &quot;42&quot; \t\t\t\t=== &quot;string&quot;\t\t\t// true</span><br><span class=\"line\">typeof &#123;&quot;life&quot;: 42&#125;\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof Symbol\t\t\t\t=== &quot;symbol&quot;\t\t\t// true</span><br><span class=\"line\">typeof null \t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof function()&#123;&#125;\t=== &quot;function&quot; \t\t// true</span><br><span class=\"line\">typeof [0,1]\t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br></pre></td></tr></table></figure>\n<p>本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。<br>因此，对null应该采用复合查询语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = null;</span><br><span class=\"line\">(!a &amp;&amp; typeof a === &quot;object&quot;)\t// true</span><br></pre></td></tr></table></figure></p>\n<p>而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。<br>且typeof [0,1] === “object”,因为数组也是object的一个子类型</p>\n<p><em>ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string</em></p>\n<h4 id=\"undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\"><a href=\"#undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\" class=\"headerlink\" title=\"undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared\"></a>undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">typeof a;\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">var b = 42;</span><br><span class=\"line\">var c;</span><br><span class=\"line\">b=c;</span><br><span class=\"line\">typeof c\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">typeof b\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">a\t\t\t\t\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">d\t\t\t\t\t\t\t// &quot;VM422:1 Uncaught ReferenceError: d is not defined at &lt;anonymous&gt;:1:1&quot;</span><br></pre></td></tr></table></figure>\n<p>从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号</p>\n<h4 id=\"typeof-undeclared\"><a href=\"#typeof-undeclared\" class=\"headerlink\" title=\"typeof undeclared\"></a>typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof a\t\t\t// &quot;undefined&quot;</span><br></pre></td></tr></table></figure>\n<p>出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。</p>\n<h4 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h4><h5 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h5><p>js的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。<br>由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [];</span><br><span class=\"line\">a[0] = 1;</span><br><span class=\"line\">a[&quot;foobar&quot;] = 1;</span><br><span class=\"line\">a.length \t\t\t// 1</span><br><span class=\"line\">a[&quot;foobar&quot;];\t// 1</span><br><span class=\"line\">a.foobar\t\t\t// 1</span><br><span class=\"line\">a[&quot;13&quot;] = 42;</span><br><span class=\"line\">a.length\t\t// 14</span><br></pre></td></tr></table></figure></p>\n<p>为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。</p>\n<h5 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h5><p>对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。</p>\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><p>字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。<br>字符串的一些方法：<br>|方法|描述|<br>|—|—|<br>|charAt() | 返回指定索引位置的字符|<br>|charCodeAt() | 返回指定索引位置字符的 Unicode 值|<br>|concat() | 连接两个或多个字符串，返回连接后的字符串|<br>|fromCharCode() | 将 Unicode 转换为字符串|<br>|indexOf() | 返回字符串中检索指定字符第一次出现的位置|<br>|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|<br>|localeCompare() | 用本地特定的顺序来比较两个字符串|<br>|match() | 找到一个或多个正则表达式的匹配|<br>|replace() | 替换与正则表达式匹配的子串|<br>|search() | 检索与正则表达式相匹配的值|<br>|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|<br>|split() | 把字符串分割为子字符串数组|<br>|substr() | 从起始索引号提取字符串中指定数目的字符|<br>|substring() | 提取字符串中两个指定的索引号之间的字符|<br>|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLowerCase() | 把字符串转换为小写|<br>|toString() | 返回字符串对象值|<br>|toUpperCase() | 把字符串转换为大写|<br>|trim() | 移除字符串首尾空白|<br>|valueOf() | 返回某个字符串对象的原始值|</p>\n<p>如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串</p>\n<h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><p>和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。<br>数字的一些方法：<br>toExponential()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5E10\t\t\t// 可以通过这种方式赋值</span><br><span class=\"line\">a\t\t\t\t\t\t\t\t\t// 50000000000</span><br><span class=\"line\">a.toExponential()\t// &quot;5e+10&quot;</span><br><span class=\"line\">var b = a * a;</span><br><span class=\"line\">b \t\t\t\t\t\t\t\t// 2.5e+21</span><br><span class=\"line\">```\t</span><br><span class=\"line\">toFixed()\t\t\t\t\t// 精度</span><br><span class=\"line\">```bash</span><br><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toFixed(1)\t\t\t// &quot;42.6&quot;</span><br><span class=\"line\">// 无效</span><br><span class=\"line\">42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">// 有效</span><br><span class=\"line\">42..toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">(42).toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">0.42.toFixed(3)\t\t// &quot;0.420&quot;</span><br><span class=\"line\">42 .toFixed(3)\t\t// &quot;42.000&quot;</span><br></pre></td></tr></table></figure></p>\n<p>因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()<br>toPrecision() // 执行有效位数的显示位数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toPrecision(1)\t\t// &quot;4e+1&quot;</span><br><span class=\"line\">a.toPrecision(2)\t\t// &quot;43&quot;</span><br><span class=\"line\">a.toPrecision(3)\t\t// &quot;42.6&quot;</span><br><span class=\"line\">``` </span><br><span class=\"line\">es6支持新格式</span><br><span class=\"line\">```bash</span><br><span class=\"line\">0B\t\t0b\t\t\t\t\t// 二进制</span><br><span class=\"line\">0O\t\t0o\t\t\t\t\t// 八进制</span><br><span class=\"line\">0X\t\t0x\t\t\t\t\t// 十六进制</span><br></pre></td></tr></table></figure></p>\n<p>EPSILON // 最小精度<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(((0.1 + 0.2) - 0.3)&lt;Number.EPSILON)&#123;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>MAX_VALUE<br>MAX_SAFE_INTEGER<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER\t\t\t// 9007199254740991</span><br></pre></td></tr></table></figure></p>\n<p>isInteger<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isInteger(1)\t\t\t\t\t// true</span><br><span class=\"line\">Number.isInteger(1.1)\t\t\t\t// false</span><br><span class=\"line\">Number.isInteger(1.0)\t\t\t\t// true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"特殊数值\"><a href=\"#特殊数值\" class=\"headerlink\" title=\"特殊数值\"></a>特殊数值</h4><h5 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var undefined = 2</span><br><span class=\"line\">undefined \t// 2</span><br></pre></td></tr></table></figure>\n<p><em>ps：永远不要重新定义undefined</em></p>\n<h4 id=\"void-运算符\"><a href=\"#void-运算符\" class=\"headerlink\" title=\"void 运算符\"></a>void 运算符</h4><p>在不需要返回值的时候，可以void掉<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ready)&#123;</span><br><span class=\"line\">\treturn void setTimeout(..)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样做可以将setTimeout返回的id给void掉</p>\n<h4 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h4><p>NaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isNaN(NaN)\t\t\t\t// true</span><br><span class=\"line\">Number.isNaN(1)\t\t\t\t\t// false</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"0值\"><a href=\"#0值\" class=\"headerlink\" title=\"0值\"></a>0值</h4><p>加法和减法运算永远不会有-0<br>使用toString和JSON.stringify()会将-0变成0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0/-1\t\t\t// -0</span><br><span class=\"line\">0/1\t\t\t\t// 0</span><br><span class=\"line\">var a = -0</span><br><span class=\"line\">a \t\t\t\t// -0</span><br><span class=\"line\">a.toString()\t\t// 0</span><br><span class=\"line\">JSON.stringify(a)\t// 0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"特殊等式\"><a href=\"#特殊等式\" class=\"headerlink\" title=\"特殊等式\"></a>特殊等式</h4><p>Object.is<br>Object.is 可以判断是+0还是-0,而且可以判断是否为NaN<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.is(+0, -0)\t// false</span><br><span class=\"line\">Object.is(NaN, NaN)\t\t// true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"值和引用\"><a href=\"#值和引用\" class=\"headerlink\" title=\"值和引用\"></a>值和引用</h4><p>null，undefined，字符串，数字，布尔，symbol都是简单值<br>对象，函数都是复杂值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x) &#123;</span><br><span class=\"line\">\tx.push(4);\t</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx = [4,5,6];</span><br><span class=\"line\">\tx.push(7);</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3];</span><br><span class=\"line\">foo(a);</span><br><span class=\"line\">a;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];</span><br><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tx.push(4);</span><br><span class=\"line\">\tx;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx.length = 0;\t</span><br><span class=\"line\">\tx.push(4,5,6,7)</span><br><span class=\"line\">\tx;\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">foo(a)</span><br><span class=\"line\">a;\t\t// [4,5,6,7]</span><br><span class=\"line\">和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化</span><br></pre></td></tr></table></figure></p>\n<p><em>ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(warpper)&#123;</span><br><span class=\"line\">\twarpper.a = 42</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(obj)</span><br><span class=\"line\">obj.a\t\t\t//42</span><br><span class=\"line\">function foo (x) &#123;</span><br><span class=\"line\">\tx = x+1;</span><br><span class=\"line\">\tx;\t\t\t\t// 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">var b = new Number(a);</span><br><span class=\"line\">foo(b)</span><br><span class=\"line\">console.log(b)\t\t// 2</span><br><span class=\"line\">前者是引用赋值，后者是值赋值</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"原生函数\"><a href=\"#原生函数\" class=\"headerlink\" title=\"原生函数\"></a>原生函数</h4><ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object</li>\n<li>Function</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Error</li>\n<li>Symbol</li>\n</ul>\n<h4 id=\"内部属性-Class\"><a href=\"#内部属性-Class\" class=\"headerlink\" title=\"内部属性[[Class]]\"></a>内部属性[[Class]]</h4><p>所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call([123])\t\t\t// &quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(null)\t\t\t// &quot;[object Null]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(true)\t\t\t// &quot;[object Boolean]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(undefined)\t// &quot;[object Undefined]&quot;</span><br></pre></td></tr></table></figure></p>\n<p>虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。</p>\n<h4 id=\"封装对象包装\"><a href=\"#封装对象包装\" class=\"headerlink\" title=\"封装对象包装\"></a>封装对象包装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;;</span><br><span class=\"line\">console.log(a);\t\t// &quot;abc&quot;</span><br><span class=\"line\">a.length \t\t\t\t\t// &quot;3&quot;</span><br><span class=\"line\">var b = new String(&quot;abc&quot;)</span><br><span class=\"line\">console.log(b)\t\t// String &#123;[[PrimitiveValue]]: &quot;abc&quot;&#125; 0:&quot;a&quot; 1:&quot;b&quot; 2:&quot;c&quot; length:3 __proto__:String [[PrimitiveValue]]:&quot;abc&quot;</span><br></pre></td></tr></table></figure>\n<p>只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。<br>但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。</p>\n<h4 id=\"封装对象的释疑\"><a href=\"#封装对象的释疑\" class=\"headerlink\" title=\"封装对象的释疑\"></a>封装对象的释疑</h4><p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Boolean(false);</span><br><span class=\"line\">if (!a)&#123;</span><br><span class=\"line\">\tconsole.log(...)\t\t\t// 执行不到这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反</p>\n<p>自行封装可以使用Object<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;</span><br><span class=\"line\">var b = new String (a);</span><br><span class=\"line\">var c = Object(a);</span><br><span class=\"line\">typeof a \t\t\t\t// &quot;stirng&quot;</span><br><span class=\"line\">typeof b\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof c\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">b instanceof String \t// true</span><br><span class=\"line\">c instanceof String \t// true</span><br><span class=\"line\">Object.prototype.toString.call(b);\t\t// &quot;[object String]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(c);\t\t// &quot;[object String]&quot;</span><br></pre></td></tr></table></figure></p>\n<p>一般不直接使用封装对象，但是他们偶尔也会派上用场</p>\n<h4 id=\"拆封\"><a href=\"#拆封\" class=\"headerlink\" title=\"拆封\"></a>拆封</h4><p>如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new String(&quot;abc&quot;)</span><br><span class=\"line\">var b = new Number(11)</span><br><span class=\"line\">var c = new Boolean(true)</span><br><span class=\"line\">a.valueOf()\t// &quot;abc&quot;</span><br><span class=\"line\">b.valueOf()\t// 11</span><br><span class=\"line\">c.valueOf()\t// true</span><br><span class=\"line\">var d = a + &quot;&quot;;</span><br><span class=\"line\">console.log(d)\t\t\t\t// &quot;abc&quot;</span><br><span class=\"line\">typeof a \t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof d \t\t\t// &quot;string&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"原生函数作为构造函数\"><a href=\"#原生函数作为构造函数\" class=\"headerlink\" title=\"原生函数作为构造函数\"></a>原生函数作为构造函数</h4><p>四种方式创建应该尽量避免构造函数，除非十分必要</p>\n<ul>\n<li>array 数组</li>\n<li>object 对象</li>\n<li>function 函数</li>\n<li>RegExp 正则表达式<h3 id=\"ARRAY\"><a href=\"#ARRAY\" class=\"headerlink\" title=\"ARRAY(..)\"></a>ARRAY(..)</h3>调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 效果一致</span><br><span class=\"line\">var a = new Array(1,2,3);</span><br><span class=\"line\">a\t\t\t// [1,2,3]</span><br><span class=\"line\">var b = Array(1,2,3)</span><br><span class=\"line\">b \t\t// [1,2,3]</span><br><span class=\"line\">var c = [1,2,3]</span><br><span class=\"line\">c \t\t// [1,2,3]</span><br><span class=\"line\">// 不同方式创建出来空数组效果不一致</span><br><span class=\"line\">var d = new Array(3);</span><br><span class=\"line\">console.log(d)\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">d.length\t\t\t\t\t\t// 3</span><br><span class=\"line\">var e = [undefined,undefined,undefined];</span><br><span class=\"line\">console.log(e)\t\t\t// (3) [undefined, undefined, undefined]</span><br><span class=\"line\">var f = []\t\t\t\t\t</span><br><span class=\"line\">f.length = 3;</span><br><span class=\"line\">console.log(f);\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴</span><br><span class=\"line\">var g = [,,,]</span><br><span class=\"line\">console.log(g)\t\t\t// chrome上： (3) [empty × 3]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Array(3)</span><br><span class=\"line\">var b = [undefined,undefined,undefined]</span><br><span class=\"line\">a.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">b.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// (3) [empty × 3]</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// [0, 1, 2]</span><br></pre></td></tr></table></figure></p>\n<p>a.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。<br><strong>而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定</strong><br>可以通过这种方式来创建包含undefined单元的数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Array.apply(null, &#123;length:3&#125;);</span><br><span class=\"line\">console.log(a)\t\t\t// (3) [undefined, undefined, undefined]</span><br></pre></td></tr></table></figure></p>\n<p><em>PS:永远不要创建和使用空单元数组</em></p>\n<h4 id=\"OBJECT、FUNCTION、REGEXP\"><a href=\"#OBJECT、FUNCTION、REGEXP\" class=\"headerlink\" title=\"OBJECT、FUNCTION、REGEXP\"></a>OBJECT、FUNCTION、REGEXP</h4><p><strong>除非玩不得已，尽量不要使用他们</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = new Object();</span><br><span class=\"line\">c.foo = &quot;bar&quot;;</span><br><span class=\"line\">c\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var d = &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">d\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var e = new Function(&quot;a&quot;,&quot;return a * 2&quot;);</span><br><span class=\"line\">var f = function(a)&#123;return a*2&#125;;</span><br><span class=\"line\">function g(a)&#123;return a*2&#125;</span><br><span class=\"line\">var h = new RegExp(&quot;^a*b+&quot;,&quot;g&quot;);</span><br><span class=\"line\">var i = /^a*b+/g</span><br></pre></td></tr></table></figure></p>\n<p>javascript对常量形式的代码会对他们进行预编译和缓存！</p>\n<h4 id=\"DATE、ERROR\"><a href=\"#DATE、ERROR\" class=\"headerlink\" title=\"DATE、ERROR\"></a>DATE、ERROR</h4><p>相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代<br>引入生成当前时间戳，使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date.now()</span><br><span class=\"line\">// 使用new来生成时间</span><br><span class=\"line\">new Date()</span><br><span class=\"line\">// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p>\n<p>错误对象通常与throw一起使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tif(!x)&#123;</span><br><span class=\"line\">\t\tthrow new Error(&quot;///&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// -</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"SYMBOL\"><a href=\"#SYMBOL\" class=\"headerlink\" title=\"SYMBOL\"></a>SYMBOL</h4><p>Symbol可作为私有属性是一种简单标量基本类型</p>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><h4 id=\"抽象值操作\"><a href=\"#抽象值操作\" class=\"headerlink\" title=\"抽象值操作\"></a>抽象值操作</h4><p>如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。<br>数组的默认toString方法经过了重新定义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">a.toString()\t\t// &quot;1,2,3&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"JSON-字符串化\"><a href=\"#JSON-字符串化\" class=\"headerlink\" title=\"JSON 字符串化\"></a>JSON 字符串化</h4><p>JSON.stringify(42) // “42”<br>JSON.stringify(“42”) // “”42””<br>JSON.stringify(null) // “null”<br>JSON.stringify(true) // “true”</p>\n<p><em>JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(undefined)\t\t\t// undefined</span><br><span class=\"line\">JSON.stringify(function()&#123;&#125;)\t// undefined</span><br><span class=\"line\">JSON.stringify([1,undefined, function()&#123;&#125;,4])\t// &quot;[1,null,null,4]&quot;</span><br><span class=\"line\">JSON.stringify(&#123;a:2, b: function()&#123;&#125;&#125;)\t\t\t\t// &quot;&#123;&quot;a&quot;:2&#125;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>循环引用会出错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">\tb:42,</span><br><span class=\"line\">\tc:o,</span><br><span class=\"line\">\td:function()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.e = a</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\">a.toJSON=function()&#123;</span><br><span class=\"line\">\treturn &#123;b:this.b&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\"># Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"line\">#     at JSON.stringify (&lt;anonymous&gt;)</span><br><span class=\"line\">#     at &lt;anonymous&gt;:8:6</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h4 id=\"七个内置类型\"><a href=\"#七个内置类型\" class=\"headerlink\" title=\"七个内置类型\"></a>七个内置类型</h4><ul>\n<li>空值 (null)</li>\n<li>未定义 (undefined)</li>\n<li>布尔值 (boolean)</li>\n<li>数字 (number)</li>\n<li>字符串 (string)</li>\n<li>对象 (object)</li>\n<li>符号 (symbol)</li>\n</ul>\n<h4 id=\"检测各个类型\"><a href=\"#检测各个类型\" class=\"headerlink\" title=\"检测各个类型\"></a>检测各个类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof undefined\t\t=== &quot;undefined&quot; \t// true</span><br><span class=\"line\">typeof true \t\t\t\t=== &quot;boolean&quot;\t\t\t// true</span><br><span class=\"line\">typeof 42\t\t\t\t\t\t=== &quot;number&quot;\t\t\t// true</span><br><span class=\"line\">typeof &quot;42&quot; \t\t\t\t=== &quot;string&quot;\t\t\t// true</span><br><span class=\"line\">typeof &#123;&quot;life&quot;: 42&#125;\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof Symbol\t\t\t\t=== &quot;symbol&quot;\t\t\t// true</span><br><span class=\"line\">typeof null \t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof function()&#123;&#125;\t=== &quot;function&quot; \t\t// true</span><br><span class=\"line\">typeof [0,1]\t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br></pre></td></tr></table></figure>\n<p>本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。<br>因此，对null应该采用复合查询语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = null;</span><br><span class=\"line\">(!a &amp;&amp; typeof a === &quot;object&quot;)\t// true</span><br></pre></td></tr></table></figure></p>\n<p>而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。<br>且typeof [0,1] === “object”,因为数组也是object的一个子类型</p>\n<p><em>ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string</em></p>\n<h4 id=\"undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\"><a href=\"#undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\" class=\"headerlink\" title=\"undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared\"></a>undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">typeof a;\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">var b = 42;</span><br><span class=\"line\">var c;</span><br><span class=\"line\">b=c;</span><br><span class=\"line\">typeof c\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">typeof b\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">a\t\t\t\t\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">d\t\t\t\t\t\t\t// &quot;VM422:1 Uncaught ReferenceError: d is not defined at &lt;anonymous&gt;:1:1&quot;</span><br></pre></td></tr></table></figure>\n<p>从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号</p>\n<h4 id=\"typeof-undeclared\"><a href=\"#typeof-undeclared\" class=\"headerlink\" title=\"typeof undeclared\"></a>typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof a\t\t\t// &quot;undefined&quot;</span><br></pre></td></tr></table></figure>\n<p>出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。</p>\n<h4 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h4><h5 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h5><p>js的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。<br>由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [];</span><br><span class=\"line\">a[0] = 1;</span><br><span class=\"line\">a[&quot;foobar&quot;] = 1;</span><br><span class=\"line\">a.length \t\t\t// 1</span><br><span class=\"line\">a[&quot;foobar&quot;];\t// 1</span><br><span class=\"line\">a.foobar\t\t\t// 1</span><br><span class=\"line\">a[&quot;13&quot;] = 42;</span><br><span class=\"line\">a.length\t\t// 14</span><br></pre></td></tr></table></figure></p>\n<p>为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。</p>\n<h5 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h5><p>对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。</p>\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><p>字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。<br>字符串的一些方法：<br>|方法|描述|<br>|—|—|<br>|charAt() | 返回指定索引位置的字符|<br>|charCodeAt() | 返回指定索引位置字符的 Unicode 值|<br>|concat() | 连接两个或多个字符串，返回连接后的字符串|<br>|fromCharCode() | 将 Unicode 转换为字符串|<br>|indexOf() | 返回字符串中检索指定字符第一次出现的位置|<br>|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|<br>|localeCompare() | 用本地特定的顺序来比较两个字符串|<br>|match() | 找到一个或多个正则表达式的匹配|<br>|replace() | 替换与正则表达式匹配的子串|<br>|search() | 检索与正则表达式相匹配的值|<br>|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|<br>|split() | 把字符串分割为子字符串数组|<br>|substr() | 从起始索引号提取字符串中指定数目的字符|<br>|substring() | 提取字符串中两个指定的索引号之间的字符|<br>|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLowerCase() | 把字符串转换为小写|<br>|toString() | 返回字符串对象值|<br>|toUpperCase() | 把字符串转换为大写|<br>|trim() | 移除字符串首尾空白|<br>|valueOf() | 返回某个字符串对象的原始值|</p>\n<p>如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串</p>\n<h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><p>和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。<br>数字的一些方法：<br>toExponential()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5E10\t\t\t// 可以通过这种方式赋值</span><br><span class=\"line\">a\t\t\t\t\t\t\t\t\t// 50000000000</span><br><span class=\"line\">a.toExponential()\t// &quot;5e+10&quot;</span><br><span class=\"line\">var b = a * a;</span><br><span class=\"line\">b \t\t\t\t\t\t\t\t// 2.5e+21</span><br><span class=\"line\">```\t</span><br><span class=\"line\">toFixed()\t\t\t\t\t// 精度</span><br><span class=\"line\">```bash</span><br><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toFixed(1)\t\t\t// &quot;42.6&quot;</span><br><span class=\"line\">// 无效</span><br><span class=\"line\">42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">// 有效</span><br><span class=\"line\">42..toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">(42).toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">0.42.toFixed(3)\t\t// &quot;0.420&quot;</span><br><span class=\"line\">42 .toFixed(3)\t\t// &quot;42.000&quot;</span><br></pre></td></tr></table></figure></p>\n<p>因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()<br>toPrecision() // 执行有效位数的显示位数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toPrecision(1)\t\t// &quot;4e+1&quot;</span><br><span class=\"line\">a.toPrecision(2)\t\t// &quot;43&quot;</span><br><span class=\"line\">a.toPrecision(3)\t\t// &quot;42.6&quot;</span><br><span class=\"line\">``` </span><br><span class=\"line\">es6支持新格式</span><br><span class=\"line\">```bash</span><br><span class=\"line\">0B\t\t0b\t\t\t\t\t// 二进制</span><br><span class=\"line\">0O\t\t0o\t\t\t\t\t// 八进制</span><br><span class=\"line\">0X\t\t0x\t\t\t\t\t// 十六进制</span><br></pre></td></tr></table></figure></p>\n<p>EPSILON // 最小精度<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(((0.1 + 0.2) - 0.3)&lt;Number.EPSILON)&#123;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>MAX_VALUE<br>MAX_SAFE_INTEGER<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER\t\t\t// 9007199254740991</span><br></pre></td></tr></table></figure></p>\n<p>isInteger<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isInteger(1)\t\t\t\t\t// true</span><br><span class=\"line\">Number.isInteger(1.1)\t\t\t\t// false</span><br><span class=\"line\">Number.isInteger(1.0)\t\t\t\t// true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"特殊数值\"><a href=\"#特殊数值\" class=\"headerlink\" title=\"特殊数值\"></a>特殊数值</h4><h5 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var undefined = 2</span><br><span class=\"line\">undefined \t// 2</span><br></pre></td></tr></table></figure>\n<p><em>ps：永远不要重新定义undefined</em></p>\n<h4 id=\"void-运算符\"><a href=\"#void-运算符\" class=\"headerlink\" title=\"void 运算符\"></a>void 运算符</h4><p>在不需要返回值的时候，可以void掉<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ready)&#123;</span><br><span class=\"line\">\treturn void setTimeout(..)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样做可以将setTimeout返回的id给void掉</p>\n<h4 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h4><p>NaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isNaN(NaN)\t\t\t\t// true</span><br><span class=\"line\">Number.isNaN(1)\t\t\t\t\t// false</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"0值\"><a href=\"#0值\" class=\"headerlink\" title=\"0值\"></a>0值</h4><p>加法和减法运算永远不会有-0<br>使用toString和JSON.stringify()会将-0变成0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0/-1\t\t\t// -0</span><br><span class=\"line\">0/1\t\t\t\t// 0</span><br><span class=\"line\">var a = -0</span><br><span class=\"line\">a \t\t\t\t// -0</span><br><span class=\"line\">a.toString()\t\t// 0</span><br><span class=\"line\">JSON.stringify(a)\t// 0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"特殊等式\"><a href=\"#特殊等式\" class=\"headerlink\" title=\"特殊等式\"></a>特殊等式</h4><p>Object.is<br>Object.is 可以判断是+0还是-0,而且可以判断是否为NaN<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.is(+0, -0)\t// false</span><br><span class=\"line\">Object.is(NaN, NaN)\t\t// true</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"值和引用\"><a href=\"#值和引用\" class=\"headerlink\" title=\"值和引用\"></a>值和引用</h4><p>null，undefined，字符串，数字，布尔，symbol都是简单值<br>对象，函数都是复杂值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x) &#123;</span><br><span class=\"line\">\tx.push(4);\t</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx = [4,5,6];</span><br><span class=\"line\">\tx.push(7);</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3];</span><br><span class=\"line\">foo(a);</span><br><span class=\"line\">a;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];</span><br><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tx.push(4);</span><br><span class=\"line\">\tx;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx.length = 0;\t</span><br><span class=\"line\">\tx.push(4,5,6,7)</span><br><span class=\"line\">\tx;\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">foo(a)</span><br><span class=\"line\">a;\t\t// [4,5,6,7]</span><br><span class=\"line\">和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化</span><br></pre></td></tr></table></figure></p>\n<p><em>ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(warpper)&#123;</span><br><span class=\"line\">\twarpper.a = 42</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(obj)</span><br><span class=\"line\">obj.a\t\t\t//42</span><br><span class=\"line\">function foo (x) &#123;</span><br><span class=\"line\">\tx = x+1;</span><br><span class=\"line\">\tx;\t\t\t\t// 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">var b = new Number(a);</span><br><span class=\"line\">foo(b)</span><br><span class=\"line\">console.log(b)\t\t// 2</span><br><span class=\"line\">前者是引用赋值，后者是值赋值</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"原生函数\"><a href=\"#原生函数\" class=\"headerlink\" title=\"原生函数\"></a>原生函数</h4><ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Array</li>\n<li>Object</li>\n<li>Function</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Error</li>\n<li>Symbol</li>\n</ul>\n<h4 id=\"内部属性-Class\"><a href=\"#内部属性-Class\" class=\"headerlink\" title=\"内部属性[[Class]]\"></a>内部属性[[Class]]</h4><p>所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call([123])\t\t\t// &quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(null)\t\t\t// &quot;[object Null]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(true)\t\t\t// &quot;[object Boolean]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(undefined)\t// &quot;[object Undefined]&quot;</span><br></pre></td></tr></table></figure></p>\n<p>虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。</p>\n<h4 id=\"封装对象包装\"><a href=\"#封装对象包装\" class=\"headerlink\" title=\"封装对象包装\"></a>封装对象包装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;;</span><br><span class=\"line\">console.log(a);\t\t// &quot;abc&quot;</span><br><span class=\"line\">a.length \t\t\t\t\t// &quot;3&quot;</span><br><span class=\"line\">var b = new String(&quot;abc&quot;)</span><br><span class=\"line\">console.log(b)\t\t// String &#123;[[PrimitiveValue]]: &quot;abc&quot;&#125; 0:&quot;a&quot; 1:&quot;b&quot; 2:&quot;c&quot; length:3 __proto__:String [[PrimitiveValue]]:&quot;abc&quot;</span><br></pre></td></tr></table></figure>\n<p>只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。<br>但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。</p>\n<h4 id=\"封装对象的释疑\"><a href=\"#封装对象的释疑\" class=\"headerlink\" title=\"封装对象的释疑\"></a>封装对象的释疑</h4><p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Boolean(false);</span><br><span class=\"line\">if (!a)&#123;</span><br><span class=\"line\">\tconsole.log(...)\t\t\t// 执行不到这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反</p>\n<p>自行封装可以使用Object<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;</span><br><span class=\"line\">var b = new String (a);</span><br><span class=\"line\">var c = Object(a);</span><br><span class=\"line\">typeof a \t\t\t\t// &quot;stirng&quot;</span><br><span class=\"line\">typeof b\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof c\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">b instanceof String \t// true</span><br><span class=\"line\">c instanceof String \t// true</span><br><span class=\"line\">Object.prototype.toString.call(b);\t\t// &quot;[object String]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(c);\t\t// &quot;[object String]&quot;</span><br></pre></td></tr></table></figure></p>\n<p>一般不直接使用封装对象，但是他们偶尔也会派上用场</p>\n<h4 id=\"拆封\"><a href=\"#拆封\" class=\"headerlink\" title=\"拆封\"></a>拆封</h4><p>如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new String(&quot;abc&quot;)</span><br><span class=\"line\">var b = new Number(11)</span><br><span class=\"line\">var c = new Boolean(true)</span><br><span class=\"line\">a.valueOf()\t// &quot;abc&quot;</span><br><span class=\"line\">b.valueOf()\t// 11</span><br><span class=\"line\">c.valueOf()\t// true</span><br><span class=\"line\">var d = a + &quot;&quot;;</span><br><span class=\"line\">console.log(d)\t\t\t\t// &quot;abc&quot;</span><br><span class=\"line\">typeof a \t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof d \t\t\t// &quot;string&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"原生函数作为构造函数\"><a href=\"#原生函数作为构造函数\" class=\"headerlink\" title=\"原生函数作为构造函数\"></a>原生函数作为构造函数</h4><p>四种方式创建应该尽量避免构造函数，除非十分必要</p>\n<ul>\n<li>array 数组</li>\n<li>object 对象</li>\n<li>function 函数</li>\n<li>RegExp 正则表达式<h3 id=\"ARRAY\"><a href=\"#ARRAY\" class=\"headerlink\" title=\"ARRAY(..)\"></a>ARRAY(..)</h3>调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 效果一致</span><br><span class=\"line\">var a = new Array(1,2,3);</span><br><span class=\"line\">a\t\t\t// [1,2,3]</span><br><span class=\"line\">var b = Array(1,2,3)</span><br><span class=\"line\">b \t\t// [1,2,3]</span><br><span class=\"line\">var c = [1,2,3]</span><br><span class=\"line\">c \t\t// [1,2,3]</span><br><span class=\"line\">// 不同方式创建出来空数组效果不一致</span><br><span class=\"line\">var d = new Array(3);</span><br><span class=\"line\">console.log(d)\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">d.length\t\t\t\t\t\t// 3</span><br><span class=\"line\">var e = [undefined,undefined,undefined];</span><br><span class=\"line\">console.log(e)\t\t\t// (3) [undefined, undefined, undefined]</span><br><span class=\"line\">var f = []\t\t\t\t\t</span><br><span class=\"line\">f.length = 3;</span><br><span class=\"line\">console.log(f);\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴</span><br><span class=\"line\">var g = [,,,]</span><br><span class=\"line\">console.log(g)\t\t\t// chrome上： (3) [empty × 3]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Array(3)</span><br><span class=\"line\">var b = [undefined,undefined,undefined]</span><br><span class=\"line\">a.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">b.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// (3) [empty × 3]</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// [0, 1, 2]</span><br></pre></td></tr></table></figure></p>\n<p>a.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。<br><strong>而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定</strong><br>可以通过这种方式来创建包含undefined单元的数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Array.apply(null, &#123;length:3&#125;);</span><br><span class=\"line\">console.log(a)\t\t\t// (3) [undefined, undefined, undefined]</span><br></pre></td></tr></table></figure></p>\n<p><em>PS:永远不要创建和使用空单元数组</em></p>\n<h4 id=\"OBJECT、FUNCTION、REGEXP\"><a href=\"#OBJECT、FUNCTION、REGEXP\" class=\"headerlink\" title=\"OBJECT、FUNCTION、REGEXP\"></a>OBJECT、FUNCTION、REGEXP</h4><p><strong>除非玩不得已，尽量不要使用他们</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = new Object();</span><br><span class=\"line\">c.foo = &quot;bar&quot;;</span><br><span class=\"line\">c\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var d = &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">d\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var e = new Function(&quot;a&quot;,&quot;return a * 2&quot;);</span><br><span class=\"line\">var f = function(a)&#123;return a*2&#125;;</span><br><span class=\"line\">function g(a)&#123;return a*2&#125;</span><br><span class=\"line\">var h = new RegExp(&quot;^a*b+&quot;,&quot;g&quot;);</span><br><span class=\"line\">var i = /^a*b+/g</span><br></pre></td></tr></table></figure></p>\n<p>javascript对常量形式的代码会对他们进行预编译和缓存！</p>\n<h4 id=\"DATE、ERROR\"><a href=\"#DATE、ERROR\" class=\"headerlink\" title=\"DATE、ERROR\"></a>DATE、ERROR</h4><p>相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代<br>引入生成当前时间戳，使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date.now()</span><br><span class=\"line\">// 使用new来生成时间</span><br><span class=\"line\">new Date()</span><br><span class=\"line\">// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p>\n<p>错误对象通常与throw一起使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tif(!x)&#123;</span><br><span class=\"line\">\t\tthrow new Error(&quot;///&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// -</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"SYMBOL\"><a href=\"#SYMBOL\" class=\"headerlink\" title=\"SYMBOL\"></a>SYMBOL</h4><p>Symbol可作为私有属性是一种简单标量基本类型</p>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><h4 id=\"抽象值操作\"><a href=\"#抽象值操作\" class=\"headerlink\" title=\"抽象值操作\"></a>抽象值操作</h4><p>如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。<br>数组的默认toString方法经过了重新定义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">a.toString()\t\t// &quot;1,2,3&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"JSON-字符串化\"><a href=\"#JSON-字符串化\" class=\"headerlink\" title=\"JSON 字符串化\"></a>JSON 字符串化</h4><p>JSON.stringify(42) // “42”<br>JSON.stringify(“42”) // “”42””<br>JSON.stringify(null) // “null”<br>JSON.stringify(true) // “true”</p>\n<p><em>JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(undefined)\t\t\t// undefined</span><br><span class=\"line\">JSON.stringify(function()&#123;&#125;)\t// undefined</span><br><span class=\"line\">JSON.stringify([1,undefined, function()&#123;&#125;,4])\t// &quot;[1,null,null,4]&quot;</span><br><span class=\"line\">JSON.stringify(&#123;a:2, b: function()&#123;&#125;&#125;)\t\t\t\t// &quot;&#123;&quot;a&quot;:2&#125;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>循环引用会出错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">\tb:42,</span><br><span class=\"line\">\tc:o,</span><br><span class=\"line\">\td:function()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.e = a</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\">a.toJSON=function()&#123;</span><br><span class=\"line\">\treturn &#123;b:this.b&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\"># Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"line\">#     at JSON.stringify (&lt;anonymous&gt;)</span><br><span class=\"line\">#     at &lt;anonymous&gt;:8:6</span><br></pre></td></tr></table></figure></p>\n"},{"title":"你不知道的javascript————this和对象原型","date":"2017-09-06T12:29:15.000Z","_content":"### this误解\n从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.\n\n##### 指向自身\n先看一个demo\n```\nfunction foo(num) {\n\tconsole.log(\"foo: \" + num);\n\tthis.count++;\n}\nfoo.count = 0;\nvar i;\nfor (i = 0; i < 10; i++) {\n\tif(i > 5) {\n\t\tfoo(i)\n\t}\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\nconsole.log(this.count)\t// NaN\n```\n从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.\n\n### this是什么?\nthis是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.\n\n当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。\n\n_PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。_\n\n##### 调用位置\n```\nfunction baz() {\n\t// 当前作用栈是： baz\n\t// 因此调用位置是全局作用域\n\tconsole.log(\"baz\")\n\tbar()\t\t\t// <-- bar的调用位置\n}\nfunction bar() {\n\t// 当前调用栈是baz -> bar\n\t// 因此调用位置是baz中\n\tconsole.log(\"bar\")\n\tfoo();\t\t// <-- foo的调用位置\n}\nfunction foo() {\n\t// 当前调用栈是baz -> bar -> foo\n\t// 当前调用位置在bar中\n\tconsole.log(\"foo\")\n}\nbaz()    // <-- baz的调用位置\n```\n从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定\n### 四种绑定规则\n##### 默认绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2;\nfoo();\t// 2\n///////////////////////\nfunction foo2() {\n\t\"use strict\"\n\tconsole.log(this.a)\n}\nvar a =2\nfoo2() \t\t// typeerror\n////////////////////////\nfunction foo3() {\n\tconsole.log(this.a)\n}\nvar a =2\n(function () {\n\t\"use strict\"\n\tfoo3()\t\t// 2\n})()\n\n```\n在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。\n\n##### 隐式绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta : 2,\n\tfoo : foo\n}\nobj.foo \t// 2\n\n```\n在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj2 = {\n\ta:42,\n\tfoo:foo\n}\nvar obj1 = {\n\ta: 2,\n\tobj2: obj2\n}\nobj1.obj2.foo() \t// 42\n\n```\n在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。\n##### 隐式丢失\n```\n// 隐式丢失，成为默认绑定\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2,\n\tfoo: foo\n}\nvar bar = obj.foo\nvar a = \"this is global\"\nbar()\t\t\t// this is global\n////////////////////////////////////////\n// 回调的隐式丢失\nfunction foo() {\n\tconsole.log(this.a)\n}\nfunction doFoo(fn) {\n\t// fn其实引用的是foo\n\tfn()\t\t// 调用位置\n}\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nvar a = \"this is global\"\ndoFoo(obj.foo)\t// this is global\n\n```\n虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。\n第二种情况也是如此，在回调时的隐式丢失导致的问题\n这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失\n\n##### 显式绑定\n使用call，和apply方法绑定。\n**1、硬绑定**\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2\n}\nvar bar = function () {\n\tfoo.call(obj)\n}\nbar()\t\t// 2\nsetTimeout(bar, 100)\t// 2\nbar.call(window)\t// 2\n\n```\n无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。\n\n**API调用的“上下文”**\n和bind一样，他的作用是保证回调\n```\nfunction foo(el) {\n\tconsole.log(el, this.id)\n}\nvar obj = {\n\tid: \"awesome\"\n}\n[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上\n```\n**new 绑定**\n使用new来调用函数，会自动执行以下操作：\n1、创建一个全新的对象\n2、这个新对象会被执行[[Prototype]]连接\n3、这个新对象会绑定到函数调用的this\n4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象\n```\nfunction foo(a){\n\tthis.a = a\n}\nvar bar = new foo(2)\nconsole.log(bar.a)\t\t// 2\n``` \n_ps：优先级------>new绑定>显示绑定>隐式绑定>默认绑定_\n### 判断this\n1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象\n2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象\n3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中\n4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。\n##### 例外\n```bash\nfunction foo(){\n\tconsole.log(this.a)\n}\nvar a = 2\nfoo.call(null)\t// 默认绑定\n///////////////////////////////////\n// 科里化\nfunction foo(a, b) {\n\tconsole.log(\"a:\" + a +\" , b: \" + b)\n}\nfoo.apply(null, [2,3])\t// a:2,b:3\nvar bar = foo.bind(null, 2)\nbar(3)\n///////////////////////////////////\n// 间接引用\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2\nvar o = {a:3, foo: foo}\nvar p = {a:4}\no.foo() \t// 3\n(p.foo = o.foo)() \t// 2\n// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo\n```\n### 对象\n在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象\nnull和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。\n对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。","source":"_posts/you-dont-konwn-javascript-this.md","raw":"---\ntitle: 你不知道的javascript————this和对象原型\ndate: 2017-09-06 20:29:15\ntags: JavaScript\n---\n### this误解\n从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.\n\n##### 指向自身\n先看一个demo\n```\nfunction foo(num) {\n\tconsole.log(\"foo: \" + num);\n\tthis.count++;\n}\nfoo.count = 0;\nvar i;\nfor (i = 0; i < 10; i++) {\n\tif(i > 5) {\n\t\tfoo(i)\n\t}\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\nconsole.log(this.count)\t// NaN\n```\n从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.\n\n### this是什么?\nthis是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.\n\n当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。\n\n_PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。_\n\n##### 调用位置\n```\nfunction baz() {\n\t// 当前作用栈是： baz\n\t// 因此调用位置是全局作用域\n\tconsole.log(\"baz\")\n\tbar()\t\t\t// <-- bar的调用位置\n}\nfunction bar() {\n\t// 当前调用栈是baz -> bar\n\t// 因此调用位置是baz中\n\tconsole.log(\"bar\")\n\tfoo();\t\t// <-- foo的调用位置\n}\nfunction foo() {\n\t// 当前调用栈是baz -> bar -> foo\n\t// 当前调用位置在bar中\n\tconsole.log(\"foo\")\n}\nbaz()    // <-- baz的调用位置\n```\n从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定\n### 四种绑定规则\n##### 默认绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2;\nfoo();\t// 2\n///////////////////////\nfunction foo2() {\n\t\"use strict\"\n\tconsole.log(this.a)\n}\nvar a =2\nfoo2() \t\t// typeerror\n////////////////////////\nfunction foo3() {\n\tconsole.log(this.a)\n}\nvar a =2\n(function () {\n\t\"use strict\"\n\tfoo3()\t\t// 2\n})()\n\n```\n在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。\n\n##### 隐式绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta : 2,\n\tfoo : foo\n}\nobj.foo \t// 2\n\n```\n在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj2 = {\n\ta:42,\n\tfoo:foo\n}\nvar obj1 = {\n\ta: 2,\n\tobj2: obj2\n}\nobj1.obj2.foo() \t// 42\n\n```\n在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。\n##### 隐式丢失\n```\n// 隐式丢失，成为默认绑定\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2,\n\tfoo: foo\n}\nvar bar = obj.foo\nvar a = \"this is global\"\nbar()\t\t\t// this is global\n////////////////////////////////////////\n// 回调的隐式丢失\nfunction foo() {\n\tconsole.log(this.a)\n}\nfunction doFoo(fn) {\n\t// fn其实引用的是foo\n\tfn()\t\t// 调用位置\n}\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nvar a = \"this is global\"\ndoFoo(obj.foo)\t// this is global\n\n```\n虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。\n第二种情况也是如此，在回调时的隐式丢失导致的问题\n这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失\n\n##### 显式绑定\n使用call，和apply方法绑定。\n**1、硬绑定**\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2\n}\nvar bar = function () {\n\tfoo.call(obj)\n}\nbar()\t\t// 2\nsetTimeout(bar, 100)\t// 2\nbar.call(window)\t// 2\n\n```\n无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。\n\n**API调用的“上下文”**\n和bind一样，他的作用是保证回调\n```\nfunction foo(el) {\n\tconsole.log(el, this.id)\n}\nvar obj = {\n\tid: \"awesome\"\n}\n[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上\n```\n**new 绑定**\n使用new来调用函数，会自动执行以下操作：\n1、创建一个全新的对象\n2、这个新对象会被执行[[Prototype]]连接\n3、这个新对象会绑定到函数调用的this\n4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象\n```\nfunction foo(a){\n\tthis.a = a\n}\nvar bar = new foo(2)\nconsole.log(bar.a)\t\t// 2\n``` \n_ps：优先级------>new绑定>显示绑定>隐式绑定>默认绑定_\n### 判断this\n1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象\n2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象\n3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中\n4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。\n##### 例外\n```bash\nfunction foo(){\n\tconsole.log(this.a)\n}\nvar a = 2\nfoo.call(null)\t// 默认绑定\n///////////////////////////////////\n// 科里化\nfunction foo(a, b) {\n\tconsole.log(\"a:\" + a +\" , b: \" + b)\n}\nfoo.apply(null, [2,3])\t// a:2,b:3\nvar bar = foo.bind(null, 2)\nbar(3)\n///////////////////////////////////\n// 间接引用\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2\nvar o = {a:3, foo: foo}\nvar p = {a:4}\no.foo() \t// 3\n(p.foo = o.foo)() \t// 2\n// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo\n```\n### 对象\n在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象\nnull和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。\n对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。","slug":"you-dont-konwn-javascript-this","published":1,"updated":"2018-05-01T12:51:49.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgohm6rw0010aefaqxpqap7o","content":"<h3 id=\"this误解\"><a href=\"#this误解\" class=\"headerlink\" title=\"this误解\"></a>this误解</h3><p>从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.</p>\n<h5 id=\"指向自身\"><a href=\"#指向自身\" class=\"headerlink\" title=\"指向自身\"></a>指向自身</h5><p>先看一个demo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(num) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;foo: &quot; + num);</span><br><span class=\"line\">\tthis.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = 0;</span><br><span class=\"line\">var i;</span><br><span class=\"line\">for (i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\tif(i &gt; 5) &#123;</span><br><span class=\"line\">\t\tfoo(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// foo: 6</span><br><span class=\"line\">// foo: 7</span><br><span class=\"line\">// foo: 8</span><br><span class=\"line\">// foo: 9</span><br><span class=\"line\">console.log(this.count)\t// NaN</span><br></pre></td></tr></table></figure></p>\n<p>从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.</p>\n<h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么?\"></a>this是什么?</h3><p>this是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.</p>\n<p>当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。</p>\n<p><em>PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。</em></p>\n<h5 id=\"调用位置\"><a href=\"#调用位置\" class=\"headerlink\" title=\"调用位置\"></a>调用位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baz() &#123;</span><br><span class=\"line\">\t// 当前作用栈是： baz</span><br><span class=\"line\">\t// 因此调用位置是全局作用域</span><br><span class=\"line\">\tconsole.log(&quot;baz&quot;)</span><br><span class=\"line\">\tbar()\t\t\t// &lt;-- bar的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar</span><br><span class=\"line\">\t// 因此调用位置是baz中</span><br><span class=\"line\">\tconsole.log(&quot;bar&quot;)</span><br><span class=\"line\">\tfoo();\t\t// &lt;-- foo的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar -&gt; foo</span><br><span class=\"line\">\t// 当前调用位置在bar中</span><br><span class=\"line\">\tconsole.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">baz()    // &lt;-- baz的调用位置</span><br></pre></td></tr></table></figure>\n<p>从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定</p>\n<h3 id=\"四种绑定规则\"><a href=\"#四种绑定规则\" class=\"headerlink\" title=\"四种绑定规则\"></a>四种绑定规则</h3><h5 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo();\t// 2</span><br><span class=\"line\">///////////////////////</span><br><span class=\"line\">function foo2() &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">foo2() \t\t// typeerror</span><br><span class=\"line\">////////////////////////</span><br><span class=\"line\">function foo3() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tfoo3()\t\t// 2</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。</p>\n<h5 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 2,</span><br><span class=\"line\">\tfoo : foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo \t// 2</span><br></pre></td></tr></table></figure>\n<p>在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = &#123;</span><br><span class=\"line\">\ta:42,</span><br><span class=\"line\">\tfoo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tobj2: obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.obj2.foo() \t// 42</span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。</p>\n<h5 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 隐式丢失，成为默认绑定</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = obj.foo</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">bar()\t\t\t// this is global</span><br><span class=\"line\">////////////////////////////////////////</span><br><span class=\"line\">// 回调的隐式丢失</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doFoo(fn) &#123;</span><br><span class=\"line\">\t// fn其实引用的是foo</span><br><span class=\"line\">\tfn()\t\t// 调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">doFoo(obj.foo)\t// this is global</span><br></pre></td></tr></table></figure>\n<p>虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。<br>第二种情况也是如此，在回调时的隐式丢失导致的问题<br>这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失</p>\n<h5 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h5><p>使用call，和apply方法绑定。<br><strong>1、硬绑定</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = function () &#123;</span><br><span class=\"line\">\tfoo.call(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()\t\t// 2</span><br><span class=\"line\">setTimeout(bar, 100)\t// 2</span><br><span class=\"line\">bar.call(window)\t// 2</span><br></pre></td></tr></table></figure></p>\n<p>无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。</p>\n<p><strong>API调用的“上下文”</strong><br>和bind一样，他的作用是保证回调<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(el) &#123;</span><br><span class=\"line\">\tconsole.log(el, this.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tid: &quot;awesome&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上</span><br></pre></td></tr></table></figure></p>\n<p><strong>new 绑定</strong><br>使用new来调用函数，会自动执行以下操作：<br>1、创建一个全新的对象<br>2、这个新对象会被执行[[Prototype]]连接<br>3、这个新对象会绑定到函数调用的this<br>4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a)&#123;</span><br><span class=\"line\">\tthis.a = a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = new foo(2)</span><br><span class=\"line\">console.log(bar.a)\t\t// 2</span><br><span class=\"line\">``` </span><br><span class=\"line\">_ps：优先级------&gt;new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定_</span><br><span class=\"line\">### 判断this</span><br><span class=\"line\">1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象</span><br><span class=\"line\">2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象</span><br><span class=\"line\">3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中</span><br><span class=\"line\">4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。</span><br><span class=\"line\">##### 例外</span><br><span class=\"line\">```bash</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">foo.call(null)\t// 默认绑定</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 科里化</span><br><span class=\"line\">function foo(a, b) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;a:&quot; + a +&quot; , b: &quot; + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.apply(null, [2,3])\t// a:2,b:3</span><br><span class=\"line\">var bar = foo.bind(null, 2)</span><br><span class=\"line\">bar(3)</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 间接引用</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">var o = &#123;a:3, foo: foo&#125;</span><br><span class=\"line\">var p = &#123;a:4&#125;</span><br><span class=\"line\">o.foo() \t// 3</span><br><span class=\"line\">(p.foo = o.foo)() \t// 2</span><br><span class=\"line\">// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象<br>null和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。<br>对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"this误解\"><a href=\"#this误解\" class=\"headerlink\" title=\"this误解\"></a>this误解</h3><p>从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.</p>\n<h5 id=\"指向自身\"><a href=\"#指向自身\" class=\"headerlink\" title=\"指向自身\"></a>指向自身</h5><p>先看一个demo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(num) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;foo: &quot; + num);</span><br><span class=\"line\">\tthis.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = 0;</span><br><span class=\"line\">var i;</span><br><span class=\"line\">for (i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\tif(i &gt; 5) &#123;</span><br><span class=\"line\">\t\tfoo(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// foo: 6</span><br><span class=\"line\">// foo: 7</span><br><span class=\"line\">// foo: 8</span><br><span class=\"line\">// foo: 9</span><br><span class=\"line\">console.log(this.count)\t// NaN</span><br></pre></td></tr></table></figure></p>\n<p>从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.</p>\n<h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么?\"></a>this是什么?</h3><p>this是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.</p>\n<p>当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。</p>\n<p><em>PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。</em></p>\n<h5 id=\"调用位置\"><a href=\"#调用位置\" class=\"headerlink\" title=\"调用位置\"></a>调用位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baz() &#123;</span><br><span class=\"line\">\t// 当前作用栈是： baz</span><br><span class=\"line\">\t// 因此调用位置是全局作用域</span><br><span class=\"line\">\tconsole.log(&quot;baz&quot;)</span><br><span class=\"line\">\tbar()\t\t\t// &lt;-- bar的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar</span><br><span class=\"line\">\t// 因此调用位置是baz中</span><br><span class=\"line\">\tconsole.log(&quot;bar&quot;)</span><br><span class=\"line\">\tfoo();\t\t// &lt;-- foo的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar -&gt; foo</span><br><span class=\"line\">\t// 当前调用位置在bar中</span><br><span class=\"line\">\tconsole.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">baz()    // &lt;-- baz的调用位置</span><br></pre></td></tr></table></figure>\n<p>从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定</p>\n<h3 id=\"四种绑定规则\"><a href=\"#四种绑定规则\" class=\"headerlink\" title=\"四种绑定规则\"></a>四种绑定规则</h3><h5 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo();\t// 2</span><br><span class=\"line\">///////////////////////</span><br><span class=\"line\">function foo2() &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">foo2() \t\t// typeerror</span><br><span class=\"line\">////////////////////////</span><br><span class=\"line\">function foo3() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tfoo3()\t\t// 2</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。</p>\n<h5 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 2,</span><br><span class=\"line\">\tfoo : foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo \t// 2</span><br></pre></td></tr></table></figure>\n<p>在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = &#123;</span><br><span class=\"line\">\ta:42,</span><br><span class=\"line\">\tfoo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tobj2: obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.obj2.foo() \t// 42</span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。</p>\n<h5 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 隐式丢失，成为默认绑定</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = obj.foo</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">bar()\t\t\t// this is global</span><br><span class=\"line\">////////////////////////////////////////</span><br><span class=\"line\">// 回调的隐式丢失</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doFoo(fn) &#123;</span><br><span class=\"line\">\t// fn其实引用的是foo</span><br><span class=\"line\">\tfn()\t\t// 调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">doFoo(obj.foo)\t// this is global</span><br></pre></td></tr></table></figure>\n<p>虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。<br>第二种情况也是如此，在回调时的隐式丢失导致的问题<br>这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失</p>\n<h5 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h5><p>使用call，和apply方法绑定。<br><strong>1、硬绑定</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = function () &#123;</span><br><span class=\"line\">\tfoo.call(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()\t\t// 2</span><br><span class=\"line\">setTimeout(bar, 100)\t// 2</span><br><span class=\"line\">bar.call(window)\t// 2</span><br></pre></td></tr></table></figure></p>\n<p>无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。</p>\n<p><strong>API调用的“上下文”</strong><br>和bind一样，他的作用是保证回调<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(el) &#123;</span><br><span class=\"line\">\tconsole.log(el, this.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tid: &quot;awesome&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上</span><br></pre></td></tr></table></figure></p>\n<p><strong>new 绑定</strong><br>使用new来调用函数，会自动执行以下操作：<br>1、创建一个全新的对象<br>2、这个新对象会被执行[[Prototype]]连接<br>3、这个新对象会绑定到函数调用的this<br>4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a)&#123;</span><br><span class=\"line\">\tthis.a = a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = new foo(2)</span><br><span class=\"line\">console.log(bar.a)\t\t// 2</span><br><span class=\"line\">``` </span><br><span class=\"line\">_ps：优先级------&gt;new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定_</span><br><span class=\"line\">### 判断this</span><br><span class=\"line\">1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象</span><br><span class=\"line\">2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象</span><br><span class=\"line\">3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中</span><br><span class=\"line\">4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。</span><br><span class=\"line\">##### 例外</span><br><span class=\"line\">```bash</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">foo.call(null)\t// 默认绑定</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 科里化</span><br><span class=\"line\">function foo(a, b) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;a:&quot; + a +&quot; , b: &quot; + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.apply(null, [2,3])\t// a:2,b:3</span><br><span class=\"line\">var bar = foo.bind(null, 2)</span><br><span class=\"line\">bar(3)</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 间接引用</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">var o = &#123;a:3, foo: foo&#125;</span><br><span class=\"line\">var p = &#123;a:4&#125;</span><br><span class=\"line\">o.foo() \t// 3</span><br><span class=\"line\">(p.foo = o.foo)() \t// 2</span><br><span class=\"line\">// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象<br>null和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。<br>对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgohm6qv0000aefa977wjlhy","tag_id":"cjgohm6r20002aefa68xb5qbs","_id":"cjgohm6r90007aefa71e6l18q"},{"post_id":"cjgohm6r90008aefay4df22ia","tag_id":"cjgohm6r80006aefa9beop7ob","_id":"cjgohm6re000baefa0qzdw0eo"},{"post_id":"cjgohm6qz0001aefa7rkalf3h","tag_id":"cjgohm6r80006aefa9beop7ob","_id":"cjgohm6rg000daefab4yo1mcf"},{"post_id":"cjgohm6re000caefarxlyqnor","tag_id":"cjgohm6r80006aefa9beop7ob","_id":"cjgohm6rj000gaefac0ncc8hr"},{"post_id":"cjgohm6r40003aefa75pbskrm","tag_id":"cjgohm6r20002aefa68xb5qbs","_id":"cjgohm6rl000iaefald1gkba7"},{"post_id":"cjgohm6r60004aefavtewpnz8","tag_id":"cjgohm6r80006aefa9beop7ob","_id":"cjgohm6ro000maefapdyxt07b"},{"post_id":"cjgohm6r70005aefapqbkoelc","tag_id":"cjgohm6rn000kaefa04agn6w1","_id":"cjgohm6rr000qaefadbey2844"},{"post_id":"cjgohm6rq000paefa6u02da90","tag_id":"cjgohm6r20002aefa68xb5qbs","_id":"cjgohm6rs000saefavntmq1mo"},{"post_id":"cjgohm6rb0009aefal2k85nzl","tag_id":"cjgohm6rp000oaefaivn6s9x8","_id":"cjgohm6rt000vaefalrho6k0c"},{"post_id":"cjgohm6rg000eaefa76vfe53t","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6rw000zaefayl9oufc8"},{"post_id":"cjgohm6rv000xaefay1qag7sm","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6ry0011aefa686dx4s1"},{"post_id":"cjgohm6rw0010aefaqxpqap7o","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6ry0013aefa2w1s5gut"},{"post_id":"cjgohm6rj000haefavtls5r2x","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6rz0014aefapccwfs1r"},{"post_id":"cjgohm6rl000jaefa5jpbzhfb","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6rz0016aefa1kwe42s3"},{"post_id":"cjgohm6rn000laefawe1bxvwn","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6s00018aefa6k7oxp64"},{"post_id":"cjgohm6ro000naefag32p0j80","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6s1001aaefahopdn32n"},{"post_id":"cjgohm6rr000raefah82digb5","tag_id":"cjgohm6s00019aefa9w4sx23h","_id":"cjgohm6s2001caefa6q6nb5oh"},{"post_id":"cjgohm6rs000uaefay74b7nci","tag_id":"cjgohm6rs000taefaa62rejr8","_id":"cjgohm6s2001eaefaglqors1o"},{"post_id":"cjgohm6ru000waefarqje3ohb","tag_id":"cjgohm6s2001daefatttw3xqm","_id":"cjgohm6s2001faefax91p4fhx"}],"Tag":[{"name":"随笔","_id":"cjgohm6r20002aefa68xb5qbs"},{"name":"计算机系统基础","_id":"cjgohm6r80006aefa9beop7ob"},{"name":"计算机网络","_id":"cjgohm6rn000kaefa04agn6w1"},{"name":"ncuhome","_id":"cjgohm6rp000oaefaivn6s9x8"},{"name":"JavaScript","_id":"cjgohm6rs000taefaa62rejr8"},{"name":"HTTP","_id":"cjgohm6s00019aefa9w4sx23h"},{"name":"Linux","_id":"cjgohm6s2001daefatttw3xqm"}]}}